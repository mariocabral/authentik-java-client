/*
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.6.3
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RACProvider Serializer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-25T23:12:57.050901581-03:00[America/Argentina/Cordoba]", comments = "Generator version: 7.8.0")
public class PatchedRACProviderRequest {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_AUTHENTICATION_FLOW = "authentication_flow";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_FLOW)
  private UUID authenticationFlow;

  public static final String SERIALIZED_NAME_AUTHORIZATION_FLOW = "authorization_flow";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_FLOW)
  private UUID authorizationFlow;

  public static final String SERIALIZED_NAME_PROPERTY_MAPPINGS = "property_mappings";
  @SerializedName(SERIALIZED_NAME_PROPERTY_MAPPINGS)
  private List<UUID> propertyMappings = new ArrayList<>();

  public static final String SERIALIZED_NAME_SETTINGS = "settings";
  @SerializedName(SERIALIZED_NAME_SETTINGS)
  private Object settings = null;

  public static final String SERIALIZED_NAME_CONNECTION_EXPIRY = "connection_expiry";
  @SerializedName(SERIALIZED_NAME_CONNECTION_EXPIRY)
  private String connectionExpiry;

  public static final String SERIALIZED_NAME_DELETE_TOKEN_ON_DISCONNECT = "delete_token_on_disconnect";
  @SerializedName(SERIALIZED_NAME_DELETE_TOKEN_ON_DISCONNECT)
  private Boolean deleteTokenOnDisconnect;

  public PatchedRACProviderRequest() {
  }

  public PatchedRACProviderRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public PatchedRACProviderRequest authenticationFlow(UUID authenticationFlow) {
    this.authenticationFlow = authenticationFlow;
    return this;
  }

  /**
   * Flow used for authentication when the associated application is accessed by an un-authenticated user.
   * @return authenticationFlow
   */
  @javax.annotation.Nullable
  public UUID getAuthenticationFlow() {
    return authenticationFlow;
  }

  public void setAuthenticationFlow(UUID authenticationFlow) {
    this.authenticationFlow = authenticationFlow;
  }


  public PatchedRACProviderRequest authorizationFlow(UUID authorizationFlow) {
    this.authorizationFlow = authorizationFlow;
    return this;
  }

  /**
   * Flow used when authorizing this provider.
   * @return authorizationFlow
   */
  @javax.annotation.Nullable
  public UUID getAuthorizationFlow() {
    return authorizationFlow;
  }

  public void setAuthorizationFlow(UUID authorizationFlow) {
    this.authorizationFlow = authorizationFlow;
  }


  public PatchedRACProviderRequest propertyMappings(List<UUID> propertyMappings) {
    this.propertyMappings = propertyMappings;
    return this;
  }

  public PatchedRACProviderRequest addPropertyMappingsItem(UUID propertyMappingsItem) {
    if (this.propertyMappings == null) {
      this.propertyMappings = new ArrayList<>();
    }
    this.propertyMappings.add(propertyMappingsItem);
    return this;
  }

  /**
   * Get propertyMappings
   * @return propertyMappings
   */
  @javax.annotation.Nullable
  public List<UUID> getPropertyMappings() {
    return propertyMappings;
  }

  public void setPropertyMappings(List<UUID> propertyMappings) {
    this.propertyMappings = propertyMappings;
  }


  public PatchedRACProviderRequest settings(Object settings) {
    this.settings = settings;
    return this;
  }

  /**
   * Get settings
   * @return settings
   */
  @javax.annotation.Nullable
  public Object getSettings() {
    return settings;
  }

  public void setSettings(Object settings) {
    this.settings = settings;
  }


  public PatchedRACProviderRequest connectionExpiry(String connectionExpiry) {
    this.connectionExpiry = connectionExpiry;
    return this;
  }

  /**
   * Determines how long a session lasts. Default of 0 means that the sessions lasts until the browser is closed. (Format: hours&#x3D;-1;minutes&#x3D;-2;seconds&#x3D;-3)
   * @return connectionExpiry
   */
  @javax.annotation.Nullable
  public String getConnectionExpiry() {
    return connectionExpiry;
  }

  public void setConnectionExpiry(String connectionExpiry) {
    this.connectionExpiry = connectionExpiry;
  }


  public PatchedRACProviderRequest deleteTokenOnDisconnect(Boolean deleteTokenOnDisconnect) {
    this.deleteTokenOnDisconnect = deleteTokenOnDisconnect;
    return this;
  }

  /**
   * When set to true, connection tokens will be deleted upon disconnect.
   * @return deleteTokenOnDisconnect
   */
  @javax.annotation.Nullable
  public Boolean getDeleteTokenOnDisconnect() {
    return deleteTokenOnDisconnect;
  }

  public void setDeleteTokenOnDisconnect(Boolean deleteTokenOnDisconnect) {
    this.deleteTokenOnDisconnect = deleteTokenOnDisconnect;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PatchedRACProviderRequest patchedRACProviderRequest = (PatchedRACProviderRequest) o;
    return Objects.equals(this.name, patchedRACProviderRequest.name) &&
        Objects.equals(this.authenticationFlow, patchedRACProviderRequest.authenticationFlow) &&
        Objects.equals(this.authorizationFlow, patchedRACProviderRequest.authorizationFlow) &&
        Objects.equals(this.propertyMappings, patchedRACProviderRequest.propertyMappings) &&
        Objects.equals(this.settings, patchedRACProviderRequest.settings) &&
        Objects.equals(this.connectionExpiry, patchedRACProviderRequest.connectionExpiry) &&
        Objects.equals(this.deleteTokenOnDisconnect, patchedRACProviderRequest.deleteTokenOnDisconnect);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, authenticationFlow, authorizationFlow, propertyMappings, settings, connectionExpiry, deleteTokenOnDisconnect);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PatchedRACProviderRequest {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    authenticationFlow: ").append(toIndentedString(authenticationFlow)).append("\n");
    sb.append("    authorizationFlow: ").append(toIndentedString(authorizationFlow)).append("\n");
    sb.append("    propertyMappings: ").append(toIndentedString(propertyMappings)).append("\n");
    sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
    sb.append("    connectionExpiry: ").append(toIndentedString(connectionExpiry)).append("\n");
    sb.append("    deleteTokenOnDisconnect: ").append(toIndentedString(deleteTokenOnDisconnect)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("authentication_flow");
    openapiFields.add("authorization_flow");
    openapiFields.add("property_mappings");
    openapiFields.add("settings");
    openapiFields.add("connection_expiry");
    openapiFields.add("delete_token_on_disconnect");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PatchedRACProviderRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PatchedRACProviderRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PatchedRACProviderRequest is not found in the empty JSON string", PatchedRACProviderRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PatchedRACProviderRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PatchedRACProviderRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("authentication_flow") != null && !jsonObj.get("authentication_flow").isJsonNull()) && !jsonObj.get("authentication_flow").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authentication_flow` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authentication_flow").toString()));
      }
      if ((jsonObj.get("authorization_flow") != null && !jsonObj.get("authorization_flow").isJsonNull()) && !jsonObj.get("authorization_flow").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorization_flow` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorization_flow").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("property_mappings") != null && !jsonObj.get("property_mappings").isJsonNull() && !jsonObj.get("property_mappings").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `property_mappings` to be an array in the JSON string but got `%s`", jsonObj.get("property_mappings").toString()));
      }
      if ((jsonObj.get("connection_expiry") != null && !jsonObj.get("connection_expiry").isJsonNull()) && !jsonObj.get("connection_expiry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connection_expiry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connection_expiry").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PatchedRACProviderRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PatchedRACProviderRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PatchedRACProviderRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PatchedRACProviderRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PatchedRACProviderRequest>() {
           @Override
           public void write(JsonWriter out, PatchedRACProviderRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PatchedRACProviderRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PatchedRACProviderRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PatchedRACProviderRequest
   * @throws IOException if the JSON string is invalid with respect to PatchedRACProviderRequest
   */
  public static PatchedRACProviderRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PatchedRACProviderRequest.class);
  }

  /**
   * Convert an instance of PatchedRACProviderRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

