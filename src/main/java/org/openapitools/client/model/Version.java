/*
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.6.3
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Get running and latest version.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-25T23:12:57.050901581-03:00[America/Argentina/Cordoba]", comments = "Generator version: 7.8.0")
public class Version {
  public static final String SERIALIZED_NAME_VERSION_CURRENT = "version_current";
  @SerializedName(SERIALIZED_NAME_VERSION_CURRENT)
  private String versionCurrent;

  public static final String SERIALIZED_NAME_VERSION_LATEST = "version_latest";
  @SerializedName(SERIALIZED_NAME_VERSION_LATEST)
  private String versionLatest;

  public static final String SERIALIZED_NAME_VERSION_LATEST_VALID = "version_latest_valid";
  @SerializedName(SERIALIZED_NAME_VERSION_LATEST_VALID)
  private Boolean versionLatestValid;

  public static final String SERIALIZED_NAME_BUILD_HASH = "build_hash";
  @SerializedName(SERIALIZED_NAME_BUILD_HASH)
  private String buildHash;

  public static final String SERIALIZED_NAME_OUTDATED = "outdated";
  @SerializedName(SERIALIZED_NAME_OUTDATED)
  private Boolean outdated;

  public Version() {
  }

  public Version(
     String versionCurrent, 
     String versionLatest, 
     Boolean versionLatestValid, 
     String buildHash, 
     Boolean outdated
  ) {
    this();
    this.versionCurrent = versionCurrent;
    this.versionLatest = versionLatest;
    this.versionLatestValid = versionLatestValid;
    this.buildHash = buildHash;
    this.outdated = outdated;
  }

  /**
   * Get current version
   * @return versionCurrent
   */
  @javax.annotation.Nonnull
  public String getVersionCurrent() {
    return versionCurrent;
  }



  /**
   * Get latest version from cache
   * @return versionLatest
   */
  @javax.annotation.Nonnull
  public String getVersionLatest() {
    return versionLatest;
  }



  /**
   * Check if latest version is valid
   * @return versionLatestValid
   */
  @javax.annotation.Nonnull
  public Boolean getVersionLatestValid() {
    return versionLatestValid;
  }



  /**
   * Get build hash, if version is not latest or released
   * @return buildHash
   */
  @javax.annotation.Nonnull
  public String getBuildHash() {
    return buildHash;
  }



  /**
   * Check if we&#39;re running the latest version
   * @return outdated
   */
  @javax.annotation.Nonnull
  public Boolean getOutdated() {
    return outdated;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Version version = (Version) o;
    return Objects.equals(this.versionCurrent, version.versionCurrent) &&
        Objects.equals(this.versionLatest, version.versionLatest) &&
        Objects.equals(this.versionLatestValid, version.versionLatestValid) &&
        Objects.equals(this.buildHash, version.buildHash) &&
        Objects.equals(this.outdated, version.outdated);
  }

  @Override
  public int hashCode() {
    return Objects.hash(versionCurrent, versionLatest, versionLatestValid, buildHash, outdated);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Version {\n");
    sb.append("    versionCurrent: ").append(toIndentedString(versionCurrent)).append("\n");
    sb.append("    versionLatest: ").append(toIndentedString(versionLatest)).append("\n");
    sb.append("    versionLatestValid: ").append(toIndentedString(versionLatestValid)).append("\n");
    sb.append("    buildHash: ").append(toIndentedString(buildHash)).append("\n");
    sb.append("    outdated: ").append(toIndentedString(outdated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("version_current");
    openapiFields.add("version_latest");
    openapiFields.add("version_latest_valid");
    openapiFields.add("build_hash");
    openapiFields.add("outdated");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("version_current");
    openapiRequiredFields.add("version_latest");
    openapiRequiredFields.add("version_latest_valid");
    openapiRequiredFields.add("build_hash");
    openapiRequiredFields.add("outdated");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Version
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Version.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Version is not found in the empty JSON string", Version.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Version.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Version` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Version.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("version_current").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version_current` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version_current").toString()));
      }
      if (!jsonObj.get("version_latest").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version_latest` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version_latest").toString()));
      }
      if (!jsonObj.get("build_hash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `build_hash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("build_hash").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Version.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Version' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Version> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Version.class));

       return (TypeAdapter<T>) new TypeAdapter<Version>() {
           @Override
           public void write(JsonWriter out, Version value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Version read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Version given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Version
   * @throws IOException if the JSON string is invalid with respect to Version
   */
  public static Version fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Version.class);
  }

  /**
   * Convert an instance of Version to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

