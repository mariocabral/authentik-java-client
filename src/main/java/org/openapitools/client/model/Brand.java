/*
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.6.3
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Brand Serializer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-25T23:12:57.050901581-03:00[America/Argentina/Cordoba]", comments = "Generator version: 7.8.0")
public class Brand {
  public static final String SERIALIZED_NAME_BRAND_UUID = "brand_uuid";
  @SerializedName(SERIALIZED_NAME_BRAND_UUID)
  private UUID brandUuid;

  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_DEFAULT = "default";
  @SerializedName(SERIALIZED_NAME_DEFAULT)
  private Boolean _default;

  public static final String SERIALIZED_NAME_BRANDING_TITLE = "branding_title";
  @SerializedName(SERIALIZED_NAME_BRANDING_TITLE)
  private String brandingTitle;

  public static final String SERIALIZED_NAME_BRANDING_LOGO = "branding_logo";
  @SerializedName(SERIALIZED_NAME_BRANDING_LOGO)
  private String brandingLogo;

  public static final String SERIALIZED_NAME_BRANDING_FAVICON = "branding_favicon";
  @SerializedName(SERIALIZED_NAME_BRANDING_FAVICON)
  private String brandingFavicon;

  public static final String SERIALIZED_NAME_FLOW_AUTHENTICATION = "flow_authentication";
  @SerializedName(SERIALIZED_NAME_FLOW_AUTHENTICATION)
  private UUID flowAuthentication;

  public static final String SERIALIZED_NAME_FLOW_INVALIDATION = "flow_invalidation";
  @SerializedName(SERIALIZED_NAME_FLOW_INVALIDATION)
  private UUID flowInvalidation;

  public static final String SERIALIZED_NAME_FLOW_RECOVERY = "flow_recovery";
  @SerializedName(SERIALIZED_NAME_FLOW_RECOVERY)
  private UUID flowRecovery;

  public static final String SERIALIZED_NAME_FLOW_UNENROLLMENT = "flow_unenrollment";
  @SerializedName(SERIALIZED_NAME_FLOW_UNENROLLMENT)
  private UUID flowUnenrollment;

  public static final String SERIALIZED_NAME_FLOW_USER_SETTINGS = "flow_user_settings";
  @SerializedName(SERIALIZED_NAME_FLOW_USER_SETTINGS)
  private UUID flowUserSettings;

  public static final String SERIALIZED_NAME_FLOW_DEVICE_CODE = "flow_device_code";
  @SerializedName(SERIALIZED_NAME_FLOW_DEVICE_CODE)
  private UUID flowDeviceCode;

  public static final String SERIALIZED_NAME_WEB_CERTIFICATE = "web_certificate";
  @SerializedName(SERIALIZED_NAME_WEB_CERTIFICATE)
  private UUID webCertificate;

  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private Object attributes = null;

  public Brand() {
  }

  public Brand(
     UUID brandUuid
  ) {
    this();
    this.brandUuid = brandUuid;
  }

  /**
   * Get brandUuid
   * @return brandUuid
   */
  @javax.annotation.Nonnull
  public UUID getBrandUuid() {
    return brandUuid;
  }



  public Brand domain(String domain) {
    this.domain = domain;
    return this;
  }

  /**
   * Domain that activates this brand. Can be a superset, i.e. &#x60;a.b&#x60; for &#x60;aa.b&#x60; and &#x60;ba.b&#x60;
   * @return domain
   */
  @javax.annotation.Nonnull
  public String getDomain() {
    return domain;
  }

  public void setDomain(String domain) {
    this.domain = domain;
  }


  public Brand _default(Boolean _default) {
    this._default = _default;
    return this;
  }

  /**
   * Get _default
   * @return _default
   */
  @javax.annotation.Nullable
  public Boolean getDefault() {
    return _default;
  }

  public void setDefault(Boolean _default) {
    this._default = _default;
  }


  public Brand brandingTitle(String brandingTitle) {
    this.brandingTitle = brandingTitle;
    return this;
  }

  /**
   * Get brandingTitle
   * @return brandingTitle
   */
  @javax.annotation.Nullable
  public String getBrandingTitle() {
    return brandingTitle;
  }

  public void setBrandingTitle(String brandingTitle) {
    this.brandingTitle = brandingTitle;
  }


  public Brand brandingLogo(String brandingLogo) {
    this.brandingLogo = brandingLogo;
    return this;
  }

  /**
   * Get brandingLogo
   * @return brandingLogo
   */
  @javax.annotation.Nullable
  public String getBrandingLogo() {
    return brandingLogo;
  }

  public void setBrandingLogo(String brandingLogo) {
    this.brandingLogo = brandingLogo;
  }


  public Brand brandingFavicon(String brandingFavicon) {
    this.brandingFavicon = brandingFavicon;
    return this;
  }

  /**
   * Get brandingFavicon
   * @return brandingFavicon
   */
  @javax.annotation.Nullable
  public String getBrandingFavicon() {
    return brandingFavicon;
  }

  public void setBrandingFavicon(String brandingFavicon) {
    this.brandingFavicon = brandingFavicon;
  }


  public Brand flowAuthentication(UUID flowAuthentication) {
    this.flowAuthentication = flowAuthentication;
    return this;
  }

  /**
   * Get flowAuthentication
   * @return flowAuthentication
   */
  @javax.annotation.Nullable
  public UUID getFlowAuthentication() {
    return flowAuthentication;
  }

  public void setFlowAuthentication(UUID flowAuthentication) {
    this.flowAuthentication = flowAuthentication;
  }


  public Brand flowInvalidation(UUID flowInvalidation) {
    this.flowInvalidation = flowInvalidation;
    return this;
  }

  /**
   * Get flowInvalidation
   * @return flowInvalidation
   */
  @javax.annotation.Nullable
  public UUID getFlowInvalidation() {
    return flowInvalidation;
  }

  public void setFlowInvalidation(UUID flowInvalidation) {
    this.flowInvalidation = flowInvalidation;
  }


  public Brand flowRecovery(UUID flowRecovery) {
    this.flowRecovery = flowRecovery;
    return this;
  }

  /**
   * Get flowRecovery
   * @return flowRecovery
   */
  @javax.annotation.Nullable
  public UUID getFlowRecovery() {
    return flowRecovery;
  }

  public void setFlowRecovery(UUID flowRecovery) {
    this.flowRecovery = flowRecovery;
  }


  public Brand flowUnenrollment(UUID flowUnenrollment) {
    this.flowUnenrollment = flowUnenrollment;
    return this;
  }

  /**
   * Get flowUnenrollment
   * @return flowUnenrollment
   */
  @javax.annotation.Nullable
  public UUID getFlowUnenrollment() {
    return flowUnenrollment;
  }

  public void setFlowUnenrollment(UUID flowUnenrollment) {
    this.flowUnenrollment = flowUnenrollment;
  }


  public Brand flowUserSettings(UUID flowUserSettings) {
    this.flowUserSettings = flowUserSettings;
    return this;
  }

  /**
   * Get flowUserSettings
   * @return flowUserSettings
   */
  @javax.annotation.Nullable
  public UUID getFlowUserSettings() {
    return flowUserSettings;
  }

  public void setFlowUserSettings(UUID flowUserSettings) {
    this.flowUserSettings = flowUserSettings;
  }


  public Brand flowDeviceCode(UUID flowDeviceCode) {
    this.flowDeviceCode = flowDeviceCode;
    return this;
  }

  /**
   * Get flowDeviceCode
   * @return flowDeviceCode
   */
  @javax.annotation.Nullable
  public UUID getFlowDeviceCode() {
    return flowDeviceCode;
  }

  public void setFlowDeviceCode(UUID flowDeviceCode) {
    this.flowDeviceCode = flowDeviceCode;
  }


  public Brand webCertificate(UUID webCertificate) {
    this.webCertificate = webCertificate;
    return this;
  }

  /**
   * Web Certificate used by the authentik Core webserver.
   * @return webCertificate
   */
  @javax.annotation.Nullable
  public UUID getWebCertificate() {
    return webCertificate;
  }

  public void setWebCertificate(UUID webCertificate) {
    this.webCertificate = webCertificate;
  }


  public Brand attributes(Object attributes) {
    this.attributes = attributes;
    return this;
  }

  /**
   * Get attributes
   * @return attributes
   */
  @javax.annotation.Nullable
  public Object getAttributes() {
    return attributes;
  }

  public void setAttributes(Object attributes) {
    this.attributes = attributes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Brand brand = (Brand) o;
    return Objects.equals(this.brandUuid, brand.brandUuid) &&
        Objects.equals(this.domain, brand.domain) &&
        Objects.equals(this._default, brand._default) &&
        Objects.equals(this.brandingTitle, brand.brandingTitle) &&
        Objects.equals(this.brandingLogo, brand.brandingLogo) &&
        Objects.equals(this.brandingFavicon, brand.brandingFavicon) &&
        Objects.equals(this.flowAuthentication, brand.flowAuthentication) &&
        Objects.equals(this.flowInvalidation, brand.flowInvalidation) &&
        Objects.equals(this.flowRecovery, brand.flowRecovery) &&
        Objects.equals(this.flowUnenrollment, brand.flowUnenrollment) &&
        Objects.equals(this.flowUserSettings, brand.flowUserSettings) &&
        Objects.equals(this.flowDeviceCode, brand.flowDeviceCode) &&
        Objects.equals(this.webCertificate, brand.webCertificate) &&
        Objects.equals(this.attributes, brand.attributes);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(brandUuid, domain, _default, brandingTitle, brandingLogo, brandingFavicon, flowAuthentication, flowInvalidation, flowRecovery, flowUnenrollment, flowUserSettings, flowDeviceCode, webCertificate, attributes);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Brand {\n");
    sb.append("    brandUuid: ").append(toIndentedString(brandUuid)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    _default: ").append(toIndentedString(_default)).append("\n");
    sb.append("    brandingTitle: ").append(toIndentedString(brandingTitle)).append("\n");
    sb.append("    brandingLogo: ").append(toIndentedString(brandingLogo)).append("\n");
    sb.append("    brandingFavicon: ").append(toIndentedString(brandingFavicon)).append("\n");
    sb.append("    flowAuthentication: ").append(toIndentedString(flowAuthentication)).append("\n");
    sb.append("    flowInvalidation: ").append(toIndentedString(flowInvalidation)).append("\n");
    sb.append("    flowRecovery: ").append(toIndentedString(flowRecovery)).append("\n");
    sb.append("    flowUnenrollment: ").append(toIndentedString(flowUnenrollment)).append("\n");
    sb.append("    flowUserSettings: ").append(toIndentedString(flowUserSettings)).append("\n");
    sb.append("    flowDeviceCode: ").append(toIndentedString(flowDeviceCode)).append("\n");
    sb.append("    webCertificate: ").append(toIndentedString(webCertificate)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("brand_uuid");
    openapiFields.add("domain");
    openapiFields.add("default");
    openapiFields.add("branding_title");
    openapiFields.add("branding_logo");
    openapiFields.add("branding_favicon");
    openapiFields.add("flow_authentication");
    openapiFields.add("flow_invalidation");
    openapiFields.add("flow_recovery");
    openapiFields.add("flow_unenrollment");
    openapiFields.add("flow_user_settings");
    openapiFields.add("flow_device_code");
    openapiFields.add("web_certificate");
    openapiFields.add("attributes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("brand_uuid");
    openapiRequiredFields.add("domain");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Brand
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Brand.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Brand is not found in the empty JSON string", Brand.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Brand.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Brand` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Brand.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("brand_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `brand_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("brand_uuid").toString()));
      }
      if (!jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
      if ((jsonObj.get("branding_title") != null && !jsonObj.get("branding_title").isJsonNull()) && !jsonObj.get("branding_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `branding_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("branding_title").toString()));
      }
      if ((jsonObj.get("branding_logo") != null && !jsonObj.get("branding_logo").isJsonNull()) && !jsonObj.get("branding_logo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `branding_logo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("branding_logo").toString()));
      }
      if ((jsonObj.get("branding_favicon") != null && !jsonObj.get("branding_favicon").isJsonNull()) && !jsonObj.get("branding_favicon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `branding_favicon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("branding_favicon").toString()));
      }
      if ((jsonObj.get("flow_authentication") != null && !jsonObj.get("flow_authentication").isJsonNull()) && !jsonObj.get("flow_authentication").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `flow_authentication` to be a primitive type in the JSON string but got `%s`", jsonObj.get("flow_authentication").toString()));
      }
      if ((jsonObj.get("flow_invalidation") != null && !jsonObj.get("flow_invalidation").isJsonNull()) && !jsonObj.get("flow_invalidation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `flow_invalidation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("flow_invalidation").toString()));
      }
      if ((jsonObj.get("flow_recovery") != null && !jsonObj.get("flow_recovery").isJsonNull()) && !jsonObj.get("flow_recovery").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `flow_recovery` to be a primitive type in the JSON string but got `%s`", jsonObj.get("flow_recovery").toString()));
      }
      if ((jsonObj.get("flow_unenrollment") != null && !jsonObj.get("flow_unenrollment").isJsonNull()) && !jsonObj.get("flow_unenrollment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `flow_unenrollment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("flow_unenrollment").toString()));
      }
      if ((jsonObj.get("flow_user_settings") != null && !jsonObj.get("flow_user_settings").isJsonNull()) && !jsonObj.get("flow_user_settings").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `flow_user_settings` to be a primitive type in the JSON string but got `%s`", jsonObj.get("flow_user_settings").toString()));
      }
      if ((jsonObj.get("flow_device_code") != null && !jsonObj.get("flow_device_code").isJsonNull()) && !jsonObj.get("flow_device_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `flow_device_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("flow_device_code").toString()));
      }
      if ((jsonObj.get("web_certificate") != null && !jsonObj.get("web_certificate").isJsonNull()) && !jsonObj.get("web_certificate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `web_certificate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("web_certificate").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Brand.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Brand' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Brand> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Brand.class));

       return (TypeAdapter<T>) new TypeAdapter<Brand>() {
           @Override
           public void write(JsonWriter out, Brand value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Brand read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Brand given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Brand
   * @throws IOException if the JSON string is invalid with respect to Brand
   */
  public static Brand fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Brand.class);
  }

  /**
   * Convert an instance of Brand to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

