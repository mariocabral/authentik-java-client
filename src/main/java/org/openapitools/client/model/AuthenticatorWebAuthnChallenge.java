/*
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.6.3
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ChallengeChoices;
import org.openapitools.client.model.ContextualFlowInfo;
import org.openapitools.client.model.ErrorDetail;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * WebAuthn Challenge
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-25T23:12:57.050901581-03:00[America/Argentina/Cordoba]", comments = "Generator version: 7.8.0")
public class AuthenticatorWebAuthnChallenge {
  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private ChallengeChoices type;

  public static final String SERIALIZED_NAME_FLOW_INFO = "flow_info";
  @SerializedName(SERIALIZED_NAME_FLOW_INFO)
  private ContextualFlowInfo flowInfo;

  public static final String SERIALIZED_NAME_COMPONENT = "component";
  @SerializedName(SERIALIZED_NAME_COMPONENT)
  private String component = "ak-stage-authenticator-webauthn";

  public static final String SERIALIZED_NAME_RESPONSE_ERRORS = "response_errors";
  @SerializedName(SERIALIZED_NAME_RESPONSE_ERRORS)
  private Map<String, List<ErrorDetail>> responseErrors = new HashMap<>();

  public static final String SERIALIZED_NAME_PENDING_USER = "pending_user";
  @SerializedName(SERIALIZED_NAME_PENDING_USER)
  private String pendingUser;

  public static final String SERIALIZED_NAME_PENDING_USER_AVATAR = "pending_user_avatar";
  @SerializedName(SERIALIZED_NAME_PENDING_USER_AVATAR)
  private String pendingUserAvatar;

  public static final String SERIALIZED_NAME_REGISTRATION = "registration";
  @SerializedName(SERIALIZED_NAME_REGISTRATION)
  private Map<String, Object> registration = new HashMap<>();

  public AuthenticatorWebAuthnChallenge() {
  }

  public AuthenticatorWebAuthnChallenge type(ChallengeChoices type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public ChallengeChoices getType() {
    return type;
  }

  public void setType(ChallengeChoices type) {
    this.type = type;
  }


  public AuthenticatorWebAuthnChallenge flowInfo(ContextualFlowInfo flowInfo) {
    this.flowInfo = flowInfo;
    return this;
  }

  /**
   * Get flowInfo
   * @return flowInfo
   */
  @javax.annotation.Nullable
  public ContextualFlowInfo getFlowInfo() {
    return flowInfo;
  }

  public void setFlowInfo(ContextualFlowInfo flowInfo) {
    this.flowInfo = flowInfo;
  }


  public AuthenticatorWebAuthnChallenge component(String component) {
    this.component = component;
    return this;
  }

  /**
   * Get component
   * @return component
   */
  @javax.annotation.Nullable
  public String getComponent() {
    return component;
  }

  public void setComponent(String component) {
    this.component = component;
  }


  public AuthenticatorWebAuthnChallenge responseErrors(Map<String, List<ErrorDetail>> responseErrors) {
    this.responseErrors = responseErrors;
    return this;
  }

  public AuthenticatorWebAuthnChallenge putResponseErrorsItem(String key, List<ErrorDetail> responseErrorsItem) {
    if (this.responseErrors == null) {
      this.responseErrors = new HashMap<>();
    }
    this.responseErrors.put(key, responseErrorsItem);
    return this;
  }

  /**
   * Get responseErrors
   * @return responseErrors
   */
  @javax.annotation.Nullable
  public Map<String, List<ErrorDetail>> getResponseErrors() {
    return responseErrors;
  }

  public void setResponseErrors(Map<String, List<ErrorDetail>> responseErrors) {
    this.responseErrors = responseErrors;
  }


  public AuthenticatorWebAuthnChallenge pendingUser(String pendingUser) {
    this.pendingUser = pendingUser;
    return this;
  }

  /**
   * Get pendingUser
   * @return pendingUser
   */
  @javax.annotation.Nonnull
  public String getPendingUser() {
    return pendingUser;
  }

  public void setPendingUser(String pendingUser) {
    this.pendingUser = pendingUser;
  }


  public AuthenticatorWebAuthnChallenge pendingUserAvatar(String pendingUserAvatar) {
    this.pendingUserAvatar = pendingUserAvatar;
    return this;
  }

  /**
   * Get pendingUserAvatar
   * @return pendingUserAvatar
   */
  @javax.annotation.Nonnull
  public String getPendingUserAvatar() {
    return pendingUserAvatar;
  }

  public void setPendingUserAvatar(String pendingUserAvatar) {
    this.pendingUserAvatar = pendingUserAvatar;
  }


  public AuthenticatorWebAuthnChallenge registration(Map<String, Object> registration) {
    this.registration = registration;
    return this;
  }

  public AuthenticatorWebAuthnChallenge putRegistrationItem(String key, Object registrationItem) {
    if (this.registration == null) {
      this.registration = new HashMap<>();
    }
    this.registration.put(key, registrationItem);
    return this;
  }

  /**
   * Get registration
   * @return registration
   */
  @javax.annotation.Nonnull
  public Map<String, Object> getRegistration() {
    return registration;
  }

  public void setRegistration(Map<String, Object> registration) {
    this.registration = registration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuthenticatorWebAuthnChallenge authenticatorWebAuthnChallenge = (AuthenticatorWebAuthnChallenge) o;
    return Objects.equals(this.type, authenticatorWebAuthnChallenge.type) &&
        Objects.equals(this.flowInfo, authenticatorWebAuthnChallenge.flowInfo) &&
        Objects.equals(this.component, authenticatorWebAuthnChallenge.component) &&
        Objects.equals(this.responseErrors, authenticatorWebAuthnChallenge.responseErrors) &&
        Objects.equals(this.pendingUser, authenticatorWebAuthnChallenge.pendingUser) &&
        Objects.equals(this.pendingUserAvatar, authenticatorWebAuthnChallenge.pendingUserAvatar) &&
        Objects.equals(this.registration, authenticatorWebAuthnChallenge.registration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, flowInfo, component, responseErrors, pendingUser, pendingUserAvatar, registration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuthenticatorWebAuthnChallenge {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    flowInfo: ").append(toIndentedString(flowInfo)).append("\n");
    sb.append("    component: ").append(toIndentedString(component)).append("\n");
    sb.append("    responseErrors: ").append(toIndentedString(responseErrors)).append("\n");
    sb.append("    pendingUser: ").append(toIndentedString(pendingUser)).append("\n");
    sb.append("    pendingUserAvatar: ").append(toIndentedString(pendingUserAvatar)).append("\n");
    sb.append("    registration: ").append(toIndentedString(registration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("flow_info");
    openapiFields.add("component");
    openapiFields.add("response_errors");
    openapiFields.add("pending_user");
    openapiFields.add("pending_user_avatar");
    openapiFields.add("registration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("pending_user");
    openapiRequiredFields.add("pending_user_avatar");
    openapiRequiredFields.add("registration");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AuthenticatorWebAuthnChallenge
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AuthenticatorWebAuthnChallenge.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AuthenticatorWebAuthnChallenge is not found in the empty JSON string", AuthenticatorWebAuthnChallenge.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AuthenticatorWebAuthnChallenge.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AuthenticatorWebAuthnChallenge` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AuthenticatorWebAuthnChallenge.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `type`
      ChallengeChoices.validateJsonElement(jsonObj.get("type"));
      // validate the optional field `flow_info`
      if (jsonObj.get("flow_info") != null && !jsonObj.get("flow_info").isJsonNull()) {
        ContextualFlowInfo.validateJsonElement(jsonObj.get("flow_info"));
      }
      if ((jsonObj.get("component") != null && !jsonObj.get("component").isJsonNull()) && !jsonObj.get("component").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `component` to be a primitive type in the JSON string but got `%s`", jsonObj.get("component").toString()));
      }
      if (!jsonObj.get("pending_user").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pending_user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pending_user").toString()));
      }
      if (!jsonObj.get("pending_user_avatar").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pending_user_avatar` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pending_user_avatar").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AuthenticatorWebAuthnChallenge.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AuthenticatorWebAuthnChallenge' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AuthenticatorWebAuthnChallenge> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AuthenticatorWebAuthnChallenge.class));

       return (TypeAdapter<T>) new TypeAdapter<AuthenticatorWebAuthnChallenge>() {
           @Override
           public void write(JsonWriter out, AuthenticatorWebAuthnChallenge value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AuthenticatorWebAuthnChallenge read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AuthenticatorWebAuthnChallenge given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AuthenticatorWebAuthnChallenge
   * @throws IOException if the JSON string is invalid with respect to AuthenticatorWebAuthnChallenge
   */
  public static AuthenticatorWebAuthnChallenge fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AuthenticatorWebAuthnChallenge.class);
  }

  /**
   * Convert an instance of AuthenticatorWebAuthnChallenge to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

