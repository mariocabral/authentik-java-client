/*
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.6.3
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Serializer for license status
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-25T23:12:57.050901581-03:00[America/Argentina/Cordoba]", comments = "Generator version: 7.8.0")
public class LicenseSummary {
  public static final String SERIALIZED_NAME_INTERNAL_USERS = "internal_users";
  @SerializedName(SERIALIZED_NAME_INTERNAL_USERS)
  private Integer internalUsers;

  public static final String SERIALIZED_NAME_EXTERNAL_USERS = "external_users";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_USERS)
  private Integer externalUsers;

  public static final String SERIALIZED_NAME_VALID = "valid";
  @SerializedName(SERIALIZED_NAME_VALID)
  private Boolean valid;

  public static final String SERIALIZED_NAME_SHOW_ADMIN_WARNING = "show_admin_warning";
  @SerializedName(SERIALIZED_NAME_SHOW_ADMIN_WARNING)
  private Boolean showAdminWarning;

  public static final String SERIALIZED_NAME_SHOW_USER_WARNING = "show_user_warning";
  @SerializedName(SERIALIZED_NAME_SHOW_USER_WARNING)
  private Boolean showUserWarning;

  public static final String SERIALIZED_NAME_READ_ONLY = "read_only";
  @SerializedName(SERIALIZED_NAME_READ_ONLY)
  private Boolean readOnly;

  public static final String SERIALIZED_NAME_LATEST_VALID = "latest_valid";
  @SerializedName(SERIALIZED_NAME_LATEST_VALID)
  private OffsetDateTime latestValid;

  public static final String SERIALIZED_NAME_HAS_LICENSE = "has_license";
  @SerializedName(SERIALIZED_NAME_HAS_LICENSE)
  private Boolean hasLicense;

  public LicenseSummary() {
  }

  public LicenseSummary internalUsers(Integer internalUsers) {
    this.internalUsers = internalUsers;
    return this;
  }

  /**
   * Get internalUsers
   * @return internalUsers
   */
  @javax.annotation.Nonnull
  public Integer getInternalUsers() {
    return internalUsers;
  }

  public void setInternalUsers(Integer internalUsers) {
    this.internalUsers = internalUsers;
  }


  public LicenseSummary externalUsers(Integer externalUsers) {
    this.externalUsers = externalUsers;
    return this;
  }

  /**
   * Get externalUsers
   * @return externalUsers
   */
  @javax.annotation.Nonnull
  public Integer getExternalUsers() {
    return externalUsers;
  }

  public void setExternalUsers(Integer externalUsers) {
    this.externalUsers = externalUsers;
  }


  public LicenseSummary valid(Boolean valid) {
    this.valid = valid;
    return this;
  }

  /**
   * Get valid
   * @return valid
   */
  @javax.annotation.Nonnull
  public Boolean getValid() {
    return valid;
  }

  public void setValid(Boolean valid) {
    this.valid = valid;
  }


  public LicenseSummary showAdminWarning(Boolean showAdminWarning) {
    this.showAdminWarning = showAdminWarning;
    return this;
  }

  /**
   * Get showAdminWarning
   * @return showAdminWarning
   */
  @javax.annotation.Nonnull
  public Boolean getShowAdminWarning() {
    return showAdminWarning;
  }

  public void setShowAdminWarning(Boolean showAdminWarning) {
    this.showAdminWarning = showAdminWarning;
  }


  public LicenseSummary showUserWarning(Boolean showUserWarning) {
    this.showUserWarning = showUserWarning;
    return this;
  }

  /**
   * Get showUserWarning
   * @return showUserWarning
   */
  @javax.annotation.Nonnull
  public Boolean getShowUserWarning() {
    return showUserWarning;
  }

  public void setShowUserWarning(Boolean showUserWarning) {
    this.showUserWarning = showUserWarning;
  }


  public LicenseSummary readOnly(Boolean readOnly) {
    this.readOnly = readOnly;
    return this;
  }

  /**
   * Get readOnly
   * @return readOnly
   */
  @javax.annotation.Nonnull
  public Boolean getReadOnly() {
    return readOnly;
  }

  public void setReadOnly(Boolean readOnly) {
    this.readOnly = readOnly;
  }


  public LicenseSummary latestValid(OffsetDateTime latestValid) {
    this.latestValid = latestValid;
    return this;
  }

  /**
   * Get latestValid
   * @return latestValid
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getLatestValid() {
    return latestValid;
  }

  public void setLatestValid(OffsetDateTime latestValid) {
    this.latestValid = latestValid;
  }


  public LicenseSummary hasLicense(Boolean hasLicense) {
    this.hasLicense = hasLicense;
    return this;
  }

  /**
   * Get hasLicense
   * @return hasLicense
   */
  @javax.annotation.Nonnull
  public Boolean getHasLicense() {
    return hasLicense;
  }

  public void setHasLicense(Boolean hasLicense) {
    this.hasLicense = hasLicense;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LicenseSummary licenseSummary = (LicenseSummary) o;
    return Objects.equals(this.internalUsers, licenseSummary.internalUsers) &&
        Objects.equals(this.externalUsers, licenseSummary.externalUsers) &&
        Objects.equals(this.valid, licenseSummary.valid) &&
        Objects.equals(this.showAdminWarning, licenseSummary.showAdminWarning) &&
        Objects.equals(this.showUserWarning, licenseSummary.showUserWarning) &&
        Objects.equals(this.readOnly, licenseSummary.readOnly) &&
        Objects.equals(this.latestValid, licenseSummary.latestValid) &&
        Objects.equals(this.hasLicense, licenseSummary.hasLicense);
  }

  @Override
  public int hashCode() {
    return Objects.hash(internalUsers, externalUsers, valid, showAdminWarning, showUserWarning, readOnly, latestValid, hasLicense);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LicenseSummary {\n");
    sb.append("    internalUsers: ").append(toIndentedString(internalUsers)).append("\n");
    sb.append("    externalUsers: ").append(toIndentedString(externalUsers)).append("\n");
    sb.append("    valid: ").append(toIndentedString(valid)).append("\n");
    sb.append("    showAdminWarning: ").append(toIndentedString(showAdminWarning)).append("\n");
    sb.append("    showUserWarning: ").append(toIndentedString(showUserWarning)).append("\n");
    sb.append("    readOnly: ").append(toIndentedString(readOnly)).append("\n");
    sb.append("    latestValid: ").append(toIndentedString(latestValid)).append("\n");
    sb.append("    hasLicense: ").append(toIndentedString(hasLicense)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("internal_users");
    openapiFields.add("external_users");
    openapiFields.add("valid");
    openapiFields.add("show_admin_warning");
    openapiFields.add("show_user_warning");
    openapiFields.add("read_only");
    openapiFields.add("latest_valid");
    openapiFields.add("has_license");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("internal_users");
    openapiRequiredFields.add("external_users");
    openapiRequiredFields.add("valid");
    openapiRequiredFields.add("show_admin_warning");
    openapiRequiredFields.add("show_user_warning");
    openapiRequiredFields.add("read_only");
    openapiRequiredFields.add("latest_valid");
    openapiRequiredFields.add("has_license");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LicenseSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LicenseSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LicenseSummary is not found in the empty JSON string", LicenseSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LicenseSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LicenseSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LicenseSummary.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LicenseSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LicenseSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LicenseSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LicenseSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<LicenseSummary>() {
           @Override
           public void write(JsonWriter out, LicenseSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LicenseSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LicenseSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LicenseSummary
   * @throws IOException if the JSON string is invalid with respect to LicenseSummary
   */
  public static LicenseSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LicenseSummary.class);
  }

  /**
   * Convert an instance of LicenseSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

