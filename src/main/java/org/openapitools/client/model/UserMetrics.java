/*
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.6.3
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Coordinate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * User Metrics
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-25T23:12:57.050901581-03:00[America/Argentina/Cordoba]", comments = "Generator version: 7.8.0")
public class UserMetrics {
  public static final String SERIALIZED_NAME_LOGINS = "logins";
  @SerializedName(SERIALIZED_NAME_LOGINS)
  private List<Coordinate> logins = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOGINS_FAILED = "logins_failed";
  @SerializedName(SERIALIZED_NAME_LOGINS_FAILED)
  private List<Coordinate> loginsFailed = new ArrayList<>();

  public static final String SERIALIZED_NAME_AUTHORIZATIONS = "authorizations";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATIONS)
  private List<Coordinate> authorizations = new ArrayList<>();

  public UserMetrics() {
  }

  public UserMetrics(
     List<Coordinate> logins, 
     List<Coordinate> loginsFailed, 
     List<Coordinate> authorizations
  ) {
    this();
    this.logins = logins;
    this.loginsFailed = loginsFailed;
    this.authorizations = authorizations;
  }

  /**
   * Get logins
   * @return logins
   */
  @javax.annotation.Nonnull
  public List<Coordinate> getLogins() {
    return logins;
  }



  /**
   * Get loginsFailed
   * @return loginsFailed
   */
  @javax.annotation.Nonnull
  public List<Coordinate> getLoginsFailed() {
    return loginsFailed;
  }



  /**
   * Get authorizations
   * @return authorizations
   */
  @javax.annotation.Nonnull
  public List<Coordinate> getAuthorizations() {
    return authorizations;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserMetrics userMetrics = (UserMetrics) o;
    return Objects.equals(this.logins, userMetrics.logins) &&
        Objects.equals(this.loginsFailed, userMetrics.loginsFailed) &&
        Objects.equals(this.authorizations, userMetrics.authorizations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(logins, loginsFailed, authorizations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserMetrics {\n");
    sb.append("    logins: ").append(toIndentedString(logins)).append("\n");
    sb.append("    loginsFailed: ").append(toIndentedString(loginsFailed)).append("\n");
    sb.append("    authorizations: ").append(toIndentedString(authorizations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("logins");
    openapiFields.add("logins_failed");
    openapiFields.add("authorizations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("logins");
    openapiRequiredFields.add("logins_failed");
    openapiRequiredFields.add("authorizations");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserMetrics
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserMetrics.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserMetrics is not found in the empty JSON string", UserMetrics.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserMetrics.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserMetrics` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UserMetrics.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("logins").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `logins` to be an array in the JSON string but got `%s`", jsonObj.get("logins").toString()));
      }

      JsonArray jsonArraylogins = jsonObj.getAsJsonArray("logins");
      // validate the required field `logins` (array)
      for (int i = 0; i < jsonArraylogins.size(); i++) {
        Coordinate.validateJsonElement(jsonArraylogins.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("logins_failed").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `logins_failed` to be an array in the JSON string but got `%s`", jsonObj.get("logins_failed").toString()));
      }

      JsonArray jsonArrayloginsFailed = jsonObj.getAsJsonArray("logins_failed");
      // validate the required field `logins_failed` (array)
      for (int i = 0; i < jsonArrayloginsFailed.size(); i++) {
        Coordinate.validateJsonElement(jsonArrayloginsFailed.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("authorizations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorizations` to be an array in the JSON string but got `%s`", jsonObj.get("authorizations").toString()));
      }

      JsonArray jsonArrayauthorizations = jsonObj.getAsJsonArray("authorizations");
      // validate the required field `authorizations` (array)
      for (int i = 0; i < jsonArrayauthorizations.size(); i++) {
        Coordinate.validateJsonElement(jsonArrayauthorizations.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserMetrics.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserMetrics' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserMetrics> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserMetrics.class));

       return (TypeAdapter<T>) new TypeAdapter<UserMetrics>() {
           @Override
           public void write(JsonWriter out, UserMetrics value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserMetrics read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserMetrics given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserMetrics
   * @throws IOException if the JSON string is invalid with respect to UserMetrics
   */
  public static UserMetrics fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserMetrics.class);
  }

  /**
   * Convert an instance of UserMetrics to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

