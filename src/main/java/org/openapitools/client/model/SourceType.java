/*
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.6.3
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Serializer for SourceType
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-25T23:12:57.050901581-03:00[America/Argentina/Cordoba]", comments = "Generator version: 7.8.0")
public class SourceType {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_VERBOSE_NAME = "verbose_name";
  @SerializedName(SERIALIZED_NAME_VERBOSE_NAME)
  private String verboseName;

  public static final String SERIALIZED_NAME_URLS_CUSTOMIZABLE = "urls_customizable";
  @SerializedName(SERIALIZED_NAME_URLS_CUSTOMIZABLE)
  private Boolean urlsCustomizable;

  public static final String SERIALIZED_NAME_REQUEST_TOKEN_URL = "request_token_url";
  @SerializedName(SERIALIZED_NAME_REQUEST_TOKEN_URL)
  private String requestTokenUrl;

  public static final String SERIALIZED_NAME_AUTHORIZATION_URL = "authorization_url";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_URL)
  private String authorizationUrl;

  public static final String SERIALIZED_NAME_ACCESS_TOKEN_URL = "access_token_url";
  @SerializedName(SERIALIZED_NAME_ACCESS_TOKEN_URL)
  private String accessTokenUrl;

  public static final String SERIALIZED_NAME_PROFILE_URL = "profile_url";
  @SerializedName(SERIALIZED_NAME_PROFILE_URL)
  private String profileUrl;

  public static final String SERIALIZED_NAME_OIDC_WELL_KNOWN_URL = "oidc_well_known_url";
  @SerializedName(SERIALIZED_NAME_OIDC_WELL_KNOWN_URL)
  private String oidcWellKnownUrl;

  public static final String SERIALIZED_NAME_OIDC_JWKS_URL = "oidc_jwks_url";
  @SerializedName(SERIALIZED_NAME_OIDC_JWKS_URL)
  private String oidcJwksUrl;

  public SourceType() {
  }

  public SourceType(
     String requestTokenUrl, 
     String authorizationUrl, 
     String accessTokenUrl, 
     String profileUrl, 
     String oidcWellKnownUrl, 
     String oidcJwksUrl
  ) {
    this();
    this.requestTokenUrl = requestTokenUrl;
    this.authorizationUrl = authorizationUrl;
    this.accessTokenUrl = accessTokenUrl;
    this.profileUrl = profileUrl;
    this.oidcWellKnownUrl = oidcWellKnownUrl;
    this.oidcJwksUrl = oidcJwksUrl;
  }

  public SourceType name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public SourceType verboseName(String verboseName) {
    this.verboseName = verboseName;
    return this;
  }

  /**
   * Get verboseName
   * @return verboseName
   */
  @javax.annotation.Nonnull
  public String getVerboseName() {
    return verboseName;
  }

  public void setVerboseName(String verboseName) {
    this.verboseName = verboseName;
  }


  public SourceType urlsCustomizable(Boolean urlsCustomizable) {
    this.urlsCustomizable = urlsCustomizable;
    return this;
  }

  /**
   * Get urlsCustomizable
   * @return urlsCustomizable
   */
  @javax.annotation.Nonnull
  public Boolean getUrlsCustomizable() {
    return urlsCustomizable;
  }

  public void setUrlsCustomizable(Boolean urlsCustomizable) {
    this.urlsCustomizable = urlsCustomizable;
  }


  /**
   * Get requestTokenUrl
   * @return requestTokenUrl
   */
  @javax.annotation.Nullable
  public String getRequestTokenUrl() {
    return requestTokenUrl;
  }



  /**
   * Get authorizationUrl
   * @return authorizationUrl
   */
  @javax.annotation.Nullable
  public String getAuthorizationUrl() {
    return authorizationUrl;
  }



  /**
   * Get accessTokenUrl
   * @return accessTokenUrl
   */
  @javax.annotation.Nullable
  public String getAccessTokenUrl() {
    return accessTokenUrl;
  }



  /**
   * Get profileUrl
   * @return profileUrl
   */
  @javax.annotation.Nullable
  public String getProfileUrl() {
    return profileUrl;
  }



  /**
   * Get oidcWellKnownUrl
   * @return oidcWellKnownUrl
   */
  @javax.annotation.Nullable
  public String getOidcWellKnownUrl() {
    return oidcWellKnownUrl;
  }



  /**
   * Get oidcJwksUrl
   * @return oidcJwksUrl
   */
  @javax.annotation.Nullable
  public String getOidcJwksUrl() {
    return oidcJwksUrl;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SourceType sourceType = (SourceType) o;
    return Objects.equals(this.name, sourceType.name) &&
        Objects.equals(this.verboseName, sourceType.verboseName) &&
        Objects.equals(this.urlsCustomizable, sourceType.urlsCustomizable) &&
        Objects.equals(this.requestTokenUrl, sourceType.requestTokenUrl) &&
        Objects.equals(this.authorizationUrl, sourceType.authorizationUrl) &&
        Objects.equals(this.accessTokenUrl, sourceType.accessTokenUrl) &&
        Objects.equals(this.profileUrl, sourceType.profileUrl) &&
        Objects.equals(this.oidcWellKnownUrl, sourceType.oidcWellKnownUrl) &&
        Objects.equals(this.oidcJwksUrl, sourceType.oidcJwksUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, verboseName, urlsCustomizable, requestTokenUrl, authorizationUrl, accessTokenUrl, profileUrl, oidcWellKnownUrl, oidcJwksUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SourceType {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    verboseName: ").append(toIndentedString(verboseName)).append("\n");
    sb.append("    urlsCustomizable: ").append(toIndentedString(urlsCustomizable)).append("\n");
    sb.append("    requestTokenUrl: ").append(toIndentedString(requestTokenUrl)).append("\n");
    sb.append("    authorizationUrl: ").append(toIndentedString(authorizationUrl)).append("\n");
    sb.append("    accessTokenUrl: ").append(toIndentedString(accessTokenUrl)).append("\n");
    sb.append("    profileUrl: ").append(toIndentedString(profileUrl)).append("\n");
    sb.append("    oidcWellKnownUrl: ").append(toIndentedString(oidcWellKnownUrl)).append("\n");
    sb.append("    oidcJwksUrl: ").append(toIndentedString(oidcJwksUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("verbose_name");
    openapiFields.add("urls_customizable");
    openapiFields.add("request_token_url");
    openapiFields.add("authorization_url");
    openapiFields.add("access_token_url");
    openapiFields.add("profile_url");
    openapiFields.add("oidc_well_known_url");
    openapiFields.add("oidc_jwks_url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("verbose_name");
    openapiRequiredFields.add("urls_customizable");
    openapiRequiredFields.add("request_token_url");
    openapiRequiredFields.add("authorization_url");
    openapiRequiredFields.add("access_token_url");
    openapiRequiredFields.add("profile_url");
    openapiRequiredFields.add("oidc_well_known_url");
    openapiRequiredFields.add("oidc_jwks_url");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SourceType
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SourceType.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SourceType is not found in the empty JSON string", SourceType.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SourceType.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SourceType` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SourceType.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("verbose_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verbose_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verbose_name").toString()));
      }
      if ((jsonObj.get("request_token_url") != null && !jsonObj.get("request_token_url").isJsonNull()) && !jsonObj.get("request_token_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `request_token_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("request_token_url").toString()));
      }
      if ((jsonObj.get("authorization_url") != null && !jsonObj.get("authorization_url").isJsonNull()) && !jsonObj.get("authorization_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorization_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorization_url").toString()));
      }
      if ((jsonObj.get("access_token_url") != null && !jsonObj.get("access_token_url").isJsonNull()) && !jsonObj.get("access_token_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `access_token_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("access_token_url").toString()));
      }
      if ((jsonObj.get("profile_url") != null && !jsonObj.get("profile_url").isJsonNull()) && !jsonObj.get("profile_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `profile_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("profile_url").toString()));
      }
      if ((jsonObj.get("oidc_well_known_url") != null && !jsonObj.get("oidc_well_known_url").isJsonNull()) && !jsonObj.get("oidc_well_known_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oidc_well_known_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oidc_well_known_url").toString()));
      }
      if ((jsonObj.get("oidc_jwks_url") != null && !jsonObj.get("oidc_jwks_url").isJsonNull()) && !jsonObj.get("oidc_jwks_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oidc_jwks_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oidc_jwks_url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SourceType.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SourceType' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SourceType> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SourceType.class));

       return (TypeAdapter<T>) new TypeAdapter<SourceType>() {
           @Override
           public void write(JsonWriter out, SourceType value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SourceType read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SourceType given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SourceType
   * @throws IOException if the JSON string is invalid with respect to SourceType
   */
  public static SourceType fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SourceType.class);
  }

  /**
   * Convert an instance of SourceType to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

