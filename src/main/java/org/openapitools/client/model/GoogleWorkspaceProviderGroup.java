/*
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.6.3
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.UserGroup;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GoogleWorkspaceProviderGroup Serializer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-25T23:12:57.050901581-03:00[America/Argentina/Cordoba]", comments = "Generator version: 7.8.0")
public class GoogleWorkspaceProviderGroup {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_GOOGLE_ID = "google_id";
  @SerializedName(SERIALIZED_NAME_GOOGLE_ID)
  private String googleId;

  public static final String SERIALIZED_NAME_GROUP = "group";
  @SerializedName(SERIALIZED_NAME_GROUP)
  private UUID group;

  public static final String SERIALIZED_NAME_GROUP_OBJ = "group_obj";
  @SerializedName(SERIALIZED_NAME_GROUP_OBJ)
  private UserGroup groupObj;

  public static final String SERIALIZED_NAME_PROVIDER = "provider";
  @SerializedName(SERIALIZED_NAME_PROVIDER)
  private Integer provider;

  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private Object attributes = null;

  public GoogleWorkspaceProviderGroup() {
  }

  public GoogleWorkspaceProviderGroup(
     UUID id, 
     UserGroup groupObj, 
     Object attributes
  ) {
    this();
    this.id = id;
    this.groupObj = groupObj;
    this.attributes = attributes;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public UUID getId() {
    return id;
  }



  public GoogleWorkspaceProviderGroup googleId(String googleId) {
    this.googleId = googleId;
    return this;
  }

  /**
   * Get googleId
   * @return googleId
   */
  @javax.annotation.Nonnull
  public String getGoogleId() {
    return googleId;
  }

  public void setGoogleId(String googleId) {
    this.googleId = googleId;
  }


  public GoogleWorkspaceProviderGroup group(UUID group) {
    this.group = group;
    return this;
  }

  /**
   * Get group
   * @return group
   */
  @javax.annotation.Nonnull
  public UUID getGroup() {
    return group;
  }

  public void setGroup(UUID group) {
    this.group = group;
  }


  /**
   * Get groupObj
   * @return groupObj
   */
  @javax.annotation.Nonnull
  public UserGroup getGroupObj() {
    return groupObj;
  }



  public GoogleWorkspaceProviderGroup provider(Integer provider) {
    this.provider = provider;
    return this;
  }

  /**
   * Get provider
   * @return provider
   */
  @javax.annotation.Nonnull
  public Integer getProvider() {
    return provider;
  }

  public void setProvider(Integer provider) {
    this.provider = provider;
  }


  /**
   * Get attributes
   * @return attributes
   */
  @javax.annotation.Nullable
  public Object getAttributes() {
    return attributes;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleWorkspaceProviderGroup googleWorkspaceProviderGroup = (GoogleWorkspaceProviderGroup) o;
    return Objects.equals(this.id, googleWorkspaceProviderGroup.id) &&
        Objects.equals(this.googleId, googleWorkspaceProviderGroup.googleId) &&
        Objects.equals(this.group, googleWorkspaceProviderGroup.group) &&
        Objects.equals(this.groupObj, googleWorkspaceProviderGroup.groupObj) &&
        Objects.equals(this.provider, googleWorkspaceProviderGroup.provider) &&
        Objects.equals(this.attributes, googleWorkspaceProviderGroup.attributes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, googleId, group, groupObj, provider, attributes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleWorkspaceProviderGroup {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    googleId: ").append(toIndentedString(googleId)).append("\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("    groupObj: ").append(toIndentedString(groupObj)).append("\n");
    sb.append("    provider: ").append(toIndentedString(provider)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("google_id");
    openapiFields.add("group");
    openapiFields.add("group_obj");
    openapiFields.add("provider");
    openapiFields.add("attributes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("google_id");
    openapiRequiredFields.add("group");
    openapiRequiredFields.add("group_obj");
    openapiRequiredFields.add("provider");
    openapiRequiredFields.add("attributes");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleWorkspaceProviderGroup
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleWorkspaceProviderGroup.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleWorkspaceProviderGroup is not found in the empty JSON string", GoogleWorkspaceProviderGroup.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleWorkspaceProviderGroup.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleWorkspaceProviderGroup` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GoogleWorkspaceProviderGroup.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("google_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `google_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("google_id").toString()));
      }
      if (!jsonObj.get("group").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `group` to be a primitive type in the JSON string but got `%s`", jsonObj.get("group").toString()));
      }
      // validate the required field `group_obj`
      UserGroup.validateJsonElement(jsonObj.get("group_obj"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleWorkspaceProviderGroup.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleWorkspaceProviderGroup' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleWorkspaceProviderGroup> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleWorkspaceProviderGroup.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleWorkspaceProviderGroup>() {
           @Override
           public void write(JsonWriter out, GoogleWorkspaceProviderGroup value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleWorkspaceProviderGroup read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleWorkspaceProviderGroup given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleWorkspaceProviderGroup
   * @throws IOException if the JSON string is invalid with respect to GoogleWorkspaceProviderGroup
   */
  public static GoogleWorkspaceProviderGroup fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleWorkspaceProviderGroup.class);
  }

  /**
   * Convert an instance of GoogleWorkspaceProviderGroup to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

