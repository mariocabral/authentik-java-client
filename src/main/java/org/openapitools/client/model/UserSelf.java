/*
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.6.3
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.UserSelfGroups;
import org.openapitools.client.model.UserTypeEnum;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * User Serializer for information a user can retrieve about themselves
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-25T23:12:57.050901581-03:00[America/Argentina/Cordoba]", comments = "Generator version: 7.8.0")
public class UserSelf {
  public static final String SERIALIZED_NAME_PK = "pk";
  @SerializedName(SERIALIZED_NAME_PK)
  private Integer pk;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_IS_ACTIVE = "is_active";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE)
  private Boolean isActive;

  public static final String SERIALIZED_NAME_IS_SUPERUSER = "is_superuser";
  @SerializedName(SERIALIZED_NAME_IS_SUPERUSER)
  private Boolean isSuperuser;

  public static final String SERIALIZED_NAME_GROUPS = "groups";
  @SerializedName(SERIALIZED_NAME_GROUPS)
  private List<UserSelfGroups> groups = new ArrayList<>();

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_AVATAR = "avatar";
  @SerializedName(SERIALIZED_NAME_AVATAR)
  private String avatar;

  public static final String SERIALIZED_NAME_UID = "uid";
  @SerializedName(SERIALIZED_NAME_UID)
  private String uid;

  public static final String SERIALIZED_NAME_SETTINGS = "settings";
  @SerializedName(SERIALIZED_NAME_SETTINGS)
  private Map<String, Object> settings = new HashMap<>();

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private UserTypeEnum type;

  public static final String SERIALIZED_NAME_SYSTEM_PERMISSIONS = "system_permissions";
  @SerializedName(SERIALIZED_NAME_SYSTEM_PERMISSIONS)
  private List<String> systemPermissions = new ArrayList<>();

  public UserSelf() {
  }

  public UserSelf(
     Integer pk, 
     Boolean isActive, 
     Boolean isSuperuser, 
     List<UserSelfGroups> groups, 
     String avatar, 
     String uid, 
     Map<String, Object> settings, 
     List<String> systemPermissions
  ) {
    this();
    this.pk = pk;
    this.isActive = isActive;
    this.isSuperuser = isSuperuser;
    this.groups = groups;
    this.avatar = avatar;
    this.uid = uid;
    this.settings = settings;
    this.systemPermissions = systemPermissions;
  }

  /**
   * Get pk
   * @return pk
   */
  @javax.annotation.Nonnull
  public Integer getPk() {
    return pk;
  }



  public UserSelf username(String username) {
    this.username = username;
    return this;
  }

  /**
   * Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
   * @return username
   */
  @javax.annotation.Nonnull
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }


  public UserSelf name(String name) {
    this.name = name;
    return this;
  }

  /**
   * User&#39;s display name.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  /**
   * Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
   * @return isActive
   */
  @javax.annotation.Nonnull
  public Boolean getIsActive() {
    return isActive;
  }



  /**
   * Get isSuperuser
   * @return isSuperuser
   */
  @javax.annotation.Nonnull
  public Boolean getIsSuperuser() {
    return isSuperuser;
  }



  /**
   * Get groups
   * @return groups
   */
  @javax.annotation.Nonnull
  public List<UserSelfGroups> getGroups() {
    return groups;
  }



  public UserSelf email(String email) {
    this.email = email;
    return this;
  }

  /**
   * Get email
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  /**
   * User&#39;s avatar, either a http/https URL or a data URI
   * @return avatar
   */
  @javax.annotation.Nonnull
  public String getAvatar() {
    return avatar;
  }



  /**
   * Get uid
   * @return uid
   */
  @javax.annotation.Nonnull
  public String getUid() {
    return uid;
  }



  /**
   * Get user settings with brand and group settings applied
   * @return settings
   */
  @javax.annotation.Nonnull
  public Map<String, Object> getSettings() {
    return settings;
  }



  public UserSelf type(UserTypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public UserTypeEnum getType() {
    return type;
  }

  public void setType(UserTypeEnum type) {
    this.type = type;
  }


  /**
   * Get all system permissions assigned to the user
   * @return systemPermissions
   */
  @javax.annotation.Nonnull
  public List<String> getSystemPermissions() {
    return systemPermissions;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserSelf userSelf = (UserSelf) o;
    return Objects.equals(this.pk, userSelf.pk) &&
        Objects.equals(this.username, userSelf.username) &&
        Objects.equals(this.name, userSelf.name) &&
        Objects.equals(this.isActive, userSelf.isActive) &&
        Objects.equals(this.isSuperuser, userSelf.isSuperuser) &&
        Objects.equals(this.groups, userSelf.groups) &&
        Objects.equals(this.email, userSelf.email) &&
        Objects.equals(this.avatar, userSelf.avatar) &&
        Objects.equals(this.uid, userSelf.uid) &&
        Objects.equals(this.settings, userSelf.settings) &&
        Objects.equals(this.type, userSelf.type) &&
        Objects.equals(this.systemPermissions, userSelf.systemPermissions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pk, username, name, isActive, isSuperuser, groups, email, avatar, uid, settings, type, systemPermissions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserSelf {\n");
    sb.append("    pk: ").append(toIndentedString(pk)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    isSuperuser: ").append(toIndentedString(isSuperuser)).append("\n");
    sb.append("    groups: ").append(toIndentedString(groups)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    avatar: ").append(toIndentedString(avatar)).append("\n");
    sb.append("    uid: ").append(toIndentedString(uid)).append("\n");
    sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    systemPermissions: ").append(toIndentedString(systemPermissions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pk");
    openapiFields.add("username");
    openapiFields.add("name");
    openapiFields.add("is_active");
    openapiFields.add("is_superuser");
    openapiFields.add("groups");
    openapiFields.add("email");
    openapiFields.add("avatar");
    openapiFields.add("uid");
    openapiFields.add("settings");
    openapiFields.add("type");
    openapiFields.add("system_permissions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("pk");
    openapiRequiredFields.add("username");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("is_active");
    openapiRequiredFields.add("is_superuser");
    openapiRequiredFields.add("groups");
    openapiRequiredFields.add("avatar");
    openapiRequiredFields.add("uid");
    openapiRequiredFields.add("settings");
    openapiRequiredFields.add("system_permissions");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserSelf
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserSelf.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserSelf is not found in the empty JSON string", UserSelf.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserSelf.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserSelf` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UserSelf.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("groups").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `groups` to be an array in the JSON string but got `%s`", jsonObj.get("groups").toString()));
      }

      JsonArray jsonArraygroups = jsonObj.getAsJsonArray("groups");
      // validate the required field `groups` (array)
      for (int i = 0; i < jsonArraygroups.size(); i++) {
        UserSelfGroups.validateJsonElement(jsonArraygroups.get(i));
      };
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if (!jsonObj.get("avatar").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `avatar` to be a primitive type in the JSON string but got `%s`", jsonObj.get("avatar").toString()));
      }
      if (!jsonObj.get("uid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        UserTypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      // ensure the required json array is present
      if (jsonObj.get("system_permissions") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("system_permissions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `system_permissions` to be an array in the JSON string but got `%s`", jsonObj.get("system_permissions").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserSelf.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserSelf' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserSelf> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserSelf.class));

       return (TypeAdapter<T>) new TypeAdapter<UserSelf>() {
           @Override
           public void write(JsonWriter out, UserSelf value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserSelf read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserSelf given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserSelf
   * @throws IOException if the JSON string is invalid with respect to UserSelf
   */
  public static UserSelf fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserSelf.class);
  }

  /**
   * Convert an instance of UserSelf to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

