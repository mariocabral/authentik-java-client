/*
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.6.3
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AppEnum;
import org.openapitools.client.model.EventActions;
import org.openapitools.client.model.ModelEnum;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Event Matcher Policy Serializer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-25T23:12:57.050901581-03:00[America/Argentina/Cordoba]", comments = "Generator version: 7.8.0")
public class EventMatcherPolicyRequest {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_EXECUTION_LOGGING = "execution_logging";
  @SerializedName(SERIALIZED_NAME_EXECUTION_LOGGING)
  private Boolean executionLogging;

  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private EventActions action;

  public static final String SERIALIZED_NAME_CLIENT_IP = "client_ip";
  @SerializedName(SERIALIZED_NAME_CLIENT_IP)
  private String clientIp;

  public static final String SERIALIZED_NAME_APP = "app";
  @SerializedName(SERIALIZED_NAME_APP)
  private AppEnum app;

  public static final String SERIALIZED_NAME_MODEL = "model";
  @SerializedName(SERIALIZED_NAME_MODEL)
  private ModelEnum model;

  public EventMatcherPolicyRequest() {
  }

  public EventMatcherPolicyRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public EventMatcherPolicyRequest executionLogging(Boolean executionLogging) {
    this.executionLogging = executionLogging;
    return this;
  }

  /**
   * When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged.
   * @return executionLogging
   */
  @javax.annotation.Nullable
  public Boolean getExecutionLogging() {
    return executionLogging;
  }

  public void setExecutionLogging(Boolean executionLogging) {
    this.executionLogging = executionLogging;
  }


  public EventMatcherPolicyRequest action(EventActions action) {
    this.action = action;
    return this;
  }

  /**
   * Match created events with this action type. When left empty, all action types will be matched.
   * @return action
   */
  @javax.annotation.Nullable
  public EventActions getAction() {
    return action;
  }

  public void setAction(EventActions action) {
    this.action = action;
  }


  public EventMatcherPolicyRequest clientIp(String clientIp) {
    this.clientIp = clientIp;
    return this;
  }

  /**
   * Matches Event&#39;s Client IP (strict matching, for network matching use an Expression Policy)
   * @return clientIp
   */
  @javax.annotation.Nullable
  public String getClientIp() {
    return clientIp;
  }

  public void setClientIp(String clientIp) {
    this.clientIp = clientIp;
  }


  public EventMatcherPolicyRequest app(AppEnum app) {
    this.app = app;
    return this;
  }

  /**
   * Match events created by selected application. When left empty, all applications are matched.
   * @return app
   */
  @javax.annotation.Nullable
  public AppEnum getApp() {
    return app;
  }

  public void setApp(AppEnum app) {
    this.app = app;
  }


  public EventMatcherPolicyRequest model(ModelEnum model) {
    this.model = model;
    return this;
  }

  /**
   * Match events created by selected model. When left empty, all models are matched. When an app is selected, all the application&#39;s models are matched.
   * @return model
   */
  @javax.annotation.Nullable
  public ModelEnum getModel() {
    return model;
  }

  public void setModel(ModelEnum model) {
    this.model = model;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventMatcherPolicyRequest eventMatcherPolicyRequest = (EventMatcherPolicyRequest) o;
    return Objects.equals(this.name, eventMatcherPolicyRequest.name) &&
        Objects.equals(this.executionLogging, eventMatcherPolicyRequest.executionLogging) &&
        Objects.equals(this.action, eventMatcherPolicyRequest.action) &&
        Objects.equals(this.clientIp, eventMatcherPolicyRequest.clientIp) &&
        Objects.equals(this.app, eventMatcherPolicyRequest.app) &&
        Objects.equals(this.model, eventMatcherPolicyRequest.model);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, executionLogging, action, clientIp, app, model);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventMatcherPolicyRequest {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    executionLogging: ").append(toIndentedString(executionLogging)).append("\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    clientIp: ").append(toIndentedString(clientIp)).append("\n");
    sb.append("    app: ").append(toIndentedString(app)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("execution_logging");
    openapiFields.add("action");
    openapiFields.add("client_ip");
    openapiFields.add("app");
    openapiFields.add("model");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EventMatcherPolicyRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EventMatcherPolicyRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EventMatcherPolicyRequest is not found in the empty JSON string", EventMatcherPolicyRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EventMatcherPolicyRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EventMatcherPolicyRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EventMatcherPolicyRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `action`
      if (jsonObj.get("action") != null && !jsonObj.get("action").isJsonNull()) {
        EventActions.validateJsonElement(jsonObj.get("action"));
      }
      if ((jsonObj.get("client_ip") != null && !jsonObj.get("client_ip").isJsonNull()) && !jsonObj.get("client_ip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_ip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_ip").toString()));
      }
      // validate the optional field `app`
      if (jsonObj.get("app") != null && !jsonObj.get("app").isJsonNull()) {
        AppEnum.validateJsonElement(jsonObj.get("app"));
      }
      // validate the optional field `model`
      if (jsonObj.get("model") != null && !jsonObj.get("model").isJsonNull()) {
        ModelEnum.validateJsonElement(jsonObj.get("model"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EventMatcherPolicyRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EventMatcherPolicyRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EventMatcherPolicyRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EventMatcherPolicyRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<EventMatcherPolicyRequest>() {
           @Override
           public void write(JsonWriter out, EventMatcherPolicyRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EventMatcherPolicyRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EventMatcherPolicyRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EventMatcherPolicyRequest
   * @throws IOException if the JSON string is invalid with respect to EventMatcherPolicyRequest
   */
  public static EventMatcherPolicyRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventMatcherPolicyRequest.class);
  }

  /**
   * Convert an instance of EventMatcherPolicyRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

