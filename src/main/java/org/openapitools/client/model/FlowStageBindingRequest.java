/*
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.6.3
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.InvalidResponseActionEnum;
import org.openapitools.client.model.PolicyEngineMode;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FlowStageBinding Serializer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-25T23:12:57.050901581-03:00[America/Argentina/Cordoba]", comments = "Generator version: 7.8.0")
public class FlowStageBindingRequest {
  public static final String SERIALIZED_NAME_TARGET = "target";
  @SerializedName(SERIALIZED_NAME_TARGET)
  private UUID target;

  public static final String SERIALIZED_NAME_STAGE = "stage";
  @SerializedName(SERIALIZED_NAME_STAGE)
  private UUID stage;

  public static final String SERIALIZED_NAME_EVALUATE_ON_PLAN = "evaluate_on_plan";
  @SerializedName(SERIALIZED_NAME_EVALUATE_ON_PLAN)
  private Boolean evaluateOnPlan;

  public static final String SERIALIZED_NAME_RE_EVALUATE_POLICIES = "re_evaluate_policies";
  @SerializedName(SERIALIZED_NAME_RE_EVALUATE_POLICIES)
  private Boolean reEvaluatePolicies;

  public static final String SERIALIZED_NAME_ORDER = "order";
  @SerializedName(SERIALIZED_NAME_ORDER)
  private Integer order;

  public static final String SERIALIZED_NAME_POLICY_ENGINE_MODE = "policy_engine_mode";
  @SerializedName(SERIALIZED_NAME_POLICY_ENGINE_MODE)
  private PolicyEngineMode policyEngineMode;

  public static final String SERIALIZED_NAME_INVALID_RESPONSE_ACTION = "invalid_response_action";
  @SerializedName(SERIALIZED_NAME_INVALID_RESPONSE_ACTION)
  private InvalidResponseActionEnum invalidResponseAction;

  public FlowStageBindingRequest() {
  }

  public FlowStageBindingRequest target(UUID target) {
    this.target = target;
    return this;
  }

  /**
   * Get target
   * @return target
   */
  @javax.annotation.Nonnull
  public UUID getTarget() {
    return target;
  }

  public void setTarget(UUID target) {
    this.target = target;
  }


  public FlowStageBindingRequest stage(UUID stage) {
    this.stage = stage;
    return this;
  }

  /**
   * Get stage
   * @return stage
   */
  @javax.annotation.Nonnull
  public UUID getStage() {
    return stage;
  }

  public void setStage(UUID stage) {
    this.stage = stage;
  }


  public FlowStageBindingRequest evaluateOnPlan(Boolean evaluateOnPlan) {
    this.evaluateOnPlan = evaluateOnPlan;
    return this;
  }

  /**
   * Evaluate policies during the Flow planning process.
   * @return evaluateOnPlan
   */
  @javax.annotation.Nullable
  public Boolean getEvaluateOnPlan() {
    return evaluateOnPlan;
  }

  public void setEvaluateOnPlan(Boolean evaluateOnPlan) {
    this.evaluateOnPlan = evaluateOnPlan;
  }


  public FlowStageBindingRequest reEvaluatePolicies(Boolean reEvaluatePolicies) {
    this.reEvaluatePolicies = reEvaluatePolicies;
    return this;
  }

  /**
   * Evaluate policies when the Stage is present to the user.
   * @return reEvaluatePolicies
   */
  @javax.annotation.Nullable
  public Boolean getReEvaluatePolicies() {
    return reEvaluatePolicies;
  }

  public void setReEvaluatePolicies(Boolean reEvaluatePolicies) {
    this.reEvaluatePolicies = reEvaluatePolicies;
  }


  public FlowStageBindingRequest order(Integer order) {
    this.order = order;
    return this;
  }

  /**
   * Get order
   * minimum: -2147483648
   * maximum: 2147483647
   * @return order
   */
  @javax.annotation.Nonnull
  public Integer getOrder() {
    return order;
  }

  public void setOrder(Integer order) {
    this.order = order;
  }


  public FlowStageBindingRequest policyEngineMode(PolicyEngineMode policyEngineMode) {
    this.policyEngineMode = policyEngineMode;
    return this;
  }

  /**
   * Get policyEngineMode
   * @return policyEngineMode
   */
  @javax.annotation.Nullable
  public PolicyEngineMode getPolicyEngineMode() {
    return policyEngineMode;
  }

  public void setPolicyEngineMode(PolicyEngineMode policyEngineMode) {
    this.policyEngineMode = policyEngineMode;
  }


  public FlowStageBindingRequest invalidResponseAction(InvalidResponseActionEnum invalidResponseAction) {
    this.invalidResponseAction = invalidResponseAction;
    return this;
  }

  /**
   * Configure how the flow executor should handle an invalid response to a challenge. RETRY returns the error message and a similar challenge to the executor. RESTART restarts the flow from the beginning, and RESTART_WITH_CONTEXT restarts the flow while keeping the current context.
   * @return invalidResponseAction
   */
  @javax.annotation.Nullable
  public InvalidResponseActionEnum getInvalidResponseAction() {
    return invalidResponseAction;
  }

  public void setInvalidResponseAction(InvalidResponseActionEnum invalidResponseAction) {
    this.invalidResponseAction = invalidResponseAction;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FlowStageBindingRequest flowStageBindingRequest = (FlowStageBindingRequest) o;
    return Objects.equals(this.target, flowStageBindingRequest.target) &&
        Objects.equals(this.stage, flowStageBindingRequest.stage) &&
        Objects.equals(this.evaluateOnPlan, flowStageBindingRequest.evaluateOnPlan) &&
        Objects.equals(this.reEvaluatePolicies, flowStageBindingRequest.reEvaluatePolicies) &&
        Objects.equals(this.order, flowStageBindingRequest.order) &&
        Objects.equals(this.policyEngineMode, flowStageBindingRequest.policyEngineMode) &&
        Objects.equals(this.invalidResponseAction, flowStageBindingRequest.invalidResponseAction);
  }

  @Override
  public int hashCode() {
    return Objects.hash(target, stage, evaluateOnPlan, reEvaluatePolicies, order, policyEngineMode, invalidResponseAction);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FlowStageBindingRequest {\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("    stage: ").append(toIndentedString(stage)).append("\n");
    sb.append("    evaluateOnPlan: ").append(toIndentedString(evaluateOnPlan)).append("\n");
    sb.append("    reEvaluatePolicies: ").append(toIndentedString(reEvaluatePolicies)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("    policyEngineMode: ").append(toIndentedString(policyEngineMode)).append("\n");
    sb.append("    invalidResponseAction: ").append(toIndentedString(invalidResponseAction)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("target");
    openapiFields.add("stage");
    openapiFields.add("evaluate_on_plan");
    openapiFields.add("re_evaluate_policies");
    openapiFields.add("order");
    openapiFields.add("policy_engine_mode");
    openapiFields.add("invalid_response_action");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("target");
    openapiRequiredFields.add("stage");
    openapiRequiredFields.add("order");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FlowStageBindingRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FlowStageBindingRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FlowStageBindingRequest is not found in the empty JSON string", FlowStageBindingRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FlowStageBindingRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FlowStageBindingRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FlowStageBindingRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("target").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target").toString()));
      }
      if (!jsonObj.get("stage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stage").toString()));
      }
      // validate the optional field `policy_engine_mode`
      if (jsonObj.get("policy_engine_mode") != null && !jsonObj.get("policy_engine_mode").isJsonNull()) {
        PolicyEngineMode.validateJsonElement(jsonObj.get("policy_engine_mode"));
      }
      // validate the optional field `invalid_response_action`
      if (jsonObj.get("invalid_response_action") != null && !jsonObj.get("invalid_response_action").isJsonNull()) {
        InvalidResponseActionEnum.validateJsonElement(jsonObj.get("invalid_response_action"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FlowStageBindingRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FlowStageBindingRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FlowStageBindingRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FlowStageBindingRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<FlowStageBindingRequest>() {
           @Override
           public void write(JsonWriter out, FlowStageBindingRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FlowStageBindingRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FlowStageBindingRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FlowStageBindingRequest
   * @throws IOException if the JSON string is invalid with respect to FlowStageBindingRequest
   */
  public static FlowStageBindingRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FlowStageBindingRequest.class);
  }

  /**
   * Convert an instance of FlowStageBindingRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

