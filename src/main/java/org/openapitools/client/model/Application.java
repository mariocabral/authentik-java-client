/*
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.6.3
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.PolicyEngineMode;
import org.openapitools.client.model.Provider;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Application Serializer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-25T23:12:57.050901581-03:00[America/Argentina/Cordoba]", comments = "Generator version: 7.8.0")
public class Application {
  public static final String SERIALIZED_NAME_PK = "pk";
  @SerializedName(SERIALIZED_NAME_PK)
  private UUID pk;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SLUG = "slug";
  @SerializedName(SERIALIZED_NAME_SLUG)
  private String slug;

  public static final String SERIALIZED_NAME_PROVIDER = "provider";
  @SerializedName(SERIALIZED_NAME_PROVIDER)
  private Integer provider;

  public static final String SERIALIZED_NAME_PROVIDER_OBJ = "provider_obj";
  @SerializedName(SERIALIZED_NAME_PROVIDER_OBJ)
  private Provider providerObj;

  public static final String SERIALIZED_NAME_BACKCHANNEL_PROVIDERS = "backchannel_providers";
  @SerializedName(SERIALIZED_NAME_BACKCHANNEL_PROVIDERS)
  private List<Integer> backchannelProviders = new ArrayList<>();

  public static final String SERIALIZED_NAME_BACKCHANNEL_PROVIDERS_OBJ = "backchannel_providers_obj";
  @SerializedName(SERIALIZED_NAME_BACKCHANNEL_PROVIDERS_OBJ)
  private List<Provider> backchannelProvidersObj = new ArrayList<>();

  public static final String SERIALIZED_NAME_LAUNCH_URL = "launch_url";
  @SerializedName(SERIALIZED_NAME_LAUNCH_URL)
  private String launchUrl;

  public static final String SERIALIZED_NAME_OPEN_IN_NEW_TAB = "open_in_new_tab";
  @SerializedName(SERIALIZED_NAME_OPEN_IN_NEW_TAB)
  private Boolean openInNewTab;

  public static final String SERIALIZED_NAME_META_LAUNCH_URL = "meta_launch_url";
  @SerializedName(SERIALIZED_NAME_META_LAUNCH_URL)
  private URI metaLaunchUrl;

  public static final String SERIALIZED_NAME_META_ICON = "meta_icon";
  @SerializedName(SERIALIZED_NAME_META_ICON)
  private String metaIcon;

  public static final String SERIALIZED_NAME_META_DESCRIPTION = "meta_description";
  @SerializedName(SERIALIZED_NAME_META_DESCRIPTION)
  private String metaDescription;

  public static final String SERIALIZED_NAME_META_PUBLISHER = "meta_publisher";
  @SerializedName(SERIALIZED_NAME_META_PUBLISHER)
  private String metaPublisher;

  public static final String SERIALIZED_NAME_POLICY_ENGINE_MODE = "policy_engine_mode";
  @SerializedName(SERIALIZED_NAME_POLICY_ENGINE_MODE)
  private PolicyEngineMode policyEngineMode;

  public static final String SERIALIZED_NAME_GROUP = "group";
  @SerializedName(SERIALIZED_NAME_GROUP)
  private String group;

  public Application() {
  }

  public Application(
     UUID pk, 
     Provider providerObj, 
     List<Provider> backchannelProvidersObj, 
     String launchUrl, 
     String metaIcon
  ) {
    this();
    this.pk = pk;
    this.providerObj = providerObj;
    this.backchannelProvidersObj = backchannelProvidersObj;
    this.launchUrl = launchUrl;
    this.metaIcon = metaIcon;
  }

  /**
   * Get pk
   * @return pk
   */
  @javax.annotation.Nonnull
  public UUID getPk() {
    return pk;
  }



  public Application name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Application&#39;s display Name.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Application slug(String slug) {
    this.slug = slug;
    return this;
  }

  /**
   * Internal application name, used in URLs.
   * @return slug
   */
  @javax.annotation.Nonnull
  public String getSlug() {
    return slug;
  }

  public void setSlug(String slug) {
    this.slug = slug;
  }


  public Application provider(Integer provider) {
    this.provider = provider;
    return this;
  }

  /**
   * Get provider
   * @return provider
   */
  @javax.annotation.Nullable
  public Integer getProvider() {
    return provider;
  }

  public void setProvider(Integer provider) {
    this.provider = provider;
  }


  /**
   * Get providerObj
   * @return providerObj
   */
  @javax.annotation.Nonnull
  public Provider getProviderObj() {
    return providerObj;
  }



  public Application backchannelProviders(List<Integer> backchannelProviders) {
    this.backchannelProviders = backchannelProviders;
    return this;
  }

  public Application addBackchannelProvidersItem(Integer backchannelProvidersItem) {
    if (this.backchannelProviders == null) {
      this.backchannelProviders = new ArrayList<>();
    }
    this.backchannelProviders.add(backchannelProvidersItem);
    return this;
  }

  /**
   * Get backchannelProviders
   * @return backchannelProviders
   */
  @javax.annotation.Nullable
  public List<Integer> getBackchannelProviders() {
    return backchannelProviders;
  }

  public void setBackchannelProviders(List<Integer> backchannelProviders) {
    this.backchannelProviders = backchannelProviders;
  }


  /**
   * Get backchannelProvidersObj
   * @return backchannelProvidersObj
   */
  @javax.annotation.Nonnull
  public List<Provider> getBackchannelProvidersObj() {
    return backchannelProvidersObj;
  }



  /**
   * Allow formatting of launch URL
   * @return launchUrl
   */
  @javax.annotation.Nullable
  public String getLaunchUrl() {
    return launchUrl;
  }



  public Application openInNewTab(Boolean openInNewTab) {
    this.openInNewTab = openInNewTab;
    return this;
  }

  /**
   * Open launch URL in a new browser tab or window.
   * @return openInNewTab
   */
  @javax.annotation.Nullable
  public Boolean getOpenInNewTab() {
    return openInNewTab;
  }

  public void setOpenInNewTab(Boolean openInNewTab) {
    this.openInNewTab = openInNewTab;
  }


  public Application metaLaunchUrl(URI metaLaunchUrl) {
    this.metaLaunchUrl = metaLaunchUrl;
    return this;
  }

  /**
   * Get metaLaunchUrl
   * @return metaLaunchUrl
   */
  @javax.annotation.Nullable
  public URI getMetaLaunchUrl() {
    return metaLaunchUrl;
  }

  public void setMetaLaunchUrl(URI metaLaunchUrl) {
    this.metaLaunchUrl = metaLaunchUrl;
  }


  /**
   * Get the URL to the App Icon image. If the name is /static or starts with http it is returned as-is
   * @return metaIcon
   */
  @javax.annotation.Nullable
  public String getMetaIcon() {
    return metaIcon;
  }



  public Application metaDescription(String metaDescription) {
    this.metaDescription = metaDescription;
    return this;
  }

  /**
   * Get metaDescription
   * @return metaDescription
   */
  @javax.annotation.Nullable
  public String getMetaDescription() {
    return metaDescription;
  }

  public void setMetaDescription(String metaDescription) {
    this.metaDescription = metaDescription;
  }


  public Application metaPublisher(String metaPublisher) {
    this.metaPublisher = metaPublisher;
    return this;
  }

  /**
   * Get metaPublisher
   * @return metaPublisher
   */
  @javax.annotation.Nullable
  public String getMetaPublisher() {
    return metaPublisher;
  }

  public void setMetaPublisher(String metaPublisher) {
    this.metaPublisher = metaPublisher;
  }


  public Application policyEngineMode(PolicyEngineMode policyEngineMode) {
    this.policyEngineMode = policyEngineMode;
    return this;
  }

  /**
   * Get policyEngineMode
   * @return policyEngineMode
   */
  @javax.annotation.Nullable
  public PolicyEngineMode getPolicyEngineMode() {
    return policyEngineMode;
  }

  public void setPolicyEngineMode(PolicyEngineMode policyEngineMode) {
    this.policyEngineMode = policyEngineMode;
  }


  public Application group(String group) {
    this.group = group;
    return this;
  }

  /**
   * Get group
   * @return group
   */
  @javax.annotation.Nullable
  public String getGroup() {
    return group;
  }

  public void setGroup(String group) {
    this.group = group;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Application application = (Application) o;
    return Objects.equals(this.pk, application.pk) &&
        Objects.equals(this.name, application.name) &&
        Objects.equals(this.slug, application.slug) &&
        Objects.equals(this.provider, application.provider) &&
        Objects.equals(this.providerObj, application.providerObj) &&
        Objects.equals(this.backchannelProviders, application.backchannelProviders) &&
        Objects.equals(this.backchannelProvidersObj, application.backchannelProvidersObj) &&
        Objects.equals(this.launchUrl, application.launchUrl) &&
        Objects.equals(this.openInNewTab, application.openInNewTab) &&
        Objects.equals(this.metaLaunchUrl, application.metaLaunchUrl) &&
        Objects.equals(this.metaIcon, application.metaIcon) &&
        Objects.equals(this.metaDescription, application.metaDescription) &&
        Objects.equals(this.metaPublisher, application.metaPublisher) &&
        Objects.equals(this.policyEngineMode, application.policyEngineMode) &&
        Objects.equals(this.group, application.group);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(pk, name, slug, provider, providerObj, backchannelProviders, backchannelProvidersObj, launchUrl, openInNewTab, metaLaunchUrl, metaIcon, metaDescription, metaPublisher, policyEngineMode, group);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Application {\n");
    sb.append("    pk: ").append(toIndentedString(pk)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    slug: ").append(toIndentedString(slug)).append("\n");
    sb.append("    provider: ").append(toIndentedString(provider)).append("\n");
    sb.append("    providerObj: ").append(toIndentedString(providerObj)).append("\n");
    sb.append("    backchannelProviders: ").append(toIndentedString(backchannelProviders)).append("\n");
    sb.append("    backchannelProvidersObj: ").append(toIndentedString(backchannelProvidersObj)).append("\n");
    sb.append("    launchUrl: ").append(toIndentedString(launchUrl)).append("\n");
    sb.append("    openInNewTab: ").append(toIndentedString(openInNewTab)).append("\n");
    sb.append("    metaLaunchUrl: ").append(toIndentedString(metaLaunchUrl)).append("\n");
    sb.append("    metaIcon: ").append(toIndentedString(metaIcon)).append("\n");
    sb.append("    metaDescription: ").append(toIndentedString(metaDescription)).append("\n");
    sb.append("    metaPublisher: ").append(toIndentedString(metaPublisher)).append("\n");
    sb.append("    policyEngineMode: ").append(toIndentedString(policyEngineMode)).append("\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pk");
    openapiFields.add("name");
    openapiFields.add("slug");
    openapiFields.add("provider");
    openapiFields.add("provider_obj");
    openapiFields.add("backchannel_providers");
    openapiFields.add("backchannel_providers_obj");
    openapiFields.add("launch_url");
    openapiFields.add("open_in_new_tab");
    openapiFields.add("meta_launch_url");
    openapiFields.add("meta_icon");
    openapiFields.add("meta_description");
    openapiFields.add("meta_publisher");
    openapiFields.add("policy_engine_mode");
    openapiFields.add("group");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("pk");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("slug");
    openapiRequiredFields.add("provider_obj");
    openapiRequiredFields.add("backchannel_providers_obj");
    openapiRequiredFields.add("launch_url");
    openapiRequiredFields.add("meta_icon");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Application
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Application.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Application is not found in the empty JSON string", Application.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Application.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Application` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Application.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("pk").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pk` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pk").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("slug").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slug` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slug").toString()));
      }
      // validate the required field `provider_obj`
      Provider.validateJsonElement(jsonObj.get("provider_obj"));
      // ensure the optional json data is an array if present
      if (jsonObj.get("backchannel_providers") != null && !jsonObj.get("backchannel_providers").isJsonNull() && !jsonObj.get("backchannel_providers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `backchannel_providers` to be an array in the JSON string but got `%s`", jsonObj.get("backchannel_providers").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("backchannel_providers_obj").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `backchannel_providers_obj` to be an array in the JSON string but got `%s`", jsonObj.get("backchannel_providers_obj").toString()));
      }

      JsonArray jsonArraybackchannelProvidersObj = jsonObj.getAsJsonArray("backchannel_providers_obj");
      // validate the required field `backchannel_providers_obj` (array)
      for (int i = 0; i < jsonArraybackchannelProvidersObj.size(); i++) {
        Provider.validateJsonElement(jsonArraybackchannelProvidersObj.get(i));
      };
      if ((jsonObj.get("launch_url") != null && !jsonObj.get("launch_url").isJsonNull()) && !jsonObj.get("launch_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `launch_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("launch_url").toString()));
      }
      if ((jsonObj.get("meta_launch_url") != null && !jsonObj.get("meta_launch_url").isJsonNull()) && !jsonObj.get("meta_launch_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `meta_launch_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("meta_launch_url").toString()));
      }
      if ((jsonObj.get("meta_icon") != null && !jsonObj.get("meta_icon").isJsonNull()) && !jsonObj.get("meta_icon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `meta_icon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("meta_icon").toString()));
      }
      if ((jsonObj.get("meta_description") != null && !jsonObj.get("meta_description").isJsonNull()) && !jsonObj.get("meta_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `meta_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("meta_description").toString()));
      }
      if ((jsonObj.get("meta_publisher") != null && !jsonObj.get("meta_publisher").isJsonNull()) && !jsonObj.get("meta_publisher").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `meta_publisher` to be a primitive type in the JSON string but got `%s`", jsonObj.get("meta_publisher").toString()));
      }
      // validate the optional field `policy_engine_mode`
      if (jsonObj.get("policy_engine_mode") != null && !jsonObj.get("policy_engine_mode").isJsonNull()) {
        PolicyEngineMode.validateJsonElement(jsonObj.get("policy_engine_mode"));
      }
      if ((jsonObj.get("group") != null && !jsonObj.get("group").isJsonNull()) && !jsonObj.get("group").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `group` to be a primitive type in the JSON string but got `%s`", jsonObj.get("group").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Application.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Application' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Application> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Application.class));

       return (TypeAdapter<T>) new TypeAdapter<Application>() {
           @Override
           public void write(JsonWriter out, Application value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Application read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Application given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Application
   * @throws IOException if the JSON string is invalid with respect to Application
   */
  public static Application fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Application.class);
  }

  /**
   * Convert an instance of Application to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

