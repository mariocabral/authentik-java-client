/*
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.6.3
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import org.openapitools.client.model.OutpostTypeEnum;
import org.openapitools.client.model.Provider;
import org.openapitools.client.model.ServiceConnection;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Outpost Serializer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-25T23:12:57.050901581-03:00[America/Argentina/Cordoba]", comments = "Generator version: 7.8.0")
public class Outpost {
  public static final String SERIALIZED_NAME_PK = "pk";
  @SerializedName(SERIALIZED_NAME_PK)
  private UUID pk;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private OutpostTypeEnum type;

  public static final String SERIALIZED_NAME_PROVIDERS = "providers";
  @SerializedName(SERIALIZED_NAME_PROVIDERS)
  private List<Integer> providers = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROVIDERS_OBJ = "providers_obj";
  @SerializedName(SERIALIZED_NAME_PROVIDERS_OBJ)
  private List<Provider> providersObj = new ArrayList<>();

  public static final String SERIALIZED_NAME_SERVICE_CONNECTION = "service_connection";
  @SerializedName(SERIALIZED_NAME_SERVICE_CONNECTION)
  private UUID serviceConnection;

  public static final String SERIALIZED_NAME_SERVICE_CONNECTION_OBJ = "service_connection_obj";
  @SerializedName(SERIALIZED_NAME_SERVICE_CONNECTION_OBJ)
  private ServiceConnection serviceConnectionObj;

  public static final String SERIALIZED_NAME_REFRESH_INTERVAL_S = "refresh_interval_s";
  @SerializedName(SERIALIZED_NAME_REFRESH_INTERVAL_S)
  private Integer refreshIntervalS;

  public static final String SERIALIZED_NAME_TOKEN_IDENTIFIER = "token_identifier";
  @SerializedName(SERIALIZED_NAME_TOKEN_IDENTIFIER)
  private String tokenIdentifier;

  public static final String SERIALIZED_NAME_CONFIG = "config";
  @SerializedName(SERIALIZED_NAME_CONFIG)
  private Map<String, Object> config = new HashMap<>();

  public static final String SERIALIZED_NAME_MANAGED = "managed";
  @SerializedName(SERIALIZED_NAME_MANAGED)
  private String managed;

  public Outpost() {
  }

  public Outpost(
     UUID pk, 
     List<Provider> providersObj, 
     ServiceConnection serviceConnectionObj, 
     Integer refreshIntervalS, 
     String tokenIdentifier
  ) {
    this();
    this.pk = pk;
    this.providersObj = providersObj;
    this.serviceConnectionObj = serviceConnectionObj;
    this.refreshIntervalS = refreshIntervalS;
    this.tokenIdentifier = tokenIdentifier;
  }

  /**
   * Get pk
   * @return pk
   */
  @javax.annotation.Nonnull
  public UUID getPk() {
    return pk;
  }



  public Outpost name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Outpost type(OutpostTypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public OutpostTypeEnum getType() {
    return type;
  }

  public void setType(OutpostTypeEnum type) {
    this.type = type;
  }


  public Outpost providers(List<Integer> providers) {
    this.providers = providers;
    return this;
  }

  public Outpost addProvidersItem(Integer providersItem) {
    if (this.providers == null) {
      this.providers = new ArrayList<>();
    }
    this.providers.add(providersItem);
    return this;
  }

  /**
   * Get providers
   * @return providers
   */
  @javax.annotation.Nonnull
  public List<Integer> getProviders() {
    return providers;
  }

  public void setProviders(List<Integer> providers) {
    this.providers = providers;
  }


  /**
   * Get providersObj
   * @return providersObj
   */
  @javax.annotation.Nonnull
  public List<Provider> getProvidersObj() {
    return providersObj;
  }



  public Outpost serviceConnection(UUID serviceConnection) {
    this.serviceConnection = serviceConnection;
    return this;
  }

  /**
   * Select Service-Connection authentik should use to manage this outpost. Leave empty if authentik should not handle the deployment.
   * @return serviceConnection
   */
  @javax.annotation.Nullable
  public UUID getServiceConnection() {
    return serviceConnection;
  }

  public void setServiceConnection(UUID serviceConnection) {
    this.serviceConnection = serviceConnection;
  }


  /**
   * Get serviceConnectionObj
   * @return serviceConnectionObj
   */
  @javax.annotation.Nonnull
  public ServiceConnection getServiceConnectionObj() {
    return serviceConnectionObj;
  }



  /**
   * Get refreshIntervalS
   * @return refreshIntervalS
   */
  @javax.annotation.Nonnull
  public Integer getRefreshIntervalS() {
    return refreshIntervalS;
  }



  /**
   * Get Token identifier
   * @return tokenIdentifier
   */
  @javax.annotation.Nonnull
  public String getTokenIdentifier() {
    return tokenIdentifier;
  }



  public Outpost config(Map<String, Object> config) {
    this.config = config;
    return this;
  }

  public Outpost putConfigItem(String key, Object configItem) {
    if (this.config == null) {
      this.config = new HashMap<>();
    }
    this.config.put(key, configItem);
    return this;
  }

  /**
   * Get config
   * @return config
   */
  @javax.annotation.Nonnull
  public Map<String, Object> getConfig() {
    return config;
  }

  public void setConfig(Map<String, Object> config) {
    this.config = config;
  }


  public Outpost managed(String managed) {
    this.managed = managed;
    return this;
  }

  /**
   * Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
   * @return managed
   */
  @javax.annotation.Nullable
  public String getManaged() {
    return managed;
  }

  public void setManaged(String managed) {
    this.managed = managed;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Outpost outpost = (Outpost) o;
    return Objects.equals(this.pk, outpost.pk) &&
        Objects.equals(this.name, outpost.name) &&
        Objects.equals(this.type, outpost.type) &&
        Objects.equals(this.providers, outpost.providers) &&
        Objects.equals(this.providersObj, outpost.providersObj) &&
        Objects.equals(this.serviceConnection, outpost.serviceConnection) &&
        Objects.equals(this.serviceConnectionObj, outpost.serviceConnectionObj) &&
        Objects.equals(this.refreshIntervalS, outpost.refreshIntervalS) &&
        Objects.equals(this.tokenIdentifier, outpost.tokenIdentifier) &&
        Objects.equals(this.config, outpost.config) &&
        Objects.equals(this.managed, outpost.managed);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(pk, name, type, providers, providersObj, serviceConnection, serviceConnectionObj, refreshIntervalS, tokenIdentifier, config, managed);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Outpost {\n");
    sb.append("    pk: ").append(toIndentedString(pk)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    providers: ").append(toIndentedString(providers)).append("\n");
    sb.append("    providersObj: ").append(toIndentedString(providersObj)).append("\n");
    sb.append("    serviceConnection: ").append(toIndentedString(serviceConnection)).append("\n");
    sb.append("    serviceConnectionObj: ").append(toIndentedString(serviceConnectionObj)).append("\n");
    sb.append("    refreshIntervalS: ").append(toIndentedString(refreshIntervalS)).append("\n");
    sb.append("    tokenIdentifier: ").append(toIndentedString(tokenIdentifier)).append("\n");
    sb.append("    config: ").append(toIndentedString(config)).append("\n");
    sb.append("    managed: ").append(toIndentedString(managed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pk");
    openapiFields.add("name");
    openapiFields.add("type");
    openapiFields.add("providers");
    openapiFields.add("providers_obj");
    openapiFields.add("service_connection");
    openapiFields.add("service_connection_obj");
    openapiFields.add("refresh_interval_s");
    openapiFields.add("token_identifier");
    openapiFields.add("config");
    openapiFields.add("managed");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("pk");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("providers");
    openapiRequiredFields.add("providers_obj");
    openapiRequiredFields.add("service_connection_obj");
    openapiRequiredFields.add("refresh_interval_s");
    openapiRequiredFields.add("token_identifier");
    openapiRequiredFields.add("config");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Outpost
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Outpost.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Outpost is not found in the empty JSON string", Outpost.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Outpost.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Outpost` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Outpost.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("pk").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pk` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pk").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the required field `type`
      OutpostTypeEnum.validateJsonElement(jsonObj.get("type"));
      // ensure the required json array is present
      if (jsonObj.get("providers") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("providers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `providers` to be an array in the JSON string but got `%s`", jsonObj.get("providers").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("providers_obj").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `providers_obj` to be an array in the JSON string but got `%s`", jsonObj.get("providers_obj").toString()));
      }

      JsonArray jsonArrayprovidersObj = jsonObj.getAsJsonArray("providers_obj");
      // validate the required field `providers_obj` (array)
      for (int i = 0; i < jsonArrayprovidersObj.size(); i++) {
        Provider.validateJsonElement(jsonArrayprovidersObj.get(i));
      };
      if ((jsonObj.get("service_connection") != null && !jsonObj.get("service_connection").isJsonNull()) && !jsonObj.get("service_connection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `service_connection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("service_connection").toString()));
      }
      // validate the required field `service_connection_obj`
      ServiceConnection.validateJsonElement(jsonObj.get("service_connection_obj"));
      if (!jsonObj.get("token_identifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token_identifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token_identifier").toString()));
      }
      if ((jsonObj.get("managed") != null && !jsonObj.get("managed").isJsonNull()) && !jsonObj.get("managed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `managed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("managed").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Outpost.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Outpost' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Outpost> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Outpost.class));

       return (TypeAdapter<T>) new TypeAdapter<Outpost>() {
           @Override
           public void write(JsonWriter out, Outpost value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Outpost read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Outpost given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Outpost
   * @throws IOException if the JSON string is invalid with respect to Outpost
   */
  public static Outpost fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Outpost.class);
  }

  /**
   * Convert an instance of Outpost to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

