/*
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.6.3
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.AppleChallengeResponseRequest;
import org.openapitools.client.model.AuthenticatorDuoChallengeResponseRequest;
import org.openapitools.client.model.AuthenticatorSMSChallengeResponseRequest;
import org.openapitools.client.model.AuthenticatorStaticChallengeResponseRequest;
import org.openapitools.client.model.AuthenticatorTOTPChallengeResponseRequest;
import org.openapitools.client.model.AuthenticatorValidationChallengeResponseRequest;
import org.openapitools.client.model.AuthenticatorWebAuthnChallengeResponseRequest;
import org.openapitools.client.model.AutoSubmitChallengeResponseRequest;
import org.openapitools.client.model.CaptchaChallengeResponseRequest;
import org.openapitools.client.model.ConsentChallengeResponseRequest;
import org.openapitools.client.model.DeviceChallengeRequest;
import org.openapitools.client.model.EmailChallengeResponseRequest;
import org.openapitools.client.model.IdentificationChallengeResponseRequest;
import org.openapitools.client.model.OAuthDeviceCodeChallengeResponseRequest;
import org.openapitools.client.model.OAuthDeviceCodeFinishChallengeResponseRequest;
import org.openapitools.client.model.PasswordChallengeResponseRequest;
import org.openapitools.client.model.PlexAuthenticationChallengeResponseRequest;
import org.openapitools.client.model.PromptChallengeResponseRequest;
import org.openapitools.client.model.UserLoginChallengeResponseRequest;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-25T23:12:57.050901581-03:00[America/Argentina/Cordoba]", comments = "Generator version: 7.8.0")
public class FlowChallengeResponseRequest extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(FlowChallengeResponseRequest.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!FlowChallengeResponseRequest.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'FlowChallengeResponseRequest' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<AppleChallengeResponseRequest> adapterAppleChallengeResponseRequest = gson.getDelegateAdapter(this, TypeToken.get(AppleChallengeResponseRequest.class));
            final TypeAdapter<AuthenticatorDuoChallengeResponseRequest> adapterAuthenticatorDuoChallengeResponseRequest = gson.getDelegateAdapter(this, TypeToken.get(AuthenticatorDuoChallengeResponseRequest.class));
            final TypeAdapter<AuthenticatorSMSChallengeResponseRequest> adapterAuthenticatorSMSChallengeResponseRequest = gson.getDelegateAdapter(this, TypeToken.get(AuthenticatorSMSChallengeResponseRequest.class));
            final TypeAdapter<AuthenticatorStaticChallengeResponseRequest> adapterAuthenticatorStaticChallengeResponseRequest = gson.getDelegateAdapter(this, TypeToken.get(AuthenticatorStaticChallengeResponseRequest.class));
            final TypeAdapter<AuthenticatorTOTPChallengeResponseRequest> adapterAuthenticatorTOTPChallengeResponseRequest = gson.getDelegateAdapter(this, TypeToken.get(AuthenticatorTOTPChallengeResponseRequest.class));
            final TypeAdapter<AuthenticatorValidationChallengeResponseRequest> adapterAuthenticatorValidationChallengeResponseRequest = gson.getDelegateAdapter(this, TypeToken.get(AuthenticatorValidationChallengeResponseRequest.class));
            final TypeAdapter<AuthenticatorWebAuthnChallengeResponseRequest> adapterAuthenticatorWebAuthnChallengeResponseRequest = gson.getDelegateAdapter(this, TypeToken.get(AuthenticatorWebAuthnChallengeResponseRequest.class));
            final TypeAdapter<AutoSubmitChallengeResponseRequest> adapterAutoSubmitChallengeResponseRequest = gson.getDelegateAdapter(this, TypeToken.get(AutoSubmitChallengeResponseRequest.class));
            final TypeAdapter<CaptchaChallengeResponseRequest> adapterCaptchaChallengeResponseRequest = gson.getDelegateAdapter(this, TypeToken.get(CaptchaChallengeResponseRequest.class));
            final TypeAdapter<ConsentChallengeResponseRequest> adapterConsentChallengeResponseRequest = gson.getDelegateAdapter(this, TypeToken.get(ConsentChallengeResponseRequest.class));
            final TypeAdapter<EmailChallengeResponseRequest> adapterEmailChallengeResponseRequest = gson.getDelegateAdapter(this, TypeToken.get(EmailChallengeResponseRequest.class));
            final TypeAdapter<IdentificationChallengeResponseRequest> adapterIdentificationChallengeResponseRequest = gson.getDelegateAdapter(this, TypeToken.get(IdentificationChallengeResponseRequest.class));
            final TypeAdapter<OAuthDeviceCodeChallengeResponseRequest> adapterOAuthDeviceCodeChallengeResponseRequest = gson.getDelegateAdapter(this, TypeToken.get(OAuthDeviceCodeChallengeResponseRequest.class));
            final TypeAdapter<OAuthDeviceCodeFinishChallengeResponseRequest> adapterOAuthDeviceCodeFinishChallengeResponseRequest = gson.getDelegateAdapter(this, TypeToken.get(OAuthDeviceCodeFinishChallengeResponseRequest.class));
            final TypeAdapter<PasswordChallengeResponseRequest> adapterPasswordChallengeResponseRequest = gson.getDelegateAdapter(this, TypeToken.get(PasswordChallengeResponseRequest.class));
            final TypeAdapter<PlexAuthenticationChallengeResponseRequest> adapterPlexAuthenticationChallengeResponseRequest = gson.getDelegateAdapter(this, TypeToken.get(PlexAuthenticationChallengeResponseRequest.class));
            final TypeAdapter<PromptChallengeResponseRequest> adapterPromptChallengeResponseRequest = gson.getDelegateAdapter(this, TypeToken.get(PromptChallengeResponseRequest.class));
            final TypeAdapter<UserLoginChallengeResponseRequest> adapterUserLoginChallengeResponseRequest = gson.getDelegateAdapter(this, TypeToken.get(UserLoginChallengeResponseRequest.class));

            return (TypeAdapter<T>) new TypeAdapter<FlowChallengeResponseRequest>() {
                @Override
                public void write(JsonWriter out, FlowChallengeResponseRequest value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `AppleChallengeResponseRequest`
                    if (value.getActualInstance() instanceof AppleChallengeResponseRequest) {
                        JsonElement element = adapterAppleChallengeResponseRequest.toJsonTree((AppleChallengeResponseRequest)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AuthenticatorDuoChallengeResponseRequest`
                    if (value.getActualInstance() instanceof AuthenticatorDuoChallengeResponseRequest) {
                        JsonElement element = adapterAuthenticatorDuoChallengeResponseRequest.toJsonTree((AuthenticatorDuoChallengeResponseRequest)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AuthenticatorSMSChallengeResponseRequest`
                    if (value.getActualInstance() instanceof AuthenticatorSMSChallengeResponseRequest) {
                        JsonElement element = adapterAuthenticatorSMSChallengeResponseRequest.toJsonTree((AuthenticatorSMSChallengeResponseRequest)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AuthenticatorStaticChallengeResponseRequest`
                    if (value.getActualInstance() instanceof AuthenticatorStaticChallengeResponseRequest) {
                        JsonElement element = adapterAuthenticatorStaticChallengeResponseRequest.toJsonTree((AuthenticatorStaticChallengeResponseRequest)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AuthenticatorTOTPChallengeResponseRequest`
                    if (value.getActualInstance() instanceof AuthenticatorTOTPChallengeResponseRequest) {
                        JsonElement element = adapterAuthenticatorTOTPChallengeResponseRequest.toJsonTree((AuthenticatorTOTPChallengeResponseRequest)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AuthenticatorValidationChallengeResponseRequest`
                    if (value.getActualInstance() instanceof AuthenticatorValidationChallengeResponseRequest) {
                        JsonElement element = adapterAuthenticatorValidationChallengeResponseRequest.toJsonTree((AuthenticatorValidationChallengeResponseRequest)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AuthenticatorWebAuthnChallengeResponseRequest`
                    if (value.getActualInstance() instanceof AuthenticatorWebAuthnChallengeResponseRequest) {
                        JsonElement element = adapterAuthenticatorWebAuthnChallengeResponseRequest.toJsonTree((AuthenticatorWebAuthnChallengeResponseRequest)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AutoSubmitChallengeResponseRequest`
                    if (value.getActualInstance() instanceof AutoSubmitChallengeResponseRequest) {
                        JsonElement element = adapterAutoSubmitChallengeResponseRequest.toJsonTree((AutoSubmitChallengeResponseRequest)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `CaptchaChallengeResponseRequest`
                    if (value.getActualInstance() instanceof CaptchaChallengeResponseRequest) {
                        JsonElement element = adapterCaptchaChallengeResponseRequest.toJsonTree((CaptchaChallengeResponseRequest)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ConsentChallengeResponseRequest`
                    if (value.getActualInstance() instanceof ConsentChallengeResponseRequest) {
                        JsonElement element = adapterConsentChallengeResponseRequest.toJsonTree((ConsentChallengeResponseRequest)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `EmailChallengeResponseRequest`
                    if (value.getActualInstance() instanceof EmailChallengeResponseRequest) {
                        JsonElement element = adapterEmailChallengeResponseRequest.toJsonTree((EmailChallengeResponseRequest)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `IdentificationChallengeResponseRequest`
                    if (value.getActualInstance() instanceof IdentificationChallengeResponseRequest) {
                        JsonElement element = adapterIdentificationChallengeResponseRequest.toJsonTree((IdentificationChallengeResponseRequest)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `OAuthDeviceCodeChallengeResponseRequest`
                    if (value.getActualInstance() instanceof OAuthDeviceCodeChallengeResponseRequest) {
                        JsonElement element = adapterOAuthDeviceCodeChallengeResponseRequest.toJsonTree((OAuthDeviceCodeChallengeResponseRequest)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `OAuthDeviceCodeFinishChallengeResponseRequest`
                    if (value.getActualInstance() instanceof OAuthDeviceCodeFinishChallengeResponseRequest) {
                        JsonElement element = adapterOAuthDeviceCodeFinishChallengeResponseRequest.toJsonTree((OAuthDeviceCodeFinishChallengeResponseRequest)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `PasswordChallengeResponseRequest`
                    if (value.getActualInstance() instanceof PasswordChallengeResponseRequest) {
                        JsonElement element = adapterPasswordChallengeResponseRequest.toJsonTree((PasswordChallengeResponseRequest)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `PlexAuthenticationChallengeResponseRequest`
                    if (value.getActualInstance() instanceof PlexAuthenticationChallengeResponseRequest) {
                        JsonElement element = adapterPlexAuthenticationChallengeResponseRequest.toJsonTree((PlexAuthenticationChallengeResponseRequest)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `PromptChallengeResponseRequest`
                    if (value.getActualInstance() instanceof PromptChallengeResponseRequest) {
                        JsonElement element = adapterPromptChallengeResponseRequest.toJsonTree((PromptChallengeResponseRequest)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `UserLoginChallengeResponseRequest`
                    if (value.getActualInstance() instanceof UserLoginChallengeResponseRequest) {
                        JsonElement element = adapterUserLoginChallengeResponseRequest.toJsonTree((UserLoginChallengeResponseRequest)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: AppleChallengeResponseRequest, AuthenticatorDuoChallengeResponseRequest, AuthenticatorSMSChallengeResponseRequest, AuthenticatorStaticChallengeResponseRequest, AuthenticatorTOTPChallengeResponseRequest, AuthenticatorValidationChallengeResponseRequest, AuthenticatorWebAuthnChallengeResponseRequest, AutoSubmitChallengeResponseRequest, CaptchaChallengeResponseRequest, ConsentChallengeResponseRequest, EmailChallengeResponseRequest, IdentificationChallengeResponseRequest, OAuthDeviceCodeChallengeResponseRequest, OAuthDeviceCodeFinishChallengeResponseRequest, PasswordChallengeResponseRequest, PlexAuthenticationChallengeResponseRequest, PromptChallengeResponseRequest, UserLoginChallengeResponseRequest");
                }

                @Override
                public FlowChallengeResponseRequest read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize AppleChallengeResponseRequest
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AppleChallengeResponseRequest.validateJsonElement(jsonElement);
                        actualAdapter = adapterAppleChallengeResponseRequest;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AppleChallengeResponseRequest'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AppleChallengeResponseRequest failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AppleChallengeResponseRequest'", e);
                    }
                    // deserialize AuthenticatorDuoChallengeResponseRequest
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AuthenticatorDuoChallengeResponseRequest.validateJsonElement(jsonElement);
                        actualAdapter = adapterAuthenticatorDuoChallengeResponseRequest;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AuthenticatorDuoChallengeResponseRequest'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AuthenticatorDuoChallengeResponseRequest failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AuthenticatorDuoChallengeResponseRequest'", e);
                    }
                    // deserialize AuthenticatorSMSChallengeResponseRequest
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AuthenticatorSMSChallengeResponseRequest.validateJsonElement(jsonElement);
                        actualAdapter = adapterAuthenticatorSMSChallengeResponseRequest;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AuthenticatorSMSChallengeResponseRequest'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AuthenticatorSMSChallengeResponseRequest failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AuthenticatorSMSChallengeResponseRequest'", e);
                    }
                    // deserialize AuthenticatorStaticChallengeResponseRequest
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AuthenticatorStaticChallengeResponseRequest.validateJsonElement(jsonElement);
                        actualAdapter = adapterAuthenticatorStaticChallengeResponseRequest;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AuthenticatorStaticChallengeResponseRequest'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AuthenticatorStaticChallengeResponseRequest failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AuthenticatorStaticChallengeResponseRequest'", e);
                    }
                    // deserialize AuthenticatorTOTPChallengeResponseRequest
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AuthenticatorTOTPChallengeResponseRequest.validateJsonElement(jsonElement);
                        actualAdapter = adapterAuthenticatorTOTPChallengeResponseRequest;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AuthenticatorTOTPChallengeResponseRequest'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AuthenticatorTOTPChallengeResponseRequest failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AuthenticatorTOTPChallengeResponseRequest'", e);
                    }
                    // deserialize AuthenticatorValidationChallengeResponseRequest
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AuthenticatorValidationChallengeResponseRequest.validateJsonElement(jsonElement);
                        actualAdapter = adapterAuthenticatorValidationChallengeResponseRequest;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AuthenticatorValidationChallengeResponseRequest'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AuthenticatorValidationChallengeResponseRequest failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AuthenticatorValidationChallengeResponseRequest'", e);
                    }
                    // deserialize AuthenticatorWebAuthnChallengeResponseRequest
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AuthenticatorWebAuthnChallengeResponseRequest.validateJsonElement(jsonElement);
                        actualAdapter = adapterAuthenticatorWebAuthnChallengeResponseRequest;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AuthenticatorWebAuthnChallengeResponseRequest'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AuthenticatorWebAuthnChallengeResponseRequest failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AuthenticatorWebAuthnChallengeResponseRequest'", e);
                    }
                    // deserialize AutoSubmitChallengeResponseRequest
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AutoSubmitChallengeResponseRequest.validateJsonElement(jsonElement);
                        actualAdapter = adapterAutoSubmitChallengeResponseRequest;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AutoSubmitChallengeResponseRequest'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AutoSubmitChallengeResponseRequest failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AutoSubmitChallengeResponseRequest'", e);
                    }
                    // deserialize CaptchaChallengeResponseRequest
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CaptchaChallengeResponseRequest.validateJsonElement(jsonElement);
                        actualAdapter = adapterCaptchaChallengeResponseRequest;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CaptchaChallengeResponseRequest'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CaptchaChallengeResponseRequest failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CaptchaChallengeResponseRequest'", e);
                    }
                    // deserialize ConsentChallengeResponseRequest
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ConsentChallengeResponseRequest.validateJsonElement(jsonElement);
                        actualAdapter = adapterConsentChallengeResponseRequest;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ConsentChallengeResponseRequest'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ConsentChallengeResponseRequest failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ConsentChallengeResponseRequest'", e);
                    }
                    // deserialize EmailChallengeResponseRequest
                    try {
                        // validate the JSON object to see if any exception is thrown
                        EmailChallengeResponseRequest.validateJsonElement(jsonElement);
                        actualAdapter = adapterEmailChallengeResponseRequest;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'EmailChallengeResponseRequest'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for EmailChallengeResponseRequest failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'EmailChallengeResponseRequest'", e);
                    }
                    // deserialize IdentificationChallengeResponseRequest
                    try {
                        // validate the JSON object to see if any exception is thrown
                        IdentificationChallengeResponseRequest.validateJsonElement(jsonElement);
                        actualAdapter = adapterIdentificationChallengeResponseRequest;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'IdentificationChallengeResponseRequest'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for IdentificationChallengeResponseRequest failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'IdentificationChallengeResponseRequest'", e);
                    }
                    // deserialize OAuthDeviceCodeChallengeResponseRequest
                    try {
                        // validate the JSON object to see if any exception is thrown
                        OAuthDeviceCodeChallengeResponseRequest.validateJsonElement(jsonElement);
                        actualAdapter = adapterOAuthDeviceCodeChallengeResponseRequest;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'OAuthDeviceCodeChallengeResponseRequest'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for OAuthDeviceCodeChallengeResponseRequest failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'OAuthDeviceCodeChallengeResponseRequest'", e);
                    }
                    // deserialize OAuthDeviceCodeFinishChallengeResponseRequest
                    try {
                        // validate the JSON object to see if any exception is thrown
                        OAuthDeviceCodeFinishChallengeResponseRequest.validateJsonElement(jsonElement);
                        actualAdapter = adapterOAuthDeviceCodeFinishChallengeResponseRequest;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'OAuthDeviceCodeFinishChallengeResponseRequest'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for OAuthDeviceCodeFinishChallengeResponseRequest failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'OAuthDeviceCodeFinishChallengeResponseRequest'", e);
                    }
                    // deserialize PasswordChallengeResponseRequest
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PasswordChallengeResponseRequest.validateJsonElement(jsonElement);
                        actualAdapter = adapterPasswordChallengeResponseRequest;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'PasswordChallengeResponseRequest'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PasswordChallengeResponseRequest failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PasswordChallengeResponseRequest'", e);
                    }
                    // deserialize PlexAuthenticationChallengeResponseRequest
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PlexAuthenticationChallengeResponseRequest.validateJsonElement(jsonElement);
                        actualAdapter = adapterPlexAuthenticationChallengeResponseRequest;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'PlexAuthenticationChallengeResponseRequest'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PlexAuthenticationChallengeResponseRequest failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PlexAuthenticationChallengeResponseRequest'", e);
                    }
                    // deserialize PromptChallengeResponseRequest
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PromptChallengeResponseRequest.validateJsonElement(jsonElement);
                        actualAdapter = adapterPromptChallengeResponseRequest;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'PromptChallengeResponseRequest'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PromptChallengeResponseRequest failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PromptChallengeResponseRequest'", e);
                    }
                    // deserialize UserLoginChallengeResponseRequest
                    try {
                        // validate the JSON object to see if any exception is thrown
                        UserLoginChallengeResponseRequest.validateJsonElement(jsonElement);
                        actualAdapter = adapterUserLoginChallengeResponseRequest;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'UserLoginChallengeResponseRequest'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for UserLoginChallengeResponseRequest failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'UserLoginChallengeResponseRequest'", e);
                    }

                    if (match == 1) {
                        FlowChallengeResponseRequest ret = new FlowChallengeResponseRequest();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for FlowChallengeResponseRequest: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public FlowChallengeResponseRequest() {
        super("oneOf", Boolean.FALSE);
    }

    public FlowChallengeResponseRequest(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("AppleChallengeResponseRequest", AppleChallengeResponseRequest.class);
        schemas.put("AuthenticatorDuoChallengeResponseRequest", AuthenticatorDuoChallengeResponseRequest.class);
        schemas.put("AuthenticatorSMSChallengeResponseRequest", AuthenticatorSMSChallengeResponseRequest.class);
        schemas.put("AuthenticatorStaticChallengeResponseRequest", AuthenticatorStaticChallengeResponseRequest.class);
        schemas.put("AuthenticatorTOTPChallengeResponseRequest", AuthenticatorTOTPChallengeResponseRequest.class);
        schemas.put("AuthenticatorValidationChallengeResponseRequest", AuthenticatorValidationChallengeResponseRequest.class);
        schemas.put("AuthenticatorWebAuthnChallengeResponseRequest", AuthenticatorWebAuthnChallengeResponseRequest.class);
        schemas.put("AutoSubmitChallengeResponseRequest", AutoSubmitChallengeResponseRequest.class);
        schemas.put("CaptchaChallengeResponseRequest", CaptchaChallengeResponseRequest.class);
        schemas.put("ConsentChallengeResponseRequest", ConsentChallengeResponseRequest.class);
        schemas.put("EmailChallengeResponseRequest", EmailChallengeResponseRequest.class);
        schemas.put("IdentificationChallengeResponseRequest", IdentificationChallengeResponseRequest.class);
        schemas.put("OAuthDeviceCodeChallengeResponseRequest", OAuthDeviceCodeChallengeResponseRequest.class);
        schemas.put("OAuthDeviceCodeFinishChallengeResponseRequest", OAuthDeviceCodeFinishChallengeResponseRequest.class);
        schemas.put("PasswordChallengeResponseRequest", PasswordChallengeResponseRequest.class);
        schemas.put("PlexAuthenticationChallengeResponseRequest", PlexAuthenticationChallengeResponseRequest.class);
        schemas.put("PromptChallengeResponseRequest", PromptChallengeResponseRequest.class);
        schemas.put("UserLoginChallengeResponseRequest", UserLoginChallengeResponseRequest.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return FlowChallengeResponseRequest.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * AppleChallengeResponseRequest, AuthenticatorDuoChallengeResponseRequest, AuthenticatorSMSChallengeResponseRequest, AuthenticatorStaticChallengeResponseRequest, AuthenticatorTOTPChallengeResponseRequest, AuthenticatorValidationChallengeResponseRequest, AuthenticatorWebAuthnChallengeResponseRequest, AutoSubmitChallengeResponseRequest, CaptchaChallengeResponseRequest, ConsentChallengeResponseRequest, EmailChallengeResponseRequest, IdentificationChallengeResponseRequest, OAuthDeviceCodeChallengeResponseRequest, OAuthDeviceCodeFinishChallengeResponseRequest, PasswordChallengeResponseRequest, PlexAuthenticationChallengeResponseRequest, PromptChallengeResponseRequest, UserLoginChallengeResponseRequest
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof AppleChallengeResponseRequest) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AuthenticatorDuoChallengeResponseRequest) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AuthenticatorSMSChallengeResponseRequest) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AuthenticatorStaticChallengeResponseRequest) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AuthenticatorTOTPChallengeResponseRequest) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AuthenticatorValidationChallengeResponseRequest) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AuthenticatorWebAuthnChallengeResponseRequest) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AutoSubmitChallengeResponseRequest) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CaptchaChallengeResponseRequest) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ConsentChallengeResponseRequest) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EmailChallengeResponseRequest) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof IdentificationChallengeResponseRequest) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof OAuthDeviceCodeChallengeResponseRequest) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof OAuthDeviceCodeFinishChallengeResponseRequest) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PasswordChallengeResponseRequest) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PlexAuthenticationChallengeResponseRequest) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PromptChallengeResponseRequest) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof UserLoginChallengeResponseRequest) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be AppleChallengeResponseRequest, AuthenticatorDuoChallengeResponseRequest, AuthenticatorSMSChallengeResponseRequest, AuthenticatorStaticChallengeResponseRequest, AuthenticatorTOTPChallengeResponseRequest, AuthenticatorValidationChallengeResponseRequest, AuthenticatorWebAuthnChallengeResponseRequest, AutoSubmitChallengeResponseRequest, CaptchaChallengeResponseRequest, ConsentChallengeResponseRequest, EmailChallengeResponseRequest, IdentificationChallengeResponseRequest, OAuthDeviceCodeChallengeResponseRequest, OAuthDeviceCodeFinishChallengeResponseRequest, PasswordChallengeResponseRequest, PlexAuthenticationChallengeResponseRequest, PromptChallengeResponseRequest, UserLoginChallengeResponseRequest");
    }

    /**
     * Get the actual instance, which can be the following:
     * AppleChallengeResponseRequest, AuthenticatorDuoChallengeResponseRequest, AuthenticatorSMSChallengeResponseRequest, AuthenticatorStaticChallengeResponseRequest, AuthenticatorTOTPChallengeResponseRequest, AuthenticatorValidationChallengeResponseRequest, AuthenticatorWebAuthnChallengeResponseRequest, AutoSubmitChallengeResponseRequest, CaptchaChallengeResponseRequest, ConsentChallengeResponseRequest, EmailChallengeResponseRequest, IdentificationChallengeResponseRequest, OAuthDeviceCodeChallengeResponseRequest, OAuthDeviceCodeFinishChallengeResponseRequest, PasswordChallengeResponseRequest, PlexAuthenticationChallengeResponseRequest, PromptChallengeResponseRequest, UserLoginChallengeResponseRequest
     *
     * @return The actual instance (AppleChallengeResponseRequest, AuthenticatorDuoChallengeResponseRequest, AuthenticatorSMSChallengeResponseRequest, AuthenticatorStaticChallengeResponseRequest, AuthenticatorTOTPChallengeResponseRequest, AuthenticatorValidationChallengeResponseRequest, AuthenticatorWebAuthnChallengeResponseRequest, AutoSubmitChallengeResponseRequest, CaptchaChallengeResponseRequest, ConsentChallengeResponseRequest, EmailChallengeResponseRequest, IdentificationChallengeResponseRequest, OAuthDeviceCodeChallengeResponseRequest, OAuthDeviceCodeFinishChallengeResponseRequest, PasswordChallengeResponseRequest, PlexAuthenticationChallengeResponseRequest, PromptChallengeResponseRequest, UserLoginChallengeResponseRequest)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `AppleChallengeResponseRequest`. If the actual instance is not `AppleChallengeResponseRequest`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AppleChallengeResponseRequest`
     * @throws ClassCastException if the instance is not `AppleChallengeResponseRequest`
     */
    public AppleChallengeResponseRequest getAppleChallengeResponseRequest() throws ClassCastException {
        return (AppleChallengeResponseRequest)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AuthenticatorDuoChallengeResponseRequest`. If the actual instance is not `AuthenticatorDuoChallengeResponseRequest`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AuthenticatorDuoChallengeResponseRequest`
     * @throws ClassCastException if the instance is not `AuthenticatorDuoChallengeResponseRequest`
     */
    public AuthenticatorDuoChallengeResponseRequest getAuthenticatorDuoChallengeResponseRequest() throws ClassCastException {
        return (AuthenticatorDuoChallengeResponseRequest)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AuthenticatorSMSChallengeResponseRequest`. If the actual instance is not `AuthenticatorSMSChallengeResponseRequest`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AuthenticatorSMSChallengeResponseRequest`
     * @throws ClassCastException if the instance is not `AuthenticatorSMSChallengeResponseRequest`
     */
    public AuthenticatorSMSChallengeResponseRequest getAuthenticatorSMSChallengeResponseRequest() throws ClassCastException {
        return (AuthenticatorSMSChallengeResponseRequest)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AuthenticatorStaticChallengeResponseRequest`. If the actual instance is not `AuthenticatorStaticChallengeResponseRequest`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AuthenticatorStaticChallengeResponseRequest`
     * @throws ClassCastException if the instance is not `AuthenticatorStaticChallengeResponseRequest`
     */
    public AuthenticatorStaticChallengeResponseRequest getAuthenticatorStaticChallengeResponseRequest() throws ClassCastException {
        return (AuthenticatorStaticChallengeResponseRequest)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AuthenticatorTOTPChallengeResponseRequest`. If the actual instance is not `AuthenticatorTOTPChallengeResponseRequest`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AuthenticatorTOTPChallengeResponseRequest`
     * @throws ClassCastException if the instance is not `AuthenticatorTOTPChallengeResponseRequest`
     */
    public AuthenticatorTOTPChallengeResponseRequest getAuthenticatorTOTPChallengeResponseRequest() throws ClassCastException {
        return (AuthenticatorTOTPChallengeResponseRequest)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AuthenticatorValidationChallengeResponseRequest`. If the actual instance is not `AuthenticatorValidationChallengeResponseRequest`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AuthenticatorValidationChallengeResponseRequest`
     * @throws ClassCastException if the instance is not `AuthenticatorValidationChallengeResponseRequest`
     */
    public AuthenticatorValidationChallengeResponseRequest getAuthenticatorValidationChallengeResponseRequest() throws ClassCastException {
        return (AuthenticatorValidationChallengeResponseRequest)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AuthenticatorWebAuthnChallengeResponseRequest`. If the actual instance is not `AuthenticatorWebAuthnChallengeResponseRequest`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AuthenticatorWebAuthnChallengeResponseRequest`
     * @throws ClassCastException if the instance is not `AuthenticatorWebAuthnChallengeResponseRequest`
     */
    public AuthenticatorWebAuthnChallengeResponseRequest getAuthenticatorWebAuthnChallengeResponseRequest() throws ClassCastException {
        return (AuthenticatorWebAuthnChallengeResponseRequest)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AutoSubmitChallengeResponseRequest`. If the actual instance is not `AutoSubmitChallengeResponseRequest`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AutoSubmitChallengeResponseRequest`
     * @throws ClassCastException if the instance is not `AutoSubmitChallengeResponseRequest`
     */
    public AutoSubmitChallengeResponseRequest getAutoSubmitChallengeResponseRequest() throws ClassCastException {
        return (AutoSubmitChallengeResponseRequest)super.getActualInstance();
    }
    /**
     * Get the actual instance of `CaptchaChallengeResponseRequest`. If the actual instance is not `CaptchaChallengeResponseRequest`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CaptchaChallengeResponseRequest`
     * @throws ClassCastException if the instance is not `CaptchaChallengeResponseRequest`
     */
    public CaptchaChallengeResponseRequest getCaptchaChallengeResponseRequest() throws ClassCastException {
        return (CaptchaChallengeResponseRequest)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ConsentChallengeResponseRequest`. If the actual instance is not `ConsentChallengeResponseRequest`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ConsentChallengeResponseRequest`
     * @throws ClassCastException if the instance is not `ConsentChallengeResponseRequest`
     */
    public ConsentChallengeResponseRequest getConsentChallengeResponseRequest() throws ClassCastException {
        return (ConsentChallengeResponseRequest)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EmailChallengeResponseRequest`. If the actual instance is not `EmailChallengeResponseRequest`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EmailChallengeResponseRequest`
     * @throws ClassCastException if the instance is not `EmailChallengeResponseRequest`
     */
    public EmailChallengeResponseRequest getEmailChallengeResponseRequest() throws ClassCastException {
        return (EmailChallengeResponseRequest)super.getActualInstance();
    }
    /**
     * Get the actual instance of `IdentificationChallengeResponseRequest`. If the actual instance is not `IdentificationChallengeResponseRequest`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `IdentificationChallengeResponseRequest`
     * @throws ClassCastException if the instance is not `IdentificationChallengeResponseRequest`
     */
    public IdentificationChallengeResponseRequest getIdentificationChallengeResponseRequest() throws ClassCastException {
        return (IdentificationChallengeResponseRequest)super.getActualInstance();
    }
    /**
     * Get the actual instance of `OAuthDeviceCodeChallengeResponseRequest`. If the actual instance is not `OAuthDeviceCodeChallengeResponseRequest`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `OAuthDeviceCodeChallengeResponseRequest`
     * @throws ClassCastException if the instance is not `OAuthDeviceCodeChallengeResponseRequest`
     */
    public OAuthDeviceCodeChallengeResponseRequest getOAuthDeviceCodeChallengeResponseRequest() throws ClassCastException {
        return (OAuthDeviceCodeChallengeResponseRequest)super.getActualInstance();
    }
    /**
     * Get the actual instance of `OAuthDeviceCodeFinishChallengeResponseRequest`. If the actual instance is not `OAuthDeviceCodeFinishChallengeResponseRequest`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `OAuthDeviceCodeFinishChallengeResponseRequest`
     * @throws ClassCastException if the instance is not `OAuthDeviceCodeFinishChallengeResponseRequest`
     */
    public OAuthDeviceCodeFinishChallengeResponseRequest getOAuthDeviceCodeFinishChallengeResponseRequest() throws ClassCastException {
        return (OAuthDeviceCodeFinishChallengeResponseRequest)super.getActualInstance();
    }
    /**
     * Get the actual instance of `PasswordChallengeResponseRequest`. If the actual instance is not `PasswordChallengeResponseRequest`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PasswordChallengeResponseRequest`
     * @throws ClassCastException if the instance is not `PasswordChallengeResponseRequest`
     */
    public PasswordChallengeResponseRequest getPasswordChallengeResponseRequest() throws ClassCastException {
        return (PasswordChallengeResponseRequest)super.getActualInstance();
    }
    /**
     * Get the actual instance of `PlexAuthenticationChallengeResponseRequest`. If the actual instance is not `PlexAuthenticationChallengeResponseRequest`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PlexAuthenticationChallengeResponseRequest`
     * @throws ClassCastException if the instance is not `PlexAuthenticationChallengeResponseRequest`
     */
    public PlexAuthenticationChallengeResponseRequest getPlexAuthenticationChallengeResponseRequest() throws ClassCastException {
        return (PlexAuthenticationChallengeResponseRequest)super.getActualInstance();
    }
    /**
     * Get the actual instance of `PromptChallengeResponseRequest`. If the actual instance is not `PromptChallengeResponseRequest`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PromptChallengeResponseRequest`
     * @throws ClassCastException if the instance is not `PromptChallengeResponseRequest`
     */
    public PromptChallengeResponseRequest getPromptChallengeResponseRequest() throws ClassCastException {
        return (PromptChallengeResponseRequest)super.getActualInstance();
    }
    /**
     * Get the actual instance of `UserLoginChallengeResponseRequest`. If the actual instance is not `UserLoginChallengeResponseRequest`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `UserLoginChallengeResponseRequest`
     * @throws ClassCastException if the instance is not `UserLoginChallengeResponseRequest`
     */
    public UserLoginChallengeResponseRequest getUserLoginChallengeResponseRequest() throws ClassCastException {
        return (UserLoginChallengeResponseRequest)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to FlowChallengeResponseRequest
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with AppleChallengeResponseRequest
        try {
            AppleChallengeResponseRequest.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AppleChallengeResponseRequest failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AuthenticatorDuoChallengeResponseRequest
        try {
            AuthenticatorDuoChallengeResponseRequest.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AuthenticatorDuoChallengeResponseRequest failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AuthenticatorSMSChallengeResponseRequest
        try {
            AuthenticatorSMSChallengeResponseRequest.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AuthenticatorSMSChallengeResponseRequest failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AuthenticatorStaticChallengeResponseRequest
        try {
            AuthenticatorStaticChallengeResponseRequest.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AuthenticatorStaticChallengeResponseRequest failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AuthenticatorTOTPChallengeResponseRequest
        try {
            AuthenticatorTOTPChallengeResponseRequest.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AuthenticatorTOTPChallengeResponseRequest failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AuthenticatorValidationChallengeResponseRequest
        try {
            AuthenticatorValidationChallengeResponseRequest.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AuthenticatorValidationChallengeResponseRequest failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AuthenticatorWebAuthnChallengeResponseRequest
        try {
            AuthenticatorWebAuthnChallengeResponseRequest.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AuthenticatorWebAuthnChallengeResponseRequest failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AutoSubmitChallengeResponseRequest
        try {
            AutoSubmitChallengeResponseRequest.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AutoSubmitChallengeResponseRequest failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with CaptchaChallengeResponseRequest
        try {
            CaptchaChallengeResponseRequest.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CaptchaChallengeResponseRequest failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ConsentChallengeResponseRequest
        try {
            ConsentChallengeResponseRequest.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ConsentChallengeResponseRequest failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with EmailChallengeResponseRequest
        try {
            EmailChallengeResponseRequest.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for EmailChallengeResponseRequest failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with IdentificationChallengeResponseRequest
        try {
            IdentificationChallengeResponseRequest.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for IdentificationChallengeResponseRequest failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with OAuthDeviceCodeChallengeResponseRequest
        try {
            OAuthDeviceCodeChallengeResponseRequest.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for OAuthDeviceCodeChallengeResponseRequest failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with OAuthDeviceCodeFinishChallengeResponseRequest
        try {
            OAuthDeviceCodeFinishChallengeResponseRequest.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for OAuthDeviceCodeFinishChallengeResponseRequest failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with PasswordChallengeResponseRequest
        try {
            PasswordChallengeResponseRequest.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PasswordChallengeResponseRequest failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with PlexAuthenticationChallengeResponseRequest
        try {
            PlexAuthenticationChallengeResponseRequest.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PlexAuthenticationChallengeResponseRequest failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with PromptChallengeResponseRequest
        try {
            PromptChallengeResponseRequest.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PromptChallengeResponseRequest failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with UserLoginChallengeResponseRequest
        try {
            UserLoginChallengeResponseRequest.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for UserLoginChallengeResponseRequest failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for FlowChallengeResponseRequest with oneOf schemas: AppleChallengeResponseRequest, AuthenticatorDuoChallengeResponseRequest, AuthenticatorSMSChallengeResponseRequest, AuthenticatorStaticChallengeResponseRequest, AuthenticatorTOTPChallengeResponseRequest, AuthenticatorValidationChallengeResponseRequest, AuthenticatorWebAuthnChallengeResponseRequest, AutoSubmitChallengeResponseRequest, CaptchaChallengeResponseRequest, ConsentChallengeResponseRequest, EmailChallengeResponseRequest, IdentificationChallengeResponseRequest, OAuthDeviceCodeChallengeResponseRequest, OAuthDeviceCodeFinishChallengeResponseRequest, PasswordChallengeResponseRequest, PlexAuthenticationChallengeResponseRequest, PromptChallengeResponseRequest, UserLoginChallengeResponseRequest. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of FlowChallengeResponseRequest given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of FlowChallengeResponseRequest
     * @throws IOException if the JSON string is invalid with respect to FlowChallengeResponseRequest
     */
    public static FlowChallengeResponseRequest fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, FlowChallengeResponseRequest.class);
    }

    /**
     * Convert an instance of FlowChallengeResponseRequest to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

