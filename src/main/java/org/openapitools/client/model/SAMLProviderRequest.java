/*
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.6.3
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.DigestAlgorithmEnum;
import org.openapitools.client.model.SignatureAlgorithmEnum;
import org.openapitools.client.model.SpBindingEnum;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SAMLProvider Serializer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-25T23:12:57.050901581-03:00[America/Argentina/Cordoba]", comments = "Generator version: 7.8.0")
public class SAMLProviderRequest {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_AUTHENTICATION_FLOW = "authentication_flow";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_FLOW)
  private UUID authenticationFlow;

  public static final String SERIALIZED_NAME_AUTHORIZATION_FLOW = "authorization_flow";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_FLOW)
  private UUID authorizationFlow;

  public static final String SERIALIZED_NAME_PROPERTY_MAPPINGS = "property_mappings";
  @SerializedName(SERIALIZED_NAME_PROPERTY_MAPPINGS)
  private List<UUID> propertyMappings = new ArrayList<>();

  public static final String SERIALIZED_NAME_ACS_URL = "acs_url";
  @SerializedName(SERIALIZED_NAME_ACS_URL)
  private URI acsUrl;

  public static final String SERIALIZED_NAME_AUDIENCE = "audience";
  @SerializedName(SERIALIZED_NAME_AUDIENCE)
  private String audience;

  public static final String SERIALIZED_NAME_ISSUER = "issuer";
  @SerializedName(SERIALIZED_NAME_ISSUER)
  private String issuer;

  public static final String SERIALIZED_NAME_ASSERTION_VALID_NOT_BEFORE = "assertion_valid_not_before";
  @SerializedName(SERIALIZED_NAME_ASSERTION_VALID_NOT_BEFORE)
  private String assertionValidNotBefore;

  public static final String SERIALIZED_NAME_ASSERTION_VALID_NOT_ON_OR_AFTER = "assertion_valid_not_on_or_after";
  @SerializedName(SERIALIZED_NAME_ASSERTION_VALID_NOT_ON_OR_AFTER)
  private String assertionValidNotOnOrAfter;

  public static final String SERIALIZED_NAME_SESSION_VALID_NOT_ON_OR_AFTER = "session_valid_not_on_or_after";
  @SerializedName(SERIALIZED_NAME_SESSION_VALID_NOT_ON_OR_AFTER)
  private String sessionValidNotOnOrAfter;

  public static final String SERIALIZED_NAME_NAME_ID_MAPPING = "name_id_mapping";
  @SerializedName(SERIALIZED_NAME_NAME_ID_MAPPING)
  private UUID nameIdMapping;

  public static final String SERIALIZED_NAME_DIGEST_ALGORITHM = "digest_algorithm";
  @SerializedName(SERIALIZED_NAME_DIGEST_ALGORITHM)
  private DigestAlgorithmEnum digestAlgorithm;

  public static final String SERIALIZED_NAME_SIGNATURE_ALGORITHM = "signature_algorithm";
  @SerializedName(SERIALIZED_NAME_SIGNATURE_ALGORITHM)
  private SignatureAlgorithmEnum signatureAlgorithm;

  public static final String SERIALIZED_NAME_SIGNING_KP = "signing_kp";
  @SerializedName(SERIALIZED_NAME_SIGNING_KP)
  private UUID signingKp;

  public static final String SERIALIZED_NAME_VERIFICATION_KP = "verification_kp";
  @SerializedName(SERIALIZED_NAME_VERIFICATION_KP)
  private UUID verificationKp;

  public static final String SERIALIZED_NAME_SP_BINDING = "sp_binding";
  @SerializedName(SERIALIZED_NAME_SP_BINDING)
  private SpBindingEnum spBinding;

  public static final String SERIALIZED_NAME_DEFAULT_RELAY_STATE = "default_relay_state";
  @SerializedName(SERIALIZED_NAME_DEFAULT_RELAY_STATE)
  private String defaultRelayState;

  public SAMLProviderRequest() {
  }

  public SAMLProviderRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public SAMLProviderRequest authenticationFlow(UUID authenticationFlow) {
    this.authenticationFlow = authenticationFlow;
    return this;
  }

  /**
   * Flow used for authentication when the associated application is accessed by an un-authenticated user.
   * @return authenticationFlow
   */
  @javax.annotation.Nullable
  public UUID getAuthenticationFlow() {
    return authenticationFlow;
  }

  public void setAuthenticationFlow(UUID authenticationFlow) {
    this.authenticationFlow = authenticationFlow;
  }


  public SAMLProviderRequest authorizationFlow(UUID authorizationFlow) {
    this.authorizationFlow = authorizationFlow;
    return this;
  }

  /**
   * Flow used when authorizing this provider.
   * @return authorizationFlow
   */
  @javax.annotation.Nonnull
  public UUID getAuthorizationFlow() {
    return authorizationFlow;
  }

  public void setAuthorizationFlow(UUID authorizationFlow) {
    this.authorizationFlow = authorizationFlow;
  }


  public SAMLProviderRequest propertyMappings(List<UUID> propertyMappings) {
    this.propertyMappings = propertyMappings;
    return this;
  }

  public SAMLProviderRequest addPropertyMappingsItem(UUID propertyMappingsItem) {
    if (this.propertyMappings == null) {
      this.propertyMappings = new ArrayList<>();
    }
    this.propertyMappings.add(propertyMappingsItem);
    return this;
  }

  /**
   * Get propertyMappings
   * @return propertyMappings
   */
  @javax.annotation.Nullable
  public List<UUID> getPropertyMappings() {
    return propertyMappings;
  }

  public void setPropertyMappings(List<UUID> propertyMappings) {
    this.propertyMappings = propertyMappings;
  }


  public SAMLProviderRequest acsUrl(URI acsUrl) {
    this.acsUrl = acsUrl;
    return this;
  }

  /**
   * Get acsUrl
   * @return acsUrl
   */
  @javax.annotation.Nonnull
  public URI getAcsUrl() {
    return acsUrl;
  }

  public void setAcsUrl(URI acsUrl) {
    this.acsUrl = acsUrl;
  }


  public SAMLProviderRequest audience(String audience) {
    this.audience = audience;
    return this;
  }

  /**
   * Value of the audience restriction field of the assertion. When left empty, no audience restriction will be added.
   * @return audience
   */
  @javax.annotation.Nullable
  public String getAudience() {
    return audience;
  }

  public void setAudience(String audience) {
    this.audience = audience;
  }


  public SAMLProviderRequest issuer(String issuer) {
    this.issuer = issuer;
    return this;
  }

  /**
   * Also known as EntityID
   * @return issuer
   */
  @javax.annotation.Nullable
  public String getIssuer() {
    return issuer;
  }

  public void setIssuer(String issuer) {
    this.issuer = issuer;
  }


  public SAMLProviderRequest assertionValidNotBefore(String assertionValidNotBefore) {
    this.assertionValidNotBefore = assertionValidNotBefore;
    return this;
  }

  /**
   * Assertion valid not before current time + this value (Format: hours&#x3D;-1;minutes&#x3D;-2;seconds&#x3D;-3).
   * @return assertionValidNotBefore
   */
  @javax.annotation.Nullable
  public String getAssertionValidNotBefore() {
    return assertionValidNotBefore;
  }

  public void setAssertionValidNotBefore(String assertionValidNotBefore) {
    this.assertionValidNotBefore = assertionValidNotBefore;
  }


  public SAMLProviderRequest assertionValidNotOnOrAfter(String assertionValidNotOnOrAfter) {
    this.assertionValidNotOnOrAfter = assertionValidNotOnOrAfter;
    return this;
  }

  /**
   * Assertion not valid on or after current time + this value (Format: hours&#x3D;1;minutes&#x3D;2;seconds&#x3D;3).
   * @return assertionValidNotOnOrAfter
   */
  @javax.annotation.Nullable
  public String getAssertionValidNotOnOrAfter() {
    return assertionValidNotOnOrAfter;
  }

  public void setAssertionValidNotOnOrAfter(String assertionValidNotOnOrAfter) {
    this.assertionValidNotOnOrAfter = assertionValidNotOnOrAfter;
  }


  public SAMLProviderRequest sessionValidNotOnOrAfter(String sessionValidNotOnOrAfter) {
    this.sessionValidNotOnOrAfter = sessionValidNotOnOrAfter;
    return this;
  }

  /**
   * Session not valid on or after current time + this value (Format: hours&#x3D;1;minutes&#x3D;2;seconds&#x3D;3).
   * @return sessionValidNotOnOrAfter
   */
  @javax.annotation.Nullable
  public String getSessionValidNotOnOrAfter() {
    return sessionValidNotOnOrAfter;
  }

  public void setSessionValidNotOnOrAfter(String sessionValidNotOnOrAfter) {
    this.sessionValidNotOnOrAfter = sessionValidNotOnOrAfter;
  }


  public SAMLProviderRequest nameIdMapping(UUID nameIdMapping) {
    this.nameIdMapping = nameIdMapping;
    return this;
  }

  /**
   * Configure how the NameID value will be created. When left empty, the NameIDPolicy of the incoming request will be considered
   * @return nameIdMapping
   */
  @javax.annotation.Nullable
  public UUID getNameIdMapping() {
    return nameIdMapping;
  }

  public void setNameIdMapping(UUID nameIdMapping) {
    this.nameIdMapping = nameIdMapping;
  }


  public SAMLProviderRequest digestAlgorithm(DigestAlgorithmEnum digestAlgorithm) {
    this.digestAlgorithm = digestAlgorithm;
    return this;
  }

  /**
   * Get digestAlgorithm
   * @return digestAlgorithm
   */
  @javax.annotation.Nullable
  public DigestAlgorithmEnum getDigestAlgorithm() {
    return digestAlgorithm;
  }

  public void setDigestAlgorithm(DigestAlgorithmEnum digestAlgorithm) {
    this.digestAlgorithm = digestAlgorithm;
  }


  public SAMLProviderRequest signatureAlgorithm(SignatureAlgorithmEnum signatureAlgorithm) {
    this.signatureAlgorithm = signatureAlgorithm;
    return this;
  }

  /**
   * Get signatureAlgorithm
   * @return signatureAlgorithm
   */
  @javax.annotation.Nullable
  public SignatureAlgorithmEnum getSignatureAlgorithm() {
    return signatureAlgorithm;
  }

  public void setSignatureAlgorithm(SignatureAlgorithmEnum signatureAlgorithm) {
    this.signatureAlgorithm = signatureAlgorithm;
  }


  public SAMLProviderRequest signingKp(UUID signingKp) {
    this.signingKp = signingKp;
    return this;
  }

  /**
   * Keypair used to sign outgoing Responses going to the Service Provider.
   * @return signingKp
   */
  @javax.annotation.Nullable
  public UUID getSigningKp() {
    return signingKp;
  }

  public void setSigningKp(UUID signingKp) {
    this.signingKp = signingKp;
  }


  public SAMLProviderRequest verificationKp(UUID verificationKp) {
    this.verificationKp = verificationKp;
    return this;
  }

  /**
   * When selected, incoming assertion&#39;s Signatures will be validated against this certificate. To allow unsigned Requests, leave on default.
   * @return verificationKp
   */
  @javax.annotation.Nullable
  public UUID getVerificationKp() {
    return verificationKp;
  }

  public void setVerificationKp(UUID verificationKp) {
    this.verificationKp = verificationKp;
  }


  public SAMLProviderRequest spBinding(SpBindingEnum spBinding) {
    this.spBinding = spBinding;
    return this;
  }

  /**
   * This determines how authentik sends the response back to the Service Provider.
   * @return spBinding
   */
  @javax.annotation.Nullable
  public SpBindingEnum getSpBinding() {
    return spBinding;
  }

  public void setSpBinding(SpBindingEnum spBinding) {
    this.spBinding = spBinding;
  }


  public SAMLProviderRequest defaultRelayState(String defaultRelayState) {
    this.defaultRelayState = defaultRelayState;
    return this;
  }

  /**
   * Default relay_state value for IDP-initiated logins
   * @return defaultRelayState
   */
  @javax.annotation.Nullable
  public String getDefaultRelayState() {
    return defaultRelayState;
  }

  public void setDefaultRelayState(String defaultRelayState) {
    this.defaultRelayState = defaultRelayState;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SAMLProviderRequest saMLProviderRequest = (SAMLProviderRequest) o;
    return Objects.equals(this.name, saMLProviderRequest.name) &&
        Objects.equals(this.authenticationFlow, saMLProviderRequest.authenticationFlow) &&
        Objects.equals(this.authorizationFlow, saMLProviderRequest.authorizationFlow) &&
        Objects.equals(this.propertyMappings, saMLProviderRequest.propertyMappings) &&
        Objects.equals(this.acsUrl, saMLProviderRequest.acsUrl) &&
        Objects.equals(this.audience, saMLProviderRequest.audience) &&
        Objects.equals(this.issuer, saMLProviderRequest.issuer) &&
        Objects.equals(this.assertionValidNotBefore, saMLProviderRequest.assertionValidNotBefore) &&
        Objects.equals(this.assertionValidNotOnOrAfter, saMLProviderRequest.assertionValidNotOnOrAfter) &&
        Objects.equals(this.sessionValidNotOnOrAfter, saMLProviderRequest.sessionValidNotOnOrAfter) &&
        Objects.equals(this.nameIdMapping, saMLProviderRequest.nameIdMapping) &&
        Objects.equals(this.digestAlgorithm, saMLProviderRequest.digestAlgorithm) &&
        Objects.equals(this.signatureAlgorithm, saMLProviderRequest.signatureAlgorithm) &&
        Objects.equals(this.signingKp, saMLProviderRequest.signingKp) &&
        Objects.equals(this.verificationKp, saMLProviderRequest.verificationKp) &&
        Objects.equals(this.spBinding, saMLProviderRequest.spBinding) &&
        Objects.equals(this.defaultRelayState, saMLProviderRequest.defaultRelayState);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, authenticationFlow, authorizationFlow, propertyMappings, acsUrl, audience, issuer, assertionValidNotBefore, assertionValidNotOnOrAfter, sessionValidNotOnOrAfter, nameIdMapping, digestAlgorithm, signatureAlgorithm, signingKp, verificationKp, spBinding, defaultRelayState);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SAMLProviderRequest {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    authenticationFlow: ").append(toIndentedString(authenticationFlow)).append("\n");
    sb.append("    authorizationFlow: ").append(toIndentedString(authorizationFlow)).append("\n");
    sb.append("    propertyMappings: ").append(toIndentedString(propertyMappings)).append("\n");
    sb.append("    acsUrl: ").append(toIndentedString(acsUrl)).append("\n");
    sb.append("    audience: ").append(toIndentedString(audience)).append("\n");
    sb.append("    issuer: ").append(toIndentedString(issuer)).append("\n");
    sb.append("    assertionValidNotBefore: ").append(toIndentedString(assertionValidNotBefore)).append("\n");
    sb.append("    assertionValidNotOnOrAfter: ").append(toIndentedString(assertionValidNotOnOrAfter)).append("\n");
    sb.append("    sessionValidNotOnOrAfter: ").append(toIndentedString(sessionValidNotOnOrAfter)).append("\n");
    sb.append("    nameIdMapping: ").append(toIndentedString(nameIdMapping)).append("\n");
    sb.append("    digestAlgorithm: ").append(toIndentedString(digestAlgorithm)).append("\n");
    sb.append("    signatureAlgorithm: ").append(toIndentedString(signatureAlgorithm)).append("\n");
    sb.append("    signingKp: ").append(toIndentedString(signingKp)).append("\n");
    sb.append("    verificationKp: ").append(toIndentedString(verificationKp)).append("\n");
    sb.append("    spBinding: ").append(toIndentedString(spBinding)).append("\n");
    sb.append("    defaultRelayState: ").append(toIndentedString(defaultRelayState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("authentication_flow");
    openapiFields.add("authorization_flow");
    openapiFields.add("property_mappings");
    openapiFields.add("acs_url");
    openapiFields.add("audience");
    openapiFields.add("issuer");
    openapiFields.add("assertion_valid_not_before");
    openapiFields.add("assertion_valid_not_on_or_after");
    openapiFields.add("session_valid_not_on_or_after");
    openapiFields.add("name_id_mapping");
    openapiFields.add("digest_algorithm");
    openapiFields.add("signature_algorithm");
    openapiFields.add("signing_kp");
    openapiFields.add("verification_kp");
    openapiFields.add("sp_binding");
    openapiFields.add("default_relay_state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("authorization_flow");
    openapiRequiredFields.add("acs_url");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SAMLProviderRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SAMLProviderRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SAMLProviderRequest is not found in the empty JSON string", SAMLProviderRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SAMLProviderRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SAMLProviderRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SAMLProviderRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("authentication_flow") != null && !jsonObj.get("authentication_flow").isJsonNull()) && !jsonObj.get("authentication_flow").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authentication_flow` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authentication_flow").toString()));
      }
      if (!jsonObj.get("authorization_flow").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorization_flow` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorization_flow").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("property_mappings") != null && !jsonObj.get("property_mappings").isJsonNull() && !jsonObj.get("property_mappings").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `property_mappings` to be an array in the JSON string but got `%s`", jsonObj.get("property_mappings").toString()));
      }
      if (!jsonObj.get("acs_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acs_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acs_url").toString()));
      }
      if ((jsonObj.get("audience") != null && !jsonObj.get("audience").isJsonNull()) && !jsonObj.get("audience").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `audience` to be a primitive type in the JSON string but got `%s`", jsonObj.get("audience").toString()));
      }
      if ((jsonObj.get("issuer") != null && !jsonObj.get("issuer").isJsonNull()) && !jsonObj.get("issuer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuer").toString()));
      }
      if ((jsonObj.get("assertion_valid_not_before") != null && !jsonObj.get("assertion_valid_not_before").isJsonNull()) && !jsonObj.get("assertion_valid_not_before").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assertion_valid_not_before` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assertion_valid_not_before").toString()));
      }
      if ((jsonObj.get("assertion_valid_not_on_or_after") != null && !jsonObj.get("assertion_valid_not_on_or_after").isJsonNull()) && !jsonObj.get("assertion_valid_not_on_or_after").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assertion_valid_not_on_or_after` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assertion_valid_not_on_or_after").toString()));
      }
      if ((jsonObj.get("session_valid_not_on_or_after") != null && !jsonObj.get("session_valid_not_on_or_after").isJsonNull()) && !jsonObj.get("session_valid_not_on_or_after").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `session_valid_not_on_or_after` to be a primitive type in the JSON string but got `%s`", jsonObj.get("session_valid_not_on_or_after").toString()));
      }
      if ((jsonObj.get("name_id_mapping") != null && !jsonObj.get("name_id_mapping").isJsonNull()) && !jsonObj.get("name_id_mapping").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name_id_mapping` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name_id_mapping").toString()));
      }
      // validate the optional field `digest_algorithm`
      if (jsonObj.get("digest_algorithm") != null && !jsonObj.get("digest_algorithm").isJsonNull()) {
        DigestAlgorithmEnum.validateJsonElement(jsonObj.get("digest_algorithm"));
      }
      // validate the optional field `signature_algorithm`
      if (jsonObj.get("signature_algorithm") != null && !jsonObj.get("signature_algorithm").isJsonNull()) {
        SignatureAlgorithmEnum.validateJsonElement(jsonObj.get("signature_algorithm"));
      }
      if ((jsonObj.get("signing_kp") != null && !jsonObj.get("signing_kp").isJsonNull()) && !jsonObj.get("signing_kp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signing_kp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signing_kp").toString()));
      }
      if ((jsonObj.get("verification_kp") != null && !jsonObj.get("verification_kp").isJsonNull()) && !jsonObj.get("verification_kp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verification_kp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verification_kp").toString()));
      }
      // validate the optional field `sp_binding`
      if (jsonObj.get("sp_binding") != null && !jsonObj.get("sp_binding").isJsonNull()) {
        SpBindingEnum.validateJsonElement(jsonObj.get("sp_binding"));
      }
      if ((jsonObj.get("default_relay_state") != null && !jsonObj.get("default_relay_state").isJsonNull()) && !jsonObj.get("default_relay_state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default_relay_state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default_relay_state").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SAMLProviderRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SAMLProviderRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SAMLProviderRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SAMLProviderRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<SAMLProviderRequest>() {
           @Override
           public void write(JsonWriter out, SAMLProviderRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SAMLProviderRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SAMLProviderRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SAMLProviderRequest
   * @throws IOException if the JSON string is invalid with respect to SAMLProviderRequest
   */
  public static SAMLProviderRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SAMLProviderRequest.class);
  }

  /**
   * Convert an instance of SAMLProviderRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

