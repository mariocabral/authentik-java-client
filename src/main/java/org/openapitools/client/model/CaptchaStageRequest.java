/*
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.6.3
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.FlowSetRequest;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CaptchaStage Serializer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-25T23:12:57.050901581-03:00[America/Argentina/Cordoba]", comments = "Generator version: 7.8.0")
public class CaptchaStageRequest {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_FLOW_SET = "flow_set";
  @SerializedName(SERIALIZED_NAME_FLOW_SET)
  private List<FlowSetRequest> flowSet = new ArrayList<>();

  public static final String SERIALIZED_NAME_PUBLIC_KEY = "public_key";
  @SerializedName(SERIALIZED_NAME_PUBLIC_KEY)
  private String publicKey;

  public static final String SERIALIZED_NAME_PRIVATE_KEY = "private_key";
  @SerializedName(SERIALIZED_NAME_PRIVATE_KEY)
  private String privateKey;

  public static final String SERIALIZED_NAME_JS_URL = "js_url";
  @SerializedName(SERIALIZED_NAME_JS_URL)
  private String jsUrl;

  public static final String SERIALIZED_NAME_API_URL = "api_url";
  @SerializedName(SERIALIZED_NAME_API_URL)
  private String apiUrl;

  public static final String SERIALIZED_NAME_SCORE_MIN_THRESHOLD = "score_min_threshold";
  @SerializedName(SERIALIZED_NAME_SCORE_MIN_THRESHOLD)
  private Double scoreMinThreshold;

  public static final String SERIALIZED_NAME_SCORE_MAX_THRESHOLD = "score_max_threshold";
  @SerializedName(SERIALIZED_NAME_SCORE_MAX_THRESHOLD)
  private Double scoreMaxThreshold;

  public static final String SERIALIZED_NAME_ERROR_ON_INVALID_SCORE = "error_on_invalid_score";
  @SerializedName(SERIALIZED_NAME_ERROR_ON_INVALID_SCORE)
  private Boolean errorOnInvalidScore;

  public CaptchaStageRequest() {
  }

  public CaptchaStageRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CaptchaStageRequest flowSet(List<FlowSetRequest> flowSet) {
    this.flowSet = flowSet;
    return this;
  }

  public CaptchaStageRequest addFlowSetItem(FlowSetRequest flowSetItem) {
    if (this.flowSet == null) {
      this.flowSet = new ArrayList<>();
    }
    this.flowSet.add(flowSetItem);
    return this;
  }

  /**
   * Get flowSet
   * @return flowSet
   */
  @javax.annotation.Nullable
  public List<FlowSetRequest> getFlowSet() {
    return flowSet;
  }

  public void setFlowSet(List<FlowSetRequest> flowSet) {
    this.flowSet = flowSet;
  }


  public CaptchaStageRequest publicKey(String publicKey) {
    this.publicKey = publicKey;
    return this;
  }

  /**
   * Public key, acquired your captcha Provider.
   * @return publicKey
   */
  @javax.annotation.Nonnull
  public String getPublicKey() {
    return publicKey;
  }

  public void setPublicKey(String publicKey) {
    this.publicKey = publicKey;
  }


  public CaptchaStageRequest privateKey(String privateKey) {
    this.privateKey = privateKey;
    return this;
  }

  /**
   * Private key, acquired your captcha Provider.
   * @return privateKey
   */
  @javax.annotation.Nonnull
  public String getPrivateKey() {
    return privateKey;
  }

  public void setPrivateKey(String privateKey) {
    this.privateKey = privateKey;
  }


  public CaptchaStageRequest jsUrl(String jsUrl) {
    this.jsUrl = jsUrl;
    return this;
  }

  /**
   * Get jsUrl
   * @return jsUrl
   */
  @javax.annotation.Nullable
  public String getJsUrl() {
    return jsUrl;
  }

  public void setJsUrl(String jsUrl) {
    this.jsUrl = jsUrl;
  }


  public CaptchaStageRequest apiUrl(String apiUrl) {
    this.apiUrl = apiUrl;
    return this;
  }

  /**
   * Get apiUrl
   * @return apiUrl
   */
  @javax.annotation.Nullable
  public String getApiUrl() {
    return apiUrl;
  }

  public void setApiUrl(String apiUrl) {
    this.apiUrl = apiUrl;
  }


  public CaptchaStageRequest scoreMinThreshold(Double scoreMinThreshold) {
    this.scoreMinThreshold = scoreMinThreshold;
    return this;
  }

  /**
   * Get scoreMinThreshold
   * @return scoreMinThreshold
   */
  @javax.annotation.Nullable
  public Double getScoreMinThreshold() {
    return scoreMinThreshold;
  }

  public void setScoreMinThreshold(Double scoreMinThreshold) {
    this.scoreMinThreshold = scoreMinThreshold;
  }


  public CaptchaStageRequest scoreMaxThreshold(Double scoreMaxThreshold) {
    this.scoreMaxThreshold = scoreMaxThreshold;
    return this;
  }

  /**
   * Get scoreMaxThreshold
   * @return scoreMaxThreshold
   */
  @javax.annotation.Nullable
  public Double getScoreMaxThreshold() {
    return scoreMaxThreshold;
  }

  public void setScoreMaxThreshold(Double scoreMaxThreshold) {
    this.scoreMaxThreshold = scoreMaxThreshold;
  }


  public CaptchaStageRequest errorOnInvalidScore(Boolean errorOnInvalidScore) {
    this.errorOnInvalidScore = errorOnInvalidScore;
    return this;
  }

  /**
   * When enabled and the received captcha score is outside of the given threshold, the stage will show an error message. When not enabled, the flow will continue, but the data from the captcha will be available in the context for policy decisions
   * @return errorOnInvalidScore
   */
  @javax.annotation.Nullable
  public Boolean getErrorOnInvalidScore() {
    return errorOnInvalidScore;
  }

  public void setErrorOnInvalidScore(Boolean errorOnInvalidScore) {
    this.errorOnInvalidScore = errorOnInvalidScore;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CaptchaStageRequest captchaStageRequest = (CaptchaStageRequest) o;
    return Objects.equals(this.name, captchaStageRequest.name) &&
        Objects.equals(this.flowSet, captchaStageRequest.flowSet) &&
        Objects.equals(this.publicKey, captchaStageRequest.publicKey) &&
        Objects.equals(this.privateKey, captchaStageRequest.privateKey) &&
        Objects.equals(this.jsUrl, captchaStageRequest.jsUrl) &&
        Objects.equals(this.apiUrl, captchaStageRequest.apiUrl) &&
        Objects.equals(this.scoreMinThreshold, captchaStageRequest.scoreMinThreshold) &&
        Objects.equals(this.scoreMaxThreshold, captchaStageRequest.scoreMaxThreshold) &&
        Objects.equals(this.errorOnInvalidScore, captchaStageRequest.errorOnInvalidScore);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, flowSet, publicKey, privateKey, jsUrl, apiUrl, scoreMinThreshold, scoreMaxThreshold, errorOnInvalidScore);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CaptchaStageRequest {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    flowSet: ").append(toIndentedString(flowSet)).append("\n");
    sb.append("    publicKey: ").append(toIndentedString(publicKey)).append("\n");
    sb.append("    privateKey: ").append(toIndentedString(privateKey)).append("\n");
    sb.append("    jsUrl: ").append(toIndentedString(jsUrl)).append("\n");
    sb.append("    apiUrl: ").append(toIndentedString(apiUrl)).append("\n");
    sb.append("    scoreMinThreshold: ").append(toIndentedString(scoreMinThreshold)).append("\n");
    sb.append("    scoreMaxThreshold: ").append(toIndentedString(scoreMaxThreshold)).append("\n");
    sb.append("    errorOnInvalidScore: ").append(toIndentedString(errorOnInvalidScore)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("flow_set");
    openapiFields.add("public_key");
    openapiFields.add("private_key");
    openapiFields.add("js_url");
    openapiFields.add("api_url");
    openapiFields.add("score_min_threshold");
    openapiFields.add("score_max_threshold");
    openapiFields.add("error_on_invalid_score");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("public_key");
    openapiRequiredFields.add("private_key");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CaptchaStageRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CaptchaStageRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CaptchaStageRequest is not found in the empty JSON string", CaptchaStageRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CaptchaStageRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CaptchaStageRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CaptchaStageRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("flow_set") != null && !jsonObj.get("flow_set").isJsonNull()) {
        JsonArray jsonArrayflowSet = jsonObj.getAsJsonArray("flow_set");
        if (jsonArrayflowSet != null) {
          // ensure the json data is an array
          if (!jsonObj.get("flow_set").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `flow_set` to be an array in the JSON string but got `%s`", jsonObj.get("flow_set").toString()));
          }

          // validate the optional field `flow_set` (array)
          for (int i = 0; i < jsonArrayflowSet.size(); i++) {
            FlowSetRequest.validateJsonElement(jsonArrayflowSet.get(i));
          };
        }
      }
      if (!jsonObj.get("public_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `public_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("public_key").toString()));
      }
      if (!jsonObj.get("private_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `private_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("private_key").toString()));
      }
      if ((jsonObj.get("js_url") != null && !jsonObj.get("js_url").isJsonNull()) && !jsonObj.get("js_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `js_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("js_url").toString()));
      }
      if ((jsonObj.get("api_url") != null && !jsonObj.get("api_url").isJsonNull()) && !jsonObj.get("api_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `api_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("api_url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CaptchaStageRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CaptchaStageRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CaptchaStageRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CaptchaStageRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CaptchaStageRequest>() {
           @Override
           public void write(JsonWriter out, CaptchaStageRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CaptchaStageRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CaptchaStageRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CaptchaStageRequest
   * @throws IOException if the JSON string is invalid with respect to CaptchaStageRequest
   */
  public static CaptchaStageRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CaptchaStageRequest.class);
  }

  /**
   * Convert an instance of CaptchaStageRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

