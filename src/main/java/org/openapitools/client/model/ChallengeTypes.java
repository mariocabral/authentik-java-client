/*
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.6.3
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.AccessDeniedChallenge;
import org.openapitools.client.model.AppleLoginChallenge;
import org.openapitools.client.model.AuthenticatorDuoChallenge;
import org.openapitools.client.model.AuthenticatorSMSChallenge;
import org.openapitools.client.model.AuthenticatorStaticChallenge;
import org.openapitools.client.model.AuthenticatorTOTPChallenge;
import org.openapitools.client.model.AuthenticatorValidationChallenge;
import org.openapitools.client.model.AuthenticatorWebAuthnChallenge;
import org.openapitools.client.model.AutosubmitChallenge;
import org.openapitools.client.model.CaptchaChallenge;
import org.openapitools.client.model.ChallengeChoices;
import org.openapitools.client.model.ConsentChallenge;
import org.openapitools.client.model.ConsentPermission;
import org.openapitools.client.model.ContextualFlowInfo;
import org.openapitools.client.model.DeviceChallenge;
import org.openapitools.client.model.EmailChallenge;
import org.openapitools.client.model.ErrorDetail;
import org.openapitools.client.model.FlowDesignationEnum;
import org.openapitools.client.model.FlowErrorChallenge;
import org.openapitools.client.model.IdentificationChallenge;
import org.openapitools.client.model.LoginSource;
import org.openapitools.client.model.OAuthDeviceCodeChallenge;
import org.openapitools.client.model.OAuthDeviceCodeFinishChallenge;
import org.openapitools.client.model.PasswordChallenge;
import org.openapitools.client.model.PlexAuthenticationChallenge;
import org.openapitools.client.model.PromptChallenge;
import org.openapitools.client.model.RedirectChallenge;
import org.openapitools.client.model.SelectableStage;
import org.openapitools.client.model.ShellChallenge;
import org.openapitools.client.model.StagePrompt;
import org.openapitools.client.model.UserLoginChallenge;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-25T23:12:57.050901581-03:00[America/Argentina/Cordoba]", comments = "Generator version: 7.8.0")
public class ChallengeTypes extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(ChallengeTypes.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!ChallengeTypes.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'ChallengeTypes' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<AccessDeniedChallenge> adapterAccessDeniedChallenge = gson.getDelegateAdapter(this, TypeToken.get(AccessDeniedChallenge.class));
            final TypeAdapter<AppleLoginChallenge> adapterAppleLoginChallenge = gson.getDelegateAdapter(this, TypeToken.get(AppleLoginChallenge.class));
            final TypeAdapter<AuthenticatorDuoChallenge> adapterAuthenticatorDuoChallenge = gson.getDelegateAdapter(this, TypeToken.get(AuthenticatorDuoChallenge.class));
            final TypeAdapter<AuthenticatorSMSChallenge> adapterAuthenticatorSMSChallenge = gson.getDelegateAdapter(this, TypeToken.get(AuthenticatorSMSChallenge.class));
            final TypeAdapter<AuthenticatorStaticChallenge> adapterAuthenticatorStaticChallenge = gson.getDelegateAdapter(this, TypeToken.get(AuthenticatorStaticChallenge.class));
            final TypeAdapter<AuthenticatorTOTPChallenge> adapterAuthenticatorTOTPChallenge = gson.getDelegateAdapter(this, TypeToken.get(AuthenticatorTOTPChallenge.class));
            final TypeAdapter<AuthenticatorValidationChallenge> adapterAuthenticatorValidationChallenge = gson.getDelegateAdapter(this, TypeToken.get(AuthenticatorValidationChallenge.class));
            final TypeAdapter<AuthenticatorWebAuthnChallenge> adapterAuthenticatorWebAuthnChallenge = gson.getDelegateAdapter(this, TypeToken.get(AuthenticatorWebAuthnChallenge.class));
            final TypeAdapter<AutosubmitChallenge> adapterAutosubmitChallenge = gson.getDelegateAdapter(this, TypeToken.get(AutosubmitChallenge.class));
            final TypeAdapter<CaptchaChallenge> adapterCaptchaChallenge = gson.getDelegateAdapter(this, TypeToken.get(CaptchaChallenge.class));
            final TypeAdapter<ConsentChallenge> adapterConsentChallenge = gson.getDelegateAdapter(this, TypeToken.get(ConsentChallenge.class));
            final TypeAdapter<EmailChallenge> adapterEmailChallenge = gson.getDelegateAdapter(this, TypeToken.get(EmailChallenge.class));
            final TypeAdapter<FlowErrorChallenge> adapterFlowErrorChallenge = gson.getDelegateAdapter(this, TypeToken.get(FlowErrorChallenge.class));
            final TypeAdapter<IdentificationChallenge> adapterIdentificationChallenge = gson.getDelegateAdapter(this, TypeToken.get(IdentificationChallenge.class));
            final TypeAdapter<OAuthDeviceCodeChallenge> adapterOAuthDeviceCodeChallenge = gson.getDelegateAdapter(this, TypeToken.get(OAuthDeviceCodeChallenge.class));
            final TypeAdapter<OAuthDeviceCodeFinishChallenge> adapterOAuthDeviceCodeFinishChallenge = gson.getDelegateAdapter(this, TypeToken.get(OAuthDeviceCodeFinishChallenge.class));
            final TypeAdapter<PasswordChallenge> adapterPasswordChallenge = gson.getDelegateAdapter(this, TypeToken.get(PasswordChallenge.class));
            final TypeAdapter<PlexAuthenticationChallenge> adapterPlexAuthenticationChallenge = gson.getDelegateAdapter(this, TypeToken.get(PlexAuthenticationChallenge.class));
            final TypeAdapter<PromptChallenge> adapterPromptChallenge = gson.getDelegateAdapter(this, TypeToken.get(PromptChallenge.class));
            final TypeAdapter<RedirectChallenge> adapterRedirectChallenge = gson.getDelegateAdapter(this, TypeToken.get(RedirectChallenge.class));
            final TypeAdapter<ShellChallenge> adapterShellChallenge = gson.getDelegateAdapter(this, TypeToken.get(ShellChallenge.class));
            final TypeAdapter<UserLoginChallenge> adapterUserLoginChallenge = gson.getDelegateAdapter(this, TypeToken.get(UserLoginChallenge.class));

            return (TypeAdapter<T>) new TypeAdapter<ChallengeTypes>() {
                @Override
                public void write(JsonWriter out, ChallengeTypes value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `AccessDeniedChallenge`
                    if (value.getActualInstance() instanceof AccessDeniedChallenge) {
                        JsonElement element = adapterAccessDeniedChallenge.toJsonTree((AccessDeniedChallenge)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AppleLoginChallenge`
                    if (value.getActualInstance() instanceof AppleLoginChallenge) {
                        JsonElement element = adapterAppleLoginChallenge.toJsonTree((AppleLoginChallenge)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AuthenticatorDuoChallenge`
                    if (value.getActualInstance() instanceof AuthenticatorDuoChallenge) {
                        JsonElement element = adapterAuthenticatorDuoChallenge.toJsonTree((AuthenticatorDuoChallenge)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AuthenticatorSMSChallenge`
                    if (value.getActualInstance() instanceof AuthenticatorSMSChallenge) {
                        JsonElement element = adapterAuthenticatorSMSChallenge.toJsonTree((AuthenticatorSMSChallenge)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AuthenticatorStaticChallenge`
                    if (value.getActualInstance() instanceof AuthenticatorStaticChallenge) {
                        JsonElement element = adapterAuthenticatorStaticChallenge.toJsonTree((AuthenticatorStaticChallenge)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AuthenticatorTOTPChallenge`
                    if (value.getActualInstance() instanceof AuthenticatorTOTPChallenge) {
                        JsonElement element = adapterAuthenticatorTOTPChallenge.toJsonTree((AuthenticatorTOTPChallenge)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AuthenticatorValidationChallenge`
                    if (value.getActualInstance() instanceof AuthenticatorValidationChallenge) {
                        JsonElement element = adapterAuthenticatorValidationChallenge.toJsonTree((AuthenticatorValidationChallenge)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AuthenticatorWebAuthnChallenge`
                    if (value.getActualInstance() instanceof AuthenticatorWebAuthnChallenge) {
                        JsonElement element = adapterAuthenticatorWebAuthnChallenge.toJsonTree((AuthenticatorWebAuthnChallenge)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AutosubmitChallenge`
                    if (value.getActualInstance() instanceof AutosubmitChallenge) {
                        JsonElement element = adapterAutosubmitChallenge.toJsonTree((AutosubmitChallenge)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `CaptchaChallenge`
                    if (value.getActualInstance() instanceof CaptchaChallenge) {
                        JsonElement element = adapterCaptchaChallenge.toJsonTree((CaptchaChallenge)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ConsentChallenge`
                    if (value.getActualInstance() instanceof ConsentChallenge) {
                        JsonElement element = adapterConsentChallenge.toJsonTree((ConsentChallenge)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `EmailChallenge`
                    if (value.getActualInstance() instanceof EmailChallenge) {
                        JsonElement element = adapterEmailChallenge.toJsonTree((EmailChallenge)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `FlowErrorChallenge`
                    if (value.getActualInstance() instanceof FlowErrorChallenge) {
                        JsonElement element = adapterFlowErrorChallenge.toJsonTree((FlowErrorChallenge)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `IdentificationChallenge`
                    if (value.getActualInstance() instanceof IdentificationChallenge) {
                        JsonElement element = adapterIdentificationChallenge.toJsonTree((IdentificationChallenge)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `OAuthDeviceCodeChallenge`
                    if (value.getActualInstance() instanceof OAuthDeviceCodeChallenge) {
                        JsonElement element = adapterOAuthDeviceCodeChallenge.toJsonTree((OAuthDeviceCodeChallenge)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `OAuthDeviceCodeFinishChallenge`
                    if (value.getActualInstance() instanceof OAuthDeviceCodeFinishChallenge) {
                        JsonElement element = adapterOAuthDeviceCodeFinishChallenge.toJsonTree((OAuthDeviceCodeFinishChallenge)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `PasswordChallenge`
                    if (value.getActualInstance() instanceof PasswordChallenge) {
                        JsonElement element = adapterPasswordChallenge.toJsonTree((PasswordChallenge)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `PlexAuthenticationChallenge`
                    if (value.getActualInstance() instanceof PlexAuthenticationChallenge) {
                        JsonElement element = adapterPlexAuthenticationChallenge.toJsonTree((PlexAuthenticationChallenge)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `PromptChallenge`
                    if (value.getActualInstance() instanceof PromptChallenge) {
                        JsonElement element = adapterPromptChallenge.toJsonTree((PromptChallenge)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `RedirectChallenge`
                    if (value.getActualInstance() instanceof RedirectChallenge) {
                        JsonElement element = adapterRedirectChallenge.toJsonTree((RedirectChallenge)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ShellChallenge`
                    if (value.getActualInstance() instanceof ShellChallenge) {
                        JsonElement element = adapterShellChallenge.toJsonTree((ShellChallenge)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `UserLoginChallenge`
                    if (value.getActualInstance() instanceof UserLoginChallenge) {
                        JsonElement element = adapterUserLoginChallenge.toJsonTree((UserLoginChallenge)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: AccessDeniedChallenge, AppleLoginChallenge, AuthenticatorDuoChallenge, AuthenticatorSMSChallenge, AuthenticatorStaticChallenge, AuthenticatorTOTPChallenge, AuthenticatorValidationChallenge, AuthenticatorWebAuthnChallenge, AutosubmitChallenge, CaptchaChallenge, ConsentChallenge, EmailChallenge, FlowErrorChallenge, IdentificationChallenge, OAuthDeviceCodeChallenge, OAuthDeviceCodeFinishChallenge, PasswordChallenge, PlexAuthenticationChallenge, PromptChallenge, RedirectChallenge, ShellChallenge, UserLoginChallenge");
                }

                @Override
                public ChallengeTypes read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize AccessDeniedChallenge
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AccessDeniedChallenge.validateJsonElement(jsonElement);
                        actualAdapter = adapterAccessDeniedChallenge;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AccessDeniedChallenge'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AccessDeniedChallenge failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AccessDeniedChallenge'", e);
                    }
                    // deserialize AppleLoginChallenge
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AppleLoginChallenge.validateJsonElement(jsonElement);
                        actualAdapter = adapterAppleLoginChallenge;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AppleLoginChallenge'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AppleLoginChallenge failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AppleLoginChallenge'", e);
                    }
                    // deserialize AuthenticatorDuoChallenge
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AuthenticatorDuoChallenge.validateJsonElement(jsonElement);
                        actualAdapter = adapterAuthenticatorDuoChallenge;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AuthenticatorDuoChallenge'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AuthenticatorDuoChallenge failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AuthenticatorDuoChallenge'", e);
                    }
                    // deserialize AuthenticatorSMSChallenge
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AuthenticatorSMSChallenge.validateJsonElement(jsonElement);
                        actualAdapter = adapterAuthenticatorSMSChallenge;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AuthenticatorSMSChallenge'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AuthenticatorSMSChallenge failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AuthenticatorSMSChallenge'", e);
                    }
                    // deserialize AuthenticatorStaticChallenge
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AuthenticatorStaticChallenge.validateJsonElement(jsonElement);
                        actualAdapter = adapterAuthenticatorStaticChallenge;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AuthenticatorStaticChallenge'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AuthenticatorStaticChallenge failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AuthenticatorStaticChallenge'", e);
                    }
                    // deserialize AuthenticatorTOTPChallenge
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AuthenticatorTOTPChallenge.validateJsonElement(jsonElement);
                        actualAdapter = adapterAuthenticatorTOTPChallenge;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AuthenticatorTOTPChallenge'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AuthenticatorTOTPChallenge failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AuthenticatorTOTPChallenge'", e);
                    }
                    // deserialize AuthenticatorValidationChallenge
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AuthenticatorValidationChallenge.validateJsonElement(jsonElement);
                        actualAdapter = adapterAuthenticatorValidationChallenge;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AuthenticatorValidationChallenge'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AuthenticatorValidationChallenge failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AuthenticatorValidationChallenge'", e);
                    }
                    // deserialize AuthenticatorWebAuthnChallenge
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AuthenticatorWebAuthnChallenge.validateJsonElement(jsonElement);
                        actualAdapter = adapterAuthenticatorWebAuthnChallenge;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AuthenticatorWebAuthnChallenge'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AuthenticatorWebAuthnChallenge failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AuthenticatorWebAuthnChallenge'", e);
                    }
                    // deserialize AutosubmitChallenge
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AutosubmitChallenge.validateJsonElement(jsonElement);
                        actualAdapter = adapterAutosubmitChallenge;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AutosubmitChallenge'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AutosubmitChallenge failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AutosubmitChallenge'", e);
                    }
                    // deserialize CaptchaChallenge
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CaptchaChallenge.validateJsonElement(jsonElement);
                        actualAdapter = adapterCaptchaChallenge;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CaptchaChallenge'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CaptchaChallenge failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CaptchaChallenge'", e);
                    }
                    // deserialize ConsentChallenge
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ConsentChallenge.validateJsonElement(jsonElement);
                        actualAdapter = adapterConsentChallenge;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ConsentChallenge'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ConsentChallenge failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ConsentChallenge'", e);
                    }
                    // deserialize EmailChallenge
                    try {
                        // validate the JSON object to see if any exception is thrown
                        EmailChallenge.validateJsonElement(jsonElement);
                        actualAdapter = adapterEmailChallenge;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'EmailChallenge'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for EmailChallenge failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'EmailChallenge'", e);
                    }
                    // deserialize FlowErrorChallenge
                    try {
                        // validate the JSON object to see if any exception is thrown
                        FlowErrorChallenge.validateJsonElement(jsonElement);
                        actualAdapter = adapterFlowErrorChallenge;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'FlowErrorChallenge'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for FlowErrorChallenge failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'FlowErrorChallenge'", e);
                    }
                    // deserialize IdentificationChallenge
                    try {
                        // validate the JSON object to see if any exception is thrown
                        IdentificationChallenge.validateJsonElement(jsonElement);
                        actualAdapter = adapterIdentificationChallenge;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'IdentificationChallenge'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for IdentificationChallenge failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'IdentificationChallenge'", e);
                    }
                    // deserialize OAuthDeviceCodeChallenge
                    try {
                        // validate the JSON object to see if any exception is thrown
                        OAuthDeviceCodeChallenge.validateJsonElement(jsonElement);
                        actualAdapter = adapterOAuthDeviceCodeChallenge;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'OAuthDeviceCodeChallenge'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for OAuthDeviceCodeChallenge failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'OAuthDeviceCodeChallenge'", e);
                    }
                    // deserialize OAuthDeviceCodeFinishChallenge
                    try {
                        // validate the JSON object to see if any exception is thrown
                        OAuthDeviceCodeFinishChallenge.validateJsonElement(jsonElement);
                        actualAdapter = adapterOAuthDeviceCodeFinishChallenge;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'OAuthDeviceCodeFinishChallenge'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for OAuthDeviceCodeFinishChallenge failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'OAuthDeviceCodeFinishChallenge'", e);
                    }
                    // deserialize PasswordChallenge
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PasswordChallenge.validateJsonElement(jsonElement);
                        actualAdapter = adapterPasswordChallenge;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'PasswordChallenge'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PasswordChallenge failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PasswordChallenge'", e);
                    }
                    // deserialize PlexAuthenticationChallenge
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PlexAuthenticationChallenge.validateJsonElement(jsonElement);
                        actualAdapter = adapterPlexAuthenticationChallenge;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'PlexAuthenticationChallenge'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PlexAuthenticationChallenge failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PlexAuthenticationChallenge'", e);
                    }
                    // deserialize PromptChallenge
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PromptChallenge.validateJsonElement(jsonElement);
                        actualAdapter = adapterPromptChallenge;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'PromptChallenge'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PromptChallenge failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PromptChallenge'", e);
                    }
                    // deserialize RedirectChallenge
                    try {
                        // validate the JSON object to see if any exception is thrown
                        RedirectChallenge.validateJsonElement(jsonElement);
                        actualAdapter = adapterRedirectChallenge;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'RedirectChallenge'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for RedirectChallenge failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'RedirectChallenge'", e);
                    }
                    // deserialize ShellChallenge
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ShellChallenge.validateJsonElement(jsonElement);
                        actualAdapter = adapterShellChallenge;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ShellChallenge'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ShellChallenge failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ShellChallenge'", e);
                    }
                    // deserialize UserLoginChallenge
                    try {
                        // validate the JSON object to see if any exception is thrown
                        UserLoginChallenge.validateJsonElement(jsonElement);
                        actualAdapter = adapterUserLoginChallenge;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'UserLoginChallenge'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for UserLoginChallenge failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'UserLoginChallenge'", e);
                    }

                    if (match == 1) {
                        ChallengeTypes ret = new ChallengeTypes();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for ChallengeTypes: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public ChallengeTypes() {
        super("oneOf", Boolean.FALSE);
    }

    public ChallengeTypes(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("AccessDeniedChallenge", AccessDeniedChallenge.class);
        schemas.put("AppleLoginChallenge", AppleLoginChallenge.class);
        schemas.put("AuthenticatorDuoChallenge", AuthenticatorDuoChallenge.class);
        schemas.put("AuthenticatorSMSChallenge", AuthenticatorSMSChallenge.class);
        schemas.put("AuthenticatorStaticChallenge", AuthenticatorStaticChallenge.class);
        schemas.put("AuthenticatorTOTPChallenge", AuthenticatorTOTPChallenge.class);
        schemas.put("AuthenticatorValidationChallenge", AuthenticatorValidationChallenge.class);
        schemas.put("AuthenticatorWebAuthnChallenge", AuthenticatorWebAuthnChallenge.class);
        schemas.put("AutosubmitChallenge", AutosubmitChallenge.class);
        schemas.put("CaptchaChallenge", CaptchaChallenge.class);
        schemas.put("ConsentChallenge", ConsentChallenge.class);
        schemas.put("EmailChallenge", EmailChallenge.class);
        schemas.put("FlowErrorChallenge", FlowErrorChallenge.class);
        schemas.put("IdentificationChallenge", IdentificationChallenge.class);
        schemas.put("OAuthDeviceCodeChallenge", OAuthDeviceCodeChallenge.class);
        schemas.put("OAuthDeviceCodeFinishChallenge", OAuthDeviceCodeFinishChallenge.class);
        schemas.put("PasswordChallenge", PasswordChallenge.class);
        schemas.put("PlexAuthenticationChallenge", PlexAuthenticationChallenge.class);
        schemas.put("PromptChallenge", PromptChallenge.class);
        schemas.put("RedirectChallenge", RedirectChallenge.class);
        schemas.put("ShellChallenge", ShellChallenge.class);
        schemas.put("UserLoginChallenge", UserLoginChallenge.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return ChallengeTypes.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * AccessDeniedChallenge, AppleLoginChallenge, AuthenticatorDuoChallenge, AuthenticatorSMSChallenge, AuthenticatorStaticChallenge, AuthenticatorTOTPChallenge, AuthenticatorValidationChallenge, AuthenticatorWebAuthnChallenge, AutosubmitChallenge, CaptchaChallenge, ConsentChallenge, EmailChallenge, FlowErrorChallenge, IdentificationChallenge, OAuthDeviceCodeChallenge, OAuthDeviceCodeFinishChallenge, PasswordChallenge, PlexAuthenticationChallenge, PromptChallenge, RedirectChallenge, ShellChallenge, UserLoginChallenge
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof AccessDeniedChallenge) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AppleLoginChallenge) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AuthenticatorDuoChallenge) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AuthenticatorSMSChallenge) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AuthenticatorStaticChallenge) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AuthenticatorTOTPChallenge) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AuthenticatorValidationChallenge) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AuthenticatorWebAuthnChallenge) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AutosubmitChallenge) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CaptchaChallenge) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ConsentChallenge) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EmailChallenge) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof FlowErrorChallenge) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof IdentificationChallenge) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof OAuthDeviceCodeChallenge) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof OAuthDeviceCodeFinishChallenge) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PasswordChallenge) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PlexAuthenticationChallenge) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PromptChallenge) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof RedirectChallenge) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ShellChallenge) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof UserLoginChallenge) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be AccessDeniedChallenge, AppleLoginChallenge, AuthenticatorDuoChallenge, AuthenticatorSMSChallenge, AuthenticatorStaticChallenge, AuthenticatorTOTPChallenge, AuthenticatorValidationChallenge, AuthenticatorWebAuthnChallenge, AutosubmitChallenge, CaptchaChallenge, ConsentChallenge, EmailChallenge, FlowErrorChallenge, IdentificationChallenge, OAuthDeviceCodeChallenge, OAuthDeviceCodeFinishChallenge, PasswordChallenge, PlexAuthenticationChallenge, PromptChallenge, RedirectChallenge, ShellChallenge, UserLoginChallenge");
    }

    /**
     * Get the actual instance, which can be the following:
     * AccessDeniedChallenge, AppleLoginChallenge, AuthenticatorDuoChallenge, AuthenticatorSMSChallenge, AuthenticatorStaticChallenge, AuthenticatorTOTPChallenge, AuthenticatorValidationChallenge, AuthenticatorWebAuthnChallenge, AutosubmitChallenge, CaptchaChallenge, ConsentChallenge, EmailChallenge, FlowErrorChallenge, IdentificationChallenge, OAuthDeviceCodeChallenge, OAuthDeviceCodeFinishChallenge, PasswordChallenge, PlexAuthenticationChallenge, PromptChallenge, RedirectChallenge, ShellChallenge, UserLoginChallenge
     *
     * @return The actual instance (AccessDeniedChallenge, AppleLoginChallenge, AuthenticatorDuoChallenge, AuthenticatorSMSChallenge, AuthenticatorStaticChallenge, AuthenticatorTOTPChallenge, AuthenticatorValidationChallenge, AuthenticatorWebAuthnChallenge, AutosubmitChallenge, CaptchaChallenge, ConsentChallenge, EmailChallenge, FlowErrorChallenge, IdentificationChallenge, OAuthDeviceCodeChallenge, OAuthDeviceCodeFinishChallenge, PasswordChallenge, PlexAuthenticationChallenge, PromptChallenge, RedirectChallenge, ShellChallenge, UserLoginChallenge)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `AccessDeniedChallenge`. If the actual instance is not `AccessDeniedChallenge`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AccessDeniedChallenge`
     * @throws ClassCastException if the instance is not `AccessDeniedChallenge`
     */
    public AccessDeniedChallenge getAccessDeniedChallenge() throws ClassCastException {
        return (AccessDeniedChallenge)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AppleLoginChallenge`. If the actual instance is not `AppleLoginChallenge`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AppleLoginChallenge`
     * @throws ClassCastException if the instance is not `AppleLoginChallenge`
     */
    public AppleLoginChallenge getAppleLoginChallenge() throws ClassCastException {
        return (AppleLoginChallenge)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AuthenticatorDuoChallenge`. If the actual instance is not `AuthenticatorDuoChallenge`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AuthenticatorDuoChallenge`
     * @throws ClassCastException if the instance is not `AuthenticatorDuoChallenge`
     */
    public AuthenticatorDuoChallenge getAuthenticatorDuoChallenge() throws ClassCastException {
        return (AuthenticatorDuoChallenge)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AuthenticatorSMSChallenge`. If the actual instance is not `AuthenticatorSMSChallenge`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AuthenticatorSMSChallenge`
     * @throws ClassCastException if the instance is not `AuthenticatorSMSChallenge`
     */
    public AuthenticatorSMSChallenge getAuthenticatorSMSChallenge() throws ClassCastException {
        return (AuthenticatorSMSChallenge)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AuthenticatorStaticChallenge`. If the actual instance is not `AuthenticatorStaticChallenge`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AuthenticatorStaticChallenge`
     * @throws ClassCastException if the instance is not `AuthenticatorStaticChallenge`
     */
    public AuthenticatorStaticChallenge getAuthenticatorStaticChallenge() throws ClassCastException {
        return (AuthenticatorStaticChallenge)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AuthenticatorTOTPChallenge`. If the actual instance is not `AuthenticatorTOTPChallenge`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AuthenticatorTOTPChallenge`
     * @throws ClassCastException if the instance is not `AuthenticatorTOTPChallenge`
     */
    public AuthenticatorTOTPChallenge getAuthenticatorTOTPChallenge() throws ClassCastException {
        return (AuthenticatorTOTPChallenge)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AuthenticatorValidationChallenge`. If the actual instance is not `AuthenticatorValidationChallenge`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AuthenticatorValidationChallenge`
     * @throws ClassCastException if the instance is not `AuthenticatorValidationChallenge`
     */
    public AuthenticatorValidationChallenge getAuthenticatorValidationChallenge() throws ClassCastException {
        return (AuthenticatorValidationChallenge)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AuthenticatorWebAuthnChallenge`. If the actual instance is not `AuthenticatorWebAuthnChallenge`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AuthenticatorWebAuthnChallenge`
     * @throws ClassCastException if the instance is not `AuthenticatorWebAuthnChallenge`
     */
    public AuthenticatorWebAuthnChallenge getAuthenticatorWebAuthnChallenge() throws ClassCastException {
        return (AuthenticatorWebAuthnChallenge)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AutosubmitChallenge`. If the actual instance is not `AutosubmitChallenge`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AutosubmitChallenge`
     * @throws ClassCastException if the instance is not `AutosubmitChallenge`
     */
    public AutosubmitChallenge getAutosubmitChallenge() throws ClassCastException {
        return (AutosubmitChallenge)super.getActualInstance();
    }
    /**
     * Get the actual instance of `CaptchaChallenge`. If the actual instance is not `CaptchaChallenge`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CaptchaChallenge`
     * @throws ClassCastException if the instance is not `CaptchaChallenge`
     */
    public CaptchaChallenge getCaptchaChallenge() throws ClassCastException {
        return (CaptchaChallenge)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ConsentChallenge`. If the actual instance is not `ConsentChallenge`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ConsentChallenge`
     * @throws ClassCastException if the instance is not `ConsentChallenge`
     */
    public ConsentChallenge getConsentChallenge() throws ClassCastException {
        return (ConsentChallenge)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EmailChallenge`. If the actual instance is not `EmailChallenge`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EmailChallenge`
     * @throws ClassCastException if the instance is not `EmailChallenge`
     */
    public EmailChallenge getEmailChallenge() throws ClassCastException {
        return (EmailChallenge)super.getActualInstance();
    }
    /**
     * Get the actual instance of `FlowErrorChallenge`. If the actual instance is not `FlowErrorChallenge`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `FlowErrorChallenge`
     * @throws ClassCastException if the instance is not `FlowErrorChallenge`
     */
    public FlowErrorChallenge getFlowErrorChallenge() throws ClassCastException {
        return (FlowErrorChallenge)super.getActualInstance();
    }
    /**
     * Get the actual instance of `IdentificationChallenge`. If the actual instance is not `IdentificationChallenge`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `IdentificationChallenge`
     * @throws ClassCastException if the instance is not `IdentificationChallenge`
     */
    public IdentificationChallenge getIdentificationChallenge() throws ClassCastException {
        return (IdentificationChallenge)super.getActualInstance();
    }
    /**
     * Get the actual instance of `OAuthDeviceCodeChallenge`. If the actual instance is not `OAuthDeviceCodeChallenge`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `OAuthDeviceCodeChallenge`
     * @throws ClassCastException if the instance is not `OAuthDeviceCodeChallenge`
     */
    public OAuthDeviceCodeChallenge getOAuthDeviceCodeChallenge() throws ClassCastException {
        return (OAuthDeviceCodeChallenge)super.getActualInstance();
    }
    /**
     * Get the actual instance of `OAuthDeviceCodeFinishChallenge`. If the actual instance is not `OAuthDeviceCodeFinishChallenge`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `OAuthDeviceCodeFinishChallenge`
     * @throws ClassCastException if the instance is not `OAuthDeviceCodeFinishChallenge`
     */
    public OAuthDeviceCodeFinishChallenge getOAuthDeviceCodeFinishChallenge() throws ClassCastException {
        return (OAuthDeviceCodeFinishChallenge)super.getActualInstance();
    }
    /**
     * Get the actual instance of `PasswordChallenge`. If the actual instance is not `PasswordChallenge`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PasswordChallenge`
     * @throws ClassCastException if the instance is not `PasswordChallenge`
     */
    public PasswordChallenge getPasswordChallenge() throws ClassCastException {
        return (PasswordChallenge)super.getActualInstance();
    }
    /**
     * Get the actual instance of `PlexAuthenticationChallenge`. If the actual instance is not `PlexAuthenticationChallenge`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PlexAuthenticationChallenge`
     * @throws ClassCastException if the instance is not `PlexAuthenticationChallenge`
     */
    public PlexAuthenticationChallenge getPlexAuthenticationChallenge() throws ClassCastException {
        return (PlexAuthenticationChallenge)super.getActualInstance();
    }
    /**
     * Get the actual instance of `PromptChallenge`. If the actual instance is not `PromptChallenge`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PromptChallenge`
     * @throws ClassCastException if the instance is not `PromptChallenge`
     */
    public PromptChallenge getPromptChallenge() throws ClassCastException {
        return (PromptChallenge)super.getActualInstance();
    }
    /**
     * Get the actual instance of `RedirectChallenge`. If the actual instance is not `RedirectChallenge`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `RedirectChallenge`
     * @throws ClassCastException if the instance is not `RedirectChallenge`
     */
    public RedirectChallenge getRedirectChallenge() throws ClassCastException {
        return (RedirectChallenge)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ShellChallenge`. If the actual instance is not `ShellChallenge`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ShellChallenge`
     * @throws ClassCastException if the instance is not `ShellChallenge`
     */
    public ShellChallenge getShellChallenge() throws ClassCastException {
        return (ShellChallenge)super.getActualInstance();
    }
    /**
     * Get the actual instance of `UserLoginChallenge`. If the actual instance is not `UserLoginChallenge`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `UserLoginChallenge`
     * @throws ClassCastException if the instance is not `UserLoginChallenge`
     */
    public UserLoginChallenge getUserLoginChallenge() throws ClassCastException {
        return (UserLoginChallenge)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to ChallengeTypes
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with AccessDeniedChallenge
        try {
            AccessDeniedChallenge.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AccessDeniedChallenge failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AppleLoginChallenge
        try {
            AppleLoginChallenge.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AppleLoginChallenge failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AuthenticatorDuoChallenge
        try {
            AuthenticatorDuoChallenge.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AuthenticatorDuoChallenge failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AuthenticatorSMSChallenge
        try {
            AuthenticatorSMSChallenge.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AuthenticatorSMSChallenge failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AuthenticatorStaticChallenge
        try {
            AuthenticatorStaticChallenge.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AuthenticatorStaticChallenge failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AuthenticatorTOTPChallenge
        try {
            AuthenticatorTOTPChallenge.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AuthenticatorTOTPChallenge failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AuthenticatorValidationChallenge
        try {
            AuthenticatorValidationChallenge.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AuthenticatorValidationChallenge failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AuthenticatorWebAuthnChallenge
        try {
            AuthenticatorWebAuthnChallenge.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AuthenticatorWebAuthnChallenge failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AutosubmitChallenge
        try {
            AutosubmitChallenge.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AutosubmitChallenge failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with CaptchaChallenge
        try {
            CaptchaChallenge.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CaptchaChallenge failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ConsentChallenge
        try {
            ConsentChallenge.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ConsentChallenge failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with EmailChallenge
        try {
            EmailChallenge.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for EmailChallenge failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with FlowErrorChallenge
        try {
            FlowErrorChallenge.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for FlowErrorChallenge failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with IdentificationChallenge
        try {
            IdentificationChallenge.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for IdentificationChallenge failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with OAuthDeviceCodeChallenge
        try {
            OAuthDeviceCodeChallenge.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for OAuthDeviceCodeChallenge failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with OAuthDeviceCodeFinishChallenge
        try {
            OAuthDeviceCodeFinishChallenge.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for OAuthDeviceCodeFinishChallenge failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with PasswordChallenge
        try {
            PasswordChallenge.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PasswordChallenge failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with PlexAuthenticationChallenge
        try {
            PlexAuthenticationChallenge.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PlexAuthenticationChallenge failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with PromptChallenge
        try {
            PromptChallenge.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PromptChallenge failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with RedirectChallenge
        try {
            RedirectChallenge.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for RedirectChallenge failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ShellChallenge
        try {
            ShellChallenge.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ShellChallenge failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with UserLoginChallenge
        try {
            UserLoginChallenge.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for UserLoginChallenge failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for ChallengeTypes with oneOf schemas: AccessDeniedChallenge, AppleLoginChallenge, AuthenticatorDuoChallenge, AuthenticatorSMSChallenge, AuthenticatorStaticChallenge, AuthenticatorTOTPChallenge, AuthenticatorValidationChallenge, AuthenticatorWebAuthnChallenge, AutosubmitChallenge, CaptchaChallenge, ConsentChallenge, EmailChallenge, FlowErrorChallenge, IdentificationChallenge, OAuthDeviceCodeChallenge, OAuthDeviceCodeFinishChallenge, PasswordChallenge, PlexAuthenticationChallenge, PromptChallenge, RedirectChallenge, ShellChallenge, UserLoginChallenge. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of ChallengeTypes given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of ChallengeTypes
     * @throws IOException if the JSON string is invalid with respect to ChallengeTypes
     */
    public static ChallengeTypes fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, ChallengeTypes.class);
    }

    /**
     * Convert an instance of ChallengeTypes to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

