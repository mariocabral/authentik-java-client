/*
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.6.3
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * User agent os
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-25T23:12:57.050901581-03:00[America/Argentina/Cordoba]", comments = "Generator version: 7.8.0")
public class AuthenticatedSessionUserAgentOs {
  public static final String SERIALIZED_NAME_FAMILY = "family";
  @SerializedName(SERIALIZED_NAME_FAMILY)
  private String family;

  public static final String SERIALIZED_NAME_MAJOR = "major";
  @SerializedName(SERIALIZED_NAME_MAJOR)
  private String major;

  public static final String SERIALIZED_NAME_MINOR = "minor";
  @SerializedName(SERIALIZED_NAME_MINOR)
  private String minor;

  public static final String SERIALIZED_NAME_PATCH = "patch";
  @SerializedName(SERIALIZED_NAME_PATCH)
  private String patch;

  public static final String SERIALIZED_NAME_PATCH_MINOR = "patch_minor";
  @SerializedName(SERIALIZED_NAME_PATCH_MINOR)
  private String patchMinor;

  public AuthenticatedSessionUserAgentOs() {
  }

  public AuthenticatedSessionUserAgentOs family(String family) {
    this.family = family;
    return this;
  }

  /**
   * Get family
   * @return family
   */
  @javax.annotation.Nonnull
  public String getFamily() {
    return family;
  }

  public void setFamily(String family) {
    this.family = family;
  }


  public AuthenticatedSessionUserAgentOs major(String major) {
    this.major = major;
    return this;
  }

  /**
   * Get major
   * @return major
   */
  @javax.annotation.Nonnull
  public String getMajor() {
    return major;
  }

  public void setMajor(String major) {
    this.major = major;
  }


  public AuthenticatedSessionUserAgentOs minor(String minor) {
    this.minor = minor;
    return this;
  }

  /**
   * Get minor
   * @return minor
   */
  @javax.annotation.Nonnull
  public String getMinor() {
    return minor;
  }

  public void setMinor(String minor) {
    this.minor = minor;
  }


  public AuthenticatedSessionUserAgentOs patch(String patch) {
    this.patch = patch;
    return this;
  }

  /**
   * Get patch
   * @return patch
   */
  @javax.annotation.Nonnull
  public String getPatch() {
    return patch;
  }

  public void setPatch(String patch) {
    this.patch = patch;
  }


  public AuthenticatedSessionUserAgentOs patchMinor(String patchMinor) {
    this.patchMinor = patchMinor;
    return this;
  }

  /**
   * Get patchMinor
   * @return patchMinor
   */
  @javax.annotation.Nonnull
  public String getPatchMinor() {
    return patchMinor;
  }

  public void setPatchMinor(String patchMinor) {
    this.patchMinor = patchMinor;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuthenticatedSessionUserAgentOs authenticatedSessionUserAgentOs = (AuthenticatedSessionUserAgentOs) o;
    return Objects.equals(this.family, authenticatedSessionUserAgentOs.family) &&
        Objects.equals(this.major, authenticatedSessionUserAgentOs.major) &&
        Objects.equals(this.minor, authenticatedSessionUserAgentOs.minor) &&
        Objects.equals(this.patch, authenticatedSessionUserAgentOs.patch) &&
        Objects.equals(this.patchMinor, authenticatedSessionUserAgentOs.patchMinor);
  }

  @Override
  public int hashCode() {
    return Objects.hash(family, major, minor, patch, patchMinor);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuthenticatedSessionUserAgentOs {\n");
    sb.append("    family: ").append(toIndentedString(family)).append("\n");
    sb.append("    major: ").append(toIndentedString(major)).append("\n");
    sb.append("    minor: ").append(toIndentedString(minor)).append("\n");
    sb.append("    patch: ").append(toIndentedString(patch)).append("\n");
    sb.append("    patchMinor: ").append(toIndentedString(patchMinor)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("family");
    openapiFields.add("major");
    openapiFields.add("minor");
    openapiFields.add("patch");
    openapiFields.add("patch_minor");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("family");
    openapiRequiredFields.add("major");
    openapiRequiredFields.add("minor");
    openapiRequiredFields.add("patch");
    openapiRequiredFields.add("patch_minor");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AuthenticatedSessionUserAgentOs
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AuthenticatedSessionUserAgentOs.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AuthenticatedSessionUserAgentOs is not found in the empty JSON string", AuthenticatedSessionUserAgentOs.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AuthenticatedSessionUserAgentOs.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AuthenticatedSessionUserAgentOs` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AuthenticatedSessionUserAgentOs.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("family").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `family` to be a primitive type in the JSON string but got `%s`", jsonObj.get("family").toString()));
      }
      if (!jsonObj.get("major").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `major` to be a primitive type in the JSON string but got `%s`", jsonObj.get("major").toString()));
      }
      if (!jsonObj.get("minor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minor").toString()));
      }
      if (!jsonObj.get("patch").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `patch` to be a primitive type in the JSON string but got `%s`", jsonObj.get("patch").toString()));
      }
      if (!jsonObj.get("patch_minor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `patch_minor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("patch_minor").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AuthenticatedSessionUserAgentOs.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AuthenticatedSessionUserAgentOs' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AuthenticatedSessionUserAgentOs> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AuthenticatedSessionUserAgentOs.class));

       return (TypeAdapter<T>) new TypeAdapter<AuthenticatedSessionUserAgentOs>() {
           @Override
           public void write(JsonWriter out, AuthenticatedSessionUserAgentOs value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AuthenticatedSessionUserAgentOs read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AuthenticatedSessionUserAgentOs given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AuthenticatedSessionUserAgentOs
   * @throws IOException if the JSON string is invalid with respect to AuthenticatedSessionUserAgentOs
   */
  public static AuthenticatedSessionUserAgentOs fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AuthenticatedSessionUserAgentOs.class);
  }

  /**
   * Convert an instance of AuthenticatedSessionUserAgentOs to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

