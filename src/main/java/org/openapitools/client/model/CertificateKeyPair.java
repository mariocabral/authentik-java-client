/*
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.6.3
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CertificateKeyPair Serializer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-25T23:12:57.050901581-03:00[America/Argentina/Cordoba]", comments = "Generator version: 7.8.0")
public class CertificateKeyPair {
  public static final String SERIALIZED_NAME_PK = "pk";
  @SerializedName(SERIALIZED_NAME_PK)
  private UUID pk;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_FINGERPRINT_SHA256 = "fingerprint_sha256";
  @SerializedName(SERIALIZED_NAME_FINGERPRINT_SHA256)
  private String fingerprintSha256;

  public static final String SERIALIZED_NAME_FINGERPRINT_SHA1 = "fingerprint_sha1";
  @SerializedName(SERIALIZED_NAME_FINGERPRINT_SHA1)
  private String fingerprintSha1;

  public static final String SERIALIZED_NAME_CERT_EXPIRY = "cert_expiry";
  @SerializedName(SERIALIZED_NAME_CERT_EXPIRY)
  private OffsetDateTime certExpiry;

  public static final String SERIALIZED_NAME_CERT_SUBJECT = "cert_subject";
  @SerializedName(SERIALIZED_NAME_CERT_SUBJECT)
  private String certSubject;

  public static final String SERIALIZED_NAME_PRIVATE_KEY_AVAILABLE = "private_key_available";
  @SerializedName(SERIALIZED_NAME_PRIVATE_KEY_AVAILABLE)
  private Boolean privateKeyAvailable;

  public static final String SERIALIZED_NAME_PRIVATE_KEY_TYPE = "private_key_type";
  @SerializedName(SERIALIZED_NAME_PRIVATE_KEY_TYPE)
  private String privateKeyType;

  public static final String SERIALIZED_NAME_CERTIFICATE_DOWNLOAD_URL = "certificate_download_url";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_DOWNLOAD_URL)
  private String certificateDownloadUrl;

  public static final String SERIALIZED_NAME_PRIVATE_KEY_DOWNLOAD_URL = "private_key_download_url";
  @SerializedName(SERIALIZED_NAME_PRIVATE_KEY_DOWNLOAD_URL)
  private String privateKeyDownloadUrl;

  public static final String SERIALIZED_NAME_MANAGED = "managed";
  @SerializedName(SERIALIZED_NAME_MANAGED)
  private String managed;

  public CertificateKeyPair() {
  }

  public CertificateKeyPair(
     UUID pk, 
     String fingerprintSha256, 
     String fingerprintSha1, 
     OffsetDateTime certExpiry, 
     String certSubject, 
     Boolean privateKeyAvailable, 
     String privateKeyType, 
     String certificateDownloadUrl, 
     String privateKeyDownloadUrl, 
     String managed
  ) {
    this();
    this.pk = pk;
    this.fingerprintSha256 = fingerprintSha256;
    this.fingerprintSha1 = fingerprintSha1;
    this.certExpiry = certExpiry;
    this.certSubject = certSubject;
    this.privateKeyAvailable = privateKeyAvailable;
    this.privateKeyType = privateKeyType;
    this.certificateDownloadUrl = certificateDownloadUrl;
    this.privateKeyDownloadUrl = privateKeyDownloadUrl;
    this.managed = managed;
  }

  /**
   * Get pk
   * @return pk
   */
  @javax.annotation.Nonnull
  public UUID getPk() {
    return pk;
  }



  public CertificateKeyPair name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  /**
   * Get certificate Hash (SHA256)
   * @return fingerprintSha256
   */
  @javax.annotation.Nullable
  public String getFingerprintSha256() {
    return fingerprintSha256;
  }



  /**
   * Get certificate Hash (SHA1)
   * @return fingerprintSha1
   */
  @javax.annotation.Nullable
  public String getFingerprintSha1() {
    return fingerprintSha1;
  }



  /**
   * Get certificate expiry
   * @return certExpiry
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCertExpiry() {
    return certExpiry;
  }



  /**
   * Get certificate subject as full rfc4514
   * @return certSubject
   */
  @javax.annotation.Nullable
  public String getCertSubject() {
    return certSubject;
  }



  /**
   * Show if this keypair has a private key configured or not
   * @return privateKeyAvailable
   */
  @javax.annotation.Nonnull
  public Boolean getPrivateKeyAvailable() {
    return privateKeyAvailable;
  }



  /**
   * Get the private key&#39;s type, if set
   * @return privateKeyType
   */
  @javax.annotation.Nullable
  public String getPrivateKeyType() {
    return privateKeyType;
  }



  /**
   * Get URL to download certificate
   * @return certificateDownloadUrl
   */
  @javax.annotation.Nonnull
  public String getCertificateDownloadUrl() {
    return certificateDownloadUrl;
  }



  /**
   * Get URL to download private key
   * @return privateKeyDownloadUrl
   */
  @javax.annotation.Nonnull
  public String getPrivateKeyDownloadUrl() {
    return privateKeyDownloadUrl;
  }



  /**
   * Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
   * @return managed
   */
  @javax.annotation.Nullable
  public String getManaged() {
    return managed;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CertificateKeyPair certificateKeyPair = (CertificateKeyPair) o;
    return Objects.equals(this.pk, certificateKeyPair.pk) &&
        Objects.equals(this.name, certificateKeyPair.name) &&
        Objects.equals(this.fingerprintSha256, certificateKeyPair.fingerprintSha256) &&
        Objects.equals(this.fingerprintSha1, certificateKeyPair.fingerprintSha1) &&
        Objects.equals(this.certExpiry, certificateKeyPair.certExpiry) &&
        Objects.equals(this.certSubject, certificateKeyPair.certSubject) &&
        Objects.equals(this.privateKeyAvailable, certificateKeyPair.privateKeyAvailable) &&
        Objects.equals(this.privateKeyType, certificateKeyPair.privateKeyType) &&
        Objects.equals(this.certificateDownloadUrl, certificateKeyPair.certificateDownloadUrl) &&
        Objects.equals(this.privateKeyDownloadUrl, certificateKeyPair.privateKeyDownloadUrl) &&
        Objects.equals(this.managed, certificateKeyPair.managed);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pk, name, fingerprintSha256, fingerprintSha1, certExpiry, certSubject, privateKeyAvailable, privateKeyType, certificateDownloadUrl, privateKeyDownloadUrl, managed);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CertificateKeyPair {\n");
    sb.append("    pk: ").append(toIndentedString(pk)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    fingerprintSha256: ").append(toIndentedString(fingerprintSha256)).append("\n");
    sb.append("    fingerprintSha1: ").append(toIndentedString(fingerprintSha1)).append("\n");
    sb.append("    certExpiry: ").append(toIndentedString(certExpiry)).append("\n");
    sb.append("    certSubject: ").append(toIndentedString(certSubject)).append("\n");
    sb.append("    privateKeyAvailable: ").append(toIndentedString(privateKeyAvailable)).append("\n");
    sb.append("    privateKeyType: ").append(toIndentedString(privateKeyType)).append("\n");
    sb.append("    certificateDownloadUrl: ").append(toIndentedString(certificateDownloadUrl)).append("\n");
    sb.append("    privateKeyDownloadUrl: ").append(toIndentedString(privateKeyDownloadUrl)).append("\n");
    sb.append("    managed: ").append(toIndentedString(managed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pk");
    openapiFields.add("name");
    openapiFields.add("fingerprint_sha256");
    openapiFields.add("fingerprint_sha1");
    openapiFields.add("cert_expiry");
    openapiFields.add("cert_subject");
    openapiFields.add("private_key_available");
    openapiFields.add("private_key_type");
    openapiFields.add("certificate_download_url");
    openapiFields.add("private_key_download_url");
    openapiFields.add("managed");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("pk");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("fingerprint_sha256");
    openapiRequiredFields.add("fingerprint_sha1");
    openapiRequiredFields.add("cert_expiry");
    openapiRequiredFields.add("cert_subject");
    openapiRequiredFields.add("private_key_available");
    openapiRequiredFields.add("private_key_type");
    openapiRequiredFields.add("certificate_download_url");
    openapiRequiredFields.add("private_key_download_url");
    openapiRequiredFields.add("managed");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CertificateKeyPair
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CertificateKeyPair.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CertificateKeyPair is not found in the empty JSON string", CertificateKeyPair.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CertificateKeyPair.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CertificateKeyPair` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CertificateKeyPair.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("pk").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pk` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pk").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("fingerprint_sha256") != null && !jsonObj.get("fingerprint_sha256").isJsonNull()) && !jsonObj.get("fingerprint_sha256").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fingerprint_sha256` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fingerprint_sha256").toString()));
      }
      if ((jsonObj.get("fingerprint_sha1") != null && !jsonObj.get("fingerprint_sha1").isJsonNull()) && !jsonObj.get("fingerprint_sha1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fingerprint_sha1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fingerprint_sha1").toString()));
      }
      if ((jsonObj.get("cert_subject") != null && !jsonObj.get("cert_subject").isJsonNull()) && !jsonObj.get("cert_subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cert_subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cert_subject").toString()));
      }
      if ((jsonObj.get("private_key_type") != null && !jsonObj.get("private_key_type").isJsonNull()) && !jsonObj.get("private_key_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `private_key_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("private_key_type").toString()));
      }
      if (!jsonObj.get("certificate_download_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `certificate_download_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("certificate_download_url").toString()));
      }
      if (!jsonObj.get("private_key_download_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `private_key_download_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("private_key_download_url").toString()));
      }
      if ((jsonObj.get("managed") != null && !jsonObj.get("managed").isJsonNull()) && !jsonObj.get("managed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `managed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("managed").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CertificateKeyPair.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CertificateKeyPair' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CertificateKeyPair> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CertificateKeyPair.class));

       return (TypeAdapter<T>) new TypeAdapter<CertificateKeyPair>() {
           @Override
           public void write(JsonWriter out, CertificateKeyPair value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CertificateKeyPair read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CertificateKeyPair given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CertificateKeyPair
   * @throws IOException if the JSON string is invalid with respect to CertificateKeyPair
   */
  public static CertificateKeyPair fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CertificateKeyPair.class);
  }

  /**
   * Convert an instance of CertificateKeyPair to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

