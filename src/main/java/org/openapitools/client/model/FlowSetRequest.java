/*
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.6.3
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DeniedActionEnum;
import org.openapitools.client.model.FlowDesignationEnum;
import org.openapitools.client.model.FlowLayoutEnum;
import org.openapitools.client.model.PolicyEngineMode;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Stripped down flow serializer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-25T23:12:57.050901581-03:00[America/Argentina/Cordoba]", comments = "Generator version: 7.8.0")
public class FlowSetRequest {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SLUG = "slug";
  @SerializedName(SERIALIZED_NAME_SLUG)
  private String slug;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_DESIGNATION = "designation";
  @SerializedName(SERIALIZED_NAME_DESIGNATION)
  private FlowDesignationEnum designation;

  public static final String SERIALIZED_NAME_POLICY_ENGINE_MODE = "policy_engine_mode";
  @SerializedName(SERIALIZED_NAME_POLICY_ENGINE_MODE)
  private PolicyEngineMode policyEngineMode;

  public static final String SERIALIZED_NAME_COMPATIBILITY_MODE = "compatibility_mode";
  @SerializedName(SERIALIZED_NAME_COMPATIBILITY_MODE)
  private Boolean compatibilityMode;

  public static final String SERIALIZED_NAME_LAYOUT = "layout";
  @SerializedName(SERIALIZED_NAME_LAYOUT)
  private FlowLayoutEnum layout;

  public static final String SERIALIZED_NAME_DENIED_ACTION = "denied_action";
  @SerializedName(SERIALIZED_NAME_DENIED_ACTION)
  private DeniedActionEnum deniedAction;

  public FlowSetRequest() {
  }

  public FlowSetRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public FlowSetRequest slug(String slug) {
    this.slug = slug;
    return this;
  }

  /**
   * Visible in the URL.
   * @return slug
   */
  @javax.annotation.Nonnull
  public String getSlug() {
    return slug;
  }

  public void setSlug(String slug) {
    this.slug = slug;
  }


  public FlowSetRequest title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Shown as the Title in Flow pages.
   * @return title
   */
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public FlowSetRequest designation(FlowDesignationEnum designation) {
    this.designation = designation;
    return this;
  }

  /**
   * Decides what this Flow is used for. For example, the Authentication flow is redirect to when an un-authenticated user visits authentik.
   * @return designation
   */
  @javax.annotation.Nonnull
  public FlowDesignationEnum getDesignation() {
    return designation;
  }

  public void setDesignation(FlowDesignationEnum designation) {
    this.designation = designation;
  }


  public FlowSetRequest policyEngineMode(PolicyEngineMode policyEngineMode) {
    this.policyEngineMode = policyEngineMode;
    return this;
  }

  /**
   * Get policyEngineMode
   * @return policyEngineMode
   */
  @javax.annotation.Nullable
  public PolicyEngineMode getPolicyEngineMode() {
    return policyEngineMode;
  }

  public void setPolicyEngineMode(PolicyEngineMode policyEngineMode) {
    this.policyEngineMode = policyEngineMode;
  }


  public FlowSetRequest compatibilityMode(Boolean compatibilityMode) {
    this.compatibilityMode = compatibilityMode;
    return this;
  }

  /**
   * Enable compatibility mode, increases compatibility with password managers on mobile devices.
   * @return compatibilityMode
   */
  @javax.annotation.Nullable
  public Boolean getCompatibilityMode() {
    return compatibilityMode;
  }

  public void setCompatibilityMode(Boolean compatibilityMode) {
    this.compatibilityMode = compatibilityMode;
  }


  public FlowSetRequest layout(FlowLayoutEnum layout) {
    this.layout = layout;
    return this;
  }

  /**
   * Get layout
   * @return layout
   */
  @javax.annotation.Nullable
  public FlowLayoutEnum getLayout() {
    return layout;
  }

  public void setLayout(FlowLayoutEnum layout) {
    this.layout = layout;
  }


  public FlowSetRequest deniedAction(DeniedActionEnum deniedAction) {
    this.deniedAction = deniedAction;
    return this;
  }

  /**
   * Configure what should happen when a flow denies access to a user.
   * @return deniedAction
   */
  @javax.annotation.Nullable
  public DeniedActionEnum getDeniedAction() {
    return deniedAction;
  }

  public void setDeniedAction(DeniedActionEnum deniedAction) {
    this.deniedAction = deniedAction;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FlowSetRequest flowSetRequest = (FlowSetRequest) o;
    return Objects.equals(this.name, flowSetRequest.name) &&
        Objects.equals(this.slug, flowSetRequest.slug) &&
        Objects.equals(this.title, flowSetRequest.title) &&
        Objects.equals(this.designation, flowSetRequest.designation) &&
        Objects.equals(this.policyEngineMode, flowSetRequest.policyEngineMode) &&
        Objects.equals(this.compatibilityMode, flowSetRequest.compatibilityMode) &&
        Objects.equals(this.layout, flowSetRequest.layout) &&
        Objects.equals(this.deniedAction, flowSetRequest.deniedAction);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, slug, title, designation, policyEngineMode, compatibilityMode, layout, deniedAction);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FlowSetRequest {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    slug: ").append(toIndentedString(slug)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    designation: ").append(toIndentedString(designation)).append("\n");
    sb.append("    policyEngineMode: ").append(toIndentedString(policyEngineMode)).append("\n");
    sb.append("    compatibilityMode: ").append(toIndentedString(compatibilityMode)).append("\n");
    sb.append("    layout: ").append(toIndentedString(layout)).append("\n");
    sb.append("    deniedAction: ").append(toIndentedString(deniedAction)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("slug");
    openapiFields.add("title");
    openapiFields.add("designation");
    openapiFields.add("policy_engine_mode");
    openapiFields.add("compatibility_mode");
    openapiFields.add("layout");
    openapiFields.add("denied_action");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("slug");
    openapiRequiredFields.add("title");
    openapiRequiredFields.add("designation");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FlowSetRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FlowSetRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FlowSetRequest is not found in the empty JSON string", FlowSetRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FlowSetRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FlowSetRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FlowSetRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("slug").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slug` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slug").toString()));
      }
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      // validate the required field `designation`
      FlowDesignationEnum.validateJsonElement(jsonObj.get("designation"));
      // validate the optional field `policy_engine_mode`
      if (jsonObj.get("policy_engine_mode") != null && !jsonObj.get("policy_engine_mode").isJsonNull()) {
        PolicyEngineMode.validateJsonElement(jsonObj.get("policy_engine_mode"));
      }
      // validate the optional field `layout`
      if (jsonObj.get("layout") != null && !jsonObj.get("layout").isJsonNull()) {
        FlowLayoutEnum.validateJsonElement(jsonObj.get("layout"));
      }
      // validate the optional field `denied_action`
      if (jsonObj.get("denied_action") != null && !jsonObj.get("denied_action").isJsonNull()) {
        DeniedActionEnum.validateJsonElement(jsonObj.get("denied_action"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FlowSetRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FlowSetRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FlowSetRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FlowSetRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<FlowSetRequest>() {
           @Override
           public void write(JsonWriter out, FlowSetRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FlowSetRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FlowSetRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FlowSetRequest
   * @throws IOException if the JSON string is invalid with respect to FlowSetRequest
   */
  public static FlowSetRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FlowSetRequest.class);
  }

  /**
   * Convert an instance of FlowSetRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

