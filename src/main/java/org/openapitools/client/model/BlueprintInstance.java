/*
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.6.3
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.BlueprintInstanceStatusEnum;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Info about a single blueprint instance file
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-25T23:12:57.050901581-03:00[America/Argentina/Cordoba]", comments = "Generator version: 7.8.0")
public class BlueprintInstance {
  public static final String SERIALIZED_NAME_PK = "pk";
  @SerializedName(SERIALIZED_NAME_PK)
  private UUID pk;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path = "";

  public static final String SERIALIZED_NAME_CONTEXT = "context";
  @SerializedName(SERIALIZED_NAME_CONTEXT)
  private Object context = null;

  public static final String SERIALIZED_NAME_LAST_APPLIED = "last_applied";
  @SerializedName(SERIALIZED_NAME_LAST_APPLIED)
  private OffsetDateTime lastApplied;

  public static final String SERIALIZED_NAME_LAST_APPLIED_HASH = "last_applied_hash";
  @SerializedName(SERIALIZED_NAME_LAST_APPLIED_HASH)
  private String lastAppliedHash;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private BlueprintInstanceStatusEnum status;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_MANAGED_MODELS = "managed_models";
  @SerializedName(SERIALIZED_NAME_MANAGED_MODELS)
  private List<String> managedModels = new ArrayList<>();

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Object metadata = null;

  public static final String SERIALIZED_NAME_CONTENT = "content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private String content;

  public BlueprintInstance() {
  }

  public BlueprintInstance(
     UUID pk, 
     OffsetDateTime lastApplied, 
     String lastAppliedHash, 
     BlueprintInstanceStatusEnum status, 
     List<String> managedModels, 
     Object metadata
  ) {
    this();
    this.pk = pk;
    this.lastApplied = lastApplied;
    this.lastAppliedHash = lastAppliedHash;
    this.status = status;
    this.managedModels = managedModels;
    this.metadata = metadata;
  }

  /**
   * Get pk
   * @return pk
   */
  @javax.annotation.Nonnull
  public UUID getPk() {
    return pk;
  }



  public BlueprintInstance name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public BlueprintInstance path(String path) {
    this.path = path;
    return this;
  }

  /**
   * Get path
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public BlueprintInstance context(Object context) {
    this.context = context;
    return this;
  }

  /**
   * Get context
   * @return context
   */
  @javax.annotation.Nullable
  public Object getContext() {
    return context;
  }

  public void setContext(Object context) {
    this.context = context;
  }


  /**
   * Get lastApplied
   * @return lastApplied
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getLastApplied() {
    return lastApplied;
  }



  /**
   * Get lastAppliedHash
   * @return lastAppliedHash
   */
  @javax.annotation.Nonnull
  public String getLastAppliedHash() {
    return lastAppliedHash;
  }



  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public BlueprintInstanceStatusEnum getStatus() {
    return status;
  }



  public BlueprintInstance enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Get enabled
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  /**
   * Get managedModels
   * @return managedModels
   */
  @javax.annotation.Nonnull
  public List<String> getManagedModels() {
    return managedModels;
  }



  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nullable
  public Object getMetadata() {
    return metadata;
  }



  public BlueprintInstance content(String content) {
    this.content = content;
    return this;
  }

  /**
   * Get content
   * @return content
   */
  @javax.annotation.Nullable
  public String getContent() {
    return content;
  }

  public void setContent(String content) {
    this.content = content;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BlueprintInstance blueprintInstance = (BlueprintInstance) o;
    return Objects.equals(this.pk, blueprintInstance.pk) &&
        Objects.equals(this.name, blueprintInstance.name) &&
        Objects.equals(this.path, blueprintInstance.path) &&
        Objects.equals(this.context, blueprintInstance.context) &&
        Objects.equals(this.lastApplied, blueprintInstance.lastApplied) &&
        Objects.equals(this.lastAppliedHash, blueprintInstance.lastAppliedHash) &&
        Objects.equals(this.status, blueprintInstance.status) &&
        Objects.equals(this.enabled, blueprintInstance.enabled) &&
        Objects.equals(this.managedModels, blueprintInstance.managedModels) &&
        Objects.equals(this.metadata, blueprintInstance.metadata) &&
        Objects.equals(this.content, blueprintInstance.content);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(pk, name, path, context, lastApplied, lastAppliedHash, status, enabled, managedModels, metadata, content);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BlueprintInstance {\n");
    sb.append("    pk: ").append(toIndentedString(pk)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    context: ").append(toIndentedString(context)).append("\n");
    sb.append("    lastApplied: ").append(toIndentedString(lastApplied)).append("\n");
    sb.append("    lastAppliedHash: ").append(toIndentedString(lastAppliedHash)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    managedModels: ").append(toIndentedString(managedModels)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pk");
    openapiFields.add("name");
    openapiFields.add("path");
    openapiFields.add("context");
    openapiFields.add("last_applied");
    openapiFields.add("last_applied_hash");
    openapiFields.add("status");
    openapiFields.add("enabled");
    openapiFields.add("managed_models");
    openapiFields.add("metadata");
    openapiFields.add("content");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("pk");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("last_applied");
    openapiRequiredFields.add("last_applied_hash");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("managed_models");
    openapiRequiredFields.add("metadata");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BlueprintInstance
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BlueprintInstance.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BlueprintInstance is not found in the empty JSON string", BlueprintInstance.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BlueprintInstance.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BlueprintInstance` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BlueprintInstance.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("pk").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pk` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pk").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) && !jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      if (!jsonObj.get("last_applied_hash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_applied_hash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_applied_hash").toString()));
      }
      // validate the required field `status`
      BlueprintInstanceStatusEnum.validateJsonElement(jsonObj.get("status"));
      // ensure the required json array is present
      if (jsonObj.get("managed_models") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("managed_models").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `managed_models` to be an array in the JSON string but got `%s`", jsonObj.get("managed_models").toString()));
      }
      if ((jsonObj.get("content") != null && !jsonObj.get("content").isJsonNull()) && !jsonObj.get("content").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `content` to be a primitive type in the JSON string but got `%s`", jsonObj.get("content").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BlueprintInstance.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BlueprintInstance' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BlueprintInstance> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BlueprintInstance.class));

       return (TypeAdapter<T>) new TypeAdapter<BlueprintInstance>() {
           @Override
           public void write(JsonWriter out, BlueprintInstance value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BlueprintInstance read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BlueprintInstance given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BlueprintInstance
   * @throws IOException if the JSON string is invalid with respect to BlueprintInstance
   */
  public static BlueprintInstance fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BlueprintInstance.class);
  }

  /**
   * Convert an instance of BlueprintInstance to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

