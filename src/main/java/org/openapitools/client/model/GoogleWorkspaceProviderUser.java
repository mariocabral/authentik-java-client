/*
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.6.3
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.GroupMember;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GoogleWorkspaceProviderUser Serializer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-25T23:12:57.050901581-03:00[America/Argentina/Cordoba]", comments = "Generator version: 7.8.0")
public class GoogleWorkspaceProviderUser {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_GOOGLE_ID = "google_id";
  @SerializedName(SERIALIZED_NAME_GOOGLE_ID)
  private String googleId;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private Integer user;

  public static final String SERIALIZED_NAME_USER_OBJ = "user_obj";
  @SerializedName(SERIALIZED_NAME_USER_OBJ)
  private GroupMember userObj;

  public static final String SERIALIZED_NAME_PROVIDER = "provider";
  @SerializedName(SERIALIZED_NAME_PROVIDER)
  private Integer provider;

  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private Object attributes = null;

  public GoogleWorkspaceProviderUser() {
  }

  public GoogleWorkspaceProviderUser(
     UUID id, 
     GroupMember userObj, 
     Object attributes
  ) {
    this();
    this.id = id;
    this.userObj = userObj;
    this.attributes = attributes;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public UUID getId() {
    return id;
  }



  public GoogleWorkspaceProviderUser googleId(String googleId) {
    this.googleId = googleId;
    return this;
  }

  /**
   * Get googleId
   * @return googleId
   */
  @javax.annotation.Nonnull
  public String getGoogleId() {
    return googleId;
  }

  public void setGoogleId(String googleId) {
    this.googleId = googleId;
  }


  public GoogleWorkspaceProviderUser user(Integer user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nonnull
  public Integer getUser() {
    return user;
  }

  public void setUser(Integer user) {
    this.user = user;
  }


  /**
   * Get userObj
   * @return userObj
   */
  @javax.annotation.Nonnull
  public GroupMember getUserObj() {
    return userObj;
  }



  public GoogleWorkspaceProviderUser provider(Integer provider) {
    this.provider = provider;
    return this;
  }

  /**
   * Get provider
   * @return provider
   */
  @javax.annotation.Nonnull
  public Integer getProvider() {
    return provider;
  }

  public void setProvider(Integer provider) {
    this.provider = provider;
  }


  /**
   * Get attributes
   * @return attributes
   */
  @javax.annotation.Nullable
  public Object getAttributes() {
    return attributes;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleWorkspaceProviderUser googleWorkspaceProviderUser = (GoogleWorkspaceProviderUser) o;
    return Objects.equals(this.id, googleWorkspaceProviderUser.id) &&
        Objects.equals(this.googleId, googleWorkspaceProviderUser.googleId) &&
        Objects.equals(this.user, googleWorkspaceProviderUser.user) &&
        Objects.equals(this.userObj, googleWorkspaceProviderUser.userObj) &&
        Objects.equals(this.provider, googleWorkspaceProviderUser.provider) &&
        Objects.equals(this.attributes, googleWorkspaceProviderUser.attributes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, googleId, user, userObj, provider, attributes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleWorkspaceProviderUser {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    googleId: ").append(toIndentedString(googleId)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    userObj: ").append(toIndentedString(userObj)).append("\n");
    sb.append("    provider: ").append(toIndentedString(provider)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("google_id");
    openapiFields.add("user");
    openapiFields.add("user_obj");
    openapiFields.add("provider");
    openapiFields.add("attributes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("google_id");
    openapiRequiredFields.add("user");
    openapiRequiredFields.add("user_obj");
    openapiRequiredFields.add("provider");
    openapiRequiredFields.add("attributes");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleWorkspaceProviderUser
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleWorkspaceProviderUser.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleWorkspaceProviderUser is not found in the empty JSON string", GoogleWorkspaceProviderUser.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleWorkspaceProviderUser.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleWorkspaceProviderUser` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GoogleWorkspaceProviderUser.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("google_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `google_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("google_id").toString()));
      }
      // validate the required field `user_obj`
      GroupMember.validateJsonElement(jsonObj.get("user_obj"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleWorkspaceProviderUser.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleWorkspaceProviderUser' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleWorkspaceProviderUser> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleWorkspaceProviderUser.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleWorkspaceProviderUser>() {
           @Override
           public void write(JsonWriter out, GoogleWorkspaceProviderUser value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleWorkspaceProviderUser read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleWorkspaceProviderUser given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleWorkspaceProviderUser
   * @throws IOException if the JSON string is invalid with respect to GoogleWorkspaceProviderUser
   */
  public static GoogleWorkspaceProviderUser fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleWorkspaceProviderUser.class);
  }

  /**
   * Convert an instance of GoogleWorkspaceProviderUser to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

