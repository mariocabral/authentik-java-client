/*
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.6.3
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.LDAPAPIAccessMode;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LDAPProvider Serializer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-25T23:12:57.050901581-03:00[America/Argentina/Cordoba]", comments = "Generator version: 7.8.0")
public class LDAPOutpostConfig {
  public static final String SERIALIZED_NAME_PK = "pk";
  @SerializedName(SERIALIZED_NAME_PK)
  private Integer pk;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_BASE_DN = "base_dn";
  @SerializedName(SERIALIZED_NAME_BASE_DN)
  private String baseDn;

  public static final String SERIALIZED_NAME_BIND_FLOW_SLUG = "bind_flow_slug";
  @SerializedName(SERIALIZED_NAME_BIND_FLOW_SLUG)
  private String bindFlowSlug;

  public static final String SERIALIZED_NAME_APPLICATION_SLUG = "application_slug";
  @SerializedName(SERIALIZED_NAME_APPLICATION_SLUG)
  private String applicationSlug;

  public static final String SERIALIZED_NAME_SEARCH_GROUP = "search_group";
  @SerializedName(SERIALIZED_NAME_SEARCH_GROUP)
  private UUID searchGroup;

  public static final String SERIALIZED_NAME_CERTIFICATE = "certificate";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE)
  private UUID certificate;

  public static final String SERIALIZED_NAME_TLS_SERVER_NAME = "tls_server_name";
  @SerializedName(SERIALIZED_NAME_TLS_SERVER_NAME)
  private String tlsServerName;

  public static final String SERIALIZED_NAME_UID_START_NUMBER = "uid_start_number";
  @SerializedName(SERIALIZED_NAME_UID_START_NUMBER)
  private Integer uidStartNumber;

  public static final String SERIALIZED_NAME_GID_START_NUMBER = "gid_start_number";
  @SerializedName(SERIALIZED_NAME_GID_START_NUMBER)
  private Integer gidStartNumber;

  public static final String SERIALIZED_NAME_SEARCH_MODE = "search_mode";
  @SerializedName(SERIALIZED_NAME_SEARCH_MODE)
  private LDAPAPIAccessMode searchMode;

  public static final String SERIALIZED_NAME_BIND_MODE = "bind_mode";
  @SerializedName(SERIALIZED_NAME_BIND_MODE)
  private LDAPAPIAccessMode bindMode;

  public static final String SERIALIZED_NAME_MFA_SUPPORT = "mfa_support";
  @SerializedName(SERIALIZED_NAME_MFA_SUPPORT)
  private Boolean mfaSupport;

  public LDAPOutpostConfig() {
  }

  public LDAPOutpostConfig(
     Integer pk, 
     String applicationSlug
  ) {
    this();
    this.pk = pk;
    this.applicationSlug = applicationSlug;
  }

  /**
   * Get pk
   * @return pk
   */
  @javax.annotation.Nonnull
  public Integer getPk() {
    return pk;
  }



  public LDAPOutpostConfig name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public LDAPOutpostConfig baseDn(String baseDn) {
    this.baseDn = baseDn;
    return this;
  }

  /**
   * DN under which objects are accessible.
   * @return baseDn
   */
  @javax.annotation.Nullable
  public String getBaseDn() {
    return baseDn;
  }

  public void setBaseDn(String baseDn) {
    this.baseDn = baseDn;
  }


  public LDAPOutpostConfig bindFlowSlug(String bindFlowSlug) {
    this.bindFlowSlug = bindFlowSlug;
    return this;
  }

  /**
   * Get bindFlowSlug
   * @return bindFlowSlug
   */
  @javax.annotation.Nonnull
  public String getBindFlowSlug() {
    return bindFlowSlug;
  }

  public void setBindFlowSlug(String bindFlowSlug) {
    this.bindFlowSlug = bindFlowSlug;
  }


  /**
   * Prioritise backchannel slug over direct application slug
   * @return applicationSlug
   */
  @javax.annotation.Nonnull
  public String getApplicationSlug() {
    return applicationSlug;
  }



  public LDAPOutpostConfig searchGroup(UUID searchGroup) {
    this.searchGroup = searchGroup;
    return this;
  }

  /**
   * Users in this group can do search queries. If not set, every user can execute search queries.
   * @return searchGroup
   */
  @javax.annotation.Nullable
  public UUID getSearchGroup() {
    return searchGroup;
  }

  public void setSearchGroup(UUID searchGroup) {
    this.searchGroup = searchGroup;
  }


  public LDAPOutpostConfig certificate(UUID certificate) {
    this.certificate = certificate;
    return this;
  }

  /**
   * Get certificate
   * @return certificate
   */
  @javax.annotation.Nullable
  public UUID getCertificate() {
    return certificate;
  }

  public void setCertificate(UUID certificate) {
    this.certificate = certificate;
  }


  public LDAPOutpostConfig tlsServerName(String tlsServerName) {
    this.tlsServerName = tlsServerName;
    return this;
  }

  /**
   * Get tlsServerName
   * @return tlsServerName
   */
  @javax.annotation.Nullable
  public String getTlsServerName() {
    return tlsServerName;
  }

  public void setTlsServerName(String tlsServerName) {
    this.tlsServerName = tlsServerName;
  }


  public LDAPOutpostConfig uidStartNumber(Integer uidStartNumber) {
    this.uidStartNumber = uidStartNumber;
    return this;
  }

  /**
   * The start for uidNumbers, this number is added to the user.pk to make sure that the numbers aren&#39;t too low for POSIX users. Default is 2000 to ensure that we don&#39;t collide with local users uidNumber
   * minimum: -2147483648
   * maximum: 2147483647
   * @return uidStartNumber
   */
  @javax.annotation.Nullable
  public Integer getUidStartNumber() {
    return uidStartNumber;
  }

  public void setUidStartNumber(Integer uidStartNumber) {
    this.uidStartNumber = uidStartNumber;
  }


  public LDAPOutpostConfig gidStartNumber(Integer gidStartNumber) {
    this.gidStartNumber = gidStartNumber;
    return this;
  }

  /**
   * The start for gidNumbers, this number is added to a number generated from the group.pk to make sure that the numbers aren&#39;t too low for POSIX groups. Default is 4000 to ensure that we don&#39;t collide with local groups or users primary groups gidNumber
   * minimum: -2147483648
   * maximum: 2147483647
   * @return gidStartNumber
   */
  @javax.annotation.Nullable
  public Integer getGidStartNumber() {
    return gidStartNumber;
  }

  public void setGidStartNumber(Integer gidStartNumber) {
    this.gidStartNumber = gidStartNumber;
  }


  public LDAPOutpostConfig searchMode(LDAPAPIAccessMode searchMode) {
    this.searchMode = searchMode;
    return this;
  }

  /**
   * Get searchMode
   * @return searchMode
   */
  @javax.annotation.Nullable
  public LDAPAPIAccessMode getSearchMode() {
    return searchMode;
  }

  public void setSearchMode(LDAPAPIAccessMode searchMode) {
    this.searchMode = searchMode;
  }


  public LDAPOutpostConfig bindMode(LDAPAPIAccessMode bindMode) {
    this.bindMode = bindMode;
    return this;
  }

  /**
   * Get bindMode
   * @return bindMode
   */
  @javax.annotation.Nullable
  public LDAPAPIAccessMode getBindMode() {
    return bindMode;
  }

  public void setBindMode(LDAPAPIAccessMode bindMode) {
    this.bindMode = bindMode;
  }


  public LDAPOutpostConfig mfaSupport(Boolean mfaSupport) {
    this.mfaSupport = mfaSupport;
    return this;
  }

  /**
   * When enabled, code-based multi-factor authentication can be used by appending a semicolon and the TOTP code to the password. This should only be enabled if all users that will bind to this provider have a TOTP device configured, as otherwise a password may incorrectly be rejected if it contains a semicolon.
   * @return mfaSupport
   */
  @javax.annotation.Nullable
  public Boolean getMfaSupport() {
    return mfaSupport;
  }

  public void setMfaSupport(Boolean mfaSupport) {
    this.mfaSupport = mfaSupport;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LDAPOutpostConfig ldAPOutpostConfig = (LDAPOutpostConfig) o;
    return Objects.equals(this.pk, ldAPOutpostConfig.pk) &&
        Objects.equals(this.name, ldAPOutpostConfig.name) &&
        Objects.equals(this.baseDn, ldAPOutpostConfig.baseDn) &&
        Objects.equals(this.bindFlowSlug, ldAPOutpostConfig.bindFlowSlug) &&
        Objects.equals(this.applicationSlug, ldAPOutpostConfig.applicationSlug) &&
        Objects.equals(this.searchGroup, ldAPOutpostConfig.searchGroup) &&
        Objects.equals(this.certificate, ldAPOutpostConfig.certificate) &&
        Objects.equals(this.tlsServerName, ldAPOutpostConfig.tlsServerName) &&
        Objects.equals(this.uidStartNumber, ldAPOutpostConfig.uidStartNumber) &&
        Objects.equals(this.gidStartNumber, ldAPOutpostConfig.gidStartNumber) &&
        Objects.equals(this.searchMode, ldAPOutpostConfig.searchMode) &&
        Objects.equals(this.bindMode, ldAPOutpostConfig.bindMode) &&
        Objects.equals(this.mfaSupport, ldAPOutpostConfig.mfaSupport);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(pk, name, baseDn, bindFlowSlug, applicationSlug, searchGroup, certificate, tlsServerName, uidStartNumber, gidStartNumber, searchMode, bindMode, mfaSupport);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LDAPOutpostConfig {\n");
    sb.append("    pk: ").append(toIndentedString(pk)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    baseDn: ").append(toIndentedString(baseDn)).append("\n");
    sb.append("    bindFlowSlug: ").append(toIndentedString(bindFlowSlug)).append("\n");
    sb.append("    applicationSlug: ").append(toIndentedString(applicationSlug)).append("\n");
    sb.append("    searchGroup: ").append(toIndentedString(searchGroup)).append("\n");
    sb.append("    certificate: ").append(toIndentedString(certificate)).append("\n");
    sb.append("    tlsServerName: ").append(toIndentedString(tlsServerName)).append("\n");
    sb.append("    uidStartNumber: ").append(toIndentedString(uidStartNumber)).append("\n");
    sb.append("    gidStartNumber: ").append(toIndentedString(gidStartNumber)).append("\n");
    sb.append("    searchMode: ").append(toIndentedString(searchMode)).append("\n");
    sb.append("    bindMode: ").append(toIndentedString(bindMode)).append("\n");
    sb.append("    mfaSupport: ").append(toIndentedString(mfaSupport)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pk");
    openapiFields.add("name");
    openapiFields.add("base_dn");
    openapiFields.add("bind_flow_slug");
    openapiFields.add("application_slug");
    openapiFields.add("search_group");
    openapiFields.add("certificate");
    openapiFields.add("tls_server_name");
    openapiFields.add("uid_start_number");
    openapiFields.add("gid_start_number");
    openapiFields.add("search_mode");
    openapiFields.add("bind_mode");
    openapiFields.add("mfa_support");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("pk");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("bind_flow_slug");
    openapiRequiredFields.add("application_slug");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LDAPOutpostConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LDAPOutpostConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LDAPOutpostConfig is not found in the empty JSON string", LDAPOutpostConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LDAPOutpostConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LDAPOutpostConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LDAPOutpostConfig.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("base_dn") != null && !jsonObj.get("base_dn").isJsonNull()) && !jsonObj.get("base_dn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `base_dn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("base_dn").toString()));
      }
      if (!jsonObj.get("bind_flow_slug").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bind_flow_slug` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bind_flow_slug").toString()));
      }
      if (!jsonObj.get("application_slug").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `application_slug` to be a primitive type in the JSON string but got `%s`", jsonObj.get("application_slug").toString()));
      }
      if ((jsonObj.get("search_group") != null && !jsonObj.get("search_group").isJsonNull()) && !jsonObj.get("search_group").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `search_group` to be a primitive type in the JSON string but got `%s`", jsonObj.get("search_group").toString()));
      }
      if ((jsonObj.get("certificate") != null && !jsonObj.get("certificate").isJsonNull()) && !jsonObj.get("certificate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `certificate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("certificate").toString()));
      }
      if ((jsonObj.get("tls_server_name") != null && !jsonObj.get("tls_server_name").isJsonNull()) && !jsonObj.get("tls_server_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tls_server_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tls_server_name").toString()));
      }
      // validate the optional field `search_mode`
      if (jsonObj.get("search_mode") != null && !jsonObj.get("search_mode").isJsonNull()) {
        LDAPAPIAccessMode.validateJsonElement(jsonObj.get("search_mode"));
      }
      // validate the optional field `bind_mode`
      if (jsonObj.get("bind_mode") != null && !jsonObj.get("bind_mode").isJsonNull()) {
        LDAPAPIAccessMode.validateJsonElement(jsonObj.get("bind_mode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LDAPOutpostConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LDAPOutpostConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LDAPOutpostConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LDAPOutpostConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<LDAPOutpostConfig>() {
           @Override
           public void write(JsonWriter out, LDAPOutpostConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LDAPOutpostConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LDAPOutpostConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LDAPOutpostConfig
   * @throws IOException if the JSON string is invalid with respect to LDAPOutpostConfig
   */
  public static LDAPOutpostConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LDAPOutpostConfig.class);
  }

  /**
   * Convert an instance of LDAPOutpostConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

