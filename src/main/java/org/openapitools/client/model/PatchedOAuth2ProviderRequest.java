/*
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.6.3
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.ClientTypeEnum;
import org.openapitools.client.model.IssuerModeEnum;
import org.openapitools.client.model.SubModeEnum;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OAuth2Provider Serializer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-25T23:12:57.050901581-03:00[America/Argentina/Cordoba]", comments = "Generator version: 7.8.0")
public class PatchedOAuth2ProviderRequest {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_AUTHENTICATION_FLOW = "authentication_flow";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_FLOW)
  private UUID authenticationFlow;

  public static final String SERIALIZED_NAME_AUTHORIZATION_FLOW = "authorization_flow";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_FLOW)
  private UUID authorizationFlow;

  public static final String SERIALIZED_NAME_PROPERTY_MAPPINGS = "property_mappings";
  @SerializedName(SERIALIZED_NAME_PROPERTY_MAPPINGS)
  private List<UUID> propertyMappings = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLIENT_TYPE = "client_type";
  @SerializedName(SERIALIZED_NAME_CLIENT_TYPE)
  private ClientTypeEnum clientType;

  public static final String SERIALIZED_NAME_CLIENT_ID = "client_id";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  private String clientId;

  public static final String SERIALIZED_NAME_CLIENT_SECRET = "client_secret";
  @SerializedName(SERIALIZED_NAME_CLIENT_SECRET)
  private String clientSecret;

  public static final String SERIALIZED_NAME_ACCESS_CODE_VALIDITY = "access_code_validity";
  @SerializedName(SERIALIZED_NAME_ACCESS_CODE_VALIDITY)
  private String accessCodeValidity;

  public static final String SERIALIZED_NAME_ACCESS_TOKEN_VALIDITY = "access_token_validity";
  @SerializedName(SERIALIZED_NAME_ACCESS_TOKEN_VALIDITY)
  private String accessTokenValidity;

  public static final String SERIALIZED_NAME_REFRESH_TOKEN_VALIDITY = "refresh_token_validity";
  @SerializedName(SERIALIZED_NAME_REFRESH_TOKEN_VALIDITY)
  private String refreshTokenValidity;

  public static final String SERIALIZED_NAME_INCLUDE_CLAIMS_IN_ID_TOKEN = "include_claims_in_id_token";
  @SerializedName(SERIALIZED_NAME_INCLUDE_CLAIMS_IN_ID_TOKEN)
  private Boolean includeClaimsInIdToken;

  public static final String SERIALIZED_NAME_SIGNING_KEY = "signing_key";
  @SerializedName(SERIALIZED_NAME_SIGNING_KEY)
  private UUID signingKey;

  public static final String SERIALIZED_NAME_REDIRECT_URIS = "redirect_uris";
  @SerializedName(SERIALIZED_NAME_REDIRECT_URIS)
  private String redirectUris;

  public static final String SERIALIZED_NAME_SUB_MODE = "sub_mode";
  @SerializedName(SERIALIZED_NAME_SUB_MODE)
  private SubModeEnum subMode;

  public static final String SERIALIZED_NAME_ISSUER_MODE = "issuer_mode";
  @SerializedName(SERIALIZED_NAME_ISSUER_MODE)
  private IssuerModeEnum issuerMode;

  public static final String SERIALIZED_NAME_JWKS_SOURCES = "jwks_sources";
  @SerializedName(SERIALIZED_NAME_JWKS_SOURCES)
  private List<UUID> jwksSources = new ArrayList<>();

  public PatchedOAuth2ProviderRequest() {
  }

  public PatchedOAuth2ProviderRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public PatchedOAuth2ProviderRequest authenticationFlow(UUID authenticationFlow) {
    this.authenticationFlow = authenticationFlow;
    return this;
  }

  /**
   * Flow used for authentication when the associated application is accessed by an un-authenticated user.
   * @return authenticationFlow
   */
  @javax.annotation.Nullable
  public UUID getAuthenticationFlow() {
    return authenticationFlow;
  }

  public void setAuthenticationFlow(UUID authenticationFlow) {
    this.authenticationFlow = authenticationFlow;
  }


  public PatchedOAuth2ProviderRequest authorizationFlow(UUID authorizationFlow) {
    this.authorizationFlow = authorizationFlow;
    return this;
  }

  /**
   * Flow used when authorizing this provider.
   * @return authorizationFlow
   */
  @javax.annotation.Nullable
  public UUID getAuthorizationFlow() {
    return authorizationFlow;
  }

  public void setAuthorizationFlow(UUID authorizationFlow) {
    this.authorizationFlow = authorizationFlow;
  }


  public PatchedOAuth2ProviderRequest propertyMappings(List<UUID> propertyMappings) {
    this.propertyMappings = propertyMappings;
    return this;
  }

  public PatchedOAuth2ProviderRequest addPropertyMappingsItem(UUID propertyMappingsItem) {
    if (this.propertyMappings == null) {
      this.propertyMappings = new ArrayList<>();
    }
    this.propertyMappings.add(propertyMappingsItem);
    return this;
  }

  /**
   * Get propertyMappings
   * @return propertyMappings
   */
  @javax.annotation.Nullable
  public List<UUID> getPropertyMappings() {
    return propertyMappings;
  }

  public void setPropertyMappings(List<UUID> propertyMappings) {
    this.propertyMappings = propertyMappings;
  }


  public PatchedOAuth2ProviderRequest clientType(ClientTypeEnum clientType) {
    this.clientType = clientType;
    return this;
  }

  /**
   * Confidential clients are capable of maintaining the confidentiality of their credentials. Public clients are incapable
   * @return clientType
   */
  @javax.annotation.Nullable
  public ClientTypeEnum getClientType() {
    return clientType;
  }

  public void setClientType(ClientTypeEnum clientType) {
    this.clientType = clientType;
  }


  public PatchedOAuth2ProviderRequest clientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  /**
   * Get clientId
   * @return clientId
   */
  @javax.annotation.Nullable
  public String getClientId() {
    return clientId;
  }

  public void setClientId(String clientId) {
    this.clientId = clientId;
  }


  public PatchedOAuth2ProviderRequest clientSecret(String clientSecret) {
    this.clientSecret = clientSecret;
    return this;
  }

  /**
   * Get clientSecret
   * @return clientSecret
   */
  @javax.annotation.Nullable
  public String getClientSecret() {
    return clientSecret;
  }

  public void setClientSecret(String clientSecret) {
    this.clientSecret = clientSecret;
  }


  public PatchedOAuth2ProviderRequest accessCodeValidity(String accessCodeValidity) {
    this.accessCodeValidity = accessCodeValidity;
    return this;
  }

  /**
   * Access codes not valid on or after current time + this value (Format: hours&#x3D;1;minutes&#x3D;2;seconds&#x3D;3).
   * @return accessCodeValidity
   */
  @javax.annotation.Nullable
  public String getAccessCodeValidity() {
    return accessCodeValidity;
  }

  public void setAccessCodeValidity(String accessCodeValidity) {
    this.accessCodeValidity = accessCodeValidity;
  }


  public PatchedOAuth2ProviderRequest accessTokenValidity(String accessTokenValidity) {
    this.accessTokenValidity = accessTokenValidity;
    return this;
  }

  /**
   * Tokens not valid on or after current time + this value (Format: hours&#x3D;1;minutes&#x3D;2;seconds&#x3D;3).
   * @return accessTokenValidity
   */
  @javax.annotation.Nullable
  public String getAccessTokenValidity() {
    return accessTokenValidity;
  }

  public void setAccessTokenValidity(String accessTokenValidity) {
    this.accessTokenValidity = accessTokenValidity;
  }


  public PatchedOAuth2ProviderRequest refreshTokenValidity(String refreshTokenValidity) {
    this.refreshTokenValidity = refreshTokenValidity;
    return this;
  }

  /**
   * Tokens not valid on or after current time + this value (Format: hours&#x3D;1;minutes&#x3D;2;seconds&#x3D;3).
   * @return refreshTokenValidity
   */
  @javax.annotation.Nullable
  public String getRefreshTokenValidity() {
    return refreshTokenValidity;
  }

  public void setRefreshTokenValidity(String refreshTokenValidity) {
    this.refreshTokenValidity = refreshTokenValidity;
  }


  public PatchedOAuth2ProviderRequest includeClaimsInIdToken(Boolean includeClaimsInIdToken) {
    this.includeClaimsInIdToken = includeClaimsInIdToken;
    return this;
  }

  /**
   * Include User claims from scopes in the id_token, for applications that don&#39;t access the userinfo endpoint.
   * @return includeClaimsInIdToken
   */
  @javax.annotation.Nullable
  public Boolean getIncludeClaimsInIdToken() {
    return includeClaimsInIdToken;
  }

  public void setIncludeClaimsInIdToken(Boolean includeClaimsInIdToken) {
    this.includeClaimsInIdToken = includeClaimsInIdToken;
  }


  public PatchedOAuth2ProviderRequest signingKey(UUID signingKey) {
    this.signingKey = signingKey;
    return this;
  }

  /**
   * Key used to sign the tokens. Only required when JWT Algorithm is set to RS256.
   * @return signingKey
   */
  @javax.annotation.Nullable
  public UUID getSigningKey() {
    return signingKey;
  }

  public void setSigningKey(UUID signingKey) {
    this.signingKey = signingKey;
  }


  public PatchedOAuth2ProviderRequest redirectUris(String redirectUris) {
    this.redirectUris = redirectUris;
    return this;
  }

  /**
   * Enter each URI on a new line.
   * @return redirectUris
   */
  @javax.annotation.Nullable
  public String getRedirectUris() {
    return redirectUris;
  }

  public void setRedirectUris(String redirectUris) {
    this.redirectUris = redirectUris;
  }


  public PatchedOAuth2ProviderRequest subMode(SubModeEnum subMode) {
    this.subMode = subMode;
    return this;
  }

  /**
   * Configure what data should be used as unique User Identifier. For most cases, the default should be fine.
   * @return subMode
   */
  @javax.annotation.Nullable
  public SubModeEnum getSubMode() {
    return subMode;
  }

  public void setSubMode(SubModeEnum subMode) {
    this.subMode = subMode;
  }


  public PatchedOAuth2ProviderRequest issuerMode(IssuerModeEnum issuerMode) {
    this.issuerMode = issuerMode;
    return this;
  }

  /**
   * Configure how the issuer field of the ID Token should be filled.
   * @return issuerMode
   */
  @javax.annotation.Nullable
  public IssuerModeEnum getIssuerMode() {
    return issuerMode;
  }

  public void setIssuerMode(IssuerModeEnum issuerMode) {
    this.issuerMode = issuerMode;
  }


  public PatchedOAuth2ProviderRequest jwksSources(List<UUID> jwksSources) {
    this.jwksSources = jwksSources;
    return this;
  }

  public PatchedOAuth2ProviderRequest addJwksSourcesItem(UUID jwksSourcesItem) {
    if (this.jwksSources == null) {
      this.jwksSources = new ArrayList<>();
    }
    this.jwksSources.add(jwksSourcesItem);
    return this;
  }

  /**
   * Get jwksSources
   * @return jwksSources
   */
  @javax.annotation.Nullable
  public List<UUID> getJwksSources() {
    return jwksSources;
  }

  public void setJwksSources(List<UUID> jwksSources) {
    this.jwksSources = jwksSources;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PatchedOAuth2ProviderRequest patchedOAuth2ProviderRequest = (PatchedOAuth2ProviderRequest) o;
    return Objects.equals(this.name, patchedOAuth2ProviderRequest.name) &&
        Objects.equals(this.authenticationFlow, patchedOAuth2ProviderRequest.authenticationFlow) &&
        Objects.equals(this.authorizationFlow, patchedOAuth2ProviderRequest.authorizationFlow) &&
        Objects.equals(this.propertyMappings, patchedOAuth2ProviderRequest.propertyMappings) &&
        Objects.equals(this.clientType, patchedOAuth2ProviderRequest.clientType) &&
        Objects.equals(this.clientId, patchedOAuth2ProviderRequest.clientId) &&
        Objects.equals(this.clientSecret, patchedOAuth2ProviderRequest.clientSecret) &&
        Objects.equals(this.accessCodeValidity, patchedOAuth2ProviderRequest.accessCodeValidity) &&
        Objects.equals(this.accessTokenValidity, patchedOAuth2ProviderRequest.accessTokenValidity) &&
        Objects.equals(this.refreshTokenValidity, patchedOAuth2ProviderRequest.refreshTokenValidity) &&
        Objects.equals(this.includeClaimsInIdToken, patchedOAuth2ProviderRequest.includeClaimsInIdToken) &&
        Objects.equals(this.signingKey, patchedOAuth2ProviderRequest.signingKey) &&
        Objects.equals(this.redirectUris, patchedOAuth2ProviderRequest.redirectUris) &&
        Objects.equals(this.subMode, patchedOAuth2ProviderRequest.subMode) &&
        Objects.equals(this.issuerMode, patchedOAuth2ProviderRequest.issuerMode) &&
        Objects.equals(this.jwksSources, patchedOAuth2ProviderRequest.jwksSources);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, authenticationFlow, authorizationFlow, propertyMappings, clientType, clientId, clientSecret, accessCodeValidity, accessTokenValidity, refreshTokenValidity, includeClaimsInIdToken, signingKey, redirectUris, subMode, issuerMode, jwksSources);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PatchedOAuth2ProviderRequest {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    authenticationFlow: ").append(toIndentedString(authenticationFlow)).append("\n");
    sb.append("    authorizationFlow: ").append(toIndentedString(authorizationFlow)).append("\n");
    sb.append("    propertyMappings: ").append(toIndentedString(propertyMappings)).append("\n");
    sb.append("    clientType: ").append(toIndentedString(clientType)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    clientSecret: ").append(toIndentedString(clientSecret)).append("\n");
    sb.append("    accessCodeValidity: ").append(toIndentedString(accessCodeValidity)).append("\n");
    sb.append("    accessTokenValidity: ").append(toIndentedString(accessTokenValidity)).append("\n");
    sb.append("    refreshTokenValidity: ").append(toIndentedString(refreshTokenValidity)).append("\n");
    sb.append("    includeClaimsInIdToken: ").append(toIndentedString(includeClaimsInIdToken)).append("\n");
    sb.append("    signingKey: ").append(toIndentedString(signingKey)).append("\n");
    sb.append("    redirectUris: ").append(toIndentedString(redirectUris)).append("\n");
    sb.append("    subMode: ").append(toIndentedString(subMode)).append("\n");
    sb.append("    issuerMode: ").append(toIndentedString(issuerMode)).append("\n");
    sb.append("    jwksSources: ").append(toIndentedString(jwksSources)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("authentication_flow");
    openapiFields.add("authorization_flow");
    openapiFields.add("property_mappings");
    openapiFields.add("client_type");
    openapiFields.add("client_id");
    openapiFields.add("client_secret");
    openapiFields.add("access_code_validity");
    openapiFields.add("access_token_validity");
    openapiFields.add("refresh_token_validity");
    openapiFields.add("include_claims_in_id_token");
    openapiFields.add("signing_key");
    openapiFields.add("redirect_uris");
    openapiFields.add("sub_mode");
    openapiFields.add("issuer_mode");
    openapiFields.add("jwks_sources");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PatchedOAuth2ProviderRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PatchedOAuth2ProviderRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PatchedOAuth2ProviderRequest is not found in the empty JSON string", PatchedOAuth2ProviderRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PatchedOAuth2ProviderRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PatchedOAuth2ProviderRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("authentication_flow") != null && !jsonObj.get("authentication_flow").isJsonNull()) && !jsonObj.get("authentication_flow").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authentication_flow` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authentication_flow").toString()));
      }
      if ((jsonObj.get("authorization_flow") != null && !jsonObj.get("authorization_flow").isJsonNull()) && !jsonObj.get("authorization_flow").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorization_flow` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorization_flow").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("property_mappings") != null && !jsonObj.get("property_mappings").isJsonNull() && !jsonObj.get("property_mappings").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `property_mappings` to be an array in the JSON string but got `%s`", jsonObj.get("property_mappings").toString()));
      }
      // validate the optional field `client_type`
      if (jsonObj.get("client_type") != null && !jsonObj.get("client_type").isJsonNull()) {
        ClientTypeEnum.validateJsonElement(jsonObj.get("client_type"));
      }
      if ((jsonObj.get("client_id") != null && !jsonObj.get("client_id").isJsonNull()) && !jsonObj.get("client_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_id").toString()));
      }
      if ((jsonObj.get("client_secret") != null && !jsonObj.get("client_secret").isJsonNull()) && !jsonObj.get("client_secret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_secret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_secret").toString()));
      }
      if ((jsonObj.get("access_code_validity") != null && !jsonObj.get("access_code_validity").isJsonNull()) && !jsonObj.get("access_code_validity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `access_code_validity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("access_code_validity").toString()));
      }
      if ((jsonObj.get("access_token_validity") != null && !jsonObj.get("access_token_validity").isJsonNull()) && !jsonObj.get("access_token_validity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `access_token_validity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("access_token_validity").toString()));
      }
      if ((jsonObj.get("refresh_token_validity") != null && !jsonObj.get("refresh_token_validity").isJsonNull()) && !jsonObj.get("refresh_token_validity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refresh_token_validity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refresh_token_validity").toString()));
      }
      if ((jsonObj.get("signing_key") != null && !jsonObj.get("signing_key").isJsonNull()) && !jsonObj.get("signing_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signing_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signing_key").toString()));
      }
      if ((jsonObj.get("redirect_uris") != null && !jsonObj.get("redirect_uris").isJsonNull()) && !jsonObj.get("redirect_uris").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `redirect_uris` to be a primitive type in the JSON string but got `%s`", jsonObj.get("redirect_uris").toString()));
      }
      // validate the optional field `sub_mode`
      if (jsonObj.get("sub_mode") != null && !jsonObj.get("sub_mode").isJsonNull()) {
        SubModeEnum.validateJsonElement(jsonObj.get("sub_mode"));
      }
      // validate the optional field `issuer_mode`
      if (jsonObj.get("issuer_mode") != null && !jsonObj.get("issuer_mode").isJsonNull()) {
        IssuerModeEnum.validateJsonElement(jsonObj.get("issuer_mode"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("jwks_sources") != null && !jsonObj.get("jwks_sources").isJsonNull() && !jsonObj.get("jwks_sources").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `jwks_sources` to be an array in the JSON string but got `%s`", jsonObj.get("jwks_sources").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PatchedOAuth2ProviderRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PatchedOAuth2ProviderRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PatchedOAuth2ProviderRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PatchedOAuth2ProviderRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PatchedOAuth2ProviderRequest>() {
           @Override
           public void write(JsonWriter out, PatchedOAuth2ProviderRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PatchedOAuth2ProviderRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PatchedOAuth2ProviderRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PatchedOAuth2ProviderRequest
   * @throws IOException if the JSON string is invalid with respect to PatchedOAuth2ProviderRequest
   */
  public static PatchedOAuth2ProviderRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PatchedOAuth2ProviderRequest.class);
  }

  /**
   * Convert an instance of PatchedOAuth2ProviderRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

