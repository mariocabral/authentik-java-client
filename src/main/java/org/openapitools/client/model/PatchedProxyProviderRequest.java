/*
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.6.3
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.ProxyMode;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProxyProvider Serializer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-25T23:12:57.050901581-03:00[America/Argentina/Cordoba]", comments = "Generator version: 7.8.0")
public class PatchedProxyProviderRequest {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_AUTHENTICATION_FLOW = "authentication_flow";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_FLOW)
  private UUID authenticationFlow;

  public static final String SERIALIZED_NAME_AUTHORIZATION_FLOW = "authorization_flow";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_FLOW)
  private UUID authorizationFlow;

  public static final String SERIALIZED_NAME_PROPERTY_MAPPINGS = "property_mappings";
  @SerializedName(SERIALIZED_NAME_PROPERTY_MAPPINGS)
  private List<UUID> propertyMappings = new ArrayList<>();

  public static final String SERIALIZED_NAME_INTERNAL_HOST = "internal_host";
  @SerializedName(SERIALIZED_NAME_INTERNAL_HOST)
  private URI internalHost;

  public static final String SERIALIZED_NAME_EXTERNAL_HOST = "external_host";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_HOST)
  private URI externalHost;

  public static final String SERIALIZED_NAME_INTERNAL_HOST_SSL_VALIDATION = "internal_host_ssl_validation";
  @SerializedName(SERIALIZED_NAME_INTERNAL_HOST_SSL_VALIDATION)
  private Boolean internalHostSslValidation;

  public static final String SERIALIZED_NAME_CERTIFICATE = "certificate";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE)
  private UUID certificate;

  public static final String SERIALIZED_NAME_SKIP_PATH_REGEX = "skip_path_regex";
  @SerializedName(SERIALIZED_NAME_SKIP_PATH_REGEX)
  private String skipPathRegex;

  public static final String SERIALIZED_NAME_BASIC_AUTH_ENABLED = "basic_auth_enabled";
  @SerializedName(SERIALIZED_NAME_BASIC_AUTH_ENABLED)
  private Boolean basicAuthEnabled;

  public static final String SERIALIZED_NAME_BASIC_AUTH_PASSWORD_ATTRIBUTE = "basic_auth_password_attribute";
  @SerializedName(SERIALIZED_NAME_BASIC_AUTH_PASSWORD_ATTRIBUTE)
  private String basicAuthPasswordAttribute;

  public static final String SERIALIZED_NAME_BASIC_AUTH_USER_ATTRIBUTE = "basic_auth_user_attribute";
  @SerializedName(SERIALIZED_NAME_BASIC_AUTH_USER_ATTRIBUTE)
  private String basicAuthUserAttribute;

  public static final String SERIALIZED_NAME_MODE = "mode";
  @SerializedName(SERIALIZED_NAME_MODE)
  private ProxyMode mode;

  public static final String SERIALIZED_NAME_INTERCEPT_HEADER_AUTH = "intercept_header_auth";
  @SerializedName(SERIALIZED_NAME_INTERCEPT_HEADER_AUTH)
  private Boolean interceptHeaderAuth;

  public static final String SERIALIZED_NAME_COOKIE_DOMAIN = "cookie_domain";
  @SerializedName(SERIALIZED_NAME_COOKIE_DOMAIN)
  private String cookieDomain;

  public static final String SERIALIZED_NAME_JWKS_SOURCES = "jwks_sources";
  @SerializedName(SERIALIZED_NAME_JWKS_SOURCES)
  private List<UUID> jwksSources = new ArrayList<>();

  public static final String SERIALIZED_NAME_ACCESS_TOKEN_VALIDITY = "access_token_validity";
  @SerializedName(SERIALIZED_NAME_ACCESS_TOKEN_VALIDITY)
  private String accessTokenValidity;

  public static final String SERIALIZED_NAME_REFRESH_TOKEN_VALIDITY = "refresh_token_validity";
  @SerializedName(SERIALIZED_NAME_REFRESH_TOKEN_VALIDITY)
  private String refreshTokenValidity;

  public PatchedProxyProviderRequest() {
  }

  public PatchedProxyProviderRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public PatchedProxyProviderRequest authenticationFlow(UUID authenticationFlow) {
    this.authenticationFlow = authenticationFlow;
    return this;
  }

  /**
   * Flow used for authentication when the associated application is accessed by an un-authenticated user.
   * @return authenticationFlow
   */
  @javax.annotation.Nullable
  public UUID getAuthenticationFlow() {
    return authenticationFlow;
  }

  public void setAuthenticationFlow(UUID authenticationFlow) {
    this.authenticationFlow = authenticationFlow;
  }


  public PatchedProxyProviderRequest authorizationFlow(UUID authorizationFlow) {
    this.authorizationFlow = authorizationFlow;
    return this;
  }

  /**
   * Flow used when authorizing this provider.
   * @return authorizationFlow
   */
  @javax.annotation.Nullable
  public UUID getAuthorizationFlow() {
    return authorizationFlow;
  }

  public void setAuthorizationFlow(UUID authorizationFlow) {
    this.authorizationFlow = authorizationFlow;
  }


  public PatchedProxyProviderRequest propertyMappings(List<UUID> propertyMappings) {
    this.propertyMappings = propertyMappings;
    return this;
  }

  public PatchedProxyProviderRequest addPropertyMappingsItem(UUID propertyMappingsItem) {
    if (this.propertyMappings == null) {
      this.propertyMappings = new ArrayList<>();
    }
    this.propertyMappings.add(propertyMappingsItem);
    return this;
  }

  /**
   * Get propertyMappings
   * @return propertyMappings
   */
  @javax.annotation.Nullable
  public List<UUID> getPropertyMappings() {
    return propertyMappings;
  }

  public void setPropertyMappings(List<UUID> propertyMappings) {
    this.propertyMappings = propertyMappings;
  }


  public PatchedProxyProviderRequest internalHost(URI internalHost) {
    this.internalHost = internalHost;
    return this;
  }

  /**
   * Get internalHost
   * @return internalHost
   */
  @javax.annotation.Nullable
  public URI getInternalHost() {
    return internalHost;
  }

  public void setInternalHost(URI internalHost) {
    this.internalHost = internalHost;
  }


  public PatchedProxyProviderRequest externalHost(URI externalHost) {
    this.externalHost = externalHost;
    return this;
  }

  /**
   * Get externalHost
   * @return externalHost
   */
  @javax.annotation.Nullable
  public URI getExternalHost() {
    return externalHost;
  }

  public void setExternalHost(URI externalHost) {
    this.externalHost = externalHost;
  }


  public PatchedProxyProviderRequest internalHostSslValidation(Boolean internalHostSslValidation) {
    this.internalHostSslValidation = internalHostSslValidation;
    return this;
  }

  /**
   * Validate SSL Certificates of upstream servers
   * @return internalHostSslValidation
   */
  @javax.annotation.Nullable
  public Boolean getInternalHostSslValidation() {
    return internalHostSslValidation;
  }

  public void setInternalHostSslValidation(Boolean internalHostSslValidation) {
    this.internalHostSslValidation = internalHostSslValidation;
  }


  public PatchedProxyProviderRequest certificate(UUID certificate) {
    this.certificate = certificate;
    return this;
  }

  /**
   * Get certificate
   * @return certificate
   */
  @javax.annotation.Nullable
  public UUID getCertificate() {
    return certificate;
  }

  public void setCertificate(UUID certificate) {
    this.certificate = certificate;
  }


  public PatchedProxyProviderRequest skipPathRegex(String skipPathRegex) {
    this.skipPathRegex = skipPathRegex;
    return this;
  }

  /**
   * Regular expressions for which authentication is not required. Each new line is interpreted as a new Regular Expression.
   * @return skipPathRegex
   */
  @javax.annotation.Nullable
  public String getSkipPathRegex() {
    return skipPathRegex;
  }

  public void setSkipPathRegex(String skipPathRegex) {
    this.skipPathRegex = skipPathRegex;
  }


  public PatchedProxyProviderRequest basicAuthEnabled(Boolean basicAuthEnabled) {
    this.basicAuthEnabled = basicAuthEnabled;
    return this;
  }

  /**
   * Set a custom HTTP-Basic Authentication header based on values from authentik.
   * @return basicAuthEnabled
   */
  @javax.annotation.Nullable
  public Boolean getBasicAuthEnabled() {
    return basicAuthEnabled;
  }

  public void setBasicAuthEnabled(Boolean basicAuthEnabled) {
    this.basicAuthEnabled = basicAuthEnabled;
  }


  public PatchedProxyProviderRequest basicAuthPasswordAttribute(String basicAuthPasswordAttribute) {
    this.basicAuthPasswordAttribute = basicAuthPasswordAttribute;
    return this;
  }

  /**
   * User/Group Attribute used for the password part of the HTTP-Basic Header.
   * @return basicAuthPasswordAttribute
   */
  @javax.annotation.Nullable
  public String getBasicAuthPasswordAttribute() {
    return basicAuthPasswordAttribute;
  }

  public void setBasicAuthPasswordAttribute(String basicAuthPasswordAttribute) {
    this.basicAuthPasswordAttribute = basicAuthPasswordAttribute;
  }


  public PatchedProxyProviderRequest basicAuthUserAttribute(String basicAuthUserAttribute) {
    this.basicAuthUserAttribute = basicAuthUserAttribute;
    return this;
  }

  /**
   * User/Group Attribute used for the user part of the HTTP-Basic Header. If not set, the user&#39;s Email address is used.
   * @return basicAuthUserAttribute
   */
  @javax.annotation.Nullable
  public String getBasicAuthUserAttribute() {
    return basicAuthUserAttribute;
  }

  public void setBasicAuthUserAttribute(String basicAuthUserAttribute) {
    this.basicAuthUserAttribute = basicAuthUserAttribute;
  }


  public PatchedProxyProviderRequest mode(ProxyMode mode) {
    this.mode = mode;
    return this;
  }

  /**
   * Enable support for forwardAuth in traefik and nginx auth_request. Exclusive with internal_host.
   * @return mode
   */
  @javax.annotation.Nullable
  public ProxyMode getMode() {
    return mode;
  }

  public void setMode(ProxyMode mode) {
    this.mode = mode;
  }


  public PatchedProxyProviderRequest interceptHeaderAuth(Boolean interceptHeaderAuth) {
    this.interceptHeaderAuth = interceptHeaderAuth;
    return this;
  }

  /**
   * When enabled, this provider will intercept the authorization header and authenticate requests based on its value.
   * @return interceptHeaderAuth
   */
  @javax.annotation.Nullable
  public Boolean getInterceptHeaderAuth() {
    return interceptHeaderAuth;
  }

  public void setInterceptHeaderAuth(Boolean interceptHeaderAuth) {
    this.interceptHeaderAuth = interceptHeaderAuth;
  }


  public PatchedProxyProviderRequest cookieDomain(String cookieDomain) {
    this.cookieDomain = cookieDomain;
    return this;
  }

  /**
   * Get cookieDomain
   * @return cookieDomain
   */
  @javax.annotation.Nullable
  public String getCookieDomain() {
    return cookieDomain;
  }

  public void setCookieDomain(String cookieDomain) {
    this.cookieDomain = cookieDomain;
  }


  public PatchedProxyProviderRequest jwksSources(List<UUID> jwksSources) {
    this.jwksSources = jwksSources;
    return this;
  }

  public PatchedProxyProviderRequest addJwksSourcesItem(UUID jwksSourcesItem) {
    if (this.jwksSources == null) {
      this.jwksSources = new ArrayList<>();
    }
    this.jwksSources.add(jwksSourcesItem);
    return this;
  }

  /**
   * Get jwksSources
   * @return jwksSources
   */
  @javax.annotation.Nullable
  public List<UUID> getJwksSources() {
    return jwksSources;
  }

  public void setJwksSources(List<UUID> jwksSources) {
    this.jwksSources = jwksSources;
  }


  public PatchedProxyProviderRequest accessTokenValidity(String accessTokenValidity) {
    this.accessTokenValidity = accessTokenValidity;
    return this;
  }

  /**
   * Tokens not valid on or after current time + this value (Format: hours&#x3D;1;minutes&#x3D;2;seconds&#x3D;3).
   * @return accessTokenValidity
   */
  @javax.annotation.Nullable
  public String getAccessTokenValidity() {
    return accessTokenValidity;
  }

  public void setAccessTokenValidity(String accessTokenValidity) {
    this.accessTokenValidity = accessTokenValidity;
  }


  public PatchedProxyProviderRequest refreshTokenValidity(String refreshTokenValidity) {
    this.refreshTokenValidity = refreshTokenValidity;
    return this;
  }

  /**
   * Tokens not valid on or after current time + this value (Format: hours&#x3D;1;minutes&#x3D;2;seconds&#x3D;3).
   * @return refreshTokenValidity
   */
  @javax.annotation.Nullable
  public String getRefreshTokenValidity() {
    return refreshTokenValidity;
  }

  public void setRefreshTokenValidity(String refreshTokenValidity) {
    this.refreshTokenValidity = refreshTokenValidity;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PatchedProxyProviderRequest patchedProxyProviderRequest = (PatchedProxyProviderRequest) o;
    return Objects.equals(this.name, patchedProxyProviderRequest.name) &&
        Objects.equals(this.authenticationFlow, patchedProxyProviderRequest.authenticationFlow) &&
        Objects.equals(this.authorizationFlow, patchedProxyProviderRequest.authorizationFlow) &&
        Objects.equals(this.propertyMappings, patchedProxyProviderRequest.propertyMappings) &&
        Objects.equals(this.internalHost, patchedProxyProviderRequest.internalHost) &&
        Objects.equals(this.externalHost, patchedProxyProviderRequest.externalHost) &&
        Objects.equals(this.internalHostSslValidation, patchedProxyProviderRequest.internalHostSslValidation) &&
        Objects.equals(this.certificate, patchedProxyProviderRequest.certificate) &&
        Objects.equals(this.skipPathRegex, patchedProxyProviderRequest.skipPathRegex) &&
        Objects.equals(this.basicAuthEnabled, patchedProxyProviderRequest.basicAuthEnabled) &&
        Objects.equals(this.basicAuthPasswordAttribute, patchedProxyProviderRequest.basicAuthPasswordAttribute) &&
        Objects.equals(this.basicAuthUserAttribute, patchedProxyProviderRequest.basicAuthUserAttribute) &&
        Objects.equals(this.mode, patchedProxyProviderRequest.mode) &&
        Objects.equals(this.interceptHeaderAuth, patchedProxyProviderRequest.interceptHeaderAuth) &&
        Objects.equals(this.cookieDomain, patchedProxyProviderRequest.cookieDomain) &&
        Objects.equals(this.jwksSources, patchedProxyProviderRequest.jwksSources) &&
        Objects.equals(this.accessTokenValidity, patchedProxyProviderRequest.accessTokenValidity) &&
        Objects.equals(this.refreshTokenValidity, patchedProxyProviderRequest.refreshTokenValidity);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, authenticationFlow, authorizationFlow, propertyMappings, internalHost, externalHost, internalHostSslValidation, certificate, skipPathRegex, basicAuthEnabled, basicAuthPasswordAttribute, basicAuthUserAttribute, mode, interceptHeaderAuth, cookieDomain, jwksSources, accessTokenValidity, refreshTokenValidity);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PatchedProxyProviderRequest {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    authenticationFlow: ").append(toIndentedString(authenticationFlow)).append("\n");
    sb.append("    authorizationFlow: ").append(toIndentedString(authorizationFlow)).append("\n");
    sb.append("    propertyMappings: ").append(toIndentedString(propertyMappings)).append("\n");
    sb.append("    internalHost: ").append(toIndentedString(internalHost)).append("\n");
    sb.append("    externalHost: ").append(toIndentedString(externalHost)).append("\n");
    sb.append("    internalHostSslValidation: ").append(toIndentedString(internalHostSslValidation)).append("\n");
    sb.append("    certificate: ").append(toIndentedString(certificate)).append("\n");
    sb.append("    skipPathRegex: ").append(toIndentedString(skipPathRegex)).append("\n");
    sb.append("    basicAuthEnabled: ").append(toIndentedString(basicAuthEnabled)).append("\n");
    sb.append("    basicAuthPasswordAttribute: ").append(toIndentedString(basicAuthPasswordAttribute)).append("\n");
    sb.append("    basicAuthUserAttribute: ").append(toIndentedString(basicAuthUserAttribute)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    interceptHeaderAuth: ").append(toIndentedString(interceptHeaderAuth)).append("\n");
    sb.append("    cookieDomain: ").append(toIndentedString(cookieDomain)).append("\n");
    sb.append("    jwksSources: ").append(toIndentedString(jwksSources)).append("\n");
    sb.append("    accessTokenValidity: ").append(toIndentedString(accessTokenValidity)).append("\n");
    sb.append("    refreshTokenValidity: ").append(toIndentedString(refreshTokenValidity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("authentication_flow");
    openapiFields.add("authorization_flow");
    openapiFields.add("property_mappings");
    openapiFields.add("internal_host");
    openapiFields.add("external_host");
    openapiFields.add("internal_host_ssl_validation");
    openapiFields.add("certificate");
    openapiFields.add("skip_path_regex");
    openapiFields.add("basic_auth_enabled");
    openapiFields.add("basic_auth_password_attribute");
    openapiFields.add("basic_auth_user_attribute");
    openapiFields.add("mode");
    openapiFields.add("intercept_header_auth");
    openapiFields.add("cookie_domain");
    openapiFields.add("jwks_sources");
    openapiFields.add("access_token_validity");
    openapiFields.add("refresh_token_validity");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PatchedProxyProviderRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PatchedProxyProviderRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PatchedProxyProviderRequest is not found in the empty JSON string", PatchedProxyProviderRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PatchedProxyProviderRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PatchedProxyProviderRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("authentication_flow") != null && !jsonObj.get("authentication_flow").isJsonNull()) && !jsonObj.get("authentication_flow").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authentication_flow` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authentication_flow").toString()));
      }
      if ((jsonObj.get("authorization_flow") != null && !jsonObj.get("authorization_flow").isJsonNull()) && !jsonObj.get("authorization_flow").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorization_flow` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorization_flow").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("property_mappings") != null && !jsonObj.get("property_mappings").isJsonNull() && !jsonObj.get("property_mappings").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `property_mappings` to be an array in the JSON string but got `%s`", jsonObj.get("property_mappings").toString()));
      }
      if ((jsonObj.get("internal_host") != null && !jsonObj.get("internal_host").isJsonNull()) && !jsonObj.get("internal_host").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `internal_host` to be a primitive type in the JSON string but got `%s`", jsonObj.get("internal_host").toString()));
      }
      if ((jsonObj.get("external_host") != null && !jsonObj.get("external_host").isJsonNull()) && !jsonObj.get("external_host").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_host` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_host").toString()));
      }
      if ((jsonObj.get("certificate") != null && !jsonObj.get("certificate").isJsonNull()) && !jsonObj.get("certificate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `certificate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("certificate").toString()));
      }
      if ((jsonObj.get("skip_path_regex") != null && !jsonObj.get("skip_path_regex").isJsonNull()) && !jsonObj.get("skip_path_regex").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `skip_path_regex` to be a primitive type in the JSON string but got `%s`", jsonObj.get("skip_path_regex").toString()));
      }
      if ((jsonObj.get("basic_auth_password_attribute") != null && !jsonObj.get("basic_auth_password_attribute").isJsonNull()) && !jsonObj.get("basic_auth_password_attribute").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `basic_auth_password_attribute` to be a primitive type in the JSON string but got `%s`", jsonObj.get("basic_auth_password_attribute").toString()));
      }
      if ((jsonObj.get("basic_auth_user_attribute") != null && !jsonObj.get("basic_auth_user_attribute").isJsonNull()) && !jsonObj.get("basic_auth_user_attribute").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `basic_auth_user_attribute` to be a primitive type in the JSON string but got `%s`", jsonObj.get("basic_auth_user_attribute").toString()));
      }
      // validate the optional field `mode`
      if (jsonObj.get("mode") != null && !jsonObj.get("mode").isJsonNull()) {
        ProxyMode.validateJsonElement(jsonObj.get("mode"));
      }
      if ((jsonObj.get("cookie_domain") != null && !jsonObj.get("cookie_domain").isJsonNull()) && !jsonObj.get("cookie_domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cookie_domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cookie_domain").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("jwks_sources") != null && !jsonObj.get("jwks_sources").isJsonNull() && !jsonObj.get("jwks_sources").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `jwks_sources` to be an array in the JSON string but got `%s`", jsonObj.get("jwks_sources").toString()));
      }
      if ((jsonObj.get("access_token_validity") != null && !jsonObj.get("access_token_validity").isJsonNull()) && !jsonObj.get("access_token_validity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `access_token_validity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("access_token_validity").toString()));
      }
      if ((jsonObj.get("refresh_token_validity") != null && !jsonObj.get("refresh_token_validity").isJsonNull()) && !jsonObj.get("refresh_token_validity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refresh_token_validity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refresh_token_validity").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PatchedProxyProviderRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PatchedProxyProviderRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PatchedProxyProviderRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PatchedProxyProviderRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PatchedProxyProviderRequest>() {
           @Override
           public void write(JsonWriter out, PatchedProxyProviderRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PatchedProxyProviderRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PatchedProxyProviderRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PatchedProxyProviderRequest
   * @throws IOException if the JSON string is invalid with respect to PatchedProxyProviderRequest
   */
  public static PatchedProxyProviderRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PatchedProxyProviderRequest.class);
  }

  /**
   * Convert an instance of PatchedProxyProviderRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

