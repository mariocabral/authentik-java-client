/*
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.6.3
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.AuthenticatedSessionAsn;
import org.openapitools.client.model.AuthenticatedSessionGeoIp;
import org.openapitools.client.model.AuthenticatedSessionUserAgent;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AuthenticatedSession Serializer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-25T23:12:57.050901581-03:00[America/Argentina/Cordoba]", comments = "Generator version: 7.8.0")
public class AuthenticatedSession {
  public static final String SERIALIZED_NAME_UUID = "uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  private UUID uuid;

  public static final String SERIALIZED_NAME_CURRENT = "current";
  @SerializedName(SERIALIZED_NAME_CURRENT)
  private Boolean current;

  public static final String SERIALIZED_NAME_USER_AGENT = "user_agent";
  @SerializedName(SERIALIZED_NAME_USER_AGENT)
  private AuthenticatedSessionUserAgent userAgent;

  public static final String SERIALIZED_NAME_GEO_IP = "geo_ip";
  @SerializedName(SERIALIZED_NAME_GEO_IP)
  private AuthenticatedSessionGeoIp geoIp;

  public static final String SERIALIZED_NAME_ASN = "asn";
  @SerializedName(SERIALIZED_NAME_ASN)
  private AuthenticatedSessionAsn asn;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private Integer user;

  public static final String SERIALIZED_NAME_LAST_IP = "last_ip";
  @SerializedName(SERIALIZED_NAME_LAST_IP)
  private String lastIp;

  public static final String SERIALIZED_NAME_LAST_USER_AGENT = "last_user_agent";
  @SerializedName(SERIALIZED_NAME_LAST_USER_AGENT)
  private String lastUserAgent;

  public static final String SERIALIZED_NAME_LAST_USED = "last_used";
  @SerializedName(SERIALIZED_NAME_LAST_USED)
  private OffsetDateTime lastUsed;

  public static final String SERIALIZED_NAME_EXPIRES = "expires";
  @SerializedName(SERIALIZED_NAME_EXPIRES)
  private OffsetDateTime expires;

  public AuthenticatedSession() {
  }

  public AuthenticatedSession(
     Boolean current, 
     OffsetDateTime lastUsed
  ) {
    this();
    this.current = current;
    this.lastUsed = lastUsed;
  }

  public AuthenticatedSession uuid(UUID uuid) {
    this.uuid = uuid;
    return this;
  }

  /**
   * Get uuid
   * @return uuid
   */
  @javax.annotation.Nullable
  public UUID getUuid() {
    return uuid;
  }

  public void setUuid(UUID uuid) {
    this.uuid = uuid;
  }


  /**
   * Check if session is currently active session
   * @return current
   */
  @javax.annotation.Nonnull
  public Boolean getCurrent() {
    return current;
  }



  public AuthenticatedSession userAgent(AuthenticatedSessionUserAgent userAgent) {
    this.userAgent = userAgent;
    return this;
  }

  /**
   * Get userAgent
   * @return userAgent
   */
  @javax.annotation.Nonnull
  public AuthenticatedSessionUserAgent getUserAgent() {
    return userAgent;
  }

  public void setUserAgent(AuthenticatedSessionUserAgent userAgent) {
    this.userAgent = userAgent;
  }


  public AuthenticatedSession geoIp(AuthenticatedSessionGeoIp geoIp) {
    this.geoIp = geoIp;
    return this;
  }

  /**
   * Get geoIp
   * @return geoIp
   */
  @javax.annotation.Nullable
  public AuthenticatedSessionGeoIp getGeoIp() {
    return geoIp;
  }

  public void setGeoIp(AuthenticatedSessionGeoIp geoIp) {
    this.geoIp = geoIp;
  }


  public AuthenticatedSession asn(AuthenticatedSessionAsn asn) {
    this.asn = asn;
    return this;
  }

  /**
   * Get asn
   * @return asn
   */
  @javax.annotation.Nullable
  public AuthenticatedSessionAsn getAsn() {
    return asn;
  }

  public void setAsn(AuthenticatedSessionAsn asn) {
    this.asn = asn;
  }


  public AuthenticatedSession user(Integer user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nonnull
  public Integer getUser() {
    return user;
  }

  public void setUser(Integer user) {
    this.user = user;
  }


  public AuthenticatedSession lastIp(String lastIp) {
    this.lastIp = lastIp;
    return this;
  }

  /**
   * Get lastIp
   * @return lastIp
   */
  @javax.annotation.Nonnull
  public String getLastIp() {
    return lastIp;
  }

  public void setLastIp(String lastIp) {
    this.lastIp = lastIp;
  }


  public AuthenticatedSession lastUserAgent(String lastUserAgent) {
    this.lastUserAgent = lastUserAgent;
    return this;
  }

  /**
   * Get lastUserAgent
   * @return lastUserAgent
   */
  @javax.annotation.Nullable
  public String getLastUserAgent() {
    return lastUserAgent;
  }

  public void setLastUserAgent(String lastUserAgent) {
    this.lastUserAgent = lastUserAgent;
  }


  /**
   * Get lastUsed
   * @return lastUsed
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getLastUsed() {
    return lastUsed;
  }



  public AuthenticatedSession expires(OffsetDateTime expires) {
    this.expires = expires;
    return this;
  }

  /**
   * Get expires
   * @return expires
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExpires() {
    return expires;
  }

  public void setExpires(OffsetDateTime expires) {
    this.expires = expires;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuthenticatedSession authenticatedSession = (AuthenticatedSession) o;
    return Objects.equals(this.uuid, authenticatedSession.uuid) &&
        Objects.equals(this.current, authenticatedSession.current) &&
        Objects.equals(this.userAgent, authenticatedSession.userAgent) &&
        Objects.equals(this.geoIp, authenticatedSession.geoIp) &&
        Objects.equals(this.asn, authenticatedSession.asn) &&
        Objects.equals(this.user, authenticatedSession.user) &&
        Objects.equals(this.lastIp, authenticatedSession.lastIp) &&
        Objects.equals(this.lastUserAgent, authenticatedSession.lastUserAgent) &&
        Objects.equals(this.lastUsed, authenticatedSession.lastUsed) &&
        Objects.equals(this.expires, authenticatedSession.expires);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(uuid, current, userAgent, geoIp, asn, user, lastIp, lastUserAgent, lastUsed, expires);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuthenticatedSession {\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    current: ").append(toIndentedString(current)).append("\n");
    sb.append("    userAgent: ").append(toIndentedString(userAgent)).append("\n");
    sb.append("    geoIp: ").append(toIndentedString(geoIp)).append("\n");
    sb.append("    asn: ").append(toIndentedString(asn)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    lastIp: ").append(toIndentedString(lastIp)).append("\n");
    sb.append("    lastUserAgent: ").append(toIndentedString(lastUserAgent)).append("\n");
    sb.append("    lastUsed: ").append(toIndentedString(lastUsed)).append("\n");
    sb.append("    expires: ").append(toIndentedString(expires)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("uuid");
    openapiFields.add("current");
    openapiFields.add("user_agent");
    openapiFields.add("geo_ip");
    openapiFields.add("asn");
    openapiFields.add("user");
    openapiFields.add("last_ip");
    openapiFields.add("last_user_agent");
    openapiFields.add("last_used");
    openapiFields.add("expires");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("current");
    openapiRequiredFields.add("user_agent");
    openapiRequiredFields.add("geo_ip");
    openapiRequiredFields.add("asn");
    openapiRequiredFields.add("user");
    openapiRequiredFields.add("last_ip");
    openapiRequiredFields.add("last_used");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AuthenticatedSession
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AuthenticatedSession.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AuthenticatedSession is not found in the empty JSON string", AuthenticatedSession.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AuthenticatedSession.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AuthenticatedSession` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AuthenticatedSession.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("uuid") != null && !jsonObj.get("uuid").isJsonNull()) && !jsonObj.get("uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uuid").toString()));
      }
      // validate the required field `user_agent`
      AuthenticatedSessionUserAgent.validateJsonElement(jsonObj.get("user_agent"));
      // validate the required field `geo_ip`
      AuthenticatedSessionGeoIp.validateJsonElement(jsonObj.get("geo_ip"));
      // validate the required field `asn`
      AuthenticatedSessionAsn.validateJsonElement(jsonObj.get("asn"));
      if (!jsonObj.get("last_ip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_ip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_ip").toString()));
      }
      if ((jsonObj.get("last_user_agent") != null && !jsonObj.get("last_user_agent").isJsonNull()) && !jsonObj.get("last_user_agent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_user_agent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_user_agent").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AuthenticatedSession.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AuthenticatedSession' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AuthenticatedSession> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AuthenticatedSession.class));

       return (TypeAdapter<T>) new TypeAdapter<AuthenticatedSession>() {
           @Override
           public void write(JsonWriter out, AuthenticatedSession value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AuthenticatedSession read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AuthenticatedSession given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AuthenticatedSession
   * @throws IOException if the JSON string is invalid with respect to AuthenticatedSession
   */
  public static AuthenticatedSession fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AuthenticatedSession.class);
  }

  /**
   * Convert an instance of AuthenticatedSession to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

