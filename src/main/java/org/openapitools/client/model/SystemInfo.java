/*
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.6.3
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.SystemInfoRuntime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Get system information.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-25T23:12:57.050901581-03:00[America/Argentina/Cordoba]", comments = "Generator version: 7.8.0")
public class SystemInfo {
  public static final String SERIALIZED_NAME_HTTP_HEADERS = "http_headers";
  @SerializedName(SERIALIZED_NAME_HTTP_HEADERS)
  private Map<String, String> httpHeaders = new HashMap<>();

  public static final String SERIALIZED_NAME_HTTP_HOST = "http_host";
  @SerializedName(SERIALIZED_NAME_HTTP_HOST)
  private String httpHost;

  public static final String SERIALIZED_NAME_HTTP_IS_SECURE = "http_is_secure";
  @SerializedName(SERIALIZED_NAME_HTTP_IS_SECURE)
  private Boolean httpIsSecure;

  public static final String SERIALIZED_NAME_RUNTIME = "runtime";
  @SerializedName(SERIALIZED_NAME_RUNTIME)
  private SystemInfoRuntime runtime;

  public static final String SERIALIZED_NAME_BRAND = "brand";
  @SerializedName(SERIALIZED_NAME_BRAND)
  private String brand;

  public static final String SERIALIZED_NAME_SERVER_TIME = "server_time";
  @SerializedName(SERIALIZED_NAME_SERVER_TIME)
  private OffsetDateTime serverTime;

  public static final String SERIALIZED_NAME_EMBEDDED_OUTPOST_DISABLED = "embedded_outpost_disabled";
  @SerializedName(SERIALIZED_NAME_EMBEDDED_OUTPOST_DISABLED)
  private Boolean embeddedOutpostDisabled;

  public static final String SERIALIZED_NAME_EMBEDDED_OUTPOST_HOST = "embedded_outpost_host";
  @SerializedName(SERIALIZED_NAME_EMBEDDED_OUTPOST_HOST)
  private String embeddedOutpostHost;

  public SystemInfo() {
  }

  public SystemInfo(
     Map<String, String> httpHeaders, 
     String httpHost, 
     Boolean httpIsSecure, 
     String brand, 
     OffsetDateTime serverTime, 
     Boolean embeddedOutpostDisabled, 
     String embeddedOutpostHost
  ) {
    this();
    this.httpHeaders = httpHeaders;
    this.httpHost = httpHost;
    this.httpIsSecure = httpIsSecure;
    this.brand = brand;
    this.serverTime = serverTime;
    this.embeddedOutpostDisabled = embeddedOutpostDisabled;
    this.embeddedOutpostHost = embeddedOutpostHost;
  }

  /**
   * Get HTTP Request headers
   * @return httpHeaders
   */
  @javax.annotation.Nonnull
  public Map<String, String> getHttpHeaders() {
    return httpHeaders;
  }



  /**
   * Get HTTP host
   * @return httpHost
   */
  @javax.annotation.Nonnull
  public String getHttpHost() {
    return httpHost;
  }



  /**
   * Get HTTP Secure flag
   * @return httpIsSecure
   */
  @javax.annotation.Nonnull
  public Boolean getHttpIsSecure() {
    return httpIsSecure;
  }



  public SystemInfo runtime(SystemInfoRuntime runtime) {
    this.runtime = runtime;
    return this;
  }

  /**
   * Get runtime
   * @return runtime
   */
  @javax.annotation.Nonnull
  public SystemInfoRuntime getRuntime() {
    return runtime;
  }

  public void setRuntime(SystemInfoRuntime runtime) {
    this.runtime = runtime;
  }


  /**
   * Currently active brand
   * @return brand
   */
  @javax.annotation.Nonnull
  public String getBrand() {
    return brand;
  }



  /**
   * Current server time
   * @return serverTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getServerTime() {
    return serverTime;
  }



  /**
   * Whether the embedded outpost is disabled
   * @return embeddedOutpostDisabled
   */
  @javax.annotation.Nonnull
  public Boolean getEmbeddedOutpostDisabled() {
    return embeddedOutpostDisabled;
  }



  /**
   * Get the FQDN configured on the embedded outpost
   * @return embeddedOutpostHost
   */
  @javax.annotation.Nonnull
  public String getEmbeddedOutpostHost() {
    return embeddedOutpostHost;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SystemInfo systemInfo = (SystemInfo) o;
    return Objects.equals(this.httpHeaders, systemInfo.httpHeaders) &&
        Objects.equals(this.httpHost, systemInfo.httpHost) &&
        Objects.equals(this.httpIsSecure, systemInfo.httpIsSecure) &&
        Objects.equals(this.runtime, systemInfo.runtime) &&
        Objects.equals(this.brand, systemInfo.brand) &&
        Objects.equals(this.serverTime, systemInfo.serverTime) &&
        Objects.equals(this.embeddedOutpostDisabled, systemInfo.embeddedOutpostDisabled) &&
        Objects.equals(this.embeddedOutpostHost, systemInfo.embeddedOutpostHost);
  }

  @Override
  public int hashCode() {
    return Objects.hash(httpHeaders, httpHost, httpIsSecure, runtime, brand, serverTime, embeddedOutpostDisabled, embeddedOutpostHost);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SystemInfo {\n");
    sb.append("    httpHeaders: ").append(toIndentedString(httpHeaders)).append("\n");
    sb.append("    httpHost: ").append(toIndentedString(httpHost)).append("\n");
    sb.append("    httpIsSecure: ").append(toIndentedString(httpIsSecure)).append("\n");
    sb.append("    runtime: ").append(toIndentedString(runtime)).append("\n");
    sb.append("    brand: ").append(toIndentedString(brand)).append("\n");
    sb.append("    serverTime: ").append(toIndentedString(serverTime)).append("\n");
    sb.append("    embeddedOutpostDisabled: ").append(toIndentedString(embeddedOutpostDisabled)).append("\n");
    sb.append("    embeddedOutpostHost: ").append(toIndentedString(embeddedOutpostHost)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("http_headers");
    openapiFields.add("http_host");
    openapiFields.add("http_is_secure");
    openapiFields.add("runtime");
    openapiFields.add("brand");
    openapiFields.add("server_time");
    openapiFields.add("embedded_outpost_disabled");
    openapiFields.add("embedded_outpost_host");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("http_headers");
    openapiRequiredFields.add("http_host");
    openapiRequiredFields.add("http_is_secure");
    openapiRequiredFields.add("runtime");
    openapiRequiredFields.add("brand");
    openapiRequiredFields.add("server_time");
    openapiRequiredFields.add("embedded_outpost_disabled");
    openapiRequiredFields.add("embedded_outpost_host");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SystemInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SystemInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SystemInfo is not found in the empty JSON string", SystemInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SystemInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SystemInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SystemInfo.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("http_host").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `http_host` to be a primitive type in the JSON string but got `%s`", jsonObj.get("http_host").toString()));
      }
      // validate the required field `runtime`
      SystemInfoRuntime.validateJsonElement(jsonObj.get("runtime"));
      if (!jsonObj.get("brand").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `brand` to be a primitive type in the JSON string but got `%s`", jsonObj.get("brand").toString()));
      }
      if (!jsonObj.get("embedded_outpost_host").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `embedded_outpost_host` to be a primitive type in the JSON string but got `%s`", jsonObj.get("embedded_outpost_host").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SystemInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SystemInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SystemInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SystemInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<SystemInfo>() {
           @Override
           public void write(JsonWriter out, SystemInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SystemInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SystemInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SystemInfo
   * @throws IOException if the JSON string is invalid with respect to SystemInfo
   */
  public static SystemInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SystemInfo.class);
  }

  /**
   * Convert an instance of SystemInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

