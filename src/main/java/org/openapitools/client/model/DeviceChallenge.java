/*
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.6.3
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Single device challenge
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-25T23:12:57.050901581-03:00[America/Argentina/Cordoba]", comments = "Generator version: 7.8.0")
public class DeviceChallenge {
  public static final String SERIALIZED_NAME_DEVICE_CLASS = "device_class";
  @SerializedName(SERIALIZED_NAME_DEVICE_CLASS)
  private String deviceClass;

  public static final String SERIALIZED_NAME_DEVICE_UID = "device_uid";
  @SerializedName(SERIALIZED_NAME_DEVICE_UID)
  private String deviceUid;

  public static final String SERIALIZED_NAME_CHALLENGE = "challenge";
  @SerializedName(SERIALIZED_NAME_CHALLENGE)
  private Map<String, Object> challenge = new HashMap<>();

  public DeviceChallenge() {
  }

  public DeviceChallenge deviceClass(String deviceClass) {
    this.deviceClass = deviceClass;
    return this;
  }

  /**
   * Get deviceClass
   * @return deviceClass
   */
  @javax.annotation.Nonnull
  public String getDeviceClass() {
    return deviceClass;
  }

  public void setDeviceClass(String deviceClass) {
    this.deviceClass = deviceClass;
  }


  public DeviceChallenge deviceUid(String deviceUid) {
    this.deviceUid = deviceUid;
    return this;
  }

  /**
   * Get deviceUid
   * @return deviceUid
   */
  @javax.annotation.Nonnull
  public String getDeviceUid() {
    return deviceUid;
  }

  public void setDeviceUid(String deviceUid) {
    this.deviceUid = deviceUid;
  }


  public DeviceChallenge challenge(Map<String, Object> challenge) {
    this.challenge = challenge;
    return this;
  }

  public DeviceChallenge putChallengeItem(String key, Object challengeItem) {
    if (this.challenge == null) {
      this.challenge = new HashMap<>();
    }
    this.challenge.put(key, challengeItem);
    return this;
  }

  /**
   * Get challenge
   * @return challenge
   */
  @javax.annotation.Nonnull
  public Map<String, Object> getChallenge() {
    return challenge;
  }

  public void setChallenge(Map<String, Object> challenge) {
    this.challenge = challenge;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeviceChallenge deviceChallenge = (DeviceChallenge) o;
    return Objects.equals(this.deviceClass, deviceChallenge.deviceClass) &&
        Objects.equals(this.deviceUid, deviceChallenge.deviceUid) &&
        Objects.equals(this.challenge, deviceChallenge.challenge);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deviceClass, deviceUid, challenge);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeviceChallenge {\n");
    sb.append("    deviceClass: ").append(toIndentedString(deviceClass)).append("\n");
    sb.append("    deviceUid: ").append(toIndentedString(deviceUid)).append("\n");
    sb.append("    challenge: ").append(toIndentedString(challenge)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("device_class");
    openapiFields.add("device_uid");
    openapiFields.add("challenge");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("device_class");
    openapiRequiredFields.add("device_uid");
    openapiRequiredFields.add("challenge");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeviceChallenge
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeviceChallenge.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeviceChallenge is not found in the empty JSON string", DeviceChallenge.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeviceChallenge.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeviceChallenge` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DeviceChallenge.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("device_class").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `device_class` to be a primitive type in the JSON string but got `%s`", jsonObj.get("device_class").toString()));
      }
      if (!jsonObj.get("device_uid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `device_uid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("device_uid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeviceChallenge.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeviceChallenge' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeviceChallenge> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeviceChallenge.class));

       return (TypeAdapter<T>) new TypeAdapter<DeviceChallenge>() {
           @Override
           public void write(JsonWriter out, DeviceChallenge value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeviceChallenge read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeviceChallenge given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeviceChallenge
   * @throws IOException if the JSON string is invalid with respect to DeviceChallenge
   */
  public static DeviceChallenge fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeviceChallenge.class);
  }

  /**
   * Convert an instance of DeviceChallenge to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

