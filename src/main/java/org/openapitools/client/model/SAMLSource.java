/*
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.6.3
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.BindingTypeEnum;
import org.openapitools.client.model.DigestAlgorithmEnum;
import org.openapitools.client.model.NameIdPolicyEnum;
import org.openapitools.client.model.PolicyEngineMode;
import org.openapitools.client.model.SignatureAlgorithmEnum;
import org.openapitools.client.model.UserMatchingModeEnum;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SAMLSource Serializer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-25T23:12:57.050901581-03:00[America/Argentina/Cordoba]", comments = "Generator version: 7.8.0")
public class SAMLSource {
  public static final String SERIALIZED_NAME_PK = "pk";
  @SerializedName(SERIALIZED_NAME_PK)
  private UUID pk;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SLUG = "slug";
  @SerializedName(SERIALIZED_NAME_SLUG)
  private String slug;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_AUTHENTICATION_FLOW = "authentication_flow";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_FLOW)
  private UUID authenticationFlow;

  public static final String SERIALIZED_NAME_ENROLLMENT_FLOW = "enrollment_flow";
  @SerializedName(SERIALIZED_NAME_ENROLLMENT_FLOW)
  private UUID enrollmentFlow;

  public static final String SERIALIZED_NAME_COMPONENT = "component";
  @SerializedName(SERIALIZED_NAME_COMPONENT)
  private String component;

  public static final String SERIALIZED_NAME_VERBOSE_NAME = "verbose_name";
  @SerializedName(SERIALIZED_NAME_VERBOSE_NAME)
  private String verboseName;

  public static final String SERIALIZED_NAME_VERBOSE_NAME_PLURAL = "verbose_name_plural";
  @SerializedName(SERIALIZED_NAME_VERBOSE_NAME_PLURAL)
  private String verboseNamePlural;

  public static final String SERIALIZED_NAME_META_MODEL_NAME = "meta_model_name";
  @SerializedName(SERIALIZED_NAME_META_MODEL_NAME)
  private String metaModelName;

  public static final String SERIALIZED_NAME_POLICY_ENGINE_MODE = "policy_engine_mode";
  @SerializedName(SERIALIZED_NAME_POLICY_ENGINE_MODE)
  private PolicyEngineMode policyEngineMode;

  public static final String SERIALIZED_NAME_USER_MATCHING_MODE = "user_matching_mode";
  @SerializedName(SERIALIZED_NAME_USER_MATCHING_MODE)
  private UserMatchingModeEnum userMatchingMode;

  public static final String SERIALIZED_NAME_MANAGED = "managed";
  @SerializedName(SERIALIZED_NAME_MANAGED)
  private String managed;

  public static final String SERIALIZED_NAME_USER_PATH_TEMPLATE = "user_path_template";
  @SerializedName(SERIALIZED_NAME_USER_PATH_TEMPLATE)
  private String userPathTemplate;

  public static final String SERIALIZED_NAME_ICON = "icon";
  @SerializedName(SERIALIZED_NAME_ICON)
  private String icon;

  public static final String SERIALIZED_NAME_PRE_AUTHENTICATION_FLOW = "pre_authentication_flow";
  @SerializedName(SERIALIZED_NAME_PRE_AUTHENTICATION_FLOW)
  private UUID preAuthenticationFlow;

  public static final String SERIALIZED_NAME_ISSUER = "issuer";
  @SerializedName(SERIALIZED_NAME_ISSUER)
  private String issuer;

  public static final String SERIALIZED_NAME_SSO_URL = "sso_url";
  @SerializedName(SERIALIZED_NAME_SSO_URL)
  private URI ssoUrl;

  public static final String SERIALIZED_NAME_SLO_URL = "slo_url";
  @SerializedName(SERIALIZED_NAME_SLO_URL)
  private URI sloUrl;

  public static final String SERIALIZED_NAME_ALLOW_IDP_INITIATED = "allow_idp_initiated";
  @SerializedName(SERIALIZED_NAME_ALLOW_IDP_INITIATED)
  private Boolean allowIdpInitiated;

  public static final String SERIALIZED_NAME_NAME_ID_POLICY = "name_id_policy";
  @SerializedName(SERIALIZED_NAME_NAME_ID_POLICY)
  private NameIdPolicyEnum nameIdPolicy;

  public static final String SERIALIZED_NAME_BINDING_TYPE = "binding_type";
  @SerializedName(SERIALIZED_NAME_BINDING_TYPE)
  private BindingTypeEnum bindingType;

  public static final String SERIALIZED_NAME_VERIFICATION_KP = "verification_kp";
  @SerializedName(SERIALIZED_NAME_VERIFICATION_KP)
  private UUID verificationKp;

  public static final String SERIALIZED_NAME_SIGNING_KP = "signing_kp";
  @SerializedName(SERIALIZED_NAME_SIGNING_KP)
  private UUID signingKp;

  public static final String SERIALIZED_NAME_DIGEST_ALGORITHM = "digest_algorithm";
  @SerializedName(SERIALIZED_NAME_DIGEST_ALGORITHM)
  private DigestAlgorithmEnum digestAlgorithm;

  public static final String SERIALIZED_NAME_SIGNATURE_ALGORITHM = "signature_algorithm";
  @SerializedName(SERIALIZED_NAME_SIGNATURE_ALGORITHM)
  private SignatureAlgorithmEnum signatureAlgorithm;

  public static final String SERIALIZED_NAME_TEMPORARY_USER_DELETE_AFTER = "temporary_user_delete_after";
  @SerializedName(SERIALIZED_NAME_TEMPORARY_USER_DELETE_AFTER)
  private String temporaryUserDeleteAfter;

  public SAMLSource() {
  }

  public SAMLSource(
     UUID pk, 
     String component, 
     String verboseName, 
     String verboseNamePlural, 
     String metaModelName, 
     String managed, 
     String icon
  ) {
    this();
    this.pk = pk;
    this.component = component;
    this.verboseName = verboseName;
    this.verboseNamePlural = verboseNamePlural;
    this.metaModelName = metaModelName;
    this.managed = managed;
    this.icon = icon;
  }

  /**
   * Get pk
   * @return pk
   */
  @javax.annotation.Nonnull
  public UUID getPk() {
    return pk;
  }



  public SAMLSource name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Source&#39;s display Name.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public SAMLSource slug(String slug) {
    this.slug = slug;
    return this;
  }

  /**
   * Internal source name, used in URLs.
   * @return slug
   */
  @javax.annotation.Nonnull
  public String getSlug() {
    return slug;
  }

  public void setSlug(String slug) {
    this.slug = slug;
  }


  public SAMLSource enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Get enabled
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public SAMLSource authenticationFlow(UUID authenticationFlow) {
    this.authenticationFlow = authenticationFlow;
    return this;
  }

  /**
   * Flow to use when authenticating existing users.
   * @return authenticationFlow
   */
  @javax.annotation.Nullable
  public UUID getAuthenticationFlow() {
    return authenticationFlow;
  }

  public void setAuthenticationFlow(UUID authenticationFlow) {
    this.authenticationFlow = authenticationFlow;
  }


  public SAMLSource enrollmentFlow(UUID enrollmentFlow) {
    this.enrollmentFlow = enrollmentFlow;
    return this;
  }

  /**
   * Flow to use when enrolling new users.
   * @return enrollmentFlow
   */
  @javax.annotation.Nullable
  public UUID getEnrollmentFlow() {
    return enrollmentFlow;
  }

  public void setEnrollmentFlow(UUID enrollmentFlow) {
    this.enrollmentFlow = enrollmentFlow;
  }


  /**
   * Get object component so that we know how to edit the object
   * @return component
   */
  @javax.annotation.Nonnull
  public String getComponent() {
    return component;
  }



  /**
   * Return object&#39;s verbose_name
   * @return verboseName
   */
  @javax.annotation.Nonnull
  public String getVerboseName() {
    return verboseName;
  }



  /**
   * Return object&#39;s plural verbose_name
   * @return verboseNamePlural
   */
  @javax.annotation.Nonnull
  public String getVerboseNamePlural() {
    return verboseNamePlural;
  }



  /**
   * Return internal model name
   * @return metaModelName
   */
  @javax.annotation.Nonnull
  public String getMetaModelName() {
    return metaModelName;
  }



  public SAMLSource policyEngineMode(PolicyEngineMode policyEngineMode) {
    this.policyEngineMode = policyEngineMode;
    return this;
  }

  /**
   * Get policyEngineMode
   * @return policyEngineMode
   */
  @javax.annotation.Nullable
  public PolicyEngineMode getPolicyEngineMode() {
    return policyEngineMode;
  }

  public void setPolicyEngineMode(PolicyEngineMode policyEngineMode) {
    this.policyEngineMode = policyEngineMode;
  }


  public SAMLSource userMatchingMode(UserMatchingModeEnum userMatchingMode) {
    this.userMatchingMode = userMatchingMode;
    return this;
  }

  /**
   * How the source determines if an existing user should be authenticated or a new user enrolled.
   * @return userMatchingMode
   */
  @javax.annotation.Nullable
  public UserMatchingModeEnum getUserMatchingMode() {
    return userMatchingMode;
  }

  public void setUserMatchingMode(UserMatchingModeEnum userMatchingMode) {
    this.userMatchingMode = userMatchingMode;
  }


  /**
   * Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
   * @return managed
   */
  @javax.annotation.Nullable
  public String getManaged() {
    return managed;
  }



  public SAMLSource userPathTemplate(String userPathTemplate) {
    this.userPathTemplate = userPathTemplate;
    return this;
  }

  /**
   * Get userPathTemplate
   * @return userPathTemplate
   */
  @javax.annotation.Nullable
  public String getUserPathTemplate() {
    return userPathTemplate;
  }

  public void setUserPathTemplate(String userPathTemplate) {
    this.userPathTemplate = userPathTemplate;
  }


  /**
   * Get icon
   * @return icon
   */
  @javax.annotation.Nonnull
  public String getIcon() {
    return icon;
  }



  public SAMLSource preAuthenticationFlow(UUID preAuthenticationFlow) {
    this.preAuthenticationFlow = preAuthenticationFlow;
    return this;
  }

  /**
   * Flow used before authentication.
   * @return preAuthenticationFlow
   */
  @javax.annotation.Nonnull
  public UUID getPreAuthenticationFlow() {
    return preAuthenticationFlow;
  }

  public void setPreAuthenticationFlow(UUID preAuthenticationFlow) {
    this.preAuthenticationFlow = preAuthenticationFlow;
  }


  public SAMLSource issuer(String issuer) {
    this.issuer = issuer;
    return this;
  }

  /**
   * Also known as Entity ID. Defaults the Metadata URL.
   * @return issuer
   */
  @javax.annotation.Nullable
  public String getIssuer() {
    return issuer;
  }

  public void setIssuer(String issuer) {
    this.issuer = issuer;
  }


  public SAMLSource ssoUrl(URI ssoUrl) {
    this.ssoUrl = ssoUrl;
    return this;
  }

  /**
   * URL that the initial Login request is sent to.
   * @return ssoUrl
   */
  @javax.annotation.Nonnull
  public URI getSsoUrl() {
    return ssoUrl;
  }

  public void setSsoUrl(URI ssoUrl) {
    this.ssoUrl = ssoUrl;
  }


  public SAMLSource sloUrl(URI sloUrl) {
    this.sloUrl = sloUrl;
    return this;
  }

  /**
   * Optional URL if your IDP supports Single-Logout.
   * @return sloUrl
   */
  @javax.annotation.Nullable
  public URI getSloUrl() {
    return sloUrl;
  }

  public void setSloUrl(URI sloUrl) {
    this.sloUrl = sloUrl;
  }


  public SAMLSource allowIdpInitiated(Boolean allowIdpInitiated) {
    this.allowIdpInitiated = allowIdpInitiated;
    return this;
  }

  /**
   * Allows authentication flows initiated by the IdP. This can be a security risk, as no validation of the request ID is done.
   * @return allowIdpInitiated
   */
  @javax.annotation.Nullable
  public Boolean getAllowIdpInitiated() {
    return allowIdpInitiated;
  }

  public void setAllowIdpInitiated(Boolean allowIdpInitiated) {
    this.allowIdpInitiated = allowIdpInitiated;
  }


  public SAMLSource nameIdPolicy(NameIdPolicyEnum nameIdPolicy) {
    this.nameIdPolicy = nameIdPolicy;
    return this;
  }

  /**
   * NameID Policy sent to the IdP. Can be unset, in which case no Policy is sent.
   * @return nameIdPolicy
   */
  @javax.annotation.Nullable
  public NameIdPolicyEnum getNameIdPolicy() {
    return nameIdPolicy;
  }

  public void setNameIdPolicy(NameIdPolicyEnum nameIdPolicy) {
    this.nameIdPolicy = nameIdPolicy;
  }


  public SAMLSource bindingType(BindingTypeEnum bindingType) {
    this.bindingType = bindingType;
    return this;
  }

  /**
   * Get bindingType
   * @return bindingType
   */
  @javax.annotation.Nullable
  public BindingTypeEnum getBindingType() {
    return bindingType;
  }

  public void setBindingType(BindingTypeEnum bindingType) {
    this.bindingType = bindingType;
  }


  public SAMLSource verificationKp(UUID verificationKp) {
    this.verificationKp = verificationKp;
    return this;
  }

  /**
   * When selected, incoming assertion&#39;s Signatures will be validated against this certificate. To allow unsigned Requests, leave on default.
   * @return verificationKp
   */
  @javax.annotation.Nullable
  public UUID getVerificationKp() {
    return verificationKp;
  }

  public void setVerificationKp(UUID verificationKp) {
    this.verificationKp = verificationKp;
  }


  public SAMLSource signingKp(UUID signingKp) {
    this.signingKp = signingKp;
    return this;
  }

  /**
   * Keypair used to sign outgoing Responses going to the Identity Provider.
   * @return signingKp
   */
  @javax.annotation.Nullable
  public UUID getSigningKp() {
    return signingKp;
  }

  public void setSigningKp(UUID signingKp) {
    this.signingKp = signingKp;
  }


  public SAMLSource digestAlgorithm(DigestAlgorithmEnum digestAlgorithm) {
    this.digestAlgorithm = digestAlgorithm;
    return this;
  }

  /**
   * Get digestAlgorithm
   * @return digestAlgorithm
   */
  @javax.annotation.Nullable
  public DigestAlgorithmEnum getDigestAlgorithm() {
    return digestAlgorithm;
  }

  public void setDigestAlgorithm(DigestAlgorithmEnum digestAlgorithm) {
    this.digestAlgorithm = digestAlgorithm;
  }


  public SAMLSource signatureAlgorithm(SignatureAlgorithmEnum signatureAlgorithm) {
    this.signatureAlgorithm = signatureAlgorithm;
    return this;
  }

  /**
   * Get signatureAlgorithm
   * @return signatureAlgorithm
   */
  @javax.annotation.Nullable
  public SignatureAlgorithmEnum getSignatureAlgorithm() {
    return signatureAlgorithm;
  }

  public void setSignatureAlgorithm(SignatureAlgorithmEnum signatureAlgorithm) {
    this.signatureAlgorithm = signatureAlgorithm;
  }


  public SAMLSource temporaryUserDeleteAfter(String temporaryUserDeleteAfter) {
    this.temporaryUserDeleteAfter = temporaryUserDeleteAfter;
    return this;
  }

  /**
   * Time offset when temporary users should be deleted. This only applies if your IDP uses the NameID Format &#39;transient&#39;, and the user doesn&#39;t log out manually. (Format: hours&#x3D;1;minutes&#x3D;2;seconds&#x3D;3).
   * @return temporaryUserDeleteAfter
   */
  @javax.annotation.Nullable
  public String getTemporaryUserDeleteAfter() {
    return temporaryUserDeleteAfter;
  }

  public void setTemporaryUserDeleteAfter(String temporaryUserDeleteAfter) {
    this.temporaryUserDeleteAfter = temporaryUserDeleteAfter;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SAMLSource saMLSource = (SAMLSource) o;
    return Objects.equals(this.pk, saMLSource.pk) &&
        Objects.equals(this.name, saMLSource.name) &&
        Objects.equals(this.slug, saMLSource.slug) &&
        Objects.equals(this.enabled, saMLSource.enabled) &&
        Objects.equals(this.authenticationFlow, saMLSource.authenticationFlow) &&
        Objects.equals(this.enrollmentFlow, saMLSource.enrollmentFlow) &&
        Objects.equals(this.component, saMLSource.component) &&
        Objects.equals(this.verboseName, saMLSource.verboseName) &&
        Objects.equals(this.verboseNamePlural, saMLSource.verboseNamePlural) &&
        Objects.equals(this.metaModelName, saMLSource.metaModelName) &&
        Objects.equals(this.policyEngineMode, saMLSource.policyEngineMode) &&
        Objects.equals(this.userMatchingMode, saMLSource.userMatchingMode) &&
        Objects.equals(this.managed, saMLSource.managed) &&
        Objects.equals(this.userPathTemplate, saMLSource.userPathTemplate) &&
        Objects.equals(this.icon, saMLSource.icon) &&
        Objects.equals(this.preAuthenticationFlow, saMLSource.preAuthenticationFlow) &&
        Objects.equals(this.issuer, saMLSource.issuer) &&
        Objects.equals(this.ssoUrl, saMLSource.ssoUrl) &&
        Objects.equals(this.sloUrl, saMLSource.sloUrl) &&
        Objects.equals(this.allowIdpInitiated, saMLSource.allowIdpInitiated) &&
        Objects.equals(this.nameIdPolicy, saMLSource.nameIdPolicy) &&
        Objects.equals(this.bindingType, saMLSource.bindingType) &&
        Objects.equals(this.verificationKp, saMLSource.verificationKp) &&
        Objects.equals(this.signingKp, saMLSource.signingKp) &&
        Objects.equals(this.digestAlgorithm, saMLSource.digestAlgorithm) &&
        Objects.equals(this.signatureAlgorithm, saMLSource.signatureAlgorithm) &&
        Objects.equals(this.temporaryUserDeleteAfter, saMLSource.temporaryUserDeleteAfter);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(pk, name, slug, enabled, authenticationFlow, enrollmentFlow, component, verboseName, verboseNamePlural, metaModelName, policyEngineMode, userMatchingMode, managed, userPathTemplate, icon, preAuthenticationFlow, issuer, ssoUrl, sloUrl, allowIdpInitiated, nameIdPolicy, bindingType, verificationKp, signingKp, digestAlgorithm, signatureAlgorithm, temporaryUserDeleteAfter);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SAMLSource {\n");
    sb.append("    pk: ").append(toIndentedString(pk)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    slug: ").append(toIndentedString(slug)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    authenticationFlow: ").append(toIndentedString(authenticationFlow)).append("\n");
    sb.append("    enrollmentFlow: ").append(toIndentedString(enrollmentFlow)).append("\n");
    sb.append("    component: ").append(toIndentedString(component)).append("\n");
    sb.append("    verboseName: ").append(toIndentedString(verboseName)).append("\n");
    sb.append("    verboseNamePlural: ").append(toIndentedString(verboseNamePlural)).append("\n");
    sb.append("    metaModelName: ").append(toIndentedString(metaModelName)).append("\n");
    sb.append("    policyEngineMode: ").append(toIndentedString(policyEngineMode)).append("\n");
    sb.append("    userMatchingMode: ").append(toIndentedString(userMatchingMode)).append("\n");
    sb.append("    managed: ").append(toIndentedString(managed)).append("\n");
    sb.append("    userPathTemplate: ").append(toIndentedString(userPathTemplate)).append("\n");
    sb.append("    icon: ").append(toIndentedString(icon)).append("\n");
    sb.append("    preAuthenticationFlow: ").append(toIndentedString(preAuthenticationFlow)).append("\n");
    sb.append("    issuer: ").append(toIndentedString(issuer)).append("\n");
    sb.append("    ssoUrl: ").append(toIndentedString(ssoUrl)).append("\n");
    sb.append("    sloUrl: ").append(toIndentedString(sloUrl)).append("\n");
    sb.append("    allowIdpInitiated: ").append(toIndentedString(allowIdpInitiated)).append("\n");
    sb.append("    nameIdPolicy: ").append(toIndentedString(nameIdPolicy)).append("\n");
    sb.append("    bindingType: ").append(toIndentedString(bindingType)).append("\n");
    sb.append("    verificationKp: ").append(toIndentedString(verificationKp)).append("\n");
    sb.append("    signingKp: ").append(toIndentedString(signingKp)).append("\n");
    sb.append("    digestAlgorithm: ").append(toIndentedString(digestAlgorithm)).append("\n");
    sb.append("    signatureAlgorithm: ").append(toIndentedString(signatureAlgorithm)).append("\n");
    sb.append("    temporaryUserDeleteAfter: ").append(toIndentedString(temporaryUserDeleteAfter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pk");
    openapiFields.add("name");
    openapiFields.add("slug");
    openapiFields.add("enabled");
    openapiFields.add("authentication_flow");
    openapiFields.add("enrollment_flow");
    openapiFields.add("component");
    openapiFields.add("verbose_name");
    openapiFields.add("verbose_name_plural");
    openapiFields.add("meta_model_name");
    openapiFields.add("policy_engine_mode");
    openapiFields.add("user_matching_mode");
    openapiFields.add("managed");
    openapiFields.add("user_path_template");
    openapiFields.add("icon");
    openapiFields.add("pre_authentication_flow");
    openapiFields.add("issuer");
    openapiFields.add("sso_url");
    openapiFields.add("slo_url");
    openapiFields.add("allow_idp_initiated");
    openapiFields.add("name_id_policy");
    openapiFields.add("binding_type");
    openapiFields.add("verification_kp");
    openapiFields.add("signing_kp");
    openapiFields.add("digest_algorithm");
    openapiFields.add("signature_algorithm");
    openapiFields.add("temporary_user_delete_after");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("pk");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("slug");
    openapiRequiredFields.add("component");
    openapiRequiredFields.add("verbose_name");
    openapiRequiredFields.add("verbose_name_plural");
    openapiRequiredFields.add("meta_model_name");
    openapiRequiredFields.add("managed");
    openapiRequiredFields.add("icon");
    openapiRequiredFields.add("pre_authentication_flow");
    openapiRequiredFields.add("sso_url");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SAMLSource
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SAMLSource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SAMLSource is not found in the empty JSON string", SAMLSource.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SAMLSource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SAMLSource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SAMLSource.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("pk").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pk` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pk").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("slug").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slug` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slug").toString()));
      }
      if ((jsonObj.get("authentication_flow") != null && !jsonObj.get("authentication_flow").isJsonNull()) && !jsonObj.get("authentication_flow").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authentication_flow` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authentication_flow").toString()));
      }
      if ((jsonObj.get("enrollment_flow") != null && !jsonObj.get("enrollment_flow").isJsonNull()) && !jsonObj.get("enrollment_flow").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enrollment_flow` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enrollment_flow").toString()));
      }
      if (!jsonObj.get("component").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `component` to be a primitive type in the JSON string but got `%s`", jsonObj.get("component").toString()));
      }
      if (!jsonObj.get("verbose_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verbose_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verbose_name").toString()));
      }
      if (!jsonObj.get("verbose_name_plural").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verbose_name_plural` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verbose_name_plural").toString()));
      }
      if (!jsonObj.get("meta_model_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `meta_model_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("meta_model_name").toString()));
      }
      // validate the optional field `policy_engine_mode`
      if (jsonObj.get("policy_engine_mode") != null && !jsonObj.get("policy_engine_mode").isJsonNull()) {
        PolicyEngineMode.validateJsonElement(jsonObj.get("policy_engine_mode"));
      }
      // validate the optional field `user_matching_mode`
      if (jsonObj.get("user_matching_mode") != null && !jsonObj.get("user_matching_mode").isJsonNull()) {
        UserMatchingModeEnum.validateJsonElement(jsonObj.get("user_matching_mode"));
      }
      if ((jsonObj.get("managed") != null && !jsonObj.get("managed").isJsonNull()) && !jsonObj.get("managed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `managed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("managed").toString()));
      }
      if ((jsonObj.get("user_path_template") != null && !jsonObj.get("user_path_template").isJsonNull()) && !jsonObj.get("user_path_template").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_path_template` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_path_template").toString()));
      }
      if (!jsonObj.get("icon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `icon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("icon").toString()));
      }
      if (!jsonObj.get("pre_authentication_flow").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pre_authentication_flow` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pre_authentication_flow").toString()));
      }
      if ((jsonObj.get("issuer") != null && !jsonObj.get("issuer").isJsonNull()) && !jsonObj.get("issuer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuer").toString()));
      }
      if (!jsonObj.get("sso_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sso_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sso_url").toString()));
      }
      if ((jsonObj.get("slo_url") != null && !jsonObj.get("slo_url").isJsonNull()) && !jsonObj.get("slo_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slo_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slo_url").toString()));
      }
      // validate the optional field `name_id_policy`
      if (jsonObj.get("name_id_policy") != null && !jsonObj.get("name_id_policy").isJsonNull()) {
        NameIdPolicyEnum.validateJsonElement(jsonObj.get("name_id_policy"));
      }
      // validate the optional field `binding_type`
      if (jsonObj.get("binding_type") != null && !jsonObj.get("binding_type").isJsonNull()) {
        BindingTypeEnum.validateJsonElement(jsonObj.get("binding_type"));
      }
      if ((jsonObj.get("verification_kp") != null && !jsonObj.get("verification_kp").isJsonNull()) && !jsonObj.get("verification_kp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verification_kp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verification_kp").toString()));
      }
      if ((jsonObj.get("signing_kp") != null && !jsonObj.get("signing_kp").isJsonNull()) && !jsonObj.get("signing_kp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signing_kp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signing_kp").toString()));
      }
      // validate the optional field `digest_algorithm`
      if (jsonObj.get("digest_algorithm") != null && !jsonObj.get("digest_algorithm").isJsonNull()) {
        DigestAlgorithmEnum.validateJsonElement(jsonObj.get("digest_algorithm"));
      }
      // validate the optional field `signature_algorithm`
      if (jsonObj.get("signature_algorithm") != null && !jsonObj.get("signature_algorithm").isJsonNull()) {
        SignatureAlgorithmEnum.validateJsonElement(jsonObj.get("signature_algorithm"));
      }
      if ((jsonObj.get("temporary_user_delete_after") != null && !jsonObj.get("temporary_user_delete_after").isJsonNull()) && !jsonObj.get("temporary_user_delete_after").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `temporary_user_delete_after` to be a primitive type in the JSON string but got `%s`", jsonObj.get("temporary_user_delete_after").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SAMLSource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SAMLSource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SAMLSource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SAMLSource.class));

       return (TypeAdapter<T>) new TypeAdapter<SAMLSource>() {
           @Override
           public void write(JsonWriter out, SAMLSource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SAMLSource read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SAMLSource given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SAMLSource
   * @throws IOException if the JSON string is invalid with respect to SAMLSource
   */
  public static SAMLSource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SAMLSource.class);
  }

  /**
   * Convert an instance of SAMLSource to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

