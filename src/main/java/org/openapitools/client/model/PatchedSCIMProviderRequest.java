/*
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.6.3
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SCIMProvider Serializer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-25T23:12:57.050901581-03:00[America/Argentina/Cordoba]", comments = "Generator version: 7.8.0")
public class PatchedSCIMProviderRequest {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PROPERTY_MAPPINGS = "property_mappings";
  @SerializedName(SERIALIZED_NAME_PROPERTY_MAPPINGS)
  private List<UUID> propertyMappings = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROPERTY_MAPPINGS_GROUP = "property_mappings_group";
  @SerializedName(SERIALIZED_NAME_PROPERTY_MAPPINGS_GROUP)
  private List<UUID> propertyMappingsGroup = new ArrayList<>();

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  private String token;

  public static final String SERIALIZED_NAME_EXCLUDE_USERS_SERVICE_ACCOUNT = "exclude_users_service_account";
  @SerializedName(SERIALIZED_NAME_EXCLUDE_USERS_SERVICE_ACCOUNT)
  private Boolean excludeUsersServiceAccount;

  public static final String SERIALIZED_NAME_FILTER_GROUP = "filter_group";
  @SerializedName(SERIALIZED_NAME_FILTER_GROUP)
  private UUID filterGroup;

  public PatchedSCIMProviderRequest() {
  }

  public PatchedSCIMProviderRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public PatchedSCIMProviderRequest propertyMappings(List<UUID> propertyMappings) {
    this.propertyMappings = propertyMappings;
    return this;
  }

  public PatchedSCIMProviderRequest addPropertyMappingsItem(UUID propertyMappingsItem) {
    if (this.propertyMappings == null) {
      this.propertyMappings = new ArrayList<>();
    }
    this.propertyMappings.add(propertyMappingsItem);
    return this;
  }

  /**
   * Get propertyMappings
   * @return propertyMappings
   */
  @javax.annotation.Nullable
  public List<UUID> getPropertyMappings() {
    return propertyMappings;
  }

  public void setPropertyMappings(List<UUID> propertyMappings) {
    this.propertyMappings = propertyMappings;
  }


  public PatchedSCIMProviderRequest propertyMappingsGroup(List<UUID> propertyMappingsGroup) {
    this.propertyMappingsGroup = propertyMappingsGroup;
    return this;
  }

  public PatchedSCIMProviderRequest addPropertyMappingsGroupItem(UUID propertyMappingsGroupItem) {
    if (this.propertyMappingsGroup == null) {
      this.propertyMappingsGroup = new ArrayList<>();
    }
    this.propertyMappingsGroup.add(propertyMappingsGroupItem);
    return this;
  }

  /**
   * Property mappings used for group creation/updating.
   * @return propertyMappingsGroup
   */
  @javax.annotation.Nullable
  public List<UUID> getPropertyMappingsGroup() {
    return propertyMappingsGroup;
  }

  public void setPropertyMappingsGroup(List<UUID> propertyMappingsGroup) {
    this.propertyMappingsGroup = propertyMappingsGroup;
  }


  public PatchedSCIMProviderRequest url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Base URL to SCIM requests, usually ends in /v2
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public PatchedSCIMProviderRequest token(String token) {
    this.token = token;
    return this;
  }

  /**
   * Authentication token
   * @return token
   */
  @javax.annotation.Nullable
  public String getToken() {
    return token;
  }

  public void setToken(String token) {
    this.token = token;
  }


  public PatchedSCIMProviderRequest excludeUsersServiceAccount(Boolean excludeUsersServiceAccount) {
    this.excludeUsersServiceAccount = excludeUsersServiceAccount;
    return this;
  }

  /**
   * Get excludeUsersServiceAccount
   * @return excludeUsersServiceAccount
   */
  @javax.annotation.Nullable
  public Boolean getExcludeUsersServiceAccount() {
    return excludeUsersServiceAccount;
  }

  public void setExcludeUsersServiceAccount(Boolean excludeUsersServiceAccount) {
    this.excludeUsersServiceAccount = excludeUsersServiceAccount;
  }


  public PatchedSCIMProviderRequest filterGroup(UUID filterGroup) {
    this.filterGroup = filterGroup;
    return this;
  }

  /**
   * Get filterGroup
   * @return filterGroup
   */
  @javax.annotation.Nullable
  public UUID getFilterGroup() {
    return filterGroup;
  }

  public void setFilterGroup(UUID filterGroup) {
    this.filterGroup = filterGroup;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PatchedSCIMProviderRequest patchedSCIMProviderRequest = (PatchedSCIMProviderRequest) o;
    return Objects.equals(this.name, patchedSCIMProviderRequest.name) &&
        Objects.equals(this.propertyMappings, patchedSCIMProviderRequest.propertyMappings) &&
        Objects.equals(this.propertyMappingsGroup, patchedSCIMProviderRequest.propertyMappingsGroup) &&
        Objects.equals(this.url, patchedSCIMProviderRequest.url) &&
        Objects.equals(this.token, patchedSCIMProviderRequest.token) &&
        Objects.equals(this.excludeUsersServiceAccount, patchedSCIMProviderRequest.excludeUsersServiceAccount) &&
        Objects.equals(this.filterGroup, patchedSCIMProviderRequest.filterGroup);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, propertyMappings, propertyMappingsGroup, url, token, excludeUsersServiceAccount, filterGroup);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PatchedSCIMProviderRequest {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    propertyMappings: ").append(toIndentedString(propertyMappings)).append("\n");
    sb.append("    propertyMappingsGroup: ").append(toIndentedString(propertyMappingsGroup)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    excludeUsersServiceAccount: ").append(toIndentedString(excludeUsersServiceAccount)).append("\n");
    sb.append("    filterGroup: ").append(toIndentedString(filterGroup)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("property_mappings");
    openapiFields.add("property_mappings_group");
    openapiFields.add("url");
    openapiFields.add("token");
    openapiFields.add("exclude_users_service_account");
    openapiFields.add("filter_group");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PatchedSCIMProviderRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PatchedSCIMProviderRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PatchedSCIMProviderRequest is not found in the empty JSON string", PatchedSCIMProviderRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PatchedSCIMProviderRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PatchedSCIMProviderRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("property_mappings") != null && !jsonObj.get("property_mappings").isJsonNull() && !jsonObj.get("property_mappings").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `property_mappings` to be an array in the JSON string but got `%s`", jsonObj.get("property_mappings").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("property_mappings_group") != null && !jsonObj.get("property_mappings_group").isJsonNull() && !jsonObj.get("property_mappings_group").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `property_mappings_group` to be an array in the JSON string but got `%s`", jsonObj.get("property_mappings_group").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if ((jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull()) && !jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
      if ((jsonObj.get("filter_group") != null && !jsonObj.get("filter_group").isJsonNull()) && !jsonObj.get("filter_group").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filter_group` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filter_group").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PatchedSCIMProviderRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PatchedSCIMProviderRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PatchedSCIMProviderRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PatchedSCIMProviderRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PatchedSCIMProviderRequest>() {
           @Override
           public void write(JsonWriter out, PatchedSCIMProviderRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PatchedSCIMProviderRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PatchedSCIMProviderRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PatchedSCIMProviderRequest
   * @throws IOException if the JSON string is invalid with respect to PatchedSCIMProviderRequest
   */
  public static PatchedSCIMProviderRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PatchedSCIMProviderRequest.class);
  }

  /**
   * Convert an instance of PatchedSCIMProviderRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

