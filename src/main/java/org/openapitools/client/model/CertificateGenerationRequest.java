/*
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.6.3
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AlgEnum;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Certificate generation parameters
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-25T23:12:57.050901581-03:00[America/Argentina/Cordoba]", comments = "Generator version: 7.8.0")
public class CertificateGenerationRequest {
  public static final String SERIALIZED_NAME_COMMON_NAME = "common_name";
  @SerializedName(SERIALIZED_NAME_COMMON_NAME)
  private String commonName;

  public static final String SERIALIZED_NAME_SUBJECT_ALT_NAME = "subject_alt_name";
  @SerializedName(SERIALIZED_NAME_SUBJECT_ALT_NAME)
  private String subjectAltName;

  public static final String SERIALIZED_NAME_VALIDITY_DAYS = "validity_days";
  @SerializedName(SERIALIZED_NAME_VALIDITY_DAYS)
  private Integer validityDays;

  public static final String SERIALIZED_NAME_ALG = "alg";
  @SerializedName(SERIALIZED_NAME_ALG)
  private AlgEnum alg = AlgEnum.RSA;

  public CertificateGenerationRequest() {
  }

  public CertificateGenerationRequest commonName(String commonName) {
    this.commonName = commonName;
    return this;
  }

  /**
   * Get commonName
   * @return commonName
   */
  @javax.annotation.Nonnull
  public String getCommonName() {
    return commonName;
  }

  public void setCommonName(String commonName) {
    this.commonName = commonName;
  }


  public CertificateGenerationRequest subjectAltName(String subjectAltName) {
    this.subjectAltName = subjectAltName;
    return this;
  }

  /**
   * Get subjectAltName
   * @return subjectAltName
   */
  @javax.annotation.Nullable
  public String getSubjectAltName() {
    return subjectAltName;
  }

  public void setSubjectAltName(String subjectAltName) {
    this.subjectAltName = subjectAltName;
  }


  public CertificateGenerationRequest validityDays(Integer validityDays) {
    this.validityDays = validityDays;
    return this;
  }

  /**
   * Get validityDays
   * @return validityDays
   */
  @javax.annotation.Nonnull
  public Integer getValidityDays() {
    return validityDays;
  }

  public void setValidityDays(Integer validityDays) {
    this.validityDays = validityDays;
  }


  public CertificateGenerationRequest alg(AlgEnum alg) {
    this.alg = alg;
    return this;
  }

  /**
   * Get alg
   * @return alg
   */
  @javax.annotation.Nullable
  public AlgEnum getAlg() {
    return alg;
  }

  public void setAlg(AlgEnum alg) {
    this.alg = alg;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CertificateGenerationRequest certificateGenerationRequest = (CertificateGenerationRequest) o;
    return Objects.equals(this.commonName, certificateGenerationRequest.commonName) &&
        Objects.equals(this.subjectAltName, certificateGenerationRequest.subjectAltName) &&
        Objects.equals(this.validityDays, certificateGenerationRequest.validityDays) &&
        Objects.equals(this.alg, certificateGenerationRequest.alg);
  }

  @Override
  public int hashCode() {
    return Objects.hash(commonName, subjectAltName, validityDays, alg);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CertificateGenerationRequest {\n");
    sb.append("    commonName: ").append(toIndentedString(commonName)).append("\n");
    sb.append("    subjectAltName: ").append(toIndentedString(subjectAltName)).append("\n");
    sb.append("    validityDays: ").append(toIndentedString(validityDays)).append("\n");
    sb.append("    alg: ").append(toIndentedString(alg)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("common_name");
    openapiFields.add("subject_alt_name");
    openapiFields.add("validity_days");
    openapiFields.add("alg");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("common_name");
    openapiRequiredFields.add("validity_days");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CertificateGenerationRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CertificateGenerationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CertificateGenerationRequest is not found in the empty JSON string", CertificateGenerationRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CertificateGenerationRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CertificateGenerationRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CertificateGenerationRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("common_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `common_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("common_name").toString()));
      }
      if ((jsonObj.get("subject_alt_name") != null && !jsonObj.get("subject_alt_name").isJsonNull()) && !jsonObj.get("subject_alt_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject_alt_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject_alt_name").toString()));
      }
      // validate the optional field `alg`
      if (jsonObj.get("alg") != null && !jsonObj.get("alg").isJsonNull()) {
        AlgEnum.validateJsonElement(jsonObj.get("alg"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CertificateGenerationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CertificateGenerationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CertificateGenerationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CertificateGenerationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CertificateGenerationRequest>() {
           @Override
           public void write(JsonWriter out, CertificateGenerationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CertificateGenerationRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CertificateGenerationRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CertificateGenerationRequest
   * @throws IOException if the JSON string is invalid with respect to CertificateGenerationRequest
   */
  public static CertificateGenerationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CertificateGenerationRequest.class);
  }

  /**
   * Convert an instance of CertificateGenerationRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

