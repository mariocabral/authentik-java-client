/*
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.6.3
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.DigestAlgorithmEnum;
import org.openapitools.client.model.SignatureAlgorithmEnum;
import org.openapitools.client.model.SpBindingEnum;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SAMLProvider Serializer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-25T23:12:57.050901581-03:00[America/Argentina/Cordoba]", comments = "Generator version: 7.8.0")
public class SAMLProvider {
  public static final String SERIALIZED_NAME_PK = "pk";
  @SerializedName(SERIALIZED_NAME_PK)
  private Integer pk;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_AUTHENTICATION_FLOW = "authentication_flow";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_FLOW)
  private UUID authenticationFlow;

  public static final String SERIALIZED_NAME_AUTHORIZATION_FLOW = "authorization_flow";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_FLOW)
  private UUID authorizationFlow;

  public static final String SERIALIZED_NAME_PROPERTY_MAPPINGS = "property_mappings";
  @SerializedName(SERIALIZED_NAME_PROPERTY_MAPPINGS)
  private List<UUID> propertyMappings = new ArrayList<>();

  public static final String SERIALIZED_NAME_COMPONENT = "component";
  @SerializedName(SERIALIZED_NAME_COMPONENT)
  private String component;

  public static final String SERIALIZED_NAME_ASSIGNED_APPLICATION_SLUG = "assigned_application_slug";
  @SerializedName(SERIALIZED_NAME_ASSIGNED_APPLICATION_SLUG)
  private String assignedApplicationSlug;

  public static final String SERIALIZED_NAME_ASSIGNED_APPLICATION_NAME = "assigned_application_name";
  @SerializedName(SERIALIZED_NAME_ASSIGNED_APPLICATION_NAME)
  private String assignedApplicationName;

  public static final String SERIALIZED_NAME_ASSIGNED_BACKCHANNEL_APPLICATION_SLUG = "assigned_backchannel_application_slug";
  @SerializedName(SERIALIZED_NAME_ASSIGNED_BACKCHANNEL_APPLICATION_SLUG)
  private String assignedBackchannelApplicationSlug;

  public static final String SERIALIZED_NAME_ASSIGNED_BACKCHANNEL_APPLICATION_NAME = "assigned_backchannel_application_name";
  @SerializedName(SERIALIZED_NAME_ASSIGNED_BACKCHANNEL_APPLICATION_NAME)
  private String assignedBackchannelApplicationName;

  public static final String SERIALIZED_NAME_VERBOSE_NAME = "verbose_name";
  @SerializedName(SERIALIZED_NAME_VERBOSE_NAME)
  private String verboseName;

  public static final String SERIALIZED_NAME_VERBOSE_NAME_PLURAL = "verbose_name_plural";
  @SerializedName(SERIALIZED_NAME_VERBOSE_NAME_PLURAL)
  private String verboseNamePlural;

  public static final String SERIALIZED_NAME_META_MODEL_NAME = "meta_model_name";
  @SerializedName(SERIALIZED_NAME_META_MODEL_NAME)
  private String metaModelName;

  public static final String SERIALIZED_NAME_ACS_URL = "acs_url";
  @SerializedName(SERIALIZED_NAME_ACS_URL)
  private URI acsUrl;

  public static final String SERIALIZED_NAME_AUDIENCE = "audience";
  @SerializedName(SERIALIZED_NAME_AUDIENCE)
  private String audience;

  public static final String SERIALIZED_NAME_ISSUER = "issuer";
  @SerializedName(SERIALIZED_NAME_ISSUER)
  private String issuer;

  public static final String SERIALIZED_NAME_ASSERTION_VALID_NOT_BEFORE = "assertion_valid_not_before";
  @SerializedName(SERIALIZED_NAME_ASSERTION_VALID_NOT_BEFORE)
  private String assertionValidNotBefore;

  public static final String SERIALIZED_NAME_ASSERTION_VALID_NOT_ON_OR_AFTER = "assertion_valid_not_on_or_after";
  @SerializedName(SERIALIZED_NAME_ASSERTION_VALID_NOT_ON_OR_AFTER)
  private String assertionValidNotOnOrAfter;

  public static final String SERIALIZED_NAME_SESSION_VALID_NOT_ON_OR_AFTER = "session_valid_not_on_or_after";
  @SerializedName(SERIALIZED_NAME_SESSION_VALID_NOT_ON_OR_AFTER)
  private String sessionValidNotOnOrAfter;

  public static final String SERIALIZED_NAME_NAME_ID_MAPPING = "name_id_mapping";
  @SerializedName(SERIALIZED_NAME_NAME_ID_MAPPING)
  private UUID nameIdMapping;

  public static final String SERIALIZED_NAME_DIGEST_ALGORITHM = "digest_algorithm";
  @SerializedName(SERIALIZED_NAME_DIGEST_ALGORITHM)
  private DigestAlgorithmEnum digestAlgorithm;

  public static final String SERIALIZED_NAME_SIGNATURE_ALGORITHM = "signature_algorithm";
  @SerializedName(SERIALIZED_NAME_SIGNATURE_ALGORITHM)
  private SignatureAlgorithmEnum signatureAlgorithm;

  public static final String SERIALIZED_NAME_SIGNING_KP = "signing_kp";
  @SerializedName(SERIALIZED_NAME_SIGNING_KP)
  private UUID signingKp;

  public static final String SERIALIZED_NAME_VERIFICATION_KP = "verification_kp";
  @SerializedName(SERIALIZED_NAME_VERIFICATION_KP)
  private UUID verificationKp;

  public static final String SERIALIZED_NAME_SP_BINDING = "sp_binding";
  @SerializedName(SERIALIZED_NAME_SP_BINDING)
  private SpBindingEnum spBinding;

  public static final String SERIALIZED_NAME_DEFAULT_RELAY_STATE = "default_relay_state";
  @SerializedName(SERIALIZED_NAME_DEFAULT_RELAY_STATE)
  private String defaultRelayState;

  public static final String SERIALIZED_NAME_URL_DOWNLOAD_METADATA = "url_download_metadata";
  @SerializedName(SERIALIZED_NAME_URL_DOWNLOAD_METADATA)
  private String urlDownloadMetadata;

  public static final String SERIALIZED_NAME_URL_SSO_POST = "url_sso_post";
  @SerializedName(SERIALIZED_NAME_URL_SSO_POST)
  private String urlSsoPost;

  public static final String SERIALIZED_NAME_URL_SSO_REDIRECT = "url_sso_redirect";
  @SerializedName(SERIALIZED_NAME_URL_SSO_REDIRECT)
  private String urlSsoRedirect;

  public static final String SERIALIZED_NAME_URL_SSO_INIT = "url_sso_init";
  @SerializedName(SERIALIZED_NAME_URL_SSO_INIT)
  private String urlSsoInit;

  public static final String SERIALIZED_NAME_URL_SLO_POST = "url_slo_post";
  @SerializedName(SERIALIZED_NAME_URL_SLO_POST)
  private String urlSloPost;

  public static final String SERIALIZED_NAME_URL_SLO_REDIRECT = "url_slo_redirect";
  @SerializedName(SERIALIZED_NAME_URL_SLO_REDIRECT)
  private String urlSloRedirect;

  public SAMLProvider() {
  }

  public SAMLProvider(
     Integer pk, 
     String component, 
     String assignedApplicationSlug, 
     String assignedApplicationName, 
     String assignedBackchannelApplicationSlug, 
     String assignedBackchannelApplicationName, 
     String verboseName, 
     String verboseNamePlural, 
     String metaModelName, 
     String urlDownloadMetadata, 
     String urlSsoPost, 
     String urlSsoRedirect, 
     String urlSsoInit, 
     String urlSloPost, 
     String urlSloRedirect
  ) {
    this();
    this.pk = pk;
    this.component = component;
    this.assignedApplicationSlug = assignedApplicationSlug;
    this.assignedApplicationName = assignedApplicationName;
    this.assignedBackchannelApplicationSlug = assignedBackchannelApplicationSlug;
    this.assignedBackchannelApplicationName = assignedBackchannelApplicationName;
    this.verboseName = verboseName;
    this.verboseNamePlural = verboseNamePlural;
    this.metaModelName = metaModelName;
    this.urlDownloadMetadata = urlDownloadMetadata;
    this.urlSsoPost = urlSsoPost;
    this.urlSsoRedirect = urlSsoRedirect;
    this.urlSsoInit = urlSsoInit;
    this.urlSloPost = urlSloPost;
    this.urlSloRedirect = urlSloRedirect;
  }

  /**
   * Get pk
   * @return pk
   */
  @javax.annotation.Nonnull
  public Integer getPk() {
    return pk;
  }



  public SAMLProvider name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public SAMLProvider authenticationFlow(UUID authenticationFlow) {
    this.authenticationFlow = authenticationFlow;
    return this;
  }

  /**
   * Flow used for authentication when the associated application is accessed by an un-authenticated user.
   * @return authenticationFlow
   */
  @javax.annotation.Nullable
  public UUID getAuthenticationFlow() {
    return authenticationFlow;
  }

  public void setAuthenticationFlow(UUID authenticationFlow) {
    this.authenticationFlow = authenticationFlow;
  }


  public SAMLProvider authorizationFlow(UUID authorizationFlow) {
    this.authorizationFlow = authorizationFlow;
    return this;
  }

  /**
   * Flow used when authorizing this provider.
   * @return authorizationFlow
   */
  @javax.annotation.Nonnull
  public UUID getAuthorizationFlow() {
    return authorizationFlow;
  }

  public void setAuthorizationFlow(UUID authorizationFlow) {
    this.authorizationFlow = authorizationFlow;
  }


  public SAMLProvider propertyMappings(List<UUID> propertyMappings) {
    this.propertyMappings = propertyMappings;
    return this;
  }

  public SAMLProvider addPropertyMappingsItem(UUID propertyMappingsItem) {
    if (this.propertyMappings == null) {
      this.propertyMappings = new ArrayList<>();
    }
    this.propertyMappings.add(propertyMappingsItem);
    return this;
  }

  /**
   * Get propertyMappings
   * @return propertyMappings
   */
  @javax.annotation.Nullable
  public List<UUID> getPropertyMappings() {
    return propertyMappings;
  }

  public void setPropertyMappings(List<UUID> propertyMappings) {
    this.propertyMappings = propertyMappings;
  }


  /**
   * Get object component so that we know how to edit the object
   * @return component
   */
  @javax.annotation.Nonnull
  public String getComponent() {
    return component;
  }



  /**
   * Internal application name, used in URLs.
   * @return assignedApplicationSlug
   */
  @javax.annotation.Nonnull
  public String getAssignedApplicationSlug() {
    return assignedApplicationSlug;
  }



  /**
   * Application&#39;s display Name.
   * @return assignedApplicationName
   */
  @javax.annotation.Nonnull
  public String getAssignedApplicationName() {
    return assignedApplicationName;
  }



  /**
   * Internal application name, used in URLs.
   * @return assignedBackchannelApplicationSlug
   */
  @javax.annotation.Nonnull
  public String getAssignedBackchannelApplicationSlug() {
    return assignedBackchannelApplicationSlug;
  }



  /**
   * Application&#39;s display Name.
   * @return assignedBackchannelApplicationName
   */
  @javax.annotation.Nonnull
  public String getAssignedBackchannelApplicationName() {
    return assignedBackchannelApplicationName;
  }



  /**
   * Return object&#39;s verbose_name
   * @return verboseName
   */
  @javax.annotation.Nonnull
  public String getVerboseName() {
    return verboseName;
  }



  /**
   * Return object&#39;s plural verbose_name
   * @return verboseNamePlural
   */
  @javax.annotation.Nonnull
  public String getVerboseNamePlural() {
    return verboseNamePlural;
  }



  /**
   * Return internal model name
   * @return metaModelName
   */
  @javax.annotation.Nonnull
  public String getMetaModelName() {
    return metaModelName;
  }



  public SAMLProvider acsUrl(URI acsUrl) {
    this.acsUrl = acsUrl;
    return this;
  }

  /**
   * Get acsUrl
   * @return acsUrl
   */
  @javax.annotation.Nonnull
  public URI getAcsUrl() {
    return acsUrl;
  }

  public void setAcsUrl(URI acsUrl) {
    this.acsUrl = acsUrl;
  }


  public SAMLProvider audience(String audience) {
    this.audience = audience;
    return this;
  }

  /**
   * Value of the audience restriction field of the assertion. When left empty, no audience restriction will be added.
   * @return audience
   */
  @javax.annotation.Nullable
  public String getAudience() {
    return audience;
  }

  public void setAudience(String audience) {
    this.audience = audience;
  }


  public SAMLProvider issuer(String issuer) {
    this.issuer = issuer;
    return this;
  }

  /**
   * Also known as EntityID
   * @return issuer
   */
  @javax.annotation.Nullable
  public String getIssuer() {
    return issuer;
  }

  public void setIssuer(String issuer) {
    this.issuer = issuer;
  }


  public SAMLProvider assertionValidNotBefore(String assertionValidNotBefore) {
    this.assertionValidNotBefore = assertionValidNotBefore;
    return this;
  }

  /**
   * Assertion valid not before current time + this value (Format: hours&#x3D;-1;minutes&#x3D;-2;seconds&#x3D;-3).
   * @return assertionValidNotBefore
   */
  @javax.annotation.Nullable
  public String getAssertionValidNotBefore() {
    return assertionValidNotBefore;
  }

  public void setAssertionValidNotBefore(String assertionValidNotBefore) {
    this.assertionValidNotBefore = assertionValidNotBefore;
  }


  public SAMLProvider assertionValidNotOnOrAfter(String assertionValidNotOnOrAfter) {
    this.assertionValidNotOnOrAfter = assertionValidNotOnOrAfter;
    return this;
  }

  /**
   * Assertion not valid on or after current time + this value (Format: hours&#x3D;1;minutes&#x3D;2;seconds&#x3D;3).
   * @return assertionValidNotOnOrAfter
   */
  @javax.annotation.Nullable
  public String getAssertionValidNotOnOrAfter() {
    return assertionValidNotOnOrAfter;
  }

  public void setAssertionValidNotOnOrAfter(String assertionValidNotOnOrAfter) {
    this.assertionValidNotOnOrAfter = assertionValidNotOnOrAfter;
  }


  public SAMLProvider sessionValidNotOnOrAfter(String sessionValidNotOnOrAfter) {
    this.sessionValidNotOnOrAfter = sessionValidNotOnOrAfter;
    return this;
  }

  /**
   * Session not valid on or after current time + this value (Format: hours&#x3D;1;minutes&#x3D;2;seconds&#x3D;3).
   * @return sessionValidNotOnOrAfter
   */
  @javax.annotation.Nullable
  public String getSessionValidNotOnOrAfter() {
    return sessionValidNotOnOrAfter;
  }

  public void setSessionValidNotOnOrAfter(String sessionValidNotOnOrAfter) {
    this.sessionValidNotOnOrAfter = sessionValidNotOnOrAfter;
  }


  public SAMLProvider nameIdMapping(UUID nameIdMapping) {
    this.nameIdMapping = nameIdMapping;
    return this;
  }

  /**
   * Configure how the NameID value will be created. When left empty, the NameIDPolicy of the incoming request will be considered
   * @return nameIdMapping
   */
  @javax.annotation.Nullable
  public UUID getNameIdMapping() {
    return nameIdMapping;
  }

  public void setNameIdMapping(UUID nameIdMapping) {
    this.nameIdMapping = nameIdMapping;
  }


  public SAMLProvider digestAlgorithm(DigestAlgorithmEnum digestAlgorithm) {
    this.digestAlgorithm = digestAlgorithm;
    return this;
  }

  /**
   * Get digestAlgorithm
   * @return digestAlgorithm
   */
  @javax.annotation.Nullable
  public DigestAlgorithmEnum getDigestAlgorithm() {
    return digestAlgorithm;
  }

  public void setDigestAlgorithm(DigestAlgorithmEnum digestAlgorithm) {
    this.digestAlgorithm = digestAlgorithm;
  }


  public SAMLProvider signatureAlgorithm(SignatureAlgorithmEnum signatureAlgorithm) {
    this.signatureAlgorithm = signatureAlgorithm;
    return this;
  }

  /**
   * Get signatureAlgorithm
   * @return signatureAlgorithm
   */
  @javax.annotation.Nullable
  public SignatureAlgorithmEnum getSignatureAlgorithm() {
    return signatureAlgorithm;
  }

  public void setSignatureAlgorithm(SignatureAlgorithmEnum signatureAlgorithm) {
    this.signatureAlgorithm = signatureAlgorithm;
  }


  public SAMLProvider signingKp(UUID signingKp) {
    this.signingKp = signingKp;
    return this;
  }

  /**
   * Keypair used to sign outgoing Responses going to the Service Provider.
   * @return signingKp
   */
  @javax.annotation.Nullable
  public UUID getSigningKp() {
    return signingKp;
  }

  public void setSigningKp(UUID signingKp) {
    this.signingKp = signingKp;
  }


  public SAMLProvider verificationKp(UUID verificationKp) {
    this.verificationKp = verificationKp;
    return this;
  }

  /**
   * When selected, incoming assertion&#39;s Signatures will be validated against this certificate. To allow unsigned Requests, leave on default.
   * @return verificationKp
   */
  @javax.annotation.Nullable
  public UUID getVerificationKp() {
    return verificationKp;
  }

  public void setVerificationKp(UUID verificationKp) {
    this.verificationKp = verificationKp;
  }


  public SAMLProvider spBinding(SpBindingEnum spBinding) {
    this.spBinding = spBinding;
    return this;
  }

  /**
   * This determines how authentik sends the response back to the Service Provider.
   * @return spBinding
   */
  @javax.annotation.Nullable
  public SpBindingEnum getSpBinding() {
    return spBinding;
  }

  public void setSpBinding(SpBindingEnum spBinding) {
    this.spBinding = spBinding;
  }


  public SAMLProvider defaultRelayState(String defaultRelayState) {
    this.defaultRelayState = defaultRelayState;
    return this;
  }

  /**
   * Default relay_state value for IDP-initiated logins
   * @return defaultRelayState
   */
  @javax.annotation.Nullable
  public String getDefaultRelayState() {
    return defaultRelayState;
  }

  public void setDefaultRelayState(String defaultRelayState) {
    this.defaultRelayState = defaultRelayState;
  }


  /**
   * Get metadata download URL
   * @return urlDownloadMetadata
   */
  @javax.annotation.Nonnull
  public String getUrlDownloadMetadata() {
    return urlDownloadMetadata;
  }



  /**
   * Get SSO Post URL
   * @return urlSsoPost
   */
  @javax.annotation.Nonnull
  public String getUrlSsoPost() {
    return urlSsoPost;
  }



  /**
   * Get SSO Redirect URL
   * @return urlSsoRedirect
   */
  @javax.annotation.Nonnull
  public String getUrlSsoRedirect() {
    return urlSsoRedirect;
  }



  /**
   * Get SSO IDP-Initiated URL
   * @return urlSsoInit
   */
  @javax.annotation.Nonnull
  public String getUrlSsoInit() {
    return urlSsoInit;
  }



  /**
   * Get SLO POST URL
   * @return urlSloPost
   */
  @javax.annotation.Nonnull
  public String getUrlSloPost() {
    return urlSloPost;
  }



  /**
   * Get SLO redirect URL
   * @return urlSloRedirect
   */
  @javax.annotation.Nonnull
  public String getUrlSloRedirect() {
    return urlSloRedirect;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SAMLProvider saMLProvider = (SAMLProvider) o;
    return Objects.equals(this.pk, saMLProvider.pk) &&
        Objects.equals(this.name, saMLProvider.name) &&
        Objects.equals(this.authenticationFlow, saMLProvider.authenticationFlow) &&
        Objects.equals(this.authorizationFlow, saMLProvider.authorizationFlow) &&
        Objects.equals(this.propertyMappings, saMLProvider.propertyMappings) &&
        Objects.equals(this.component, saMLProvider.component) &&
        Objects.equals(this.assignedApplicationSlug, saMLProvider.assignedApplicationSlug) &&
        Objects.equals(this.assignedApplicationName, saMLProvider.assignedApplicationName) &&
        Objects.equals(this.assignedBackchannelApplicationSlug, saMLProvider.assignedBackchannelApplicationSlug) &&
        Objects.equals(this.assignedBackchannelApplicationName, saMLProvider.assignedBackchannelApplicationName) &&
        Objects.equals(this.verboseName, saMLProvider.verboseName) &&
        Objects.equals(this.verboseNamePlural, saMLProvider.verboseNamePlural) &&
        Objects.equals(this.metaModelName, saMLProvider.metaModelName) &&
        Objects.equals(this.acsUrl, saMLProvider.acsUrl) &&
        Objects.equals(this.audience, saMLProvider.audience) &&
        Objects.equals(this.issuer, saMLProvider.issuer) &&
        Objects.equals(this.assertionValidNotBefore, saMLProvider.assertionValidNotBefore) &&
        Objects.equals(this.assertionValidNotOnOrAfter, saMLProvider.assertionValidNotOnOrAfter) &&
        Objects.equals(this.sessionValidNotOnOrAfter, saMLProvider.sessionValidNotOnOrAfter) &&
        Objects.equals(this.nameIdMapping, saMLProvider.nameIdMapping) &&
        Objects.equals(this.digestAlgorithm, saMLProvider.digestAlgorithm) &&
        Objects.equals(this.signatureAlgorithm, saMLProvider.signatureAlgorithm) &&
        Objects.equals(this.signingKp, saMLProvider.signingKp) &&
        Objects.equals(this.verificationKp, saMLProvider.verificationKp) &&
        Objects.equals(this.spBinding, saMLProvider.spBinding) &&
        Objects.equals(this.defaultRelayState, saMLProvider.defaultRelayState) &&
        Objects.equals(this.urlDownloadMetadata, saMLProvider.urlDownloadMetadata) &&
        Objects.equals(this.urlSsoPost, saMLProvider.urlSsoPost) &&
        Objects.equals(this.urlSsoRedirect, saMLProvider.urlSsoRedirect) &&
        Objects.equals(this.urlSsoInit, saMLProvider.urlSsoInit) &&
        Objects.equals(this.urlSloPost, saMLProvider.urlSloPost) &&
        Objects.equals(this.urlSloRedirect, saMLProvider.urlSloRedirect);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(pk, name, authenticationFlow, authorizationFlow, propertyMappings, component, assignedApplicationSlug, assignedApplicationName, assignedBackchannelApplicationSlug, assignedBackchannelApplicationName, verboseName, verboseNamePlural, metaModelName, acsUrl, audience, issuer, assertionValidNotBefore, assertionValidNotOnOrAfter, sessionValidNotOnOrAfter, nameIdMapping, digestAlgorithm, signatureAlgorithm, signingKp, verificationKp, spBinding, defaultRelayState, urlDownloadMetadata, urlSsoPost, urlSsoRedirect, urlSsoInit, urlSloPost, urlSloRedirect);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SAMLProvider {\n");
    sb.append("    pk: ").append(toIndentedString(pk)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    authenticationFlow: ").append(toIndentedString(authenticationFlow)).append("\n");
    sb.append("    authorizationFlow: ").append(toIndentedString(authorizationFlow)).append("\n");
    sb.append("    propertyMappings: ").append(toIndentedString(propertyMappings)).append("\n");
    sb.append("    component: ").append(toIndentedString(component)).append("\n");
    sb.append("    assignedApplicationSlug: ").append(toIndentedString(assignedApplicationSlug)).append("\n");
    sb.append("    assignedApplicationName: ").append(toIndentedString(assignedApplicationName)).append("\n");
    sb.append("    assignedBackchannelApplicationSlug: ").append(toIndentedString(assignedBackchannelApplicationSlug)).append("\n");
    sb.append("    assignedBackchannelApplicationName: ").append(toIndentedString(assignedBackchannelApplicationName)).append("\n");
    sb.append("    verboseName: ").append(toIndentedString(verboseName)).append("\n");
    sb.append("    verboseNamePlural: ").append(toIndentedString(verboseNamePlural)).append("\n");
    sb.append("    metaModelName: ").append(toIndentedString(metaModelName)).append("\n");
    sb.append("    acsUrl: ").append(toIndentedString(acsUrl)).append("\n");
    sb.append("    audience: ").append(toIndentedString(audience)).append("\n");
    sb.append("    issuer: ").append(toIndentedString(issuer)).append("\n");
    sb.append("    assertionValidNotBefore: ").append(toIndentedString(assertionValidNotBefore)).append("\n");
    sb.append("    assertionValidNotOnOrAfter: ").append(toIndentedString(assertionValidNotOnOrAfter)).append("\n");
    sb.append("    sessionValidNotOnOrAfter: ").append(toIndentedString(sessionValidNotOnOrAfter)).append("\n");
    sb.append("    nameIdMapping: ").append(toIndentedString(nameIdMapping)).append("\n");
    sb.append("    digestAlgorithm: ").append(toIndentedString(digestAlgorithm)).append("\n");
    sb.append("    signatureAlgorithm: ").append(toIndentedString(signatureAlgorithm)).append("\n");
    sb.append("    signingKp: ").append(toIndentedString(signingKp)).append("\n");
    sb.append("    verificationKp: ").append(toIndentedString(verificationKp)).append("\n");
    sb.append("    spBinding: ").append(toIndentedString(spBinding)).append("\n");
    sb.append("    defaultRelayState: ").append(toIndentedString(defaultRelayState)).append("\n");
    sb.append("    urlDownloadMetadata: ").append(toIndentedString(urlDownloadMetadata)).append("\n");
    sb.append("    urlSsoPost: ").append(toIndentedString(urlSsoPost)).append("\n");
    sb.append("    urlSsoRedirect: ").append(toIndentedString(urlSsoRedirect)).append("\n");
    sb.append("    urlSsoInit: ").append(toIndentedString(urlSsoInit)).append("\n");
    sb.append("    urlSloPost: ").append(toIndentedString(urlSloPost)).append("\n");
    sb.append("    urlSloRedirect: ").append(toIndentedString(urlSloRedirect)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pk");
    openapiFields.add("name");
    openapiFields.add("authentication_flow");
    openapiFields.add("authorization_flow");
    openapiFields.add("property_mappings");
    openapiFields.add("component");
    openapiFields.add("assigned_application_slug");
    openapiFields.add("assigned_application_name");
    openapiFields.add("assigned_backchannel_application_slug");
    openapiFields.add("assigned_backchannel_application_name");
    openapiFields.add("verbose_name");
    openapiFields.add("verbose_name_plural");
    openapiFields.add("meta_model_name");
    openapiFields.add("acs_url");
    openapiFields.add("audience");
    openapiFields.add("issuer");
    openapiFields.add("assertion_valid_not_before");
    openapiFields.add("assertion_valid_not_on_or_after");
    openapiFields.add("session_valid_not_on_or_after");
    openapiFields.add("name_id_mapping");
    openapiFields.add("digest_algorithm");
    openapiFields.add("signature_algorithm");
    openapiFields.add("signing_kp");
    openapiFields.add("verification_kp");
    openapiFields.add("sp_binding");
    openapiFields.add("default_relay_state");
    openapiFields.add("url_download_metadata");
    openapiFields.add("url_sso_post");
    openapiFields.add("url_sso_redirect");
    openapiFields.add("url_sso_init");
    openapiFields.add("url_slo_post");
    openapiFields.add("url_slo_redirect");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("pk");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("authorization_flow");
    openapiRequiredFields.add("component");
    openapiRequiredFields.add("assigned_application_slug");
    openapiRequiredFields.add("assigned_application_name");
    openapiRequiredFields.add("assigned_backchannel_application_slug");
    openapiRequiredFields.add("assigned_backchannel_application_name");
    openapiRequiredFields.add("verbose_name");
    openapiRequiredFields.add("verbose_name_plural");
    openapiRequiredFields.add("meta_model_name");
    openapiRequiredFields.add("acs_url");
    openapiRequiredFields.add("url_download_metadata");
    openapiRequiredFields.add("url_sso_post");
    openapiRequiredFields.add("url_sso_redirect");
    openapiRequiredFields.add("url_sso_init");
    openapiRequiredFields.add("url_slo_post");
    openapiRequiredFields.add("url_slo_redirect");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SAMLProvider
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SAMLProvider.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SAMLProvider is not found in the empty JSON string", SAMLProvider.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SAMLProvider.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SAMLProvider` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SAMLProvider.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("authentication_flow") != null && !jsonObj.get("authentication_flow").isJsonNull()) && !jsonObj.get("authentication_flow").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authentication_flow` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authentication_flow").toString()));
      }
      if (!jsonObj.get("authorization_flow").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorization_flow` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorization_flow").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("property_mappings") != null && !jsonObj.get("property_mappings").isJsonNull() && !jsonObj.get("property_mappings").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `property_mappings` to be an array in the JSON string but got `%s`", jsonObj.get("property_mappings").toString()));
      }
      if (!jsonObj.get("component").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `component` to be a primitive type in the JSON string but got `%s`", jsonObj.get("component").toString()));
      }
      if (!jsonObj.get("assigned_application_slug").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assigned_application_slug` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assigned_application_slug").toString()));
      }
      if (!jsonObj.get("assigned_application_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assigned_application_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assigned_application_name").toString()));
      }
      if (!jsonObj.get("assigned_backchannel_application_slug").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assigned_backchannel_application_slug` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assigned_backchannel_application_slug").toString()));
      }
      if (!jsonObj.get("assigned_backchannel_application_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assigned_backchannel_application_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assigned_backchannel_application_name").toString()));
      }
      if (!jsonObj.get("verbose_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verbose_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verbose_name").toString()));
      }
      if (!jsonObj.get("verbose_name_plural").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verbose_name_plural` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verbose_name_plural").toString()));
      }
      if (!jsonObj.get("meta_model_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `meta_model_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("meta_model_name").toString()));
      }
      if (!jsonObj.get("acs_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acs_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acs_url").toString()));
      }
      if ((jsonObj.get("audience") != null && !jsonObj.get("audience").isJsonNull()) && !jsonObj.get("audience").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `audience` to be a primitive type in the JSON string but got `%s`", jsonObj.get("audience").toString()));
      }
      if ((jsonObj.get("issuer") != null && !jsonObj.get("issuer").isJsonNull()) && !jsonObj.get("issuer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuer").toString()));
      }
      if ((jsonObj.get("assertion_valid_not_before") != null && !jsonObj.get("assertion_valid_not_before").isJsonNull()) && !jsonObj.get("assertion_valid_not_before").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assertion_valid_not_before` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assertion_valid_not_before").toString()));
      }
      if ((jsonObj.get("assertion_valid_not_on_or_after") != null && !jsonObj.get("assertion_valid_not_on_or_after").isJsonNull()) && !jsonObj.get("assertion_valid_not_on_or_after").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assertion_valid_not_on_or_after` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assertion_valid_not_on_or_after").toString()));
      }
      if ((jsonObj.get("session_valid_not_on_or_after") != null && !jsonObj.get("session_valid_not_on_or_after").isJsonNull()) && !jsonObj.get("session_valid_not_on_or_after").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `session_valid_not_on_or_after` to be a primitive type in the JSON string but got `%s`", jsonObj.get("session_valid_not_on_or_after").toString()));
      }
      if ((jsonObj.get("name_id_mapping") != null && !jsonObj.get("name_id_mapping").isJsonNull()) && !jsonObj.get("name_id_mapping").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name_id_mapping` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name_id_mapping").toString()));
      }
      // validate the optional field `digest_algorithm`
      if (jsonObj.get("digest_algorithm") != null && !jsonObj.get("digest_algorithm").isJsonNull()) {
        DigestAlgorithmEnum.validateJsonElement(jsonObj.get("digest_algorithm"));
      }
      // validate the optional field `signature_algorithm`
      if (jsonObj.get("signature_algorithm") != null && !jsonObj.get("signature_algorithm").isJsonNull()) {
        SignatureAlgorithmEnum.validateJsonElement(jsonObj.get("signature_algorithm"));
      }
      if ((jsonObj.get("signing_kp") != null && !jsonObj.get("signing_kp").isJsonNull()) && !jsonObj.get("signing_kp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signing_kp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signing_kp").toString()));
      }
      if ((jsonObj.get("verification_kp") != null && !jsonObj.get("verification_kp").isJsonNull()) && !jsonObj.get("verification_kp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verification_kp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verification_kp").toString()));
      }
      // validate the optional field `sp_binding`
      if (jsonObj.get("sp_binding") != null && !jsonObj.get("sp_binding").isJsonNull()) {
        SpBindingEnum.validateJsonElement(jsonObj.get("sp_binding"));
      }
      if ((jsonObj.get("default_relay_state") != null && !jsonObj.get("default_relay_state").isJsonNull()) && !jsonObj.get("default_relay_state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default_relay_state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default_relay_state").toString()));
      }
      if (!jsonObj.get("url_download_metadata").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url_download_metadata` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url_download_metadata").toString()));
      }
      if (!jsonObj.get("url_sso_post").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url_sso_post` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url_sso_post").toString()));
      }
      if (!jsonObj.get("url_sso_redirect").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url_sso_redirect` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url_sso_redirect").toString()));
      }
      if (!jsonObj.get("url_sso_init").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url_sso_init` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url_sso_init").toString()));
      }
      if (!jsonObj.get("url_slo_post").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url_slo_post` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url_slo_post").toString()));
      }
      if (!jsonObj.get("url_slo_redirect").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url_slo_redirect` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url_slo_redirect").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SAMLProvider.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SAMLProvider' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SAMLProvider> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SAMLProvider.class));

       return (TypeAdapter<T>) new TypeAdapter<SAMLProvider>() {
           @Override
           public void write(JsonWriter out, SAMLProvider value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SAMLProvider read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SAMLProvider given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SAMLProvider
   * @throws IOException if the JSON string is invalid with respect to SAMLProvider
   */
  public static SAMLProvider fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SAMLProvider.class);
  }

  /**
   * Convert an instance of SAMLProvider to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

