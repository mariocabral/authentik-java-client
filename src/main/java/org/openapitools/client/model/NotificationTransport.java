/*
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.6.3
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.NotificationTransportModeEnum;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NotificationTransport Serializer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-25T23:12:57.050901581-03:00[America/Argentina/Cordoba]", comments = "Generator version: 7.8.0")
public class NotificationTransport {
  public static final String SERIALIZED_NAME_PK = "pk";
  @SerializedName(SERIALIZED_NAME_PK)
  private UUID pk;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_MODE = "mode";
  @SerializedName(SERIALIZED_NAME_MODE)
  private NotificationTransportModeEnum mode;

  public static final String SERIALIZED_NAME_MODE_VERBOSE = "mode_verbose";
  @SerializedName(SERIALIZED_NAME_MODE_VERBOSE)
  private String modeVerbose;

  public static final String SERIALIZED_NAME_WEBHOOK_URL = "webhook_url";
  @SerializedName(SERIALIZED_NAME_WEBHOOK_URL)
  private URI webhookUrl;

  public static final String SERIALIZED_NAME_WEBHOOK_MAPPING = "webhook_mapping";
  @SerializedName(SERIALIZED_NAME_WEBHOOK_MAPPING)
  private UUID webhookMapping;

  public static final String SERIALIZED_NAME_SEND_ONCE = "send_once";
  @SerializedName(SERIALIZED_NAME_SEND_ONCE)
  private Boolean sendOnce;

  public NotificationTransport() {
  }

  public NotificationTransport(
     UUID pk, 
     String modeVerbose
  ) {
    this();
    this.pk = pk;
    this.modeVerbose = modeVerbose;
  }

  /**
   * Get pk
   * @return pk
   */
  @javax.annotation.Nonnull
  public UUID getPk() {
    return pk;
  }



  public NotificationTransport name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public NotificationTransport mode(NotificationTransportModeEnum mode) {
    this.mode = mode;
    return this;
  }

  /**
   * Get mode
   * @return mode
   */
  @javax.annotation.Nullable
  public NotificationTransportModeEnum getMode() {
    return mode;
  }

  public void setMode(NotificationTransportModeEnum mode) {
    this.mode = mode;
  }


  /**
   * Return selected mode with a UI Label
   * @return modeVerbose
   */
  @javax.annotation.Nonnull
  public String getModeVerbose() {
    return modeVerbose;
  }



  public NotificationTransport webhookUrl(URI webhookUrl) {
    this.webhookUrl = webhookUrl;
    return this;
  }

  /**
   * Get webhookUrl
   * @return webhookUrl
   */
  @javax.annotation.Nullable
  public URI getWebhookUrl() {
    return webhookUrl;
  }

  public void setWebhookUrl(URI webhookUrl) {
    this.webhookUrl = webhookUrl;
  }


  public NotificationTransport webhookMapping(UUID webhookMapping) {
    this.webhookMapping = webhookMapping;
    return this;
  }

  /**
   * Get webhookMapping
   * @return webhookMapping
   */
  @javax.annotation.Nullable
  public UUID getWebhookMapping() {
    return webhookMapping;
  }

  public void setWebhookMapping(UUID webhookMapping) {
    this.webhookMapping = webhookMapping;
  }


  public NotificationTransport sendOnce(Boolean sendOnce) {
    this.sendOnce = sendOnce;
    return this;
  }

  /**
   * Only send notification once, for example when sending a webhook into a chat channel.
   * @return sendOnce
   */
  @javax.annotation.Nullable
  public Boolean getSendOnce() {
    return sendOnce;
  }

  public void setSendOnce(Boolean sendOnce) {
    this.sendOnce = sendOnce;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NotificationTransport notificationTransport = (NotificationTransport) o;
    return Objects.equals(this.pk, notificationTransport.pk) &&
        Objects.equals(this.name, notificationTransport.name) &&
        Objects.equals(this.mode, notificationTransport.mode) &&
        Objects.equals(this.modeVerbose, notificationTransport.modeVerbose) &&
        Objects.equals(this.webhookUrl, notificationTransport.webhookUrl) &&
        Objects.equals(this.webhookMapping, notificationTransport.webhookMapping) &&
        Objects.equals(this.sendOnce, notificationTransport.sendOnce);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(pk, name, mode, modeVerbose, webhookUrl, webhookMapping, sendOnce);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NotificationTransport {\n");
    sb.append("    pk: ").append(toIndentedString(pk)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    modeVerbose: ").append(toIndentedString(modeVerbose)).append("\n");
    sb.append("    webhookUrl: ").append(toIndentedString(webhookUrl)).append("\n");
    sb.append("    webhookMapping: ").append(toIndentedString(webhookMapping)).append("\n");
    sb.append("    sendOnce: ").append(toIndentedString(sendOnce)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pk");
    openapiFields.add("name");
    openapiFields.add("mode");
    openapiFields.add("mode_verbose");
    openapiFields.add("webhook_url");
    openapiFields.add("webhook_mapping");
    openapiFields.add("send_once");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("pk");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("mode_verbose");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NotificationTransport
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NotificationTransport.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NotificationTransport is not found in the empty JSON string", NotificationTransport.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NotificationTransport.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NotificationTransport` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : NotificationTransport.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("pk").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pk` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pk").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `mode`
      if (jsonObj.get("mode") != null && !jsonObj.get("mode").isJsonNull()) {
        NotificationTransportModeEnum.validateJsonElement(jsonObj.get("mode"));
      }
      if (!jsonObj.get("mode_verbose").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mode_verbose` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mode_verbose").toString()));
      }
      if ((jsonObj.get("webhook_url") != null && !jsonObj.get("webhook_url").isJsonNull()) && !jsonObj.get("webhook_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webhook_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webhook_url").toString()));
      }
      if ((jsonObj.get("webhook_mapping") != null && !jsonObj.get("webhook_mapping").isJsonNull()) && !jsonObj.get("webhook_mapping").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webhook_mapping` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webhook_mapping").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NotificationTransport.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NotificationTransport' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NotificationTransport> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NotificationTransport.class));

       return (TypeAdapter<T>) new TypeAdapter<NotificationTransport>() {
           @Override
           public void write(JsonWriter out, NotificationTransport value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NotificationTransport read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NotificationTransport given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NotificationTransport
   * @throws IOException if the JSON string is invalid with respect to NotificationTransport
   */
  public static NotificationTransport fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NotificationTransport.class);
  }

  /**
   * Convert an instance of NotificationTransport to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

