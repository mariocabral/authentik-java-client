/*
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.6.3
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.ClientTypeEnum;
import org.openapitools.client.model.DigestAlgorithmEnum;
import org.openapitools.client.model.GoogleWorkspaceProviderRequest;
import org.openapitools.client.model.IssuerModeEnum;
import org.openapitools.client.model.LDAPAPIAccessMode;
import org.openapitools.client.model.LDAPProviderRequest;
import org.openapitools.client.model.MicrosoftEntraProviderRequest;
import org.openapitools.client.model.OAuth2ProviderRequest;
import org.openapitools.client.model.OutgoingSyncDeleteAction;
import org.openapitools.client.model.ProxyMode;
import org.openapitools.client.model.ProxyProviderRequest;
import org.openapitools.client.model.RACProviderRequest;
import org.openapitools.client.model.RadiusProviderRequest;
import org.openapitools.client.model.SAMLProviderRequest;
import org.openapitools.client.model.SCIMProviderRequest;
import org.openapitools.client.model.SignatureAlgorithmEnum;
import org.openapitools.client.model.SpBindingEnum;
import org.openapitools.client.model.SubModeEnum;
import org.openapitools.jackson.nullable.JsonNullable;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-25T23:12:57.050901581-03:00[America/Argentina/Cordoba]", comments = "Generator version: 7.8.0")
public class ModelRequest extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(ModelRequest.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!ModelRequest.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'ModelRequest' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<GoogleWorkspaceProviderRequest> adapterGoogleWorkspaceProviderRequest = gson.getDelegateAdapter(this, TypeToken.get(GoogleWorkspaceProviderRequest.class));
            final TypeAdapter<LDAPProviderRequest> adapterLDAPProviderRequest = gson.getDelegateAdapter(this, TypeToken.get(LDAPProviderRequest.class));
            final TypeAdapter<MicrosoftEntraProviderRequest> adapterMicrosoftEntraProviderRequest = gson.getDelegateAdapter(this, TypeToken.get(MicrosoftEntraProviderRequest.class));
            final TypeAdapter<OAuth2ProviderRequest> adapterOAuth2ProviderRequest = gson.getDelegateAdapter(this, TypeToken.get(OAuth2ProviderRequest.class));
            final TypeAdapter<ProxyProviderRequest> adapterProxyProviderRequest = gson.getDelegateAdapter(this, TypeToken.get(ProxyProviderRequest.class));
            final TypeAdapter<RACProviderRequest> adapterRACProviderRequest = gson.getDelegateAdapter(this, TypeToken.get(RACProviderRequest.class));
            final TypeAdapter<RadiusProviderRequest> adapterRadiusProviderRequest = gson.getDelegateAdapter(this, TypeToken.get(RadiusProviderRequest.class));
            final TypeAdapter<SAMLProviderRequest> adapterSAMLProviderRequest = gson.getDelegateAdapter(this, TypeToken.get(SAMLProviderRequest.class));
            final TypeAdapter<SCIMProviderRequest> adapterSCIMProviderRequest = gson.getDelegateAdapter(this, TypeToken.get(SCIMProviderRequest.class));

            return (TypeAdapter<T>) new TypeAdapter<ModelRequest>() {
                @Override
                public void write(JsonWriter out, ModelRequest value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `GoogleWorkspaceProviderRequest`
                    if (value.getActualInstance() instanceof GoogleWorkspaceProviderRequest) {
                        JsonElement element = adapterGoogleWorkspaceProviderRequest.toJsonTree((GoogleWorkspaceProviderRequest)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `LDAPProviderRequest`
                    if (value.getActualInstance() instanceof LDAPProviderRequest) {
                        JsonElement element = adapterLDAPProviderRequest.toJsonTree((LDAPProviderRequest)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `MicrosoftEntraProviderRequest`
                    if (value.getActualInstance() instanceof MicrosoftEntraProviderRequest) {
                        JsonElement element = adapterMicrosoftEntraProviderRequest.toJsonTree((MicrosoftEntraProviderRequest)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `OAuth2ProviderRequest`
                    if (value.getActualInstance() instanceof OAuth2ProviderRequest) {
                        JsonElement element = adapterOAuth2ProviderRequest.toJsonTree((OAuth2ProviderRequest)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ProxyProviderRequest`
                    if (value.getActualInstance() instanceof ProxyProviderRequest) {
                        JsonElement element = adapterProxyProviderRequest.toJsonTree((ProxyProviderRequest)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `RACProviderRequest`
                    if (value.getActualInstance() instanceof RACProviderRequest) {
                        JsonElement element = adapterRACProviderRequest.toJsonTree((RACProviderRequest)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `RadiusProviderRequest`
                    if (value.getActualInstance() instanceof RadiusProviderRequest) {
                        JsonElement element = adapterRadiusProviderRequest.toJsonTree((RadiusProviderRequest)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `SAMLProviderRequest`
                    if (value.getActualInstance() instanceof SAMLProviderRequest) {
                        JsonElement element = adapterSAMLProviderRequest.toJsonTree((SAMLProviderRequest)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `SCIMProviderRequest`
                    if (value.getActualInstance() instanceof SCIMProviderRequest) {
                        JsonElement element = adapterSCIMProviderRequest.toJsonTree((SCIMProviderRequest)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: GoogleWorkspaceProviderRequest, LDAPProviderRequest, MicrosoftEntraProviderRequest, OAuth2ProviderRequest, ProxyProviderRequest, RACProviderRequest, RadiusProviderRequest, SAMLProviderRequest, SCIMProviderRequest");
                }

                @Override
                public ModelRequest read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize GoogleWorkspaceProviderRequest
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GoogleWorkspaceProviderRequest.validateJsonElement(jsonElement);
                        actualAdapter = adapterGoogleWorkspaceProviderRequest;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GoogleWorkspaceProviderRequest'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GoogleWorkspaceProviderRequest failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GoogleWorkspaceProviderRequest'", e);
                    }
                    // deserialize LDAPProviderRequest
                    try {
                        // validate the JSON object to see if any exception is thrown
                        LDAPProviderRequest.validateJsonElement(jsonElement);
                        actualAdapter = adapterLDAPProviderRequest;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'LDAPProviderRequest'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for LDAPProviderRequest failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'LDAPProviderRequest'", e);
                    }
                    // deserialize MicrosoftEntraProviderRequest
                    try {
                        // validate the JSON object to see if any exception is thrown
                        MicrosoftEntraProviderRequest.validateJsonElement(jsonElement);
                        actualAdapter = adapterMicrosoftEntraProviderRequest;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'MicrosoftEntraProviderRequest'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for MicrosoftEntraProviderRequest failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'MicrosoftEntraProviderRequest'", e);
                    }
                    // deserialize OAuth2ProviderRequest
                    try {
                        // validate the JSON object to see if any exception is thrown
                        OAuth2ProviderRequest.validateJsonElement(jsonElement);
                        actualAdapter = adapterOAuth2ProviderRequest;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'OAuth2ProviderRequest'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for OAuth2ProviderRequest failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'OAuth2ProviderRequest'", e);
                    }
                    // deserialize ProxyProviderRequest
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ProxyProviderRequest.validateJsonElement(jsonElement);
                        actualAdapter = adapterProxyProviderRequest;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ProxyProviderRequest'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ProxyProviderRequest failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ProxyProviderRequest'", e);
                    }
                    // deserialize RACProviderRequest
                    try {
                        // validate the JSON object to see if any exception is thrown
                        RACProviderRequest.validateJsonElement(jsonElement);
                        actualAdapter = adapterRACProviderRequest;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'RACProviderRequest'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for RACProviderRequest failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'RACProviderRequest'", e);
                    }
                    // deserialize RadiusProviderRequest
                    try {
                        // validate the JSON object to see if any exception is thrown
                        RadiusProviderRequest.validateJsonElement(jsonElement);
                        actualAdapter = adapterRadiusProviderRequest;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'RadiusProviderRequest'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for RadiusProviderRequest failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'RadiusProviderRequest'", e);
                    }
                    // deserialize SAMLProviderRequest
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SAMLProviderRequest.validateJsonElement(jsonElement);
                        actualAdapter = adapterSAMLProviderRequest;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SAMLProviderRequest'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SAMLProviderRequest failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SAMLProviderRequest'", e);
                    }
                    // deserialize SCIMProviderRequest
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SCIMProviderRequest.validateJsonElement(jsonElement);
                        actualAdapter = adapterSCIMProviderRequest;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SCIMProviderRequest'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SCIMProviderRequest failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SCIMProviderRequest'", e);
                    }

                    if (match == 1) {
                        ModelRequest ret = new ModelRequest();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for ModelRequest: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public ModelRequest() {
        super("oneOf", Boolean.FALSE);
    }

    public ModelRequest(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("GoogleWorkspaceProviderRequest", GoogleWorkspaceProviderRequest.class);
        schemas.put("LDAPProviderRequest", LDAPProviderRequest.class);
        schemas.put("MicrosoftEntraProviderRequest", MicrosoftEntraProviderRequest.class);
        schemas.put("OAuth2ProviderRequest", OAuth2ProviderRequest.class);
        schemas.put("ProxyProviderRequest", ProxyProviderRequest.class);
        schemas.put("RACProviderRequest", RACProviderRequest.class);
        schemas.put("RadiusProviderRequest", RadiusProviderRequest.class);
        schemas.put("SAMLProviderRequest", SAMLProviderRequest.class);
        schemas.put("SCIMProviderRequest", SCIMProviderRequest.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return ModelRequest.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * GoogleWorkspaceProviderRequest, LDAPProviderRequest, MicrosoftEntraProviderRequest, OAuth2ProviderRequest, ProxyProviderRequest, RACProviderRequest, RadiusProviderRequest, SAMLProviderRequest, SCIMProviderRequest
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof GoogleWorkspaceProviderRequest) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof LDAPProviderRequest) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof MicrosoftEntraProviderRequest) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof OAuth2ProviderRequest) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ProxyProviderRequest) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof RACProviderRequest) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof RadiusProviderRequest) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SAMLProviderRequest) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SCIMProviderRequest) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be GoogleWorkspaceProviderRequest, LDAPProviderRequest, MicrosoftEntraProviderRequest, OAuth2ProviderRequest, ProxyProviderRequest, RACProviderRequest, RadiusProviderRequest, SAMLProviderRequest, SCIMProviderRequest");
    }

    /**
     * Get the actual instance, which can be the following:
     * GoogleWorkspaceProviderRequest, LDAPProviderRequest, MicrosoftEntraProviderRequest, OAuth2ProviderRequest, ProxyProviderRequest, RACProviderRequest, RadiusProviderRequest, SAMLProviderRequest, SCIMProviderRequest
     *
     * @return The actual instance (GoogleWorkspaceProviderRequest, LDAPProviderRequest, MicrosoftEntraProviderRequest, OAuth2ProviderRequest, ProxyProviderRequest, RACProviderRequest, RadiusProviderRequest, SAMLProviderRequest, SCIMProviderRequest)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `GoogleWorkspaceProviderRequest`. If the actual instance is not `GoogleWorkspaceProviderRequest`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GoogleWorkspaceProviderRequest`
     * @throws ClassCastException if the instance is not `GoogleWorkspaceProviderRequest`
     */
    public GoogleWorkspaceProviderRequest getGoogleWorkspaceProviderRequest() throws ClassCastException {
        return (GoogleWorkspaceProviderRequest)super.getActualInstance();
    }
    /**
     * Get the actual instance of `LDAPProviderRequest`. If the actual instance is not `LDAPProviderRequest`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `LDAPProviderRequest`
     * @throws ClassCastException if the instance is not `LDAPProviderRequest`
     */
    public LDAPProviderRequest getLDAPProviderRequest() throws ClassCastException {
        return (LDAPProviderRequest)super.getActualInstance();
    }
    /**
     * Get the actual instance of `MicrosoftEntraProviderRequest`. If the actual instance is not `MicrosoftEntraProviderRequest`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `MicrosoftEntraProviderRequest`
     * @throws ClassCastException if the instance is not `MicrosoftEntraProviderRequest`
     */
    public MicrosoftEntraProviderRequest getMicrosoftEntraProviderRequest() throws ClassCastException {
        return (MicrosoftEntraProviderRequest)super.getActualInstance();
    }
    /**
     * Get the actual instance of `OAuth2ProviderRequest`. If the actual instance is not `OAuth2ProviderRequest`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `OAuth2ProviderRequest`
     * @throws ClassCastException if the instance is not `OAuth2ProviderRequest`
     */
    public OAuth2ProviderRequest getOAuth2ProviderRequest() throws ClassCastException {
        return (OAuth2ProviderRequest)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ProxyProviderRequest`. If the actual instance is not `ProxyProviderRequest`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ProxyProviderRequest`
     * @throws ClassCastException if the instance is not `ProxyProviderRequest`
     */
    public ProxyProviderRequest getProxyProviderRequest() throws ClassCastException {
        return (ProxyProviderRequest)super.getActualInstance();
    }
    /**
     * Get the actual instance of `RACProviderRequest`. If the actual instance is not `RACProviderRequest`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `RACProviderRequest`
     * @throws ClassCastException if the instance is not `RACProviderRequest`
     */
    public RACProviderRequest getRACProviderRequest() throws ClassCastException {
        return (RACProviderRequest)super.getActualInstance();
    }
    /**
     * Get the actual instance of `RadiusProviderRequest`. If the actual instance is not `RadiusProviderRequest`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `RadiusProviderRequest`
     * @throws ClassCastException if the instance is not `RadiusProviderRequest`
     */
    public RadiusProviderRequest getRadiusProviderRequest() throws ClassCastException {
        return (RadiusProviderRequest)super.getActualInstance();
    }
    /**
     * Get the actual instance of `SAMLProviderRequest`. If the actual instance is not `SAMLProviderRequest`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SAMLProviderRequest`
     * @throws ClassCastException if the instance is not `SAMLProviderRequest`
     */
    public SAMLProviderRequest getSAMLProviderRequest() throws ClassCastException {
        return (SAMLProviderRequest)super.getActualInstance();
    }
    /**
     * Get the actual instance of `SCIMProviderRequest`. If the actual instance is not `SCIMProviderRequest`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SCIMProviderRequest`
     * @throws ClassCastException if the instance is not `SCIMProviderRequest`
     */
    public SCIMProviderRequest getSCIMProviderRequest() throws ClassCastException {
        return (SCIMProviderRequest)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to ModelRequest
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with GoogleWorkspaceProviderRequest
        try {
            GoogleWorkspaceProviderRequest.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for GoogleWorkspaceProviderRequest failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with LDAPProviderRequest
        try {
            LDAPProviderRequest.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for LDAPProviderRequest failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with MicrosoftEntraProviderRequest
        try {
            MicrosoftEntraProviderRequest.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for MicrosoftEntraProviderRequest failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with OAuth2ProviderRequest
        try {
            OAuth2ProviderRequest.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for OAuth2ProviderRequest failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ProxyProviderRequest
        try {
            ProxyProviderRequest.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ProxyProviderRequest failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with RACProviderRequest
        try {
            RACProviderRequest.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for RACProviderRequest failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with RadiusProviderRequest
        try {
            RadiusProviderRequest.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for RadiusProviderRequest failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with SAMLProviderRequest
        try {
            SAMLProviderRequest.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for SAMLProviderRequest failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with SCIMProviderRequest
        try {
            SCIMProviderRequest.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for SCIMProviderRequest failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for ModelRequest with oneOf schemas: GoogleWorkspaceProviderRequest, LDAPProviderRequest, MicrosoftEntraProviderRequest, OAuth2ProviderRequest, ProxyProviderRequest, RACProviderRequest, RadiusProviderRequest, SAMLProviderRequest, SCIMProviderRequest. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of ModelRequest given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of ModelRequest
     * @throws IOException if the JSON string is invalid with respect to ModelRequest
     */
    public static ModelRequest fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, ModelRequest.class);
    }

    /**
     * Convert an instance of ModelRequest to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

