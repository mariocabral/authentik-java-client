/*
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.6.3
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.FooterLink;
import org.openapitools.client.model.UiThemeEnum;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Partial brand information for styling
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-25T23:12:57.050901581-03:00[America/Argentina/Cordoba]", comments = "Generator version: 7.8.0")
public class CurrentBrand {
  public static final String SERIALIZED_NAME_MATCHED_DOMAIN = "matched_domain";
  @SerializedName(SERIALIZED_NAME_MATCHED_DOMAIN)
  private String matchedDomain;

  public static final String SERIALIZED_NAME_BRANDING_TITLE = "branding_title";
  @SerializedName(SERIALIZED_NAME_BRANDING_TITLE)
  private String brandingTitle;

  public static final String SERIALIZED_NAME_BRANDING_LOGO = "branding_logo";
  @SerializedName(SERIALIZED_NAME_BRANDING_LOGO)
  private String brandingLogo;

  public static final String SERIALIZED_NAME_BRANDING_FAVICON = "branding_favicon";
  @SerializedName(SERIALIZED_NAME_BRANDING_FAVICON)
  private String brandingFavicon;

  public static final String SERIALIZED_NAME_UI_FOOTER_LINKS = "ui_footer_links";
  @SerializedName(SERIALIZED_NAME_UI_FOOTER_LINKS)
  private List<FooterLink> uiFooterLinks = new ArrayList<>();

  public static final String SERIALIZED_NAME_UI_THEME = "ui_theme";
  @SerializedName(SERIALIZED_NAME_UI_THEME)
  private UiThemeEnum uiTheme = UiThemeEnum.AUTOMATIC;

  public static final String SERIALIZED_NAME_FLOW_AUTHENTICATION = "flow_authentication";
  @SerializedName(SERIALIZED_NAME_FLOW_AUTHENTICATION)
  private String flowAuthentication;

  public static final String SERIALIZED_NAME_FLOW_INVALIDATION = "flow_invalidation";
  @SerializedName(SERIALIZED_NAME_FLOW_INVALIDATION)
  private String flowInvalidation;

  public static final String SERIALIZED_NAME_FLOW_RECOVERY = "flow_recovery";
  @SerializedName(SERIALIZED_NAME_FLOW_RECOVERY)
  private String flowRecovery;

  public static final String SERIALIZED_NAME_FLOW_UNENROLLMENT = "flow_unenrollment";
  @SerializedName(SERIALIZED_NAME_FLOW_UNENROLLMENT)
  private String flowUnenrollment;

  public static final String SERIALIZED_NAME_FLOW_USER_SETTINGS = "flow_user_settings";
  @SerializedName(SERIALIZED_NAME_FLOW_USER_SETTINGS)
  private String flowUserSettings;

  public static final String SERIALIZED_NAME_FLOW_DEVICE_CODE = "flow_device_code";
  @SerializedName(SERIALIZED_NAME_FLOW_DEVICE_CODE)
  private String flowDeviceCode;

  public static final String SERIALIZED_NAME_DEFAULT_LOCALE = "default_locale";
  @SerializedName(SERIALIZED_NAME_DEFAULT_LOCALE)
  private String defaultLocale;

  public CurrentBrand() {
  }

  public CurrentBrand(
     List<FooterLink> uiFooterLinks, 
     UiThemeEnum uiTheme, 
     String defaultLocale
  ) {
    this();
    this.uiFooterLinks = uiFooterLinks;
    this.uiTheme = uiTheme;
    this.defaultLocale = defaultLocale;
  }

  public CurrentBrand matchedDomain(String matchedDomain) {
    this.matchedDomain = matchedDomain;
    return this;
  }

  /**
   * Get matchedDomain
   * @return matchedDomain
   */
  @javax.annotation.Nonnull
  public String getMatchedDomain() {
    return matchedDomain;
  }

  public void setMatchedDomain(String matchedDomain) {
    this.matchedDomain = matchedDomain;
  }


  public CurrentBrand brandingTitle(String brandingTitle) {
    this.brandingTitle = brandingTitle;
    return this;
  }

  /**
   * Get brandingTitle
   * @return brandingTitle
   */
  @javax.annotation.Nonnull
  public String getBrandingTitle() {
    return brandingTitle;
  }

  public void setBrandingTitle(String brandingTitle) {
    this.brandingTitle = brandingTitle;
  }


  public CurrentBrand brandingLogo(String brandingLogo) {
    this.brandingLogo = brandingLogo;
    return this;
  }

  /**
   * Get brandingLogo
   * @return brandingLogo
   */
  @javax.annotation.Nonnull
  public String getBrandingLogo() {
    return brandingLogo;
  }

  public void setBrandingLogo(String brandingLogo) {
    this.brandingLogo = brandingLogo;
  }


  public CurrentBrand brandingFavicon(String brandingFavicon) {
    this.brandingFavicon = brandingFavicon;
    return this;
  }

  /**
   * Get brandingFavicon
   * @return brandingFavicon
   */
  @javax.annotation.Nonnull
  public String getBrandingFavicon() {
    return brandingFavicon;
  }

  public void setBrandingFavicon(String brandingFavicon) {
    this.brandingFavicon = brandingFavicon;
  }


  /**
   * Get uiFooterLinks
   * @return uiFooterLinks
   */
  @javax.annotation.Nonnull
  public List<FooterLink> getUiFooterLinks() {
    return uiFooterLinks;
  }



  /**
   * Get uiTheme
   * @return uiTheme
   */
  @javax.annotation.Nonnull
  public UiThemeEnum getUiTheme() {
    return uiTheme;
  }



  public CurrentBrand flowAuthentication(String flowAuthentication) {
    this.flowAuthentication = flowAuthentication;
    return this;
  }

  /**
   * Get flowAuthentication
   * @return flowAuthentication
   */
  @javax.annotation.Nullable
  public String getFlowAuthentication() {
    return flowAuthentication;
  }

  public void setFlowAuthentication(String flowAuthentication) {
    this.flowAuthentication = flowAuthentication;
  }


  public CurrentBrand flowInvalidation(String flowInvalidation) {
    this.flowInvalidation = flowInvalidation;
    return this;
  }

  /**
   * Get flowInvalidation
   * @return flowInvalidation
   */
  @javax.annotation.Nullable
  public String getFlowInvalidation() {
    return flowInvalidation;
  }

  public void setFlowInvalidation(String flowInvalidation) {
    this.flowInvalidation = flowInvalidation;
  }


  public CurrentBrand flowRecovery(String flowRecovery) {
    this.flowRecovery = flowRecovery;
    return this;
  }

  /**
   * Get flowRecovery
   * @return flowRecovery
   */
  @javax.annotation.Nullable
  public String getFlowRecovery() {
    return flowRecovery;
  }

  public void setFlowRecovery(String flowRecovery) {
    this.flowRecovery = flowRecovery;
  }


  public CurrentBrand flowUnenrollment(String flowUnenrollment) {
    this.flowUnenrollment = flowUnenrollment;
    return this;
  }

  /**
   * Get flowUnenrollment
   * @return flowUnenrollment
   */
  @javax.annotation.Nullable
  public String getFlowUnenrollment() {
    return flowUnenrollment;
  }

  public void setFlowUnenrollment(String flowUnenrollment) {
    this.flowUnenrollment = flowUnenrollment;
  }


  public CurrentBrand flowUserSettings(String flowUserSettings) {
    this.flowUserSettings = flowUserSettings;
    return this;
  }

  /**
   * Get flowUserSettings
   * @return flowUserSettings
   */
  @javax.annotation.Nullable
  public String getFlowUserSettings() {
    return flowUserSettings;
  }

  public void setFlowUserSettings(String flowUserSettings) {
    this.flowUserSettings = flowUserSettings;
  }


  public CurrentBrand flowDeviceCode(String flowDeviceCode) {
    this.flowDeviceCode = flowDeviceCode;
    return this;
  }

  /**
   * Get flowDeviceCode
   * @return flowDeviceCode
   */
  @javax.annotation.Nullable
  public String getFlowDeviceCode() {
    return flowDeviceCode;
  }

  public void setFlowDeviceCode(String flowDeviceCode) {
    this.flowDeviceCode = flowDeviceCode;
  }


  /**
   * Get defaultLocale
   * @return defaultLocale
   */
  @javax.annotation.Nonnull
  public String getDefaultLocale() {
    return defaultLocale;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CurrentBrand currentBrand = (CurrentBrand) o;
    return Objects.equals(this.matchedDomain, currentBrand.matchedDomain) &&
        Objects.equals(this.brandingTitle, currentBrand.brandingTitle) &&
        Objects.equals(this.brandingLogo, currentBrand.brandingLogo) &&
        Objects.equals(this.brandingFavicon, currentBrand.brandingFavicon) &&
        Objects.equals(this.uiFooterLinks, currentBrand.uiFooterLinks) &&
        Objects.equals(this.uiTheme, currentBrand.uiTheme) &&
        Objects.equals(this.flowAuthentication, currentBrand.flowAuthentication) &&
        Objects.equals(this.flowInvalidation, currentBrand.flowInvalidation) &&
        Objects.equals(this.flowRecovery, currentBrand.flowRecovery) &&
        Objects.equals(this.flowUnenrollment, currentBrand.flowUnenrollment) &&
        Objects.equals(this.flowUserSettings, currentBrand.flowUserSettings) &&
        Objects.equals(this.flowDeviceCode, currentBrand.flowDeviceCode) &&
        Objects.equals(this.defaultLocale, currentBrand.defaultLocale);
  }

  @Override
  public int hashCode() {
    return Objects.hash(matchedDomain, brandingTitle, brandingLogo, brandingFavicon, uiFooterLinks, uiTheme, flowAuthentication, flowInvalidation, flowRecovery, flowUnenrollment, flowUserSettings, flowDeviceCode, defaultLocale);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CurrentBrand {\n");
    sb.append("    matchedDomain: ").append(toIndentedString(matchedDomain)).append("\n");
    sb.append("    brandingTitle: ").append(toIndentedString(brandingTitle)).append("\n");
    sb.append("    brandingLogo: ").append(toIndentedString(brandingLogo)).append("\n");
    sb.append("    brandingFavicon: ").append(toIndentedString(brandingFavicon)).append("\n");
    sb.append("    uiFooterLinks: ").append(toIndentedString(uiFooterLinks)).append("\n");
    sb.append("    uiTheme: ").append(toIndentedString(uiTheme)).append("\n");
    sb.append("    flowAuthentication: ").append(toIndentedString(flowAuthentication)).append("\n");
    sb.append("    flowInvalidation: ").append(toIndentedString(flowInvalidation)).append("\n");
    sb.append("    flowRecovery: ").append(toIndentedString(flowRecovery)).append("\n");
    sb.append("    flowUnenrollment: ").append(toIndentedString(flowUnenrollment)).append("\n");
    sb.append("    flowUserSettings: ").append(toIndentedString(flowUserSettings)).append("\n");
    sb.append("    flowDeviceCode: ").append(toIndentedString(flowDeviceCode)).append("\n");
    sb.append("    defaultLocale: ").append(toIndentedString(defaultLocale)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("matched_domain");
    openapiFields.add("branding_title");
    openapiFields.add("branding_logo");
    openapiFields.add("branding_favicon");
    openapiFields.add("ui_footer_links");
    openapiFields.add("ui_theme");
    openapiFields.add("flow_authentication");
    openapiFields.add("flow_invalidation");
    openapiFields.add("flow_recovery");
    openapiFields.add("flow_unenrollment");
    openapiFields.add("flow_user_settings");
    openapiFields.add("flow_device_code");
    openapiFields.add("default_locale");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("matched_domain");
    openapiRequiredFields.add("branding_title");
    openapiRequiredFields.add("branding_logo");
    openapiRequiredFields.add("branding_favicon");
    openapiRequiredFields.add("ui_footer_links");
    openapiRequiredFields.add("ui_theme");
    openapiRequiredFields.add("default_locale");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CurrentBrand
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CurrentBrand.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CurrentBrand is not found in the empty JSON string", CurrentBrand.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CurrentBrand.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CurrentBrand` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CurrentBrand.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("matched_domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `matched_domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("matched_domain").toString()));
      }
      if (!jsonObj.get("branding_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `branding_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("branding_title").toString()));
      }
      if (!jsonObj.get("branding_logo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `branding_logo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("branding_logo").toString()));
      }
      if (!jsonObj.get("branding_favicon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `branding_favicon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("branding_favicon").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("ui_footer_links").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ui_footer_links` to be an array in the JSON string but got `%s`", jsonObj.get("ui_footer_links").toString()));
      }

      JsonArray jsonArrayuiFooterLinks = jsonObj.getAsJsonArray("ui_footer_links");
      // validate the required field `ui_footer_links` (array)
      for (int i = 0; i < jsonArrayuiFooterLinks.size(); i++) {
        FooterLink.validateJsonElement(jsonArrayuiFooterLinks.get(i));
      };
      // validate the required field `ui_theme`
      UiThemeEnum.validateJsonElement(jsonObj.get("ui_theme"));
      if ((jsonObj.get("flow_authentication") != null && !jsonObj.get("flow_authentication").isJsonNull()) && !jsonObj.get("flow_authentication").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `flow_authentication` to be a primitive type in the JSON string but got `%s`", jsonObj.get("flow_authentication").toString()));
      }
      if ((jsonObj.get("flow_invalidation") != null && !jsonObj.get("flow_invalidation").isJsonNull()) && !jsonObj.get("flow_invalidation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `flow_invalidation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("flow_invalidation").toString()));
      }
      if ((jsonObj.get("flow_recovery") != null && !jsonObj.get("flow_recovery").isJsonNull()) && !jsonObj.get("flow_recovery").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `flow_recovery` to be a primitive type in the JSON string but got `%s`", jsonObj.get("flow_recovery").toString()));
      }
      if ((jsonObj.get("flow_unenrollment") != null && !jsonObj.get("flow_unenrollment").isJsonNull()) && !jsonObj.get("flow_unenrollment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `flow_unenrollment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("flow_unenrollment").toString()));
      }
      if ((jsonObj.get("flow_user_settings") != null && !jsonObj.get("flow_user_settings").isJsonNull()) && !jsonObj.get("flow_user_settings").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `flow_user_settings` to be a primitive type in the JSON string but got `%s`", jsonObj.get("flow_user_settings").toString()));
      }
      if ((jsonObj.get("flow_device_code") != null && !jsonObj.get("flow_device_code").isJsonNull()) && !jsonObj.get("flow_device_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `flow_device_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("flow_device_code").toString()));
      }
      if (!jsonObj.get("default_locale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default_locale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default_locale").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CurrentBrand.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CurrentBrand' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CurrentBrand> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CurrentBrand.class));

       return (TypeAdapter<T>) new TypeAdapter<CurrentBrand>() {
           @Override
           public void write(JsonWriter out, CurrentBrand value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CurrentBrand read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CurrentBrand given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CurrentBrand
   * @throws IOException if the JSON string is invalid with respect to CurrentBrand
   */
  public static CurrentBrand fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CurrentBrand.class);
  }

  /**
   * Convert an instance of CurrentBrand to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

