/*
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.6.3
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ChallengeChoices;
import org.openapitools.client.model.ContextualFlowInfo;
import org.openapitools.client.model.ErrorDetail;
import org.openapitools.client.model.FlowDesignationEnum;
import org.openapitools.client.model.LoginSource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Identification challenges with all UI elements
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-25T23:12:57.050901581-03:00[America/Argentina/Cordoba]", comments = "Generator version: 7.8.0")
public class IdentificationChallenge {
  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private ChallengeChoices type;

  public static final String SERIALIZED_NAME_FLOW_INFO = "flow_info";
  @SerializedName(SERIALIZED_NAME_FLOW_INFO)
  private ContextualFlowInfo flowInfo;

  public static final String SERIALIZED_NAME_COMPONENT = "component";
  @SerializedName(SERIALIZED_NAME_COMPONENT)
  private String component = "ak-stage-identification";

  public static final String SERIALIZED_NAME_RESPONSE_ERRORS = "response_errors";
  @SerializedName(SERIALIZED_NAME_RESPONSE_ERRORS)
  private Map<String, List<ErrorDetail>> responseErrors = new HashMap<>();

  public static final String SERIALIZED_NAME_USER_FIELDS = "user_fields";
  @SerializedName(SERIALIZED_NAME_USER_FIELDS)
  private List<String> userFields;

  public static final String SERIALIZED_NAME_PASSWORD_FIELDS = "password_fields";
  @SerializedName(SERIALIZED_NAME_PASSWORD_FIELDS)
  private Boolean passwordFields;

  public static final String SERIALIZED_NAME_APPLICATION_PRE = "application_pre";
  @SerializedName(SERIALIZED_NAME_APPLICATION_PRE)
  private String applicationPre;

  public static final String SERIALIZED_NAME_FLOW_DESIGNATION = "flow_designation";
  @SerializedName(SERIALIZED_NAME_FLOW_DESIGNATION)
  private FlowDesignationEnum flowDesignation;

  public static final String SERIALIZED_NAME_ENROLL_URL = "enroll_url";
  @SerializedName(SERIALIZED_NAME_ENROLL_URL)
  private String enrollUrl;

  public static final String SERIALIZED_NAME_RECOVERY_URL = "recovery_url";
  @SerializedName(SERIALIZED_NAME_RECOVERY_URL)
  private String recoveryUrl;

  public static final String SERIALIZED_NAME_PASSWORDLESS_URL = "passwordless_url";
  @SerializedName(SERIALIZED_NAME_PASSWORDLESS_URL)
  private String passwordlessUrl;

  public static final String SERIALIZED_NAME_PRIMARY_ACTION = "primary_action";
  @SerializedName(SERIALIZED_NAME_PRIMARY_ACTION)
  private String primaryAction;

  public static final String SERIALIZED_NAME_SOURCES = "sources";
  @SerializedName(SERIALIZED_NAME_SOURCES)
  private List<LoginSource> sources = new ArrayList<>();

  public static final String SERIALIZED_NAME_SHOW_SOURCE_LABELS = "show_source_labels";
  @SerializedName(SERIALIZED_NAME_SHOW_SOURCE_LABELS)
  private Boolean showSourceLabels;

  public IdentificationChallenge() {
  }

  public IdentificationChallenge type(ChallengeChoices type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public ChallengeChoices getType() {
    return type;
  }

  public void setType(ChallengeChoices type) {
    this.type = type;
  }


  public IdentificationChallenge flowInfo(ContextualFlowInfo flowInfo) {
    this.flowInfo = flowInfo;
    return this;
  }

  /**
   * Get flowInfo
   * @return flowInfo
   */
  @javax.annotation.Nullable
  public ContextualFlowInfo getFlowInfo() {
    return flowInfo;
  }

  public void setFlowInfo(ContextualFlowInfo flowInfo) {
    this.flowInfo = flowInfo;
  }


  public IdentificationChallenge component(String component) {
    this.component = component;
    return this;
  }

  /**
   * Get component
   * @return component
   */
  @javax.annotation.Nullable
  public String getComponent() {
    return component;
  }

  public void setComponent(String component) {
    this.component = component;
  }


  public IdentificationChallenge responseErrors(Map<String, List<ErrorDetail>> responseErrors) {
    this.responseErrors = responseErrors;
    return this;
  }

  public IdentificationChallenge putResponseErrorsItem(String key, List<ErrorDetail> responseErrorsItem) {
    if (this.responseErrors == null) {
      this.responseErrors = new HashMap<>();
    }
    this.responseErrors.put(key, responseErrorsItem);
    return this;
  }

  /**
   * Get responseErrors
   * @return responseErrors
   */
  @javax.annotation.Nullable
  public Map<String, List<ErrorDetail>> getResponseErrors() {
    return responseErrors;
  }

  public void setResponseErrors(Map<String, List<ErrorDetail>> responseErrors) {
    this.responseErrors = responseErrors;
  }


  public IdentificationChallenge userFields(List<String> userFields) {
    this.userFields = userFields;
    return this;
  }

  public IdentificationChallenge addUserFieldsItem(String userFieldsItem) {
    if (this.userFields == null) {
      this.userFields = new ArrayList<>();
    }
    this.userFields.add(userFieldsItem);
    return this;
  }

  /**
   * Get userFields
   * @return userFields
   */
  @javax.annotation.Nullable
  public List<String> getUserFields() {
    return userFields;
  }

  public void setUserFields(List<String> userFields) {
    this.userFields = userFields;
  }


  public IdentificationChallenge passwordFields(Boolean passwordFields) {
    this.passwordFields = passwordFields;
    return this;
  }

  /**
   * Get passwordFields
   * @return passwordFields
   */
  @javax.annotation.Nonnull
  public Boolean getPasswordFields() {
    return passwordFields;
  }

  public void setPasswordFields(Boolean passwordFields) {
    this.passwordFields = passwordFields;
  }


  public IdentificationChallenge applicationPre(String applicationPre) {
    this.applicationPre = applicationPre;
    return this;
  }

  /**
   * Get applicationPre
   * @return applicationPre
   */
  @javax.annotation.Nullable
  public String getApplicationPre() {
    return applicationPre;
  }

  public void setApplicationPre(String applicationPre) {
    this.applicationPre = applicationPre;
  }


  public IdentificationChallenge flowDesignation(FlowDesignationEnum flowDesignation) {
    this.flowDesignation = flowDesignation;
    return this;
  }

  /**
   * Get flowDesignation
   * @return flowDesignation
   */
  @javax.annotation.Nonnull
  public FlowDesignationEnum getFlowDesignation() {
    return flowDesignation;
  }

  public void setFlowDesignation(FlowDesignationEnum flowDesignation) {
    this.flowDesignation = flowDesignation;
  }


  public IdentificationChallenge enrollUrl(String enrollUrl) {
    this.enrollUrl = enrollUrl;
    return this;
  }

  /**
   * Get enrollUrl
   * @return enrollUrl
   */
  @javax.annotation.Nullable
  public String getEnrollUrl() {
    return enrollUrl;
  }

  public void setEnrollUrl(String enrollUrl) {
    this.enrollUrl = enrollUrl;
  }


  public IdentificationChallenge recoveryUrl(String recoveryUrl) {
    this.recoveryUrl = recoveryUrl;
    return this;
  }

  /**
   * Get recoveryUrl
   * @return recoveryUrl
   */
  @javax.annotation.Nullable
  public String getRecoveryUrl() {
    return recoveryUrl;
  }

  public void setRecoveryUrl(String recoveryUrl) {
    this.recoveryUrl = recoveryUrl;
  }


  public IdentificationChallenge passwordlessUrl(String passwordlessUrl) {
    this.passwordlessUrl = passwordlessUrl;
    return this;
  }

  /**
   * Get passwordlessUrl
   * @return passwordlessUrl
   */
  @javax.annotation.Nullable
  public String getPasswordlessUrl() {
    return passwordlessUrl;
  }

  public void setPasswordlessUrl(String passwordlessUrl) {
    this.passwordlessUrl = passwordlessUrl;
  }


  public IdentificationChallenge primaryAction(String primaryAction) {
    this.primaryAction = primaryAction;
    return this;
  }

  /**
   * Get primaryAction
   * @return primaryAction
   */
  @javax.annotation.Nonnull
  public String getPrimaryAction() {
    return primaryAction;
  }

  public void setPrimaryAction(String primaryAction) {
    this.primaryAction = primaryAction;
  }


  public IdentificationChallenge sources(List<LoginSource> sources) {
    this.sources = sources;
    return this;
  }

  public IdentificationChallenge addSourcesItem(LoginSource sourcesItem) {
    if (this.sources == null) {
      this.sources = new ArrayList<>();
    }
    this.sources.add(sourcesItem);
    return this;
  }

  /**
   * Get sources
   * @return sources
   */
  @javax.annotation.Nullable
  public List<LoginSource> getSources() {
    return sources;
  }

  public void setSources(List<LoginSource> sources) {
    this.sources = sources;
  }


  public IdentificationChallenge showSourceLabels(Boolean showSourceLabels) {
    this.showSourceLabels = showSourceLabels;
    return this;
  }

  /**
   * Get showSourceLabels
   * @return showSourceLabels
   */
  @javax.annotation.Nonnull
  public Boolean getShowSourceLabels() {
    return showSourceLabels;
  }

  public void setShowSourceLabels(Boolean showSourceLabels) {
    this.showSourceLabels = showSourceLabels;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IdentificationChallenge identificationChallenge = (IdentificationChallenge) o;
    return Objects.equals(this.type, identificationChallenge.type) &&
        Objects.equals(this.flowInfo, identificationChallenge.flowInfo) &&
        Objects.equals(this.component, identificationChallenge.component) &&
        Objects.equals(this.responseErrors, identificationChallenge.responseErrors) &&
        Objects.equals(this.userFields, identificationChallenge.userFields) &&
        Objects.equals(this.passwordFields, identificationChallenge.passwordFields) &&
        Objects.equals(this.applicationPre, identificationChallenge.applicationPre) &&
        Objects.equals(this.flowDesignation, identificationChallenge.flowDesignation) &&
        Objects.equals(this.enrollUrl, identificationChallenge.enrollUrl) &&
        Objects.equals(this.recoveryUrl, identificationChallenge.recoveryUrl) &&
        Objects.equals(this.passwordlessUrl, identificationChallenge.passwordlessUrl) &&
        Objects.equals(this.primaryAction, identificationChallenge.primaryAction) &&
        Objects.equals(this.sources, identificationChallenge.sources) &&
        Objects.equals(this.showSourceLabels, identificationChallenge.showSourceLabels);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, flowInfo, component, responseErrors, userFields, passwordFields, applicationPre, flowDesignation, enrollUrl, recoveryUrl, passwordlessUrl, primaryAction, sources, showSourceLabels);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IdentificationChallenge {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    flowInfo: ").append(toIndentedString(flowInfo)).append("\n");
    sb.append("    component: ").append(toIndentedString(component)).append("\n");
    sb.append("    responseErrors: ").append(toIndentedString(responseErrors)).append("\n");
    sb.append("    userFields: ").append(toIndentedString(userFields)).append("\n");
    sb.append("    passwordFields: ").append(toIndentedString(passwordFields)).append("\n");
    sb.append("    applicationPre: ").append(toIndentedString(applicationPre)).append("\n");
    sb.append("    flowDesignation: ").append(toIndentedString(flowDesignation)).append("\n");
    sb.append("    enrollUrl: ").append(toIndentedString(enrollUrl)).append("\n");
    sb.append("    recoveryUrl: ").append(toIndentedString(recoveryUrl)).append("\n");
    sb.append("    passwordlessUrl: ").append(toIndentedString(passwordlessUrl)).append("\n");
    sb.append("    primaryAction: ").append(toIndentedString(primaryAction)).append("\n");
    sb.append("    sources: ").append(toIndentedString(sources)).append("\n");
    sb.append("    showSourceLabels: ").append(toIndentedString(showSourceLabels)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("flow_info");
    openapiFields.add("component");
    openapiFields.add("response_errors");
    openapiFields.add("user_fields");
    openapiFields.add("password_fields");
    openapiFields.add("application_pre");
    openapiFields.add("flow_designation");
    openapiFields.add("enroll_url");
    openapiFields.add("recovery_url");
    openapiFields.add("passwordless_url");
    openapiFields.add("primary_action");
    openapiFields.add("sources");
    openapiFields.add("show_source_labels");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("user_fields");
    openapiRequiredFields.add("password_fields");
    openapiRequiredFields.add("flow_designation");
    openapiRequiredFields.add("primary_action");
    openapiRequiredFields.add("show_source_labels");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IdentificationChallenge
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IdentificationChallenge.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IdentificationChallenge is not found in the empty JSON string", IdentificationChallenge.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IdentificationChallenge.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IdentificationChallenge` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : IdentificationChallenge.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `type`
      ChallengeChoices.validateJsonElement(jsonObj.get("type"));
      // validate the optional field `flow_info`
      if (jsonObj.get("flow_info") != null && !jsonObj.get("flow_info").isJsonNull()) {
        ContextualFlowInfo.validateJsonElement(jsonObj.get("flow_info"));
      }
      if ((jsonObj.get("component") != null && !jsonObj.get("component").isJsonNull()) && !jsonObj.get("component").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `component` to be a primitive type in the JSON string but got `%s`", jsonObj.get("component").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("user_fields") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("user_fields").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_fields` to be an array in the JSON string but got `%s`", jsonObj.get("user_fields").toString()));
      }
      if ((jsonObj.get("application_pre") != null && !jsonObj.get("application_pre").isJsonNull()) && !jsonObj.get("application_pre").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `application_pre` to be a primitive type in the JSON string but got `%s`", jsonObj.get("application_pre").toString()));
      }
      // validate the required field `flow_designation`
      FlowDesignationEnum.validateJsonElement(jsonObj.get("flow_designation"));
      if ((jsonObj.get("enroll_url") != null && !jsonObj.get("enroll_url").isJsonNull()) && !jsonObj.get("enroll_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enroll_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enroll_url").toString()));
      }
      if ((jsonObj.get("recovery_url") != null && !jsonObj.get("recovery_url").isJsonNull()) && !jsonObj.get("recovery_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recovery_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recovery_url").toString()));
      }
      if ((jsonObj.get("passwordless_url") != null && !jsonObj.get("passwordless_url").isJsonNull()) && !jsonObj.get("passwordless_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `passwordless_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("passwordless_url").toString()));
      }
      if (!jsonObj.get("primary_action").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primary_action` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primary_action").toString()));
      }
      if (jsonObj.get("sources") != null && !jsonObj.get("sources").isJsonNull()) {
        JsonArray jsonArraysources = jsonObj.getAsJsonArray("sources");
        if (jsonArraysources != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sources").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sources` to be an array in the JSON string but got `%s`", jsonObj.get("sources").toString()));
          }

          // validate the optional field `sources` (array)
          for (int i = 0; i < jsonArraysources.size(); i++) {
            LoginSource.validateJsonElement(jsonArraysources.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IdentificationChallenge.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IdentificationChallenge' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IdentificationChallenge> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IdentificationChallenge.class));

       return (TypeAdapter<T>) new TypeAdapter<IdentificationChallenge>() {
           @Override
           public void write(JsonWriter out, IdentificationChallenge value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IdentificationChallenge read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IdentificationChallenge given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IdentificationChallenge
   * @throws IOException if the JSON string is invalid with respect to IdentificationChallenge
   */
  public static IdentificationChallenge fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IdentificationChallenge.class);
  }

  /**
   * Convert an instance of IdentificationChallenge to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

