/*
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.6.3
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.LDAPAPIAccessMode;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LDAPProvider Serializer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-25T23:12:57.050901581-03:00[America/Argentina/Cordoba]", comments = "Generator version: 7.8.0")
public class LDAPProvider {
  public static final String SERIALIZED_NAME_PK = "pk";
  @SerializedName(SERIALIZED_NAME_PK)
  private Integer pk;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_AUTHENTICATION_FLOW = "authentication_flow";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_FLOW)
  private UUID authenticationFlow;

  public static final String SERIALIZED_NAME_AUTHORIZATION_FLOW = "authorization_flow";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_FLOW)
  private UUID authorizationFlow;

  public static final String SERIALIZED_NAME_PROPERTY_MAPPINGS = "property_mappings";
  @SerializedName(SERIALIZED_NAME_PROPERTY_MAPPINGS)
  private List<UUID> propertyMappings = new ArrayList<>();

  public static final String SERIALIZED_NAME_COMPONENT = "component";
  @SerializedName(SERIALIZED_NAME_COMPONENT)
  private String component;

  public static final String SERIALIZED_NAME_ASSIGNED_APPLICATION_SLUG = "assigned_application_slug";
  @SerializedName(SERIALIZED_NAME_ASSIGNED_APPLICATION_SLUG)
  private String assignedApplicationSlug;

  public static final String SERIALIZED_NAME_ASSIGNED_APPLICATION_NAME = "assigned_application_name";
  @SerializedName(SERIALIZED_NAME_ASSIGNED_APPLICATION_NAME)
  private String assignedApplicationName;

  public static final String SERIALIZED_NAME_ASSIGNED_BACKCHANNEL_APPLICATION_SLUG = "assigned_backchannel_application_slug";
  @SerializedName(SERIALIZED_NAME_ASSIGNED_BACKCHANNEL_APPLICATION_SLUG)
  private String assignedBackchannelApplicationSlug;

  public static final String SERIALIZED_NAME_ASSIGNED_BACKCHANNEL_APPLICATION_NAME = "assigned_backchannel_application_name";
  @SerializedName(SERIALIZED_NAME_ASSIGNED_BACKCHANNEL_APPLICATION_NAME)
  private String assignedBackchannelApplicationName;

  public static final String SERIALIZED_NAME_VERBOSE_NAME = "verbose_name";
  @SerializedName(SERIALIZED_NAME_VERBOSE_NAME)
  private String verboseName;

  public static final String SERIALIZED_NAME_VERBOSE_NAME_PLURAL = "verbose_name_plural";
  @SerializedName(SERIALIZED_NAME_VERBOSE_NAME_PLURAL)
  private String verboseNamePlural;

  public static final String SERIALIZED_NAME_META_MODEL_NAME = "meta_model_name";
  @SerializedName(SERIALIZED_NAME_META_MODEL_NAME)
  private String metaModelName;

  public static final String SERIALIZED_NAME_BASE_DN = "base_dn";
  @SerializedName(SERIALIZED_NAME_BASE_DN)
  private String baseDn;

  public static final String SERIALIZED_NAME_SEARCH_GROUP = "search_group";
  @SerializedName(SERIALIZED_NAME_SEARCH_GROUP)
  private UUID searchGroup;

  public static final String SERIALIZED_NAME_CERTIFICATE = "certificate";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE)
  private UUID certificate;

  public static final String SERIALIZED_NAME_TLS_SERVER_NAME = "tls_server_name";
  @SerializedName(SERIALIZED_NAME_TLS_SERVER_NAME)
  private String tlsServerName;

  public static final String SERIALIZED_NAME_UID_START_NUMBER = "uid_start_number";
  @SerializedName(SERIALIZED_NAME_UID_START_NUMBER)
  private Integer uidStartNumber;

  public static final String SERIALIZED_NAME_GID_START_NUMBER = "gid_start_number";
  @SerializedName(SERIALIZED_NAME_GID_START_NUMBER)
  private Integer gidStartNumber;

  public static final String SERIALIZED_NAME_OUTPOST_SET = "outpost_set";
  @SerializedName(SERIALIZED_NAME_OUTPOST_SET)
  private List<String> outpostSet = new ArrayList<>();

  public static final String SERIALIZED_NAME_SEARCH_MODE = "search_mode";
  @SerializedName(SERIALIZED_NAME_SEARCH_MODE)
  private LDAPAPIAccessMode searchMode;

  public static final String SERIALIZED_NAME_BIND_MODE = "bind_mode";
  @SerializedName(SERIALIZED_NAME_BIND_MODE)
  private LDAPAPIAccessMode bindMode;

  public static final String SERIALIZED_NAME_MFA_SUPPORT = "mfa_support";
  @SerializedName(SERIALIZED_NAME_MFA_SUPPORT)
  private Boolean mfaSupport;

  public LDAPProvider() {
  }

  public LDAPProvider(
     Integer pk, 
     String component, 
     String assignedApplicationSlug, 
     String assignedApplicationName, 
     String assignedBackchannelApplicationSlug, 
     String assignedBackchannelApplicationName, 
     String verboseName, 
     String verboseNamePlural, 
     String metaModelName, 
     List<String> outpostSet
  ) {
    this();
    this.pk = pk;
    this.component = component;
    this.assignedApplicationSlug = assignedApplicationSlug;
    this.assignedApplicationName = assignedApplicationName;
    this.assignedBackchannelApplicationSlug = assignedBackchannelApplicationSlug;
    this.assignedBackchannelApplicationName = assignedBackchannelApplicationName;
    this.verboseName = verboseName;
    this.verboseNamePlural = verboseNamePlural;
    this.metaModelName = metaModelName;
    this.outpostSet = outpostSet;
  }

  /**
   * Get pk
   * @return pk
   */
  @javax.annotation.Nonnull
  public Integer getPk() {
    return pk;
  }



  public LDAPProvider name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public LDAPProvider authenticationFlow(UUID authenticationFlow) {
    this.authenticationFlow = authenticationFlow;
    return this;
  }

  /**
   * Flow used for authentication when the associated application is accessed by an un-authenticated user.
   * @return authenticationFlow
   */
  @javax.annotation.Nullable
  public UUID getAuthenticationFlow() {
    return authenticationFlow;
  }

  public void setAuthenticationFlow(UUID authenticationFlow) {
    this.authenticationFlow = authenticationFlow;
  }


  public LDAPProvider authorizationFlow(UUID authorizationFlow) {
    this.authorizationFlow = authorizationFlow;
    return this;
  }

  /**
   * Flow used when authorizing this provider.
   * @return authorizationFlow
   */
  @javax.annotation.Nonnull
  public UUID getAuthorizationFlow() {
    return authorizationFlow;
  }

  public void setAuthorizationFlow(UUID authorizationFlow) {
    this.authorizationFlow = authorizationFlow;
  }


  public LDAPProvider propertyMappings(List<UUID> propertyMappings) {
    this.propertyMappings = propertyMappings;
    return this;
  }

  public LDAPProvider addPropertyMappingsItem(UUID propertyMappingsItem) {
    if (this.propertyMappings == null) {
      this.propertyMappings = new ArrayList<>();
    }
    this.propertyMappings.add(propertyMappingsItem);
    return this;
  }

  /**
   * Get propertyMappings
   * @return propertyMappings
   */
  @javax.annotation.Nullable
  public List<UUID> getPropertyMappings() {
    return propertyMappings;
  }

  public void setPropertyMappings(List<UUID> propertyMappings) {
    this.propertyMappings = propertyMappings;
  }


  /**
   * Get object component so that we know how to edit the object
   * @return component
   */
  @javax.annotation.Nonnull
  public String getComponent() {
    return component;
  }



  /**
   * Internal application name, used in URLs.
   * @return assignedApplicationSlug
   */
  @javax.annotation.Nonnull
  public String getAssignedApplicationSlug() {
    return assignedApplicationSlug;
  }



  /**
   * Application&#39;s display Name.
   * @return assignedApplicationName
   */
  @javax.annotation.Nonnull
  public String getAssignedApplicationName() {
    return assignedApplicationName;
  }



  /**
   * Internal application name, used in URLs.
   * @return assignedBackchannelApplicationSlug
   */
  @javax.annotation.Nonnull
  public String getAssignedBackchannelApplicationSlug() {
    return assignedBackchannelApplicationSlug;
  }



  /**
   * Application&#39;s display Name.
   * @return assignedBackchannelApplicationName
   */
  @javax.annotation.Nonnull
  public String getAssignedBackchannelApplicationName() {
    return assignedBackchannelApplicationName;
  }



  /**
   * Return object&#39;s verbose_name
   * @return verboseName
   */
  @javax.annotation.Nonnull
  public String getVerboseName() {
    return verboseName;
  }



  /**
   * Return object&#39;s plural verbose_name
   * @return verboseNamePlural
   */
  @javax.annotation.Nonnull
  public String getVerboseNamePlural() {
    return verboseNamePlural;
  }



  /**
   * Return internal model name
   * @return metaModelName
   */
  @javax.annotation.Nonnull
  public String getMetaModelName() {
    return metaModelName;
  }



  public LDAPProvider baseDn(String baseDn) {
    this.baseDn = baseDn;
    return this;
  }

  /**
   * DN under which objects are accessible.
   * @return baseDn
   */
  @javax.annotation.Nullable
  public String getBaseDn() {
    return baseDn;
  }

  public void setBaseDn(String baseDn) {
    this.baseDn = baseDn;
  }


  public LDAPProvider searchGroup(UUID searchGroup) {
    this.searchGroup = searchGroup;
    return this;
  }

  /**
   * Users in this group can do search queries. If not set, every user can execute search queries.
   * @return searchGroup
   */
  @javax.annotation.Nullable
  public UUID getSearchGroup() {
    return searchGroup;
  }

  public void setSearchGroup(UUID searchGroup) {
    this.searchGroup = searchGroup;
  }


  public LDAPProvider certificate(UUID certificate) {
    this.certificate = certificate;
    return this;
  }

  /**
   * Get certificate
   * @return certificate
   */
  @javax.annotation.Nullable
  public UUID getCertificate() {
    return certificate;
  }

  public void setCertificate(UUID certificate) {
    this.certificate = certificate;
  }


  public LDAPProvider tlsServerName(String tlsServerName) {
    this.tlsServerName = tlsServerName;
    return this;
  }

  /**
   * Get tlsServerName
   * @return tlsServerName
   */
  @javax.annotation.Nullable
  public String getTlsServerName() {
    return tlsServerName;
  }

  public void setTlsServerName(String tlsServerName) {
    this.tlsServerName = tlsServerName;
  }


  public LDAPProvider uidStartNumber(Integer uidStartNumber) {
    this.uidStartNumber = uidStartNumber;
    return this;
  }

  /**
   * The start for uidNumbers, this number is added to the user.pk to make sure that the numbers aren&#39;t too low for POSIX users. Default is 2000 to ensure that we don&#39;t collide with local users uidNumber
   * minimum: -2147483648
   * maximum: 2147483647
   * @return uidStartNumber
   */
  @javax.annotation.Nullable
  public Integer getUidStartNumber() {
    return uidStartNumber;
  }

  public void setUidStartNumber(Integer uidStartNumber) {
    this.uidStartNumber = uidStartNumber;
  }


  public LDAPProvider gidStartNumber(Integer gidStartNumber) {
    this.gidStartNumber = gidStartNumber;
    return this;
  }

  /**
   * The start for gidNumbers, this number is added to a number generated from the group.pk to make sure that the numbers aren&#39;t too low for POSIX groups. Default is 4000 to ensure that we don&#39;t collide with local groups or users primary groups gidNumber
   * minimum: -2147483648
   * maximum: 2147483647
   * @return gidStartNumber
   */
  @javax.annotation.Nullable
  public Integer getGidStartNumber() {
    return gidStartNumber;
  }

  public void setGidStartNumber(Integer gidStartNumber) {
    this.gidStartNumber = gidStartNumber;
  }


  /**
   * Get outpostSet
   * @return outpostSet
   */
  @javax.annotation.Nonnull
  public List<String> getOutpostSet() {
    return outpostSet;
  }



  public LDAPProvider searchMode(LDAPAPIAccessMode searchMode) {
    this.searchMode = searchMode;
    return this;
  }

  /**
   * Get searchMode
   * @return searchMode
   */
  @javax.annotation.Nullable
  public LDAPAPIAccessMode getSearchMode() {
    return searchMode;
  }

  public void setSearchMode(LDAPAPIAccessMode searchMode) {
    this.searchMode = searchMode;
  }


  public LDAPProvider bindMode(LDAPAPIAccessMode bindMode) {
    this.bindMode = bindMode;
    return this;
  }

  /**
   * Get bindMode
   * @return bindMode
   */
  @javax.annotation.Nullable
  public LDAPAPIAccessMode getBindMode() {
    return bindMode;
  }

  public void setBindMode(LDAPAPIAccessMode bindMode) {
    this.bindMode = bindMode;
  }


  public LDAPProvider mfaSupport(Boolean mfaSupport) {
    this.mfaSupport = mfaSupport;
    return this;
  }

  /**
   * When enabled, code-based multi-factor authentication can be used by appending a semicolon and the TOTP code to the password. This should only be enabled if all users that will bind to this provider have a TOTP device configured, as otherwise a password may incorrectly be rejected if it contains a semicolon.
   * @return mfaSupport
   */
  @javax.annotation.Nullable
  public Boolean getMfaSupport() {
    return mfaSupport;
  }

  public void setMfaSupport(Boolean mfaSupport) {
    this.mfaSupport = mfaSupport;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LDAPProvider ldAPProvider = (LDAPProvider) o;
    return Objects.equals(this.pk, ldAPProvider.pk) &&
        Objects.equals(this.name, ldAPProvider.name) &&
        Objects.equals(this.authenticationFlow, ldAPProvider.authenticationFlow) &&
        Objects.equals(this.authorizationFlow, ldAPProvider.authorizationFlow) &&
        Objects.equals(this.propertyMappings, ldAPProvider.propertyMappings) &&
        Objects.equals(this.component, ldAPProvider.component) &&
        Objects.equals(this.assignedApplicationSlug, ldAPProvider.assignedApplicationSlug) &&
        Objects.equals(this.assignedApplicationName, ldAPProvider.assignedApplicationName) &&
        Objects.equals(this.assignedBackchannelApplicationSlug, ldAPProvider.assignedBackchannelApplicationSlug) &&
        Objects.equals(this.assignedBackchannelApplicationName, ldAPProvider.assignedBackchannelApplicationName) &&
        Objects.equals(this.verboseName, ldAPProvider.verboseName) &&
        Objects.equals(this.verboseNamePlural, ldAPProvider.verboseNamePlural) &&
        Objects.equals(this.metaModelName, ldAPProvider.metaModelName) &&
        Objects.equals(this.baseDn, ldAPProvider.baseDn) &&
        Objects.equals(this.searchGroup, ldAPProvider.searchGroup) &&
        Objects.equals(this.certificate, ldAPProvider.certificate) &&
        Objects.equals(this.tlsServerName, ldAPProvider.tlsServerName) &&
        Objects.equals(this.uidStartNumber, ldAPProvider.uidStartNumber) &&
        Objects.equals(this.gidStartNumber, ldAPProvider.gidStartNumber) &&
        Objects.equals(this.outpostSet, ldAPProvider.outpostSet) &&
        Objects.equals(this.searchMode, ldAPProvider.searchMode) &&
        Objects.equals(this.bindMode, ldAPProvider.bindMode) &&
        Objects.equals(this.mfaSupport, ldAPProvider.mfaSupport);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(pk, name, authenticationFlow, authorizationFlow, propertyMappings, component, assignedApplicationSlug, assignedApplicationName, assignedBackchannelApplicationSlug, assignedBackchannelApplicationName, verboseName, verboseNamePlural, metaModelName, baseDn, searchGroup, certificate, tlsServerName, uidStartNumber, gidStartNumber, outpostSet, searchMode, bindMode, mfaSupport);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LDAPProvider {\n");
    sb.append("    pk: ").append(toIndentedString(pk)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    authenticationFlow: ").append(toIndentedString(authenticationFlow)).append("\n");
    sb.append("    authorizationFlow: ").append(toIndentedString(authorizationFlow)).append("\n");
    sb.append("    propertyMappings: ").append(toIndentedString(propertyMappings)).append("\n");
    sb.append("    component: ").append(toIndentedString(component)).append("\n");
    sb.append("    assignedApplicationSlug: ").append(toIndentedString(assignedApplicationSlug)).append("\n");
    sb.append("    assignedApplicationName: ").append(toIndentedString(assignedApplicationName)).append("\n");
    sb.append("    assignedBackchannelApplicationSlug: ").append(toIndentedString(assignedBackchannelApplicationSlug)).append("\n");
    sb.append("    assignedBackchannelApplicationName: ").append(toIndentedString(assignedBackchannelApplicationName)).append("\n");
    sb.append("    verboseName: ").append(toIndentedString(verboseName)).append("\n");
    sb.append("    verboseNamePlural: ").append(toIndentedString(verboseNamePlural)).append("\n");
    sb.append("    metaModelName: ").append(toIndentedString(metaModelName)).append("\n");
    sb.append("    baseDn: ").append(toIndentedString(baseDn)).append("\n");
    sb.append("    searchGroup: ").append(toIndentedString(searchGroup)).append("\n");
    sb.append("    certificate: ").append(toIndentedString(certificate)).append("\n");
    sb.append("    tlsServerName: ").append(toIndentedString(tlsServerName)).append("\n");
    sb.append("    uidStartNumber: ").append(toIndentedString(uidStartNumber)).append("\n");
    sb.append("    gidStartNumber: ").append(toIndentedString(gidStartNumber)).append("\n");
    sb.append("    outpostSet: ").append(toIndentedString(outpostSet)).append("\n");
    sb.append("    searchMode: ").append(toIndentedString(searchMode)).append("\n");
    sb.append("    bindMode: ").append(toIndentedString(bindMode)).append("\n");
    sb.append("    mfaSupport: ").append(toIndentedString(mfaSupport)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pk");
    openapiFields.add("name");
    openapiFields.add("authentication_flow");
    openapiFields.add("authorization_flow");
    openapiFields.add("property_mappings");
    openapiFields.add("component");
    openapiFields.add("assigned_application_slug");
    openapiFields.add("assigned_application_name");
    openapiFields.add("assigned_backchannel_application_slug");
    openapiFields.add("assigned_backchannel_application_name");
    openapiFields.add("verbose_name");
    openapiFields.add("verbose_name_plural");
    openapiFields.add("meta_model_name");
    openapiFields.add("base_dn");
    openapiFields.add("search_group");
    openapiFields.add("certificate");
    openapiFields.add("tls_server_name");
    openapiFields.add("uid_start_number");
    openapiFields.add("gid_start_number");
    openapiFields.add("outpost_set");
    openapiFields.add("search_mode");
    openapiFields.add("bind_mode");
    openapiFields.add("mfa_support");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("pk");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("authorization_flow");
    openapiRequiredFields.add("component");
    openapiRequiredFields.add("assigned_application_slug");
    openapiRequiredFields.add("assigned_application_name");
    openapiRequiredFields.add("assigned_backchannel_application_slug");
    openapiRequiredFields.add("assigned_backchannel_application_name");
    openapiRequiredFields.add("verbose_name");
    openapiRequiredFields.add("verbose_name_plural");
    openapiRequiredFields.add("meta_model_name");
    openapiRequiredFields.add("outpost_set");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LDAPProvider
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LDAPProvider.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LDAPProvider is not found in the empty JSON string", LDAPProvider.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LDAPProvider.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LDAPProvider` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LDAPProvider.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("authentication_flow") != null && !jsonObj.get("authentication_flow").isJsonNull()) && !jsonObj.get("authentication_flow").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authentication_flow` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authentication_flow").toString()));
      }
      if (!jsonObj.get("authorization_flow").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorization_flow` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorization_flow").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("property_mappings") != null && !jsonObj.get("property_mappings").isJsonNull() && !jsonObj.get("property_mappings").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `property_mappings` to be an array in the JSON string but got `%s`", jsonObj.get("property_mappings").toString()));
      }
      if (!jsonObj.get("component").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `component` to be a primitive type in the JSON string but got `%s`", jsonObj.get("component").toString()));
      }
      if (!jsonObj.get("assigned_application_slug").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assigned_application_slug` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assigned_application_slug").toString()));
      }
      if (!jsonObj.get("assigned_application_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assigned_application_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assigned_application_name").toString()));
      }
      if (!jsonObj.get("assigned_backchannel_application_slug").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assigned_backchannel_application_slug` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assigned_backchannel_application_slug").toString()));
      }
      if (!jsonObj.get("assigned_backchannel_application_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assigned_backchannel_application_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assigned_backchannel_application_name").toString()));
      }
      if (!jsonObj.get("verbose_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verbose_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verbose_name").toString()));
      }
      if (!jsonObj.get("verbose_name_plural").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verbose_name_plural` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verbose_name_plural").toString()));
      }
      if (!jsonObj.get("meta_model_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `meta_model_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("meta_model_name").toString()));
      }
      if ((jsonObj.get("base_dn") != null && !jsonObj.get("base_dn").isJsonNull()) && !jsonObj.get("base_dn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `base_dn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("base_dn").toString()));
      }
      if ((jsonObj.get("search_group") != null && !jsonObj.get("search_group").isJsonNull()) && !jsonObj.get("search_group").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `search_group` to be a primitive type in the JSON string but got `%s`", jsonObj.get("search_group").toString()));
      }
      if ((jsonObj.get("certificate") != null && !jsonObj.get("certificate").isJsonNull()) && !jsonObj.get("certificate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `certificate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("certificate").toString()));
      }
      if ((jsonObj.get("tls_server_name") != null && !jsonObj.get("tls_server_name").isJsonNull()) && !jsonObj.get("tls_server_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tls_server_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tls_server_name").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("outpost_set") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("outpost_set").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `outpost_set` to be an array in the JSON string but got `%s`", jsonObj.get("outpost_set").toString()));
      }
      // validate the optional field `search_mode`
      if (jsonObj.get("search_mode") != null && !jsonObj.get("search_mode").isJsonNull()) {
        LDAPAPIAccessMode.validateJsonElement(jsonObj.get("search_mode"));
      }
      // validate the optional field `bind_mode`
      if (jsonObj.get("bind_mode") != null && !jsonObj.get("bind_mode").isJsonNull()) {
        LDAPAPIAccessMode.validateJsonElement(jsonObj.get("bind_mode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LDAPProvider.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LDAPProvider' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LDAPProvider> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LDAPProvider.class));

       return (TypeAdapter<T>) new TypeAdapter<LDAPProvider>() {
           @Override
           public void write(JsonWriter out, LDAPProvider value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LDAPProvider read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LDAPProvider given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LDAPProvider
   * @throws IOException if the JSON string is invalid with respect to LDAPProvider
   */
  public static LDAPProvider fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LDAPProvider.class);
  }

  /**
   * Convert an instance of LDAPProvider to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

