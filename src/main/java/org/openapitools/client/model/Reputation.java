/*
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.6.3
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Reputation Serializer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-25T23:12:57.050901581-03:00[America/Argentina/Cordoba]", comments = "Generator version: 7.8.0")
public class Reputation {
  public static final String SERIALIZED_NAME_PK = "pk";
  @SerializedName(SERIALIZED_NAME_PK)
  private UUID pk;

  public static final String SERIALIZED_NAME_IDENTIFIER = "identifier";
  @SerializedName(SERIALIZED_NAME_IDENTIFIER)
  private String identifier;

  public static final String SERIALIZED_NAME_IP = "ip";
  @SerializedName(SERIALIZED_NAME_IP)
  private String ip;

  public static final String SERIALIZED_NAME_IP_GEO_DATA = "ip_geo_data";
  @SerializedName(SERIALIZED_NAME_IP_GEO_DATA)
  private Object ipGeoData = null;

  public static final String SERIALIZED_NAME_IP_ASN_DATA = "ip_asn_data";
  @SerializedName(SERIALIZED_NAME_IP_ASN_DATA)
  private Object ipAsnData = null;

  public static final String SERIALIZED_NAME_SCORE = "score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  private Long score;

  public static final String SERIALIZED_NAME_UPDATED = "updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private OffsetDateTime updated;

  public Reputation() {
  }

  public Reputation(
     OffsetDateTime updated
  ) {
    this();
    this.updated = updated;
  }

  public Reputation pk(UUID pk) {
    this.pk = pk;
    return this;
  }

  /**
   * Get pk
   * @return pk
   */
  @javax.annotation.Nullable
  public UUID getPk() {
    return pk;
  }

  public void setPk(UUID pk) {
    this.pk = pk;
  }


  public Reputation identifier(String identifier) {
    this.identifier = identifier;
    return this;
  }

  /**
   * Get identifier
   * @return identifier
   */
  @javax.annotation.Nonnull
  public String getIdentifier() {
    return identifier;
  }

  public void setIdentifier(String identifier) {
    this.identifier = identifier;
  }


  public Reputation ip(String ip) {
    this.ip = ip;
    return this;
  }

  /**
   * Get ip
   * @return ip
   */
  @javax.annotation.Nonnull
  public String getIp() {
    return ip;
  }

  public void setIp(String ip) {
    this.ip = ip;
  }


  public Reputation ipGeoData(Object ipGeoData) {
    this.ipGeoData = ipGeoData;
    return this;
  }

  /**
   * Get ipGeoData
   * @return ipGeoData
   */
  @javax.annotation.Nullable
  public Object getIpGeoData() {
    return ipGeoData;
  }

  public void setIpGeoData(Object ipGeoData) {
    this.ipGeoData = ipGeoData;
  }


  public Reputation ipAsnData(Object ipAsnData) {
    this.ipAsnData = ipAsnData;
    return this;
  }

  /**
   * Get ipAsnData
   * @return ipAsnData
   */
  @javax.annotation.Nullable
  public Object getIpAsnData() {
    return ipAsnData;
  }

  public void setIpAsnData(Object ipAsnData) {
    this.ipAsnData = ipAsnData;
  }


  public Reputation score(Long score) {
    this.score = score;
    return this;
  }

  /**
   * Get score
   * minimum: -9223372036854775808
   * maximum: 9223372036854775807
   * @return score
   */
  @javax.annotation.Nullable
  public Long getScore() {
    return score;
  }

  public void setScore(Long score) {
    this.score = score;
  }


  /**
   * Get updated
   * @return updated
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getUpdated() {
    return updated;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Reputation reputation = (Reputation) o;
    return Objects.equals(this.pk, reputation.pk) &&
        Objects.equals(this.identifier, reputation.identifier) &&
        Objects.equals(this.ip, reputation.ip) &&
        Objects.equals(this.ipGeoData, reputation.ipGeoData) &&
        Objects.equals(this.ipAsnData, reputation.ipAsnData) &&
        Objects.equals(this.score, reputation.score) &&
        Objects.equals(this.updated, reputation.updated);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(pk, identifier, ip, ipGeoData, ipAsnData, score, updated);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Reputation {\n");
    sb.append("    pk: ").append(toIndentedString(pk)).append("\n");
    sb.append("    identifier: ").append(toIndentedString(identifier)).append("\n");
    sb.append("    ip: ").append(toIndentedString(ip)).append("\n");
    sb.append("    ipGeoData: ").append(toIndentedString(ipGeoData)).append("\n");
    sb.append("    ipAsnData: ").append(toIndentedString(ipAsnData)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pk");
    openapiFields.add("identifier");
    openapiFields.add("ip");
    openapiFields.add("ip_geo_data");
    openapiFields.add("ip_asn_data");
    openapiFields.add("score");
    openapiFields.add("updated");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("identifier");
    openapiRequiredFields.add("ip");
    openapiRequiredFields.add("updated");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Reputation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Reputation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Reputation is not found in the empty JSON string", Reputation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Reputation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Reputation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Reputation.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("pk") != null && !jsonObj.get("pk").isJsonNull()) && !jsonObj.get("pk").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pk` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pk").toString()));
      }
      if (!jsonObj.get("identifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `identifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("identifier").toString()));
      }
      if (!jsonObj.get("ip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Reputation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Reputation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Reputation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Reputation.class));

       return (TypeAdapter<T>) new TypeAdapter<Reputation>() {
           @Override
           public void write(JsonWriter out, Reputation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Reputation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Reputation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Reputation
   * @throws IOException if the JSON string is invalid with respect to Reputation
   */
  public static Reputation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Reputation.class);
  }

  /**
   * Convert an instance of Reputation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

