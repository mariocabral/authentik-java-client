/*
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.6.3
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Outpost health status
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-25T23:12:57.050901581-03:00[America/Argentina/Cordoba]", comments = "Generator version: 7.8.0")
public class OutpostHealth {
  public static final String SERIALIZED_NAME_UID = "uid";
  @SerializedName(SERIALIZED_NAME_UID)
  private String uid;

  public static final String SERIALIZED_NAME_LAST_SEEN = "last_seen";
  @SerializedName(SERIALIZED_NAME_LAST_SEEN)
  private OffsetDateTime lastSeen;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_GOLANG_VERSION = "golang_version";
  @SerializedName(SERIALIZED_NAME_GOLANG_VERSION)
  private String golangVersion;

  public static final String SERIALIZED_NAME_OPENSSL_ENABLED = "openssl_enabled";
  @SerializedName(SERIALIZED_NAME_OPENSSL_ENABLED)
  private Boolean opensslEnabled;

  public static final String SERIALIZED_NAME_OPENSSL_VERSION = "openssl_version";
  @SerializedName(SERIALIZED_NAME_OPENSSL_VERSION)
  private String opensslVersion;

  public static final String SERIALIZED_NAME_FIPS_ENABLED = "fips_enabled";
  @SerializedName(SERIALIZED_NAME_FIPS_ENABLED)
  private Boolean fipsEnabled;

  public static final String SERIALIZED_NAME_VERSION_SHOULD = "version_should";
  @SerializedName(SERIALIZED_NAME_VERSION_SHOULD)
  private String versionShould;

  public static final String SERIALIZED_NAME_VERSION_OUTDATED = "version_outdated";
  @SerializedName(SERIALIZED_NAME_VERSION_OUTDATED)
  private Boolean versionOutdated;

  public static final String SERIALIZED_NAME_BUILD_HASH = "build_hash";
  @SerializedName(SERIALIZED_NAME_BUILD_HASH)
  private String buildHash;

  public static final String SERIALIZED_NAME_BUILD_HASH_SHOULD = "build_hash_should";
  @SerializedName(SERIALIZED_NAME_BUILD_HASH_SHOULD)
  private String buildHashShould;

  public static final String SERIALIZED_NAME_HOSTNAME = "hostname";
  @SerializedName(SERIALIZED_NAME_HOSTNAME)
  private String hostname;

  public OutpostHealth() {
  }

  public OutpostHealth(
     String uid, 
     OffsetDateTime lastSeen, 
     String version, 
     String golangVersion, 
     Boolean opensslEnabled, 
     String opensslVersion, 
     Boolean fipsEnabled, 
     String versionShould, 
     Boolean versionOutdated, 
     String buildHash, 
     String buildHashShould, 
     String hostname
  ) {
    this();
    this.uid = uid;
    this.lastSeen = lastSeen;
    this.version = version;
    this.golangVersion = golangVersion;
    this.opensslEnabled = opensslEnabled;
    this.opensslVersion = opensslVersion;
    this.fipsEnabled = fipsEnabled;
    this.versionShould = versionShould;
    this.versionOutdated = versionOutdated;
    this.buildHash = buildHash;
    this.buildHashShould = buildHashShould;
    this.hostname = hostname;
  }

  /**
   * Get uid
   * @return uid
   */
  @javax.annotation.Nonnull
  public String getUid() {
    return uid;
  }



  /**
   * Get lastSeen
   * @return lastSeen
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getLastSeen() {
    return lastSeen;
  }



  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nonnull
  public String getVersion() {
    return version;
  }



  /**
   * Get golangVersion
   * @return golangVersion
   */
  @javax.annotation.Nonnull
  public String getGolangVersion() {
    return golangVersion;
  }



  /**
   * Get opensslEnabled
   * @return opensslEnabled
   */
  @javax.annotation.Nonnull
  public Boolean getOpensslEnabled() {
    return opensslEnabled;
  }



  /**
   * Get opensslVersion
   * @return opensslVersion
   */
  @javax.annotation.Nonnull
  public String getOpensslVersion() {
    return opensslVersion;
  }



  /**
   * Get FIPS enabled
   * @return fipsEnabled
   */
  @javax.annotation.Nullable
  public Boolean getFipsEnabled() {
    return fipsEnabled;
  }



  /**
   * Get versionShould
   * @return versionShould
   */
  @javax.annotation.Nonnull
  public String getVersionShould() {
    return versionShould;
  }



  /**
   * Get versionOutdated
   * @return versionOutdated
   */
  @javax.annotation.Nonnull
  public Boolean getVersionOutdated() {
    return versionOutdated;
  }



  /**
   * Get buildHash
   * @return buildHash
   */
  @javax.annotation.Nonnull
  public String getBuildHash() {
    return buildHash;
  }



  /**
   * Get buildHashShould
   * @return buildHashShould
   */
  @javax.annotation.Nonnull
  public String getBuildHashShould() {
    return buildHashShould;
  }



  /**
   * Get hostname
   * @return hostname
   */
  @javax.annotation.Nonnull
  public String getHostname() {
    return hostname;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OutpostHealth outpostHealth = (OutpostHealth) o;
    return Objects.equals(this.uid, outpostHealth.uid) &&
        Objects.equals(this.lastSeen, outpostHealth.lastSeen) &&
        Objects.equals(this.version, outpostHealth.version) &&
        Objects.equals(this.golangVersion, outpostHealth.golangVersion) &&
        Objects.equals(this.opensslEnabled, outpostHealth.opensslEnabled) &&
        Objects.equals(this.opensslVersion, outpostHealth.opensslVersion) &&
        Objects.equals(this.fipsEnabled, outpostHealth.fipsEnabled) &&
        Objects.equals(this.versionShould, outpostHealth.versionShould) &&
        Objects.equals(this.versionOutdated, outpostHealth.versionOutdated) &&
        Objects.equals(this.buildHash, outpostHealth.buildHash) &&
        Objects.equals(this.buildHashShould, outpostHealth.buildHashShould) &&
        Objects.equals(this.hostname, outpostHealth.hostname);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uid, lastSeen, version, golangVersion, opensslEnabled, opensslVersion, fipsEnabled, versionShould, versionOutdated, buildHash, buildHashShould, hostname);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OutpostHealth {\n");
    sb.append("    uid: ").append(toIndentedString(uid)).append("\n");
    sb.append("    lastSeen: ").append(toIndentedString(lastSeen)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    golangVersion: ").append(toIndentedString(golangVersion)).append("\n");
    sb.append("    opensslEnabled: ").append(toIndentedString(opensslEnabled)).append("\n");
    sb.append("    opensslVersion: ").append(toIndentedString(opensslVersion)).append("\n");
    sb.append("    fipsEnabled: ").append(toIndentedString(fipsEnabled)).append("\n");
    sb.append("    versionShould: ").append(toIndentedString(versionShould)).append("\n");
    sb.append("    versionOutdated: ").append(toIndentedString(versionOutdated)).append("\n");
    sb.append("    buildHash: ").append(toIndentedString(buildHash)).append("\n");
    sb.append("    buildHashShould: ").append(toIndentedString(buildHashShould)).append("\n");
    sb.append("    hostname: ").append(toIndentedString(hostname)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("uid");
    openapiFields.add("last_seen");
    openapiFields.add("version");
    openapiFields.add("golang_version");
    openapiFields.add("openssl_enabled");
    openapiFields.add("openssl_version");
    openapiFields.add("fips_enabled");
    openapiFields.add("version_should");
    openapiFields.add("version_outdated");
    openapiFields.add("build_hash");
    openapiFields.add("build_hash_should");
    openapiFields.add("hostname");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("uid");
    openapiRequiredFields.add("last_seen");
    openapiRequiredFields.add("version");
    openapiRequiredFields.add("golang_version");
    openapiRequiredFields.add("openssl_enabled");
    openapiRequiredFields.add("openssl_version");
    openapiRequiredFields.add("fips_enabled");
    openapiRequiredFields.add("version_should");
    openapiRequiredFields.add("version_outdated");
    openapiRequiredFields.add("build_hash");
    openapiRequiredFields.add("build_hash_should");
    openapiRequiredFields.add("hostname");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OutpostHealth
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OutpostHealth.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OutpostHealth is not found in the empty JSON string", OutpostHealth.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OutpostHealth.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OutpostHealth` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OutpostHealth.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("uid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid").toString()));
      }
      if (!jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      if (!jsonObj.get("golang_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `golang_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("golang_version").toString()));
      }
      if (!jsonObj.get("openssl_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `openssl_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("openssl_version").toString()));
      }
      if (!jsonObj.get("version_should").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version_should` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version_should").toString()));
      }
      if (!jsonObj.get("build_hash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `build_hash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("build_hash").toString()));
      }
      if (!jsonObj.get("build_hash_should").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `build_hash_should` to be a primitive type in the JSON string but got `%s`", jsonObj.get("build_hash_should").toString()));
      }
      if (!jsonObj.get("hostname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostname").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OutpostHealth.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OutpostHealth' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OutpostHealth> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OutpostHealth.class));

       return (TypeAdapter<T>) new TypeAdapter<OutpostHealth>() {
           @Override
           public void write(JsonWriter out, OutpostHealth value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OutpostHealth read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OutpostHealth given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OutpostHealth
   * @throws IOException if the JSON string is invalid with respect to OutpostHealth
   */
  public static OutpostHealth fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OutpostHealth.class);
  }

  /**
   * Convert an instance of OutpostHealth to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

