/*
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.6.3
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.FlowSet;
import org.openapitools.client.model.UserFieldsEnum;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IdentificationStage Serializer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-25T23:12:57.050901581-03:00[America/Argentina/Cordoba]", comments = "Generator version: 7.8.0")
public class IdentificationStage {
  public static final String SERIALIZED_NAME_PK = "pk";
  @SerializedName(SERIALIZED_NAME_PK)
  private UUID pk;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_COMPONENT = "component";
  @SerializedName(SERIALIZED_NAME_COMPONENT)
  private String component;

  public static final String SERIALIZED_NAME_VERBOSE_NAME = "verbose_name";
  @SerializedName(SERIALIZED_NAME_VERBOSE_NAME)
  private String verboseName;

  public static final String SERIALIZED_NAME_VERBOSE_NAME_PLURAL = "verbose_name_plural";
  @SerializedName(SERIALIZED_NAME_VERBOSE_NAME_PLURAL)
  private String verboseNamePlural;

  public static final String SERIALIZED_NAME_META_MODEL_NAME = "meta_model_name";
  @SerializedName(SERIALIZED_NAME_META_MODEL_NAME)
  private String metaModelName;

  public static final String SERIALIZED_NAME_FLOW_SET = "flow_set";
  @SerializedName(SERIALIZED_NAME_FLOW_SET)
  private List<FlowSet> flowSet = new ArrayList<>();

  public static final String SERIALIZED_NAME_USER_FIELDS = "user_fields";
  @SerializedName(SERIALIZED_NAME_USER_FIELDS)
  private List<UserFieldsEnum> userFields = new ArrayList<>();

  public static final String SERIALIZED_NAME_PASSWORD_STAGE = "password_stage";
  @SerializedName(SERIALIZED_NAME_PASSWORD_STAGE)
  private UUID passwordStage;

  public static final String SERIALIZED_NAME_CASE_INSENSITIVE_MATCHING = "case_insensitive_matching";
  @SerializedName(SERIALIZED_NAME_CASE_INSENSITIVE_MATCHING)
  private Boolean caseInsensitiveMatching;

  public static final String SERIALIZED_NAME_SHOW_MATCHED_USER = "show_matched_user";
  @SerializedName(SERIALIZED_NAME_SHOW_MATCHED_USER)
  private Boolean showMatchedUser;

  public static final String SERIALIZED_NAME_ENROLLMENT_FLOW = "enrollment_flow";
  @SerializedName(SERIALIZED_NAME_ENROLLMENT_FLOW)
  private UUID enrollmentFlow;

  public static final String SERIALIZED_NAME_RECOVERY_FLOW = "recovery_flow";
  @SerializedName(SERIALIZED_NAME_RECOVERY_FLOW)
  private UUID recoveryFlow;

  public static final String SERIALIZED_NAME_PASSWORDLESS_FLOW = "passwordless_flow";
  @SerializedName(SERIALIZED_NAME_PASSWORDLESS_FLOW)
  private UUID passwordlessFlow;

  public static final String SERIALIZED_NAME_SOURCES = "sources";
  @SerializedName(SERIALIZED_NAME_SOURCES)
  private List<UUID> sources = new ArrayList<>();

  public static final String SERIALIZED_NAME_SHOW_SOURCE_LABELS = "show_source_labels";
  @SerializedName(SERIALIZED_NAME_SHOW_SOURCE_LABELS)
  private Boolean showSourceLabels;

  public static final String SERIALIZED_NAME_PRETEND_USER_EXISTS = "pretend_user_exists";
  @SerializedName(SERIALIZED_NAME_PRETEND_USER_EXISTS)
  private Boolean pretendUserExists;

  public IdentificationStage() {
  }

  public IdentificationStage(
     UUID pk, 
     String component, 
     String verboseName, 
     String verboseNamePlural, 
     String metaModelName
  ) {
    this();
    this.pk = pk;
    this.component = component;
    this.verboseName = verboseName;
    this.verboseNamePlural = verboseNamePlural;
    this.metaModelName = metaModelName;
  }

  /**
   * Get pk
   * @return pk
   */
  @javax.annotation.Nonnull
  public UUID getPk() {
    return pk;
  }



  public IdentificationStage name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  /**
   * Get object type so that we know how to edit the object
   * @return component
   */
  @javax.annotation.Nonnull
  public String getComponent() {
    return component;
  }



  /**
   * Return object&#39;s verbose_name
   * @return verboseName
   */
  @javax.annotation.Nonnull
  public String getVerboseName() {
    return verboseName;
  }



  /**
   * Return object&#39;s plural verbose_name
   * @return verboseNamePlural
   */
  @javax.annotation.Nonnull
  public String getVerboseNamePlural() {
    return verboseNamePlural;
  }



  /**
   * Return internal model name
   * @return metaModelName
   */
  @javax.annotation.Nonnull
  public String getMetaModelName() {
    return metaModelName;
  }



  public IdentificationStage flowSet(List<FlowSet> flowSet) {
    this.flowSet = flowSet;
    return this;
  }

  public IdentificationStage addFlowSetItem(FlowSet flowSetItem) {
    if (this.flowSet == null) {
      this.flowSet = new ArrayList<>();
    }
    this.flowSet.add(flowSetItem);
    return this;
  }

  /**
   * Get flowSet
   * @return flowSet
   */
  @javax.annotation.Nullable
  public List<FlowSet> getFlowSet() {
    return flowSet;
  }

  public void setFlowSet(List<FlowSet> flowSet) {
    this.flowSet = flowSet;
  }


  public IdentificationStage userFields(List<UserFieldsEnum> userFields) {
    this.userFields = userFields;
    return this;
  }

  public IdentificationStage addUserFieldsItem(UserFieldsEnum userFieldsItem) {
    if (this.userFields == null) {
      this.userFields = new ArrayList<>();
    }
    this.userFields.add(userFieldsItem);
    return this;
  }

  /**
   * Fields of the user object to match against. (Hold shift to select multiple options)
   * @return userFields
   */
  @javax.annotation.Nullable
  public List<UserFieldsEnum> getUserFields() {
    return userFields;
  }

  public void setUserFields(List<UserFieldsEnum> userFields) {
    this.userFields = userFields;
  }


  public IdentificationStage passwordStage(UUID passwordStage) {
    this.passwordStage = passwordStage;
    return this;
  }

  /**
   * When set, shows a password field, instead of showing the password field as seaprate step.
   * @return passwordStage
   */
  @javax.annotation.Nullable
  public UUID getPasswordStage() {
    return passwordStage;
  }

  public void setPasswordStage(UUID passwordStage) {
    this.passwordStage = passwordStage;
  }


  public IdentificationStage caseInsensitiveMatching(Boolean caseInsensitiveMatching) {
    this.caseInsensitiveMatching = caseInsensitiveMatching;
    return this;
  }

  /**
   * When enabled, user fields are matched regardless of their casing.
   * @return caseInsensitiveMatching
   */
  @javax.annotation.Nullable
  public Boolean getCaseInsensitiveMatching() {
    return caseInsensitiveMatching;
  }

  public void setCaseInsensitiveMatching(Boolean caseInsensitiveMatching) {
    this.caseInsensitiveMatching = caseInsensitiveMatching;
  }


  public IdentificationStage showMatchedUser(Boolean showMatchedUser) {
    this.showMatchedUser = showMatchedUser;
    return this;
  }

  /**
   * When a valid username/email has been entered, and this option is enabled, the user&#39;s username and avatar will be shown. Otherwise, the text that the user entered will be shown
   * @return showMatchedUser
   */
  @javax.annotation.Nullable
  public Boolean getShowMatchedUser() {
    return showMatchedUser;
  }

  public void setShowMatchedUser(Boolean showMatchedUser) {
    this.showMatchedUser = showMatchedUser;
  }


  public IdentificationStage enrollmentFlow(UUID enrollmentFlow) {
    this.enrollmentFlow = enrollmentFlow;
    return this;
  }

  /**
   * Optional enrollment flow, which is linked at the bottom of the page.
   * @return enrollmentFlow
   */
  @javax.annotation.Nullable
  public UUID getEnrollmentFlow() {
    return enrollmentFlow;
  }

  public void setEnrollmentFlow(UUID enrollmentFlow) {
    this.enrollmentFlow = enrollmentFlow;
  }


  public IdentificationStage recoveryFlow(UUID recoveryFlow) {
    this.recoveryFlow = recoveryFlow;
    return this;
  }

  /**
   * Optional recovery flow, which is linked at the bottom of the page.
   * @return recoveryFlow
   */
  @javax.annotation.Nullable
  public UUID getRecoveryFlow() {
    return recoveryFlow;
  }

  public void setRecoveryFlow(UUID recoveryFlow) {
    this.recoveryFlow = recoveryFlow;
  }


  public IdentificationStage passwordlessFlow(UUID passwordlessFlow) {
    this.passwordlessFlow = passwordlessFlow;
    return this;
  }

  /**
   * Optional passwordless flow, which is linked at the bottom of the page.
   * @return passwordlessFlow
   */
  @javax.annotation.Nullable
  public UUID getPasswordlessFlow() {
    return passwordlessFlow;
  }

  public void setPasswordlessFlow(UUID passwordlessFlow) {
    this.passwordlessFlow = passwordlessFlow;
  }


  public IdentificationStage sources(List<UUID> sources) {
    this.sources = sources;
    return this;
  }

  public IdentificationStage addSourcesItem(UUID sourcesItem) {
    if (this.sources == null) {
      this.sources = new ArrayList<>();
    }
    this.sources.add(sourcesItem);
    return this;
  }

  /**
   * Specify which sources should be shown.
   * @return sources
   */
  @javax.annotation.Nullable
  public List<UUID> getSources() {
    return sources;
  }

  public void setSources(List<UUID> sources) {
    this.sources = sources;
  }


  public IdentificationStage showSourceLabels(Boolean showSourceLabels) {
    this.showSourceLabels = showSourceLabels;
    return this;
  }

  /**
   * Get showSourceLabels
   * @return showSourceLabels
   */
  @javax.annotation.Nullable
  public Boolean getShowSourceLabels() {
    return showSourceLabels;
  }

  public void setShowSourceLabels(Boolean showSourceLabels) {
    this.showSourceLabels = showSourceLabels;
  }


  public IdentificationStage pretendUserExists(Boolean pretendUserExists) {
    this.pretendUserExists = pretendUserExists;
    return this;
  }

  /**
   * When enabled, the stage will succeed and continue even when incorrect user info is entered.
   * @return pretendUserExists
   */
  @javax.annotation.Nullable
  public Boolean getPretendUserExists() {
    return pretendUserExists;
  }

  public void setPretendUserExists(Boolean pretendUserExists) {
    this.pretendUserExists = pretendUserExists;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IdentificationStage identificationStage = (IdentificationStage) o;
    return Objects.equals(this.pk, identificationStage.pk) &&
        Objects.equals(this.name, identificationStage.name) &&
        Objects.equals(this.component, identificationStage.component) &&
        Objects.equals(this.verboseName, identificationStage.verboseName) &&
        Objects.equals(this.verboseNamePlural, identificationStage.verboseNamePlural) &&
        Objects.equals(this.metaModelName, identificationStage.metaModelName) &&
        Objects.equals(this.flowSet, identificationStage.flowSet) &&
        Objects.equals(this.userFields, identificationStage.userFields) &&
        Objects.equals(this.passwordStage, identificationStage.passwordStage) &&
        Objects.equals(this.caseInsensitiveMatching, identificationStage.caseInsensitiveMatching) &&
        Objects.equals(this.showMatchedUser, identificationStage.showMatchedUser) &&
        Objects.equals(this.enrollmentFlow, identificationStage.enrollmentFlow) &&
        Objects.equals(this.recoveryFlow, identificationStage.recoveryFlow) &&
        Objects.equals(this.passwordlessFlow, identificationStage.passwordlessFlow) &&
        Objects.equals(this.sources, identificationStage.sources) &&
        Objects.equals(this.showSourceLabels, identificationStage.showSourceLabels) &&
        Objects.equals(this.pretendUserExists, identificationStage.pretendUserExists);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(pk, name, component, verboseName, verboseNamePlural, metaModelName, flowSet, userFields, passwordStage, caseInsensitiveMatching, showMatchedUser, enrollmentFlow, recoveryFlow, passwordlessFlow, sources, showSourceLabels, pretendUserExists);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IdentificationStage {\n");
    sb.append("    pk: ").append(toIndentedString(pk)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    component: ").append(toIndentedString(component)).append("\n");
    sb.append("    verboseName: ").append(toIndentedString(verboseName)).append("\n");
    sb.append("    verboseNamePlural: ").append(toIndentedString(verboseNamePlural)).append("\n");
    sb.append("    metaModelName: ").append(toIndentedString(metaModelName)).append("\n");
    sb.append("    flowSet: ").append(toIndentedString(flowSet)).append("\n");
    sb.append("    userFields: ").append(toIndentedString(userFields)).append("\n");
    sb.append("    passwordStage: ").append(toIndentedString(passwordStage)).append("\n");
    sb.append("    caseInsensitiveMatching: ").append(toIndentedString(caseInsensitiveMatching)).append("\n");
    sb.append("    showMatchedUser: ").append(toIndentedString(showMatchedUser)).append("\n");
    sb.append("    enrollmentFlow: ").append(toIndentedString(enrollmentFlow)).append("\n");
    sb.append("    recoveryFlow: ").append(toIndentedString(recoveryFlow)).append("\n");
    sb.append("    passwordlessFlow: ").append(toIndentedString(passwordlessFlow)).append("\n");
    sb.append("    sources: ").append(toIndentedString(sources)).append("\n");
    sb.append("    showSourceLabels: ").append(toIndentedString(showSourceLabels)).append("\n");
    sb.append("    pretendUserExists: ").append(toIndentedString(pretendUserExists)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pk");
    openapiFields.add("name");
    openapiFields.add("component");
    openapiFields.add("verbose_name");
    openapiFields.add("verbose_name_plural");
    openapiFields.add("meta_model_name");
    openapiFields.add("flow_set");
    openapiFields.add("user_fields");
    openapiFields.add("password_stage");
    openapiFields.add("case_insensitive_matching");
    openapiFields.add("show_matched_user");
    openapiFields.add("enrollment_flow");
    openapiFields.add("recovery_flow");
    openapiFields.add("passwordless_flow");
    openapiFields.add("sources");
    openapiFields.add("show_source_labels");
    openapiFields.add("pretend_user_exists");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("pk");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("component");
    openapiRequiredFields.add("verbose_name");
    openapiRequiredFields.add("verbose_name_plural");
    openapiRequiredFields.add("meta_model_name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IdentificationStage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IdentificationStage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IdentificationStage is not found in the empty JSON string", IdentificationStage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IdentificationStage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IdentificationStage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : IdentificationStage.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("pk").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pk` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pk").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("component").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `component` to be a primitive type in the JSON string but got `%s`", jsonObj.get("component").toString()));
      }
      if (!jsonObj.get("verbose_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verbose_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verbose_name").toString()));
      }
      if (!jsonObj.get("verbose_name_plural").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verbose_name_plural` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verbose_name_plural").toString()));
      }
      if (!jsonObj.get("meta_model_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `meta_model_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("meta_model_name").toString()));
      }
      if (jsonObj.get("flow_set") != null && !jsonObj.get("flow_set").isJsonNull()) {
        JsonArray jsonArrayflowSet = jsonObj.getAsJsonArray("flow_set");
        if (jsonArrayflowSet != null) {
          // ensure the json data is an array
          if (!jsonObj.get("flow_set").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `flow_set` to be an array in the JSON string but got `%s`", jsonObj.get("flow_set").toString()));
          }

          // validate the optional field `flow_set` (array)
          for (int i = 0; i < jsonArrayflowSet.size(); i++) {
            FlowSet.validateJsonElement(jsonArrayflowSet.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("user_fields") != null && !jsonObj.get("user_fields").isJsonNull() && !jsonObj.get("user_fields").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_fields` to be an array in the JSON string but got `%s`", jsonObj.get("user_fields").toString()));
      }
      if ((jsonObj.get("password_stage") != null && !jsonObj.get("password_stage").isJsonNull()) && !jsonObj.get("password_stage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password_stage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password_stage").toString()));
      }
      if ((jsonObj.get("enrollment_flow") != null && !jsonObj.get("enrollment_flow").isJsonNull()) && !jsonObj.get("enrollment_flow").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enrollment_flow` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enrollment_flow").toString()));
      }
      if ((jsonObj.get("recovery_flow") != null && !jsonObj.get("recovery_flow").isJsonNull()) && !jsonObj.get("recovery_flow").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recovery_flow` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recovery_flow").toString()));
      }
      if ((jsonObj.get("passwordless_flow") != null && !jsonObj.get("passwordless_flow").isJsonNull()) && !jsonObj.get("passwordless_flow").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `passwordless_flow` to be a primitive type in the JSON string but got `%s`", jsonObj.get("passwordless_flow").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sources") != null && !jsonObj.get("sources").isJsonNull() && !jsonObj.get("sources").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sources` to be an array in the JSON string but got `%s`", jsonObj.get("sources").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IdentificationStage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IdentificationStage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IdentificationStage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IdentificationStage.class));

       return (TypeAdapter<T>) new TypeAdapter<IdentificationStage>() {
           @Override
           public void write(JsonWriter out, IdentificationStage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IdentificationStage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IdentificationStage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IdentificationStage
   * @throws IOException if the JSON string is invalid with respect to IdentificationStage
   */
  public static IdentificationStage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IdentificationStage.class);
  }

  /**
   * Convert an instance of IdentificationStage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

