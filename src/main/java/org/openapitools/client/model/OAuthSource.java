/*
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.6.3
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.PolicyEngineMode;
import org.openapitools.client.model.ProviderTypeEnum;
import org.openapitools.client.model.SourceType;
import org.openapitools.client.model.UserMatchingModeEnum;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OAuth Source Serializer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-25T23:12:57.050901581-03:00[America/Argentina/Cordoba]", comments = "Generator version: 7.8.0")
public class OAuthSource {
  public static final String SERIALIZED_NAME_PK = "pk";
  @SerializedName(SERIALIZED_NAME_PK)
  private UUID pk;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SLUG = "slug";
  @SerializedName(SERIALIZED_NAME_SLUG)
  private String slug;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_AUTHENTICATION_FLOW = "authentication_flow";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_FLOW)
  private UUID authenticationFlow;

  public static final String SERIALIZED_NAME_ENROLLMENT_FLOW = "enrollment_flow";
  @SerializedName(SERIALIZED_NAME_ENROLLMENT_FLOW)
  private UUID enrollmentFlow;

  public static final String SERIALIZED_NAME_COMPONENT = "component";
  @SerializedName(SERIALIZED_NAME_COMPONENT)
  private String component;

  public static final String SERIALIZED_NAME_VERBOSE_NAME = "verbose_name";
  @SerializedName(SERIALIZED_NAME_VERBOSE_NAME)
  private String verboseName;

  public static final String SERIALIZED_NAME_VERBOSE_NAME_PLURAL = "verbose_name_plural";
  @SerializedName(SERIALIZED_NAME_VERBOSE_NAME_PLURAL)
  private String verboseNamePlural;

  public static final String SERIALIZED_NAME_META_MODEL_NAME = "meta_model_name";
  @SerializedName(SERIALIZED_NAME_META_MODEL_NAME)
  private String metaModelName;

  public static final String SERIALIZED_NAME_POLICY_ENGINE_MODE = "policy_engine_mode";
  @SerializedName(SERIALIZED_NAME_POLICY_ENGINE_MODE)
  private PolicyEngineMode policyEngineMode;

  public static final String SERIALIZED_NAME_USER_MATCHING_MODE = "user_matching_mode";
  @SerializedName(SERIALIZED_NAME_USER_MATCHING_MODE)
  private UserMatchingModeEnum userMatchingMode;

  public static final String SERIALIZED_NAME_MANAGED = "managed";
  @SerializedName(SERIALIZED_NAME_MANAGED)
  private String managed;

  public static final String SERIALIZED_NAME_USER_PATH_TEMPLATE = "user_path_template";
  @SerializedName(SERIALIZED_NAME_USER_PATH_TEMPLATE)
  private String userPathTemplate;

  public static final String SERIALIZED_NAME_ICON = "icon";
  @SerializedName(SERIALIZED_NAME_ICON)
  private String icon;

  public static final String SERIALIZED_NAME_PROVIDER_TYPE = "provider_type";
  @SerializedName(SERIALIZED_NAME_PROVIDER_TYPE)
  private ProviderTypeEnum providerType;

  public static final String SERIALIZED_NAME_REQUEST_TOKEN_URL = "request_token_url";
  @SerializedName(SERIALIZED_NAME_REQUEST_TOKEN_URL)
  private String requestTokenUrl;

  public static final String SERIALIZED_NAME_AUTHORIZATION_URL = "authorization_url";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_URL)
  private String authorizationUrl;

  public static final String SERIALIZED_NAME_ACCESS_TOKEN_URL = "access_token_url";
  @SerializedName(SERIALIZED_NAME_ACCESS_TOKEN_URL)
  private String accessTokenUrl;

  public static final String SERIALIZED_NAME_PROFILE_URL = "profile_url";
  @SerializedName(SERIALIZED_NAME_PROFILE_URL)
  private String profileUrl;

  public static final String SERIALIZED_NAME_CONSUMER_KEY = "consumer_key";
  @SerializedName(SERIALIZED_NAME_CONSUMER_KEY)
  private String consumerKey;

  public static final String SERIALIZED_NAME_CALLBACK_URL = "callback_url";
  @SerializedName(SERIALIZED_NAME_CALLBACK_URL)
  private String callbackUrl;

  public static final String SERIALIZED_NAME_ADDITIONAL_SCOPES = "additional_scopes";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_SCOPES)
  private String additionalScopes;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private SourceType type;

  public static final String SERIALIZED_NAME_OIDC_WELL_KNOWN_URL = "oidc_well_known_url";
  @SerializedName(SERIALIZED_NAME_OIDC_WELL_KNOWN_URL)
  private String oidcWellKnownUrl;

  public static final String SERIALIZED_NAME_OIDC_JWKS_URL = "oidc_jwks_url";
  @SerializedName(SERIALIZED_NAME_OIDC_JWKS_URL)
  private String oidcJwksUrl;

  public static final String SERIALIZED_NAME_OIDC_JWKS = "oidc_jwks";
  @SerializedName(SERIALIZED_NAME_OIDC_JWKS)
  private Object oidcJwks = null;

  public OAuthSource() {
  }

  public OAuthSource(
     UUID pk, 
     String component, 
     String verboseName, 
     String verboseNamePlural, 
     String metaModelName, 
     String managed, 
     String icon, 
     String callbackUrl, 
     SourceType type
  ) {
    this();
    this.pk = pk;
    this.component = component;
    this.verboseName = verboseName;
    this.verboseNamePlural = verboseNamePlural;
    this.metaModelName = metaModelName;
    this.managed = managed;
    this.icon = icon;
    this.callbackUrl = callbackUrl;
    this.type = type;
  }

  /**
   * Get pk
   * @return pk
   */
  @javax.annotation.Nonnull
  public UUID getPk() {
    return pk;
  }



  public OAuthSource name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Source&#39;s display Name.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public OAuthSource slug(String slug) {
    this.slug = slug;
    return this;
  }

  /**
   * Internal source name, used in URLs.
   * @return slug
   */
  @javax.annotation.Nonnull
  public String getSlug() {
    return slug;
  }

  public void setSlug(String slug) {
    this.slug = slug;
  }


  public OAuthSource enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Get enabled
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public OAuthSource authenticationFlow(UUID authenticationFlow) {
    this.authenticationFlow = authenticationFlow;
    return this;
  }

  /**
   * Flow to use when authenticating existing users.
   * @return authenticationFlow
   */
  @javax.annotation.Nullable
  public UUID getAuthenticationFlow() {
    return authenticationFlow;
  }

  public void setAuthenticationFlow(UUID authenticationFlow) {
    this.authenticationFlow = authenticationFlow;
  }


  public OAuthSource enrollmentFlow(UUID enrollmentFlow) {
    this.enrollmentFlow = enrollmentFlow;
    return this;
  }

  /**
   * Flow to use when enrolling new users.
   * @return enrollmentFlow
   */
  @javax.annotation.Nullable
  public UUID getEnrollmentFlow() {
    return enrollmentFlow;
  }

  public void setEnrollmentFlow(UUID enrollmentFlow) {
    this.enrollmentFlow = enrollmentFlow;
  }


  /**
   * Get object component so that we know how to edit the object
   * @return component
   */
  @javax.annotation.Nonnull
  public String getComponent() {
    return component;
  }



  /**
   * Return object&#39;s verbose_name
   * @return verboseName
   */
  @javax.annotation.Nonnull
  public String getVerboseName() {
    return verboseName;
  }



  /**
   * Return object&#39;s plural verbose_name
   * @return verboseNamePlural
   */
  @javax.annotation.Nonnull
  public String getVerboseNamePlural() {
    return verboseNamePlural;
  }



  /**
   * Return internal model name
   * @return metaModelName
   */
  @javax.annotation.Nonnull
  public String getMetaModelName() {
    return metaModelName;
  }



  public OAuthSource policyEngineMode(PolicyEngineMode policyEngineMode) {
    this.policyEngineMode = policyEngineMode;
    return this;
  }

  /**
   * Get policyEngineMode
   * @return policyEngineMode
   */
  @javax.annotation.Nullable
  public PolicyEngineMode getPolicyEngineMode() {
    return policyEngineMode;
  }

  public void setPolicyEngineMode(PolicyEngineMode policyEngineMode) {
    this.policyEngineMode = policyEngineMode;
  }


  public OAuthSource userMatchingMode(UserMatchingModeEnum userMatchingMode) {
    this.userMatchingMode = userMatchingMode;
    return this;
  }

  /**
   * How the source determines if an existing user should be authenticated or a new user enrolled.
   * @return userMatchingMode
   */
  @javax.annotation.Nullable
  public UserMatchingModeEnum getUserMatchingMode() {
    return userMatchingMode;
  }

  public void setUserMatchingMode(UserMatchingModeEnum userMatchingMode) {
    this.userMatchingMode = userMatchingMode;
  }


  /**
   * Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
   * @return managed
   */
  @javax.annotation.Nullable
  public String getManaged() {
    return managed;
  }



  public OAuthSource userPathTemplate(String userPathTemplate) {
    this.userPathTemplate = userPathTemplate;
    return this;
  }

  /**
   * Get userPathTemplate
   * @return userPathTemplate
   */
  @javax.annotation.Nullable
  public String getUserPathTemplate() {
    return userPathTemplate;
  }

  public void setUserPathTemplate(String userPathTemplate) {
    this.userPathTemplate = userPathTemplate;
  }


  /**
   * Get icon
   * @return icon
   */
  @javax.annotation.Nullable
  public String getIcon() {
    return icon;
  }



  public OAuthSource providerType(ProviderTypeEnum providerType) {
    this.providerType = providerType;
    return this;
  }

  /**
   * Get providerType
   * @return providerType
   */
  @javax.annotation.Nonnull
  public ProviderTypeEnum getProviderType() {
    return providerType;
  }

  public void setProviderType(ProviderTypeEnum providerType) {
    this.providerType = providerType;
  }


  public OAuthSource requestTokenUrl(String requestTokenUrl) {
    this.requestTokenUrl = requestTokenUrl;
    return this;
  }

  /**
   * URL used to request the initial token. This URL is only required for OAuth 1.
   * @return requestTokenUrl
   */
  @javax.annotation.Nullable
  public String getRequestTokenUrl() {
    return requestTokenUrl;
  }

  public void setRequestTokenUrl(String requestTokenUrl) {
    this.requestTokenUrl = requestTokenUrl;
  }


  public OAuthSource authorizationUrl(String authorizationUrl) {
    this.authorizationUrl = authorizationUrl;
    return this;
  }

  /**
   * URL the user is redirect to to conest the flow.
   * @return authorizationUrl
   */
  @javax.annotation.Nullable
  public String getAuthorizationUrl() {
    return authorizationUrl;
  }

  public void setAuthorizationUrl(String authorizationUrl) {
    this.authorizationUrl = authorizationUrl;
  }


  public OAuthSource accessTokenUrl(String accessTokenUrl) {
    this.accessTokenUrl = accessTokenUrl;
    return this;
  }

  /**
   * URL used by authentik to retrieve tokens.
   * @return accessTokenUrl
   */
  @javax.annotation.Nullable
  public String getAccessTokenUrl() {
    return accessTokenUrl;
  }

  public void setAccessTokenUrl(String accessTokenUrl) {
    this.accessTokenUrl = accessTokenUrl;
  }


  public OAuthSource profileUrl(String profileUrl) {
    this.profileUrl = profileUrl;
    return this;
  }

  /**
   * URL used by authentik to get user information.
   * @return profileUrl
   */
  @javax.annotation.Nullable
  public String getProfileUrl() {
    return profileUrl;
  }

  public void setProfileUrl(String profileUrl) {
    this.profileUrl = profileUrl;
  }


  public OAuthSource consumerKey(String consumerKey) {
    this.consumerKey = consumerKey;
    return this;
  }

  /**
   * Get consumerKey
   * @return consumerKey
   */
  @javax.annotation.Nonnull
  public String getConsumerKey() {
    return consumerKey;
  }

  public void setConsumerKey(String consumerKey) {
    this.consumerKey = consumerKey;
  }


  /**
   * Get OAuth Callback URL
   * @return callbackUrl
   */
  @javax.annotation.Nonnull
  public String getCallbackUrl() {
    return callbackUrl;
  }



  public OAuthSource additionalScopes(String additionalScopes) {
    this.additionalScopes = additionalScopes;
    return this;
  }

  /**
   * Get additionalScopes
   * @return additionalScopes
   */
  @javax.annotation.Nullable
  public String getAdditionalScopes() {
    return additionalScopes;
  }

  public void setAdditionalScopes(String additionalScopes) {
    this.additionalScopes = additionalScopes;
  }


  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public SourceType getType() {
    return type;
  }



  public OAuthSource oidcWellKnownUrl(String oidcWellKnownUrl) {
    this.oidcWellKnownUrl = oidcWellKnownUrl;
    return this;
  }

  /**
   * Get oidcWellKnownUrl
   * @return oidcWellKnownUrl
   */
  @javax.annotation.Nullable
  public String getOidcWellKnownUrl() {
    return oidcWellKnownUrl;
  }

  public void setOidcWellKnownUrl(String oidcWellKnownUrl) {
    this.oidcWellKnownUrl = oidcWellKnownUrl;
  }


  public OAuthSource oidcJwksUrl(String oidcJwksUrl) {
    this.oidcJwksUrl = oidcJwksUrl;
    return this;
  }

  /**
   * Get oidcJwksUrl
   * @return oidcJwksUrl
   */
  @javax.annotation.Nullable
  public String getOidcJwksUrl() {
    return oidcJwksUrl;
  }

  public void setOidcJwksUrl(String oidcJwksUrl) {
    this.oidcJwksUrl = oidcJwksUrl;
  }


  public OAuthSource oidcJwks(Object oidcJwks) {
    this.oidcJwks = oidcJwks;
    return this;
  }

  /**
   * Get oidcJwks
   * @return oidcJwks
   */
  @javax.annotation.Nullable
  public Object getOidcJwks() {
    return oidcJwks;
  }

  public void setOidcJwks(Object oidcJwks) {
    this.oidcJwks = oidcJwks;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OAuthSource oauthSource = (OAuthSource) o;
    return Objects.equals(this.pk, oauthSource.pk) &&
        Objects.equals(this.name, oauthSource.name) &&
        Objects.equals(this.slug, oauthSource.slug) &&
        Objects.equals(this.enabled, oauthSource.enabled) &&
        Objects.equals(this.authenticationFlow, oauthSource.authenticationFlow) &&
        Objects.equals(this.enrollmentFlow, oauthSource.enrollmentFlow) &&
        Objects.equals(this.component, oauthSource.component) &&
        Objects.equals(this.verboseName, oauthSource.verboseName) &&
        Objects.equals(this.verboseNamePlural, oauthSource.verboseNamePlural) &&
        Objects.equals(this.metaModelName, oauthSource.metaModelName) &&
        Objects.equals(this.policyEngineMode, oauthSource.policyEngineMode) &&
        Objects.equals(this.userMatchingMode, oauthSource.userMatchingMode) &&
        Objects.equals(this.managed, oauthSource.managed) &&
        Objects.equals(this.userPathTemplate, oauthSource.userPathTemplate) &&
        Objects.equals(this.icon, oauthSource.icon) &&
        Objects.equals(this.providerType, oauthSource.providerType) &&
        Objects.equals(this.requestTokenUrl, oauthSource.requestTokenUrl) &&
        Objects.equals(this.authorizationUrl, oauthSource.authorizationUrl) &&
        Objects.equals(this.accessTokenUrl, oauthSource.accessTokenUrl) &&
        Objects.equals(this.profileUrl, oauthSource.profileUrl) &&
        Objects.equals(this.consumerKey, oauthSource.consumerKey) &&
        Objects.equals(this.callbackUrl, oauthSource.callbackUrl) &&
        Objects.equals(this.additionalScopes, oauthSource.additionalScopes) &&
        Objects.equals(this.type, oauthSource.type) &&
        Objects.equals(this.oidcWellKnownUrl, oauthSource.oidcWellKnownUrl) &&
        Objects.equals(this.oidcJwksUrl, oauthSource.oidcJwksUrl) &&
        Objects.equals(this.oidcJwks, oauthSource.oidcJwks);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(pk, name, slug, enabled, authenticationFlow, enrollmentFlow, component, verboseName, verboseNamePlural, metaModelName, policyEngineMode, userMatchingMode, managed, userPathTemplate, icon, providerType, requestTokenUrl, authorizationUrl, accessTokenUrl, profileUrl, consumerKey, callbackUrl, additionalScopes, type, oidcWellKnownUrl, oidcJwksUrl, oidcJwks);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OAuthSource {\n");
    sb.append("    pk: ").append(toIndentedString(pk)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    slug: ").append(toIndentedString(slug)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    authenticationFlow: ").append(toIndentedString(authenticationFlow)).append("\n");
    sb.append("    enrollmentFlow: ").append(toIndentedString(enrollmentFlow)).append("\n");
    sb.append("    component: ").append(toIndentedString(component)).append("\n");
    sb.append("    verboseName: ").append(toIndentedString(verboseName)).append("\n");
    sb.append("    verboseNamePlural: ").append(toIndentedString(verboseNamePlural)).append("\n");
    sb.append("    metaModelName: ").append(toIndentedString(metaModelName)).append("\n");
    sb.append("    policyEngineMode: ").append(toIndentedString(policyEngineMode)).append("\n");
    sb.append("    userMatchingMode: ").append(toIndentedString(userMatchingMode)).append("\n");
    sb.append("    managed: ").append(toIndentedString(managed)).append("\n");
    sb.append("    userPathTemplate: ").append(toIndentedString(userPathTemplate)).append("\n");
    sb.append("    icon: ").append(toIndentedString(icon)).append("\n");
    sb.append("    providerType: ").append(toIndentedString(providerType)).append("\n");
    sb.append("    requestTokenUrl: ").append(toIndentedString(requestTokenUrl)).append("\n");
    sb.append("    authorizationUrl: ").append(toIndentedString(authorizationUrl)).append("\n");
    sb.append("    accessTokenUrl: ").append(toIndentedString(accessTokenUrl)).append("\n");
    sb.append("    profileUrl: ").append(toIndentedString(profileUrl)).append("\n");
    sb.append("    consumerKey: ").append(toIndentedString(consumerKey)).append("\n");
    sb.append("    callbackUrl: ").append(toIndentedString(callbackUrl)).append("\n");
    sb.append("    additionalScopes: ").append(toIndentedString(additionalScopes)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    oidcWellKnownUrl: ").append(toIndentedString(oidcWellKnownUrl)).append("\n");
    sb.append("    oidcJwksUrl: ").append(toIndentedString(oidcJwksUrl)).append("\n");
    sb.append("    oidcJwks: ").append(toIndentedString(oidcJwks)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pk");
    openapiFields.add("name");
    openapiFields.add("slug");
    openapiFields.add("enabled");
    openapiFields.add("authentication_flow");
    openapiFields.add("enrollment_flow");
    openapiFields.add("component");
    openapiFields.add("verbose_name");
    openapiFields.add("verbose_name_plural");
    openapiFields.add("meta_model_name");
    openapiFields.add("policy_engine_mode");
    openapiFields.add("user_matching_mode");
    openapiFields.add("managed");
    openapiFields.add("user_path_template");
    openapiFields.add("icon");
    openapiFields.add("provider_type");
    openapiFields.add("request_token_url");
    openapiFields.add("authorization_url");
    openapiFields.add("access_token_url");
    openapiFields.add("profile_url");
    openapiFields.add("consumer_key");
    openapiFields.add("callback_url");
    openapiFields.add("additional_scopes");
    openapiFields.add("type");
    openapiFields.add("oidc_well_known_url");
    openapiFields.add("oidc_jwks_url");
    openapiFields.add("oidc_jwks");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("pk");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("slug");
    openapiRequiredFields.add("component");
    openapiRequiredFields.add("verbose_name");
    openapiRequiredFields.add("verbose_name_plural");
    openapiRequiredFields.add("meta_model_name");
    openapiRequiredFields.add("managed");
    openapiRequiredFields.add("icon");
    openapiRequiredFields.add("provider_type");
    openapiRequiredFields.add("consumer_key");
    openapiRequiredFields.add("callback_url");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OAuthSource
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OAuthSource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OAuthSource is not found in the empty JSON string", OAuthSource.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OAuthSource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OAuthSource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OAuthSource.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("pk").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pk` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pk").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("slug").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slug` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slug").toString()));
      }
      if ((jsonObj.get("authentication_flow") != null && !jsonObj.get("authentication_flow").isJsonNull()) && !jsonObj.get("authentication_flow").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authentication_flow` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authentication_flow").toString()));
      }
      if ((jsonObj.get("enrollment_flow") != null && !jsonObj.get("enrollment_flow").isJsonNull()) && !jsonObj.get("enrollment_flow").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enrollment_flow` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enrollment_flow").toString()));
      }
      if (!jsonObj.get("component").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `component` to be a primitive type in the JSON string but got `%s`", jsonObj.get("component").toString()));
      }
      if (!jsonObj.get("verbose_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verbose_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verbose_name").toString()));
      }
      if (!jsonObj.get("verbose_name_plural").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verbose_name_plural` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verbose_name_plural").toString()));
      }
      if (!jsonObj.get("meta_model_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `meta_model_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("meta_model_name").toString()));
      }
      // validate the optional field `policy_engine_mode`
      if (jsonObj.get("policy_engine_mode") != null && !jsonObj.get("policy_engine_mode").isJsonNull()) {
        PolicyEngineMode.validateJsonElement(jsonObj.get("policy_engine_mode"));
      }
      // validate the optional field `user_matching_mode`
      if (jsonObj.get("user_matching_mode") != null && !jsonObj.get("user_matching_mode").isJsonNull()) {
        UserMatchingModeEnum.validateJsonElement(jsonObj.get("user_matching_mode"));
      }
      if ((jsonObj.get("managed") != null && !jsonObj.get("managed").isJsonNull()) && !jsonObj.get("managed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `managed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("managed").toString()));
      }
      if ((jsonObj.get("user_path_template") != null && !jsonObj.get("user_path_template").isJsonNull()) && !jsonObj.get("user_path_template").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_path_template` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_path_template").toString()));
      }
      if ((jsonObj.get("icon") != null && !jsonObj.get("icon").isJsonNull()) && !jsonObj.get("icon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `icon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("icon").toString()));
      }
      // validate the required field `provider_type`
      ProviderTypeEnum.validateJsonElement(jsonObj.get("provider_type"));
      if ((jsonObj.get("request_token_url") != null && !jsonObj.get("request_token_url").isJsonNull()) && !jsonObj.get("request_token_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `request_token_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("request_token_url").toString()));
      }
      if ((jsonObj.get("authorization_url") != null && !jsonObj.get("authorization_url").isJsonNull()) && !jsonObj.get("authorization_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorization_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorization_url").toString()));
      }
      if ((jsonObj.get("access_token_url") != null && !jsonObj.get("access_token_url").isJsonNull()) && !jsonObj.get("access_token_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `access_token_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("access_token_url").toString()));
      }
      if ((jsonObj.get("profile_url") != null && !jsonObj.get("profile_url").isJsonNull()) && !jsonObj.get("profile_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `profile_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("profile_url").toString()));
      }
      if (!jsonObj.get("consumer_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `consumer_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("consumer_key").toString()));
      }
      if (!jsonObj.get("callback_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `callback_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("callback_url").toString()));
      }
      if ((jsonObj.get("additional_scopes") != null && !jsonObj.get("additional_scopes").isJsonNull()) && !jsonObj.get("additional_scopes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additional_scopes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additional_scopes").toString()));
      }
      // validate the required field `type`
      SourceType.validateJsonElement(jsonObj.get("type"));
      if ((jsonObj.get("oidc_well_known_url") != null && !jsonObj.get("oidc_well_known_url").isJsonNull()) && !jsonObj.get("oidc_well_known_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oidc_well_known_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oidc_well_known_url").toString()));
      }
      if ((jsonObj.get("oidc_jwks_url") != null && !jsonObj.get("oidc_jwks_url").isJsonNull()) && !jsonObj.get("oidc_jwks_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oidc_jwks_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oidc_jwks_url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OAuthSource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OAuthSource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OAuthSource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OAuthSource.class));

       return (TypeAdapter<T>) new TypeAdapter<OAuthSource>() {
           @Override
           public void write(JsonWriter out, OAuthSource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OAuthSource read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OAuthSource given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OAuthSource
   * @throws IOException if the JSON string is invalid with respect to OAuthSource
   */
  public static OAuthSource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OAuthSource.class);
  }

  /**
   * Convert an instance of OAuthSource to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

