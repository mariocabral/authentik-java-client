/*
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.6.3
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.FlowSetRequest;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AuthenticatorDuoStage Serializer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-25T23:12:57.050901581-03:00[America/Argentina/Cordoba]", comments = "Generator version: 7.8.0")
public class PatchedAuthenticatorDuoStageRequest {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_FLOW_SET = "flow_set";
  @SerializedName(SERIALIZED_NAME_FLOW_SET)
  private List<FlowSetRequest> flowSet = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONFIGURE_FLOW = "configure_flow";
  @SerializedName(SERIALIZED_NAME_CONFIGURE_FLOW)
  private UUID configureFlow;

  public static final String SERIALIZED_NAME_FRIENDLY_NAME = "friendly_name";
  @SerializedName(SERIALIZED_NAME_FRIENDLY_NAME)
  private String friendlyName;

  public static final String SERIALIZED_NAME_CLIENT_ID = "client_id";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  private String clientId;

  public static final String SERIALIZED_NAME_CLIENT_SECRET = "client_secret";
  @SerializedName(SERIALIZED_NAME_CLIENT_SECRET)
  private String clientSecret;

  public static final String SERIALIZED_NAME_API_HOSTNAME = "api_hostname";
  @SerializedName(SERIALIZED_NAME_API_HOSTNAME)
  private String apiHostname;

  public static final String SERIALIZED_NAME_ADMIN_INTEGRATION_KEY = "admin_integration_key";
  @SerializedName(SERIALIZED_NAME_ADMIN_INTEGRATION_KEY)
  private String adminIntegrationKey;

  public static final String SERIALIZED_NAME_ADMIN_SECRET_KEY = "admin_secret_key";
  @SerializedName(SERIALIZED_NAME_ADMIN_SECRET_KEY)
  private String adminSecretKey;

  public PatchedAuthenticatorDuoStageRequest() {
  }

  public PatchedAuthenticatorDuoStageRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public PatchedAuthenticatorDuoStageRequest flowSet(List<FlowSetRequest> flowSet) {
    this.flowSet = flowSet;
    return this;
  }

  public PatchedAuthenticatorDuoStageRequest addFlowSetItem(FlowSetRequest flowSetItem) {
    if (this.flowSet == null) {
      this.flowSet = new ArrayList<>();
    }
    this.flowSet.add(flowSetItem);
    return this;
  }

  /**
   * Get flowSet
   * @return flowSet
   */
  @javax.annotation.Nullable
  public List<FlowSetRequest> getFlowSet() {
    return flowSet;
  }

  public void setFlowSet(List<FlowSetRequest> flowSet) {
    this.flowSet = flowSet;
  }


  public PatchedAuthenticatorDuoStageRequest configureFlow(UUID configureFlow) {
    this.configureFlow = configureFlow;
    return this;
  }

  /**
   * Flow used by an authenticated user to configure this Stage. If empty, user will not be able to configure this stage.
   * @return configureFlow
   */
  @javax.annotation.Nullable
  public UUID getConfigureFlow() {
    return configureFlow;
  }

  public void setConfigureFlow(UUID configureFlow) {
    this.configureFlow = configureFlow;
  }


  public PatchedAuthenticatorDuoStageRequest friendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
    return this;
  }

  /**
   * Get friendlyName
   * @return friendlyName
   */
  @javax.annotation.Nullable
  public String getFriendlyName() {
    return friendlyName;
  }

  public void setFriendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
  }


  public PatchedAuthenticatorDuoStageRequest clientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  /**
   * Get clientId
   * @return clientId
   */
  @javax.annotation.Nullable
  public String getClientId() {
    return clientId;
  }

  public void setClientId(String clientId) {
    this.clientId = clientId;
  }


  public PatchedAuthenticatorDuoStageRequest clientSecret(String clientSecret) {
    this.clientSecret = clientSecret;
    return this;
  }

  /**
   * Get clientSecret
   * @return clientSecret
   */
  @javax.annotation.Nullable
  public String getClientSecret() {
    return clientSecret;
  }

  public void setClientSecret(String clientSecret) {
    this.clientSecret = clientSecret;
  }


  public PatchedAuthenticatorDuoStageRequest apiHostname(String apiHostname) {
    this.apiHostname = apiHostname;
    return this;
  }

  /**
   * Get apiHostname
   * @return apiHostname
   */
  @javax.annotation.Nullable
  public String getApiHostname() {
    return apiHostname;
  }

  public void setApiHostname(String apiHostname) {
    this.apiHostname = apiHostname;
  }


  public PatchedAuthenticatorDuoStageRequest adminIntegrationKey(String adminIntegrationKey) {
    this.adminIntegrationKey = adminIntegrationKey;
    return this;
  }

  /**
   * Get adminIntegrationKey
   * @return adminIntegrationKey
   */
  @javax.annotation.Nullable
  public String getAdminIntegrationKey() {
    return adminIntegrationKey;
  }

  public void setAdminIntegrationKey(String adminIntegrationKey) {
    this.adminIntegrationKey = adminIntegrationKey;
  }


  public PatchedAuthenticatorDuoStageRequest adminSecretKey(String adminSecretKey) {
    this.adminSecretKey = adminSecretKey;
    return this;
  }

  /**
   * Get adminSecretKey
   * @return adminSecretKey
   */
  @javax.annotation.Nullable
  public String getAdminSecretKey() {
    return adminSecretKey;
  }

  public void setAdminSecretKey(String adminSecretKey) {
    this.adminSecretKey = adminSecretKey;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PatchedAuthenticatorDuoStageRequest patchedAuthenticatorDuoStageRequest = (PatchedAuthenticatorDuoStageRequest) o;
    return Objects.equals(this.name, patchedAuthenticatorDuoStageRequest.name) &&
        Objects.equals(this.flowSet, patchedAuthenticatorDuoStageRequest.flowSet) &&
        Objects.equals(this.configureFlow, patchedAuthenticatorDuoStageRequest.configureFlow) &&
        Objects.equals(this.friendlyName, patchedAuthenticatorDuoStageRequest.friendlyName) &&
        Objects.equals(this.clientId, patchedAuthenticatorDuoStageRequest.clientId) &&
        Objects.equals(this.clientSecret, patchedAuthenticatorDuoStageRequest.clientSecret) &&
        Objects.equals(this.apiHostname, patchedAuthenticatorDuoStageRequest.apiHostname) &&
        Objects.equals(this.adminIntegrationKey, patchedAuthenticatorDuoStageRequest.adminIntegrationKey) &&
        Objects.equals(this.adminSecretKey, patchedAuthenticatorDuoStageRequest.adminSecretKey);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, flowSet, configureFlow, friendlyName, clientId, clientSecret, apiHostname, adminIntegrationKey, adminSecretKey);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PatchedAuthenticatorDuoStageRequest {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    flowSet: ").append(toIndentedString(flowSet)).append("\n");
    sb.append("    configureFlow: ").append(toIndentedString(configureFlow)).append("\n");
    sb.append("    friendlyName: ").append(toIndentedString(friendlyName)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    clientSecret: ").append(toIndentedString(clientSecret)).append("\n");
    sb.append("    apiHostname: ").append(toIndentedString(apiHostname)).append("\n");
    sb.append("    adminIntegrationKey: ").append(toIndentedString(adminIntegrationKey)).append("\n");
    sb.append("    adminSecretKey: ").append(toIndentedString(adminSecretKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("flow_set");
    openapiFields.add("configure_flow");
    openapiFields.add("friendly_name");
    openapiFields.add("client_id");
    openapiFields.add("client_secret");
    openapiFields.add("api_hostname");
    openapiFields.add("admin_integration_key");
    openapiFields.add("admin_secret_key");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PatchedAuthenticatorDuoStageRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PatchedAuthenticatorDuoStageRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PatchedAuthenticatorDuoStageRequest is not found in the empty JSON string", PatchedAuthenticatorDuoStageRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PatchedAuthenticatorDuoStageRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PatchedAuthenticatorDuoStageRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("flow_set") != null && !jsonObj.get("flow_set").isJsonNull()) {
        JsonArray jsonArrayflowSet = jsonObj.getAsJsonArray("flow_set");
        if (jsonArrayflowSet != null) {
          // ensure the json data is an array
          if (!jsonObj.get("flow_set").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `flow_set` to be an array in the JSON string but got `%s`", jsonObj.get("flow_set").toString()));
          }

          // validate the optional field `flow_set` (array)
          for (int i = 0; i < jsonArrayflowSet.size(); i++) {
            FlowSetRequest.validateJsonElement(jsonArrayflowSet.get(i));
          };
        }
      }
      if ((jsonObj.get("configure_flow") != null && !jsonObj.get("configure_flow").isJsonNull()) && !jsonObj.get("configure_flow").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `configure_flow` to be a primitive type in the JSON string but got `%s`", jsonObj.get("configure_flow").toString()));
      }
      if ((jsonObj.get("friendly_name") != null && !jsonObj.get("friendly_name").isJsonNull()) && !jsonObj.get("friendly_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `friendly_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("friendly_name").toString()));
      }
      if ((jsonObj.get("client_id") != null && !jsonObj.get("client_id").isJsonNull()) && !jsonObj.get("client_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_id").toString()));
      }
      if ((jsonObj.get("client_secret") != null && !jsonObj.get("client_secret").isJsonNull()) && !jsonObj.get("client_secret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_secret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_secret").toString()));
      }
      if ((jsonObj.get("api_hostname") != null && !jsonObj.get("api_hostname").isJsonNull()) && !jsonObj.get("api_hostname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `api_hostname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("api_hostname").toString()));
      }
      if ((jsonObj.get("admin_integration_key") != null && !jsonObj.get("admin_integration_key").isJsonNull()) && !jsonObj.get("admin_integration_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `admin_integration_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("admin_integration_key").toString()));
      }
      if ((jsonObj.get("admin_secret_key") != null && !jsonObj.get("admin_secret_key").isJsonNull()) && !jsonObj.get("admin_secret_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `admin_secret_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("admin_secret_key").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PatchedAuthenticatorDuoStageRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PatchedAuthenticatorDuoStageRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PatchedAuthenticatorDuoStageRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PatchedAuthenticatorDuoStageRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PatchedAuthenticatorDuoStageRequest>() {
           @Override
           public void write(JsonWriter out, PatchedAuthenticatorDuoStageRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PatchedAuthenticatorDuoStageRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PatchedAuthenticatorDuoStageRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PatchedAuthenticatorDuoStageRequest
   * @throws IOException if the JSON string is invalid with respect to PatchedAuthenticatorDuoStageRequest
   */
  public static PatchedAuthenticatorDuoStageRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PatchedAuthenticatorDuoStageRequest.class);
  }

  /**
   * Convert an instance of PatchedAuthenticatorDuoStageRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

