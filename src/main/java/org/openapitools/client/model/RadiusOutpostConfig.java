/*
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.6.3
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RadiusProvider Serializer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-25T23:12:57.050901581-03:00[America/Argentina/Cordoba]", comments = "Generator version: 7.8.0")
public class RadiusOutpostConfig {
  public static final String SERIALIZED_NAME_PK = "pk";
  @SerializedName(SERIALIZED_NAME_PK)
  private Integer pk;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_APPLICATION_SLUG = "application_slug";
  @SerializedName(SERIALIZED_NAME_APPLICATION_SLUG)
  private String applicationSlug;

  public static final String SERIALIZED_NAME_AUTH_FLOW_SLUG = "auth_flow_slug";
  @SerializedName(SERIALIZED_NAME_AUTH_FLOW_SLUG)
  private String authFlowSlug;

  public static final String SERIALIZED_NAME_CLIENT_NETWORKS = "client_networks";
  @SerializedName(SERIALIZED_NAME_CLIENT_NETWORKS)
  private String clientNetworks;

  public static final String SERIALIZED_NAME_SHARED_SECRET = "shared_secret";
  @SerializedName(SERIALIZED_NAME_SHARED_SECRET)
  private String sharedSecret;

  public static final String SERIALIZED_NAME_MFA_SUPPORT = "mfa_support";
  @SerializedName(SERIALIZED_NAME_MFA_SUPPORT)
  private Boolean mfaSupport;

  public RadiusOutpostConfig() {
  }

  public RadiusOutpostConfig(
     Integer pk
  ) {
    this();
    this.pk = pk;
  }

  /**
   * Get pk
   * @return pk
   */
  @javax.annotation.Nonnull
  public Integer getPk() {
    return pk;
  }



  public RadiusOutpostConfig name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public RadiusOutpostConfig applicationSlug(String applicationSlug) {
    this.applicationSlug = applicationSlug;
    return this;
  }

  /**
   * Get applicationSlug
   * @return applicationSlug
   */
  @javax.annotation.Nonnull
  public String getApplicationSlug() {
    return applicationSlug;
  }

  public void setApplicationSlug(String applicationSlug) {
    this.applicationSlug = applicationSlug;
  }


  public RadiusOutpostConfig authFlowSlug(String authFlowSlug) {
    this.authFlowSlug = authFlowSlug;
    return this;
  }

  /**
   * Get authFlowSlug
   * @return authFlowSlug
   */
  @javax.annotation.Nonnull
  public String getAuthFlowSlug() {
    return authFlowSlug;
  }

  public void setAuthFlowSlug(String authFlowSlug) {
    this.authFlowSlug = authFlowSlug;
  }


  public RadiusOutpostConfig clientNetworks(String clientNetworks) {
    this.clientNetworks = clientNetworks;
    return this;
  }

  /**
   * List of CIDRs (comma-separated) that clients can connect from. A more specific CIDR will match before a looser one. Clients connecting from a non-specified CIDR will be dropped.
   * @return clientNetworks
   */
  @javax.annotation.Nullable
  public String getClientNetworks() {
    return clientNetworks;
  }

  public void setClientNetworks(String clientNetworks) {
    this.clientNetworks = clientNetworks;
  }


  public RadiusOutpostConfig sharedSecret(String sharedSecret) {
    this.sharedSecret = sharedSecret;
    return this;
  }

  /**
   * Shared secret between clients and server to hash packets.
   * @return sharedSecret
   */
  @javax.annotation.Nullable
  public String getSharedSecret() {
    return sharedSecret;
  }

  public void setSharedSecret(String sharedSecret) {
    this.sharedSecret = sharedSecret;
  }


  public RadiusOutpostConfig mfaSupport(Boolean mfaSupport) {
    this.mfaSupport = mfaSupport;
    return this;
  }

  /**
   * When enabled, code-based multi-factor authentication can be used by appending a semicolon and the TOTP code to the password. This should only be enabled if all users that will bind to this provider have a TOTP device configured, as otherwise a password may incorrectly be rejected if it contains a semicolon.
   * @return mfaSupport
   */
  @javax.annotation.Nullable
  public Boolean getMfaSupport() {
    return mfaSupport;
  }

  public void setMfaSupport(Boolean mfaSupport) {
    this.mfaSupport = mfaSupport;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RadiusOutpostConfig radiusOutpostConfig = (RadiusOutpostConfig) o;
    return Objects.equals(this.pk, radiusOutpostConfig.pk) &&
        Objects.equals(this.name, radiusOutpostConfig.name) &&
        Objects.equals(this.applicationSlug, radiusOutpostConfig.applicationSlug) &&
        Objects.equals(this.authFlowSlug, radiusOutpostConfig.authFlowSlug) &&
        Objects.equals(this.clientNetworks, radiusOutpostConfig.clientNetworks) &&
        Objects.equals(this.sharedSecret, radiusOutpostConfig.sharedSecret) &&
        Objects.equals(this.mfaSupport, radiusOutpostConfig.mfaSupport);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pk, name, applicationSlug, authFlowSlug, clientNetworks, sharedSecret, mfaSupport);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RadiusOutpostConfig {\n");
    sb.append("    pk: ").append(toIndentedString(pk)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    applicationSlug: ").append(toIndentedString(applicationSlug)).append("\n");
    sb.append("    authFlowSlug: ").append(toIndentedString(authFlowSlug)).append("\n");
    sb.append("    clientNetworks: ").append(toIndentedString(clientNetworks)).append("\n");
    sb.append("    sharedSecret: ").append(toIndentedString(sharedSecret)).append("\n");
    sb.append("    mfaSupport: ").append(toIndentedString(mfaSupport)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pk");
    openapiFields.add("name");
    openapiFields.add("application_slug");
    openapiFields.add("auth_flow_slug");
    openapiFields.add("client_networks");
    openapiFields.add("shared_secret");
    openapiFields.add("mfa_support");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("pk");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("application_slug");
    openapiRequiredFields.add("auth_flow_slug");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RadiusOutpostConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RadiusOutpostConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RadiusOutpostConfig is not found in the empty JSON string", RadiusOutpostConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RadiusOutpostConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RadiusOutpostConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RadiusOutpostConfig.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("application_slug").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `application_slug` to be a primitive type in the JSON string but got `%s`", jsonObj.get("application_slug").toString()));
      }
      if (!jsonObj.get("auth_flow_slug").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `auth_flow_slug` to be a primitive type in the JSON string but got `%s`", jsonObj.get("auth_flow_slug").toString()));
      }
      if ((jsonObj.get("client_networks") != null && !jsonObj.get("client_networks").isJsonNull()) && !jsonObj.get("client_networks").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_networks` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_networks").toString()));
      }
      if ((jsonObj.get("shared_secret") != null && !jsonObj.get("shared_secret").isJsonNull()) && !jsonObj.get("shared_secret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shared_secret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shared_secret").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RadiusOutpostConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RadiusOutpostConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RadiusOutpostConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RadiusOutpostConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<RadiusOutpostConfig>() {
           @Override
           public void write(JsonWriter out, RadiusOutpostConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RadiusOutpostConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RadiusOutpostConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RadiusOutpostConfig
   * @throws IOException if the JSON string is invalid with respect to RadiusOutpostConfig
   */
  public static RadiusOutpostConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RadiusOutpostConfig.class);
  }

  /**
   * Convert an instance of RadiusOutpostConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

