/*
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.6.3
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.OpenIDConnectConfiguration;
import org.openapitools.client.model.ProxyMode;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Proxy provider serializer for outposts
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-25T23:12:57.050901581-03:00[America/Argentina/Cordoba]", comments = "Generator version: 7.8.0")
public class ProxyOutpostConfig {
  public static final String SERIALIZED_NAME_PK = "pk";
  @SerializedName(SERIALIZED_NAME_PK)
  private Integer pk;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_INTERNAL_HOST = "internal_host";
  @SerializedName(SERIALIZED_NAME_INTERNAL_HOST)
  private URI internalHost;

  public static final String SERIALIZED_NAME_EXTERNAL_HOST = "external_host";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_HOST)
  private URI externalHost;

  public static final String SERIALIZED_NAME_INTERNAL_HOST_SSL_VALIDATION = "internal_host_ssl_validation";
  @SerializedName(SERIALIZED_NAME_INTERNAL_HOST_SSL_VALIDATION)
  private Boolean internalHostSslValidation;

  public static final String SERIALIZED_NAME_CLIENT_ID = "client_id";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  private String clientId;

  public static final String SERIALIZED_NAME_CLIENT_SECRET = "client_secret";
  @SerializedName(SERIALIZED_NAME_CLIENT_SECRET)
  private String clientSecret;

  public static final String SERIALIZED_NAME_OIDC_CONFIGURATION = "oidc_configuration";
  @SerializedName(SERIALIZED_NAME_OIDC_CONFIGURATION)
  private OpenIDConnectConfiguration oidcConfiguration;

  public static final String SERIALIZED_NAME_COOKIE_SECRET = "cookie_secret";
  @SerializedName(SERIALIZED_NAME_COOKIE_SECRET)
  private String cookieSecret;

  public static final String SERIALIZED_NAME_CERTIFICATE = "certificate";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE)
  private UUID certificate;

  public static final String SERIALIZED_NAME_SKIP_PATH_REGEX = "skip_path_regex";
  @SerializedName(SERIALIZED_NAME_SKIP_PATH_REGEX)
  private String skipPathRegex;

  public static final String SERIALIZED_NAME_BASIC_AUTH_ENABLED = "basic_auth_enabled";
  @SerializedName(SERIALIZED_NAME_BASIC_AUTH_ENABLED)
  private Boolean basicAuthEnabled;

  public static final String SERIALIZED_NAME_BASIC_AUTH_PASSWORD_ATTRIBUTE = "basic_auth_password_attribute";
  @SerializedName(SERIALIZED_NAME_BASIC_AUTH_PASSWORD_ATTRIBUTE)
  private String basicAuthPasswordAttribute;

  public static final String SERIALIZED_NAME_BASIC_AUTH_USER_ATTRIBUTE = "basic_auth_user_attribute";
  @SerializedName(SERIALIZED_NAME_BASIC_AUTH_USER_ATTRIBUTE)
  private String basicAuthUserAttribute;

  public static final String SERIALIZED_NAME_MODE = "mode";
  @SerializedName(SERIALIZED_NAME_MODE)
  private ProxyMode mode;

  public static final String SERIALIZED_NAME_COOKIE_DOMAIN = "cookie_domain";
  @SerializedName(SERIALIZED_NAME_COOKIE_DOMAIN)
  private String cookieDomain;

  public static final String SERIALIZED_NAME_ACCESS_TOKEN_VALIDITY = "access_token_validity";
  @SerializedName(SERIALIZED_NAME_ACCESS_TOKEN_VALIDITY)
  private Double accessTokenValidity;

  public static final String SERIALIZED_NAME_INTERCEPT_HEADER_AUTH = "intercept_header_auth";
  @SerializedName(SERIALIZED_NAME_INTERCEPT_HEADER_AUTH)
  private Boolean interceptHeaderAuth;

  public static final String SERIALIZED_NAME_SCOPES_TO_REQUEST = "scopes_to_request";
  @SerializedName(SERIALIZED_NAME_SCOPES_TO_REQUEST)
  private List<String> scopesToRequest = new ArrayList<>();

  public static final String SERIALIZED_NAME_ASSIGNED_APPLICATION_SLUG = "assigned_application_slug";
  @SerializedName(SERIALIZED_NAME_ASSIGNED_APPLICATION_SLUG)
  private String assignedApplicationSlug;

  public static final String SERIALIZED_NAME_ASSIGNED_APPLICATION_NAME = "assigned_application_name";
  @SerializedName(SERIALIZED_NAME_ASSIGNED_APPLICATION_NAME)
  private String assignedApplicationName;

  public ProxyOutpostConfig() {
  }

  public ProxyOutpostConfig(
     Integer pk, 
     OpenIDConnectConfiguration oidcConfiguration, 
     Double accessTokenValidity, 
     List<String> scopesToRequest, 
     String assignedApplicationSlug, 
     String assignedApplicationName
  ) {
    this();
    this.pk = pk;
    this.oidcConfiguration = oidcConfiguration;
    this.accessTokenValidity = accessTokenValidity;
    this.scopesToRequest = scopesToRequest;
    this.assignedApplicationSlug = assignedApplicationSlug;
    this.assignedApplicationName = assignedApplicationName;
  }

  /**
   * Get pk
   * @return pk
   */
  @javax.annotation.Nonnull
  public Integer getPk() {
    return pk;
  }



  public ProxyOutpostConfig name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ProxyOutpostConfig internalHost(URI internalHost) {
    this.internalHost = internalHost;
    return this;
  }

  /**
   * Get internalHost
   * @return internalHost
   */
  @javax.annotation.Nullable
  public URI getInternalHost() {
    return internalHost;
  }

  public void setInternalHost(URI internalHost) {
    this.internalHost = internalHost;
  }


  public ProxyOutpostConfig externalHost(URI externalHost) {
    this.externalHost = externalHost;
    return this;
  }

  /**
   * Get externalHost
   * @return externalHost
   */
  @javax.annotation.Nonnull
  public URI getExternalHost() {
    return externalHost;
  }

  public void setExternalHost(URI externalHost) {
    this.externalHost = externalHost;
  }


  public ProxyOutpostConfig internalHostSslValidation(Boolean internalHostSslValidation) {
    this.internalHostSslValidation = internalHostSslValidation;
    return this;
  }

  /**
   * Validate SSL Certificates of upstream servers
   * @return internalHostSslValidation
   */
  @javax.annotation.Nullable
  public Boolean getInternalHostSslValidation() {
    return internalHostSslValidation;
  }

  public void setInternalHostSslValidation(Boolean internalHostSslValidation) {
    this.internalHostSslValidation = internalHostSslValidation;
  }


  public ProxyOutpostConfig clientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  /**
   * Get clientId
   * @return clientId
   */
  @javax.annotation.Nullable
  public String getClientId() {
    return clientId;
  }

  public void setClientId(String clientId) {
    this.clientId = clientId;
  }


  public ProxyOutpostConfig clientSecret(String clientSecret) {
    this.clientSecret = clientSecret;
    return this;
  }

  /**
   * Get clientSecret
   * @return clientSecret
   */
  @javax.annotation.Nullable
  public String getClientSecret() {
    return clientSecret;
  }

  public void setClientSecret(String clientSecret) {
    this.clientSecret = clientSecret;
  }


  /**
   * Get oidcConfiguration
   * @return oidcConfiguration
   */
  @javax.annotation.Nonnull
  public OpenIDConnectConfiguration getOidcConfiguration() {
    return oidcConfiguration;
  }



  public ProxyOutpostConfig cookieSecret(String cookieSecret) {
    this.cookieSecret = cookieSecret;
    return this;
  }

  /**
   * Get cookieSecret
   * @return cookieSecret
   */
  @javax.annotation.Nullable
  public String getCookieSecret() {
    return cookieSecret;
  }

  public void setCookieSecret(String cookieSecret) {
    this.cookieSecret = cookieSecret;
  }


  public ProxyOutpostConfig certificate(UUID certificate) {
    this.certificate = certificate;
    return this;
  }

  /**
   * Get certificate
   * @return certificate
   */
  @javax.annotation.Nullable
  public UUID getCertificate() {
    return certificate;
  }

  public void setCertificate(UUID certificate) {
    this.certificate = certificate;
  }


  public ProxyOutpostConfig skipPathRegex(String skipPathRegex) {
    this.skipPathRegex = skipPathRegex;
    return this;
  }

  /**
   * Regular expressions for which authentication is not required. Each new line is interpreted as a new Regular Expression.
   * @return skipPathRegex
   */
  @javax.annotation.Nullable
  public String getSkipPathRegex() {
    return skipPathRegex;
  }

  public void setSkipPathRegex(String skipPathRegex) {
    this.skipPathRegex = skipPathRegex;
  }


  public ProxyOutpostConfig basicAuthEnabled(Boolean basicAuthEnabled) {
    this.basicAuthEnabled = basicAuthEnabled;
    return this;
  }

  /**
   * Set a custom HTTP-Basic Authentication header based on values from authentik.
   * @return basicAuthEnabled
   */
  @javax.annotation.Nullable
  public Boolean getBasicAuthEnabled() {
    return basicAuthEnabled;
  }

  public void setBasicAuthEnabled(Boolean basicAuthEnabled) {
    this.basicAuthEnabled = basicAuthEnabled;
  }


  public ProxyOutpostConfig basicAuthPasswordAttribute(String basicAuthPasswordAttribute) {
    this.basicAuthPasswordAttribute = basicAuthPasswordAttribute;
    return this;
  }

  /**
   * User/Group Attribute used for the password part of the HTTP-Basic Header.
   * @return basicAuthPasswordAttribute
   */
  @javax.annotation.Nullable
  public String getBasicAuthPasswordAttribute() {
    return basicAuthPasswordAttribute;
  }

  public void setBasicAuthPasswordAttribute(String basicAuthPasswordAttribute) {
    this.basicAuthPasswordAttribute = basicAuthPasswordAttribute;
  }


  public ProxyOutpostConfig basicAuthUserAttribute(String basicAuthUserAttribute) {
    this.basicAuthUserAttribute = basicAuthUserAttribute;
    return this;
  }

  /**
   * User/Group Attribute used for the user part of the HTTP-Basic Header. If not set, the user&#39;s Email address is used.
   * @return basicAuthUserAttribute
   */
  @javax.annotation.Nullable
  public String getBasicAuthUserAttribute() {
    return basicAuthUserAttribute;
  }

  public void setBasicAuthUserAttribute(String basicAuthUserAttribute) {
    this.basicAuthUserAttribute = basicAuthUserAttribute;
  }


  public ProxyOutpostConfig mode(ProxyMode mode) {
    this.mode = mode;
    return this;
  }

  /**
   * Enable support for forwardAuth in traefik and nginx auth_request. Exclusive with internal_host.
   * @return mode
   */
  @javax.annotation.Nullable
  public ProxyMode getMode() {
    return mode;
  }

  public void setMode(ProxyMode mode) {
    this.mode = mode;
  }


  public ProxyOutpostConfig cookieDomain(String cookieDomain) {
    this.cookieDomain = cookieDomain;
    return this;
  }

  /**
   * Get cookieDomain
   * @return cookieDomain
   */
  @javax.annotation.Nullable
  public String getCookieDomain() {
    return cookieDomain;
  }

  public void setCookieDomain(String cookieDomain) {
    this.cookieDomain = cookieDomain;
  }


  /**
   * Get token validity as second count
   * @return accessTokenValidity
   */
  @javax.annotation.Nullable
  public Double getAccessTokenValidity() {
    return accessTokenValidity;
  }



  public ProxyOutpostConfig interceptHeaderAuth(Boolean interceptHeaderAuth) {
    this.interceptHeaderAuth = interceptHeaderAuth;
    return this;
  }

  /**
   * When enabled, this provider will intercept the authorization header and authenticate requests based on its value.
   * @return interceptHeaderAuth
   */
  @javax.annotation.Nullable
  public Boolean getInterceptHeaderAuth() {
    return interceptHeaderAuth;
  }

  public void setInterceptHeaderAuth(Boolean interceptHeaderAuth) {
    this.interceptHeaderAuth = interceptHeaderAuth;
  }


  /**
   * Get all the scope names the outpost should request, including custom-defined ones
   * @return scopesToRequest
   */
  @javax.annotation.Nonnull
  public List<String> getScopesToRequest() {
    return scopesToRequest;
  }



  /**
   * Internal application name, used in URLs.
   * @return assignedApplicationSlug
   */
  @javax.annotation.Nonnull
  public String getAssignedApplicationSlug() {
    return assignedApplicationSlug;
  }



  /**
   * Application&#39;s display Name.
   * @return assignedApplicationName
   */
  @javax.annotation.Nonnull
  public String getAssignedApplicationName() {
    return assignedApplicationName;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProxyOutpostConfig proxyOutpostConfig = (ProxyOutpostConfig) o;
    return Objects.equals(this.pk, proxyOutpostConfig.pk) &&
        Objects.equals(this.name, proxyOutpostConfig.name) &&
        Objects.equals(this.internalHost, proxyOutpostConfig.internalHost) &&
        Objects.equals(this.externalHost, proxyOutpostConfig.externalHost) &&
        Objects.equals(this.internalHostSslValidation, proxyOutpostConfig.internalHostSslValidation) &&
        Objects.equals(this.clientId, proxyOutpostConfig.clientId) &&
        Objects.equals(this.clientSecret, proxyOutpostConfig.clientSecret) &&
        Objects.equals(this.oidcConfiguration, proxyOutpostConfig.oidcConfiguration) &&
        Objects.equals(this.cookieSecret, proxyOutpostConfig.cookieSecret) &&
        Objects.equals(this.certificate, proxyOutpostConfig.certificate) &&
        Objects.equals(this.skipPathRegex, proxyOutpostConfig.skipPathRegex) &&
        Objects.equals(this.basicAuthEnabled, proxyOutpostConfig.basicAuthEnabled) &&
        Objects.equals(this.basicAuthPasswordAttribute, proxyOutpostConfig.basicAuthPasswordAttribute) &&
        Objects.equals(this.basicAuthUserAttribute, proxyOutpostConfig.basicAuthUserAttribute) &&
        Objects.equals(this.mode, proxyOutpostConfig.mode) &&
        Objects.equals(this.cookieDomain, proxyOutpostConfig.cookieDomain) &&
        Objects.equals(this.accessTokenValidity, proxyOutpostConfig.accessTokenValidity) &&
        Objects.equals(this.interceptHeaderAuth, proxyOutpostConfig.interceptHeaderAuth) &&
        Objects.equals(this.scopesToRequest, proxyOutpostConfig.scopesToRequest) &&
        Objects.equals(this.assignedApplicationSlug, proxyOutpostConfig.assignedApplicationSlug) &&
        Objects.equals(this.assignedApplicationName, proxyOutpostConfig.assignedApplicationName);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(pk, name, internalHost, externalHost, internalHostSslValidation, clientId, clientSecret, oidcConfiguration, cookieSecret, certificate, skipPathRegex, basicAuthEnabled, basicAuthPasswordAttribute, basicAuthUserAttribute, mode, cookieDomain, accessTokenValidity, interceptHeaderAuth, scopesToRequest, assignedApplicationSlug, assignedApplicationName);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProxyOutpostConfig {\n");
    sb.append("    pk: ").append(toIndentedString(pk)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    internalHost: ").append(toIndentedString(internalHost)).append("\n");
    sb.append("    externalHost: ").append(toIndentedString(externalHost)).append("\n");
    sb.append("    internalHostSslValidation: ").append(toIndentedString(internalHostSslValidation)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    clientSecret: ").append(toIndentedString(clientSecret)).append("\n");
    sb.append("    oidcConfiguration: ").append(toIndentedString(oidcConfiguration)).append("\n");
    sb.append("    cookieSecret: ").append(toIndentedString(cookieSecret)).append("\n");
    sb.append("    certificate: ").append(toIndentedString(certificate)).append("\n");
    sb.append("    skipPathRegex: ").append(toIndentedString(skipPathRegex)).append("\n");
    sb.append("    basicAuthEnabled: ").append(toIndentedString(basicAuthEnabled)).append("\n");
    sb.append("    basicAuthPasswordAttribute: ").append(toIndentedString(basicAuthPasswordAttribute)).append("\n");
    sb.append("    basicAuthUserAttribute: ").append(toIndentedString(basicAuthUserAttribute)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    cookieDomain: ").append(toIndentedString(cookieDomain)).append("\n");
    sb.append("    accessTokenValidity: ").append(toIndentedString(accessTokenValidity)).append("\n");
    sb.append("    interceptHeaderAuth: ").append(toIndentedString(interceptHeaderAuth)).append("\n");
    sb.append("    scopesToRequest: ").append(toIndentedString(scopesToRequest)).append("\n");
    sb.append("    assignedApplicationSlug: ").append(toIndentedString(assignedApplicationSlug)).append("\n");
    sb.append("    assignedApplicationName: ").append(toIndentedString(assignedApplicationName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pk");
    openapiFields.add("name");
    openapiFields.add("internal_host");
    openapiFields.add("external_host");
    openapiFields.add("internal_host_ssl_validation");
    openapiFields.add("client_id");
    openapiFields.add("client_secret");
    openapiFields.add("oidc_configuration");
    openapiFields.add("cookie_secret");
    openapiFields.add("certificate");
    openapiFields.add("skip_path_regex");
    openapiFields.add("basic_auth_enabled");
    openapiFields.add("basic_auth_password_attribute");
    openapiFields.add("basic_auth_user_attribute");
    openapiFields.add("mode");
    openapiFields.add("cookie_domain");
    openapiFields.add("access_token_validity");
    openapiFields.add("intercept_header_auth");
    openapiFields.add("scopes_to_request");
    openapiFields.add("assigned_application_slug");
    openapiFields.add("assigned_application_name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("pk");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("external_host");
    openapiRequiredFields.add("oidc_configuration");
    openapiRequiredFields.add("access_token_validity");
    openapiRequiredFields.add("scopes_to_request");
    openapiRequiredFields.add("assigned_application_slug");
    openapiRequiredFields.add("assigned_application_name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProxyOutpostConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProxyOutpostConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProxyOutpostConfig is not found in the empty JSON string", ProxyOutpostConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProxyOutpostConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProxyOutpostConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ProxyOutpostConfig.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("internal_host") != null && !jsonObj.get("internal_host").isJsonNull()) && !jsonObj.get("internal_host").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `internal_host` to be a primitive type in the JSON string but got `%s`", jsonObj.get("internal_host").toString()));
      }
      if (!jsonObj.get("external_host").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_host` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_host").toString()));
      }
      if ((jsonObj.get("client_id") != null && !jsonObj.get("client_id").isJsonNull()) && !jsonObj.get("client_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_id").toString()));
      }
      if ((jsonObj.get("client_secret") != null && !jsonObj.get("client_secret").isJsonNull()) && !jsonObj.get("client_secret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_secret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_secret").toString()));
      }
      // validate the required field `oidc_configuration`
      OpenIDConnectConfiguration.validateJsonElement(jsonObj.get("oidc_configuration"));
      if ((jsonObj.get("cookie_secret") != null && !jsonObj.get("cookie_secret").isJsonNull()) && !jsonObj.get("cookie_secret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cookie_secret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cookie_secret").toString()));
      }
      if ((jsonObj.get("certificate") != null && !jsonObj.get("certificate").isJsonNull()) && !jsonObj.get("certificate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `certificate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("certificate").toString()));
      }
      if ((jsonObj.get("skip_path_regex") != null && !jsonObj.get("skip_path_regex").isJsonNull()) && !jsonObj.get("skip_path_regex").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `skip_path_regex` to be a primitive type in the JSON string but got `%s`", jsonObj.get("skip_path_regex").toString()));
      }
      if ((jsonObj.get("basic_auth_password_attribute") != null && !jsonObj.get("basic_auth_password_attribute").isJsonNull()) && !jsonObj.get("basic_auth_password_attribute").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `basic_auth_password_attribute` to be a primitive type in the JSON string but got `%s`", jsonObj.get("basic_auth_password_attribute").toString()));
      }
      if ((jsonObj.get("basic_auth_user_attribute") != null && !jsonObj.get("basic_auth_user_attribute").isJsonNull()) && !jsonObj.get("basic_auth_user_attribute").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `basic_auth_user_attribute` to be a primitive type in the JSON string but got `%s`", jsonObj.get("basic_auth_user_attribute").toString()));
      }
      // validate the optional field `mode`
      if (jsonObj.get("mode") != null && !jsonObj.get("mode").isJsonNull()) {
        ProxyMode.validateJsonElement(jsonObj.get("mode"));
      }
      if ((jsonObj.get("cookie_domain") != null && !jsonObj.get("cookie_domain").isJsonNull()) && !jsonObj.get("cookie_domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cookie_domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cookie_domain").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("scopes_to_request") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("scopes_to_request").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `scopes_to_request` to be an array in the JSON string but got `%s`", jsonObj.get("scopes_to_request").toString()));
      }
      if (!jsonObj.get("assigned_application_slug").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assigned_application_slug` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assigned_application_slug").toString()));
      }
      if (!jsonObj.get("assigned_application_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assigned_application_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assigned_application_name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProxyOutpostConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProxyOutpostConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProxyOutpostConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProxyOutpostConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<ProxyOutpostConfig>() {
           @Override
           public void write(JsonWriter out, ProxyOutpostConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProxyOutpostConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProxyOutpostConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProxyOutpostConfig
   * @throws IOException if the JSON string is invalid with respect to ProxyOutpostConfig
   */
  public static ProxyOutpostConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProxyOutpostConfig.class);
  }

  /**
   * Convert an instance of ProxyOutpostConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

