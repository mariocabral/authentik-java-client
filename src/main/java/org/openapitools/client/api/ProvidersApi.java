/*
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.6.3
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import org.openapitools.client.model.GenericError;
import org.openapitools.client.model.GoogleWorkspaceProvider;
import org.openapitools.client.model.GoogleWorkspaceProviderGroup;
import org.openapitools.client.model.GoogleWorkspaceProviderGroupRequest;
import org.openapitools.client.model.GoogleWorkspaceProviderRequest;
import org.openapitools.client.model.GoogleWorkspaceProviderUser;
import org.openapitools.client.model.GoogleWorkspaceProviderUserRequest;
import org.openapitools.client.model.LDAPProvider;
import org.openapitools.client.model.LDAPProviderRequest;
import org.openapitools.client.model.MicrosoftEntraProvider;
import org.openapitools.client.model.MicrosoftEntraProviderGroup;
import org.openapitools.client.model.MicrosoftEntraProviderGroupRequest;
import org.openapitools.client.model.MicrosoftEntraProviderRequest;
import org.openapitools.client.model.MicrosoftEntraProviderUser;
import org.openapitools.client.model.MicrosoftEntraProviderUserRequest;
import org.openapitools.client.model.OAuth2Provider;
import org.openapitools.client.model.OAuth2ProviderRequest;
import org.openapitools.client.model.OAuth2ProviderSetupURLs;
import org.openapitools.client.model.PaginatedGoogleWorkspaceProviderGroupList;
import org.openapitools.client.model.PaginatedGoogleWorkspaceProviderList;
import org.openapitools.client.model.PaginatedGoogleWorkspaceProviderUserList;
import org.openapitools.client.model.PaginatedLDAPProviderList;
import org.openapitools.client.model.PaginatedMicrosoftEntraProviderGroupList;
import org.openapitools.client.model.PaginatedMicrosoftEntraProviderList;
import org.openapitools.client.model.PaginatedMicrosoftEntraProviderUserList;
import org.openapitools.client.model.PaginatedOAuth2ProviderList;
import org.openapitools.client.model.PaginatedProviderList;
import org.openapitools.client.model.PaginatedProxyProviderList;
import org.openapitools.client.model.PaginatedRACProviderList;
import org.openapitools.client.model.PaginatedRadiusProviderList;
import org.openapitools.client.model.PaginatedSAMLProviderList;
import org.openapitools.client.model.PaginatedSCIMProviderGroupList;
import org.openapitools.client.model.PaginatedSCIMProviderList;
import org.openapitools.client.model.PaginatedSCIMProviderUserList;
import org.openapitools.client.model.PatchedGoogleWorkspaceProviderRequest;
import org.openapitools.client.model.PatchedLDAPProviderRequest;
import org.openapitools.client.model.PatchedMicrosoftEntraProviderRequest;
import org.openapitools.client.model.PatchedOAuth2ProviderRequest;
import org.openapitools.client.model.PatchedProxyProviderRequest;
import org.openapitools.client.model.PatchedRACProviderRequest;
import org.openapitools.client.model.PatchedRadiusProviderRequest;
import org.openapitools.client.model.PatchedSAMLProviderRequest;
import org.openapitools.client.model.PatchedSCIMProviderRequest;
import org.openapitools.client.model.PropertyMappingPreview;
import org.openapitools.client.model.Provider;
import org.openapitools.client.model.ProxyProvider;
import org.openapitools.client.model.ProxyProviderRequest;
import org.openapitools.client.model.RACProvider;
import org.openapitools.client.model.RACProviderRequest;
import org.openapitools.client.model.RadiusProvider;
import org.openapitools.client.model.RadiusProviderRequest;
import org.openapitools.client.model.SAMLMetadata;
import org.openapitools.client.model.SAMLProvider;
import org.openapitools.client.model.SAMLProviderRequest;
import org.openapitools.client.model.SCIMProvider;
import org.openapitools.client.model.SCIMProviderGroup;
import org.openapitools.client.model.SCIMProviderGroupRequest;
import org.openapitools.client.model.SCIMProviderRequest;
import org.openapitools.client.model.SCIMProviderUser;
import org.openapitools.client.model.SCIMProviderUserRequest;
import org.openapitools.client.model.SyncStatus;
import org.openapitools.client.model.TypeCreate;
import java.util.UUID;
import org.openapitools.client.model.UsedBy;
import org.openapitools.client.model.ValidationError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProvidersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProvidersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProvidersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for providersAllDestroy
     * @param id A unique integer value identifying this provider. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersAllDestroyCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/all/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersAllDestroyValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling providersAllDestroy(Async)");
        }

        return providersAllDestroyCall(id, _callback);

    }

    /**
     * 
     * Provider Viewset
     * @param id A unique integer value identifying this provider. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void providersAllDestroy(Integer id) throws ApiException {
        providersAllDestroyWithHttpInfo(id);
    }

    /**
     * 
     * Provider Viewset
     * @param id A unique integer value identifying this provider. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> providersAllDestroyWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = providersAllDestroyValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Provider Viewset
     * @param id A unique integer value identifying this provider. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersAllDestroyAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersAllDestroyValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersAllList
     * @param applicationIsnull  (optional)
     * @param backchannel When not set all providers are returned. When set to true, only backchannel providers are returned. When set to false, backchannel providers are excluded (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersAllListCall(Boolean applicationIsnull, Boolean backchannel, String ordering, Integer page, Integer pageSize, String search, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/all/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (applicationIsnull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("application__isnull", applicationIsnull));
        }

        if (backchannel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("backchannel", backchannel));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersAllListValidateBeforeCall(Boolean applicationIsnull, Boolean backchannel, String ordering, Integer page, Integer pageSize, String search, final ApiCallback _callback) throws ApiException {
        return providersAllListCall(applicationIsnull, backchannel, ordering, page, pageSize, search, _callback);

    }

    /**
     * 
     * Provider Viewset
     * @param applicationIsnull  (optional)
     * @param backchannel When not set all providers are returned. When set to true, only backchannel providers are returned. When set to false, backchannel providers are excluded (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @return PaginatedProviderList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedProviderList providersAllList(Boolean applicationIsnull, Boolean backchannel, String ordering, Integer page, Integer pageSize, String search) throws ApiException {
        ApiResponse<PaginatedProviderList> localVarResp = providersAllListWithHttpInfo(applicationIsnull, backchannel, ordering, page, pageSize, search);
        return localVarResp.getData();
    }

    /**
     * 
     * Provider Viewset
     * @param applicationIsnull  (optional)
     * @param backchannel When not set all providers are returned. When set to true, only backchannel providers are returned. When set to false, backchannel providers are excluded (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @return ApiResponse&lt;PaginatedProviderList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedProviderList> providersAllListWithHttpInfo(Boolean applicationIsnull, Boolean backchannel, String ordering, Integer page, Integer pageSize, String search) throws ApiException {
        okhttp3.Call localVarCall = providersAllListValidateBeforeCall(applicationIsnull, backchannel, ordering, page, pageSize, search, null);
        Type localVarReturnType = new TypeToken<PaginatedProviderList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Provider Viewset
     * @param applicationIsnull  (optional)
     * @param backchannel When not set all providers are returned. When set to true, only backchannel providers are returned. When set to false, backchannel providers are excluded (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersAllListAsync(Boolean applicationIsnull, Boolean backchannel, String ordering, Integer page, Integer pageSize, String search, final ApiCallback<PaginatedProviderList> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersAllListValidateBeforeCall(applicationIsnull, backchannel, ordering, page, pageSize, search, _callback);
        Type localVarReturnType = new TypeToken<PaginatedProviderList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersAllRetrieve
     * @param id A unique integer value identifying this provider. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersAllRetrieveCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/all/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersAllRetrieveValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling providersAllRetrieve(Async)");
        }

        return providersAllRetrieveCall(id, _callback);

    }

    /**
     * 
     * Provider Viewset
     * @param id A unique integer value identifying this provider. (required)
     * @return Provider
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Provider providersAllRetrieve(Integer id) throws ApiException {
        ApiResponse<Provider> localVarResp = providersAllRetrieveWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Provider Viewset
     * @param id A unique integer value identifying this provider. (required)
     * @return ApiResponse&lt;Provider&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Provider> providersAllRetrieveWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = providersAllRetrieveValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Provider>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Provider Viewset
     * @param id A unique integer value identifying this provider. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersAllRetrieveAsync(Integer id, final ApiCallback<Provider> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersAllRetrieveValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Provider>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersAllTypesList
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersAllTypesListCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/all/types/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersAllTypesListValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return providersAllTypesListCall(_callback);

    }

    /**
     * 
     * Get all creatable types
     * @return List&lt;TypeCreate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<TypeCreate> providersAllTypesList() throws ApiException {
        ApiResponse<List<TypeCreate>> localVarResp = providersAllTypesListWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Get all creatable types
     * @return ApiResponse&lt;List&lt;TypeCreate&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TypeCreate>> providersAllTypesListWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = providersAllTypesListValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<TypeCreate>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get all creatable types
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersAllTypesListAsync(final ApiCallback<List<TypeCreate>> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersAllTypesListValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<TypeCreate>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersAllUsedByList
     * @param id A unique integer value identifying this provider. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersAllUsedByListCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/all/{id}/used_by/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersAllUsedByListValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling providersAllUsedByList(Async)");
        }

        return providersAllUsedByListCall(id, _callback);

    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param id A unique integer value identifying this provider. (required)
     * @return List&lt;UsedBy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<UsedBy> providersAllUsedByList(Integer id) throws ApiException {
        ApiResponse<List<UsedBy>> localVarResp = providersAllUsedByListWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param id A unique integer value identifying this provider. (required)
     * @return ApiResponse&lt;List&lt;UsedBy&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UsedBy>> providersAllUsedByListWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = providersAllUsedByListValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of all objects that use this object
     * @param id A unique integer value identifying this provider. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersAllUsedByListAsync(Integer id, final ApiCallback<List<UsedBy>> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersAllUsedByListValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersGoogleWorkspaceCreate
     * @param googleWorkspaceProviderRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersGoogleWorkspaceCreateCall(GoogleWorkspaceProviderRequest googleWorkspaceProviderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = googleWorkspaceProviderRequest;

        // create path and map variables
        String localVarPath = "/providers/google_workspace/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersGoogleWorkspaceCreateValidateBeforeCall(GoogleWorkspaceProviderRequest googleWorkspaceProviderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'googleWorkspaceProviderRequest' is set
        if (googleWorkspaceProviderRequest == null) {
            throw new ApiException("Missing the required parameter 'googleWorkspaceProviderRequest' when calling providersGoogleWorkspaceCreate(Async)");
        }

        return providersGoogleWorkspaceCreateCall(googleWorkspaceProviderRequest, _callback);

    }

    /**
     * 
     * GoogleWorkspaceProvider Viewset
     * @param googleWorkspaceProviderRequest  (required)
     * @return GoogleWorkspaceProvider
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GoogleWorkspaceProvider providersGoogleWorkspaceCreate(GoogleWorkspaceProviderRequest googleWorkspaceProviderRequest) throws ApiException {
        ApiResponse<GoogleWorkspaceProvider> localVarResp = providersGoogleWorkspaceCreateWithHttpInfo(googleWorkspaceProviderRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * GoogleWorkspaceProvider Viewset
     * @param googleWorkspaceProviderRequest  (required)
     * @return ApiResponse&lt;GoogleWorkspaceProvider&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GoogleWorkspaceProvider> providersGoogleWorkspaceCreateWithHttpInfo(GoogleWorkspaceProviderRequest googleWorkspaceProviderRequest) throws ApiException {
        okhttp3.Call localVarCall = providersGoogleWorkspaceCreateValidateBeforeCall(googleWorkspaceProviderRequest, null);
        Type localVarReturnType = new TypeToken<GoogleWorkspaceProvider>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * GoogleWorkspaceProvider Viewset
     * @param googleWorkspaceProviderRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersGoogleWorkspaceCreateAsync(GoogleWorkspaceProviderRequest googleWorkspaceProviderRequest, final ApiCallback<GoogleWorkspaceProvider> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersGoogleWorkspaceCreateValidateBeforeCall(googleWorkspaceProviderRequest, _callback);
        Type localVarReturnType = new TypeToken<GoogleWorkspaceProvider>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersGoogleWorkspaceDestroy
     * @param id A unique integer value identifying this Google Workspace Provider. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersGoogleWorkspaceDestroyCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/google_workspace/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersGoogleWorkspaceDestroyValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling providersGoogleWorkspaceDestroy(Async)");
        }

        return providersGoogleWorkspaceDestroyCall(id, _callback);

    }

    /**
     * 
     * GoogleWorkspaceProvider Viewset
     * @param id A unique integer value identifying this Google Workspace Provider. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void providersGoogleWorkspaceDestroy(Integer id) throws ApiException {
        providersGoogleWorkspaceDestroyWithHttpInfo(id);
    }

    /**
     * 
     * GoogleWorkspaceProvider Viewset
     * @param id A unique integer value identifying this Google Workspace Provider. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> providersGoogleWorkspaceDestroyWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = providersGoogleWorkspaceDestroyValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * GoogleWorkspaceProvider Viewset
     * @param id A unique integer value identifying this Google Workspace Provider. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersGoogleWorkspaceDestroyAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersGoogleWorkspaceDestroyValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersGoogleWorkspaceGroupsCreate
     * @param googleWorkspaceProviderGroupRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersGoogleWorkspaceGroupsCreateCall(GoogleWorkspaceProviderGroupRequest googleWorkspaceProviderGroupRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = googleWorkspaceProviderGroupRequest;

        // create path and map variables
        String localVarPath = "/providers/google_workspace_groups/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersGoogleWorkspaceGroupsCreateValidateBeforeCall(GoogleWorkspaceProviderGroupRequest googleWorkspaceProviderGroupRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'googleWorkspaceProviderGroupRequest' is set
        if (googleWorkspaceProviderGroupRequest == null) {
            throw new ApiException("Missing the required parameter 'googleWorkspaceProviderGroupRequest' when calling providersGoogleWorkspaceGroupsCreate(Async)");
        }

        return providersGoogleWorkspaceGroupsCreateCall(googleWorkspaceProviderGroupRequest, _callback);

    }

    /**
     * 
     * GoogleWorkspaceProviderGroup Viewset
     * @param googleWorkspaceProviderGroupRequest  (required)
     * @return GoogleWorkspaceProviderGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GoogleWorkspaceProviderGroup providersGoogleWorkspaceGroupsCreate(GoogleWorkspaceProviderGroupRequest googleWorkspaceProviderGroupRequest) throws ApiException {
        ApiResponse<GoogleWorkspaceProviderGroup> localVarResp = providersGoogleWorkspaceGroupsCreateWithHttpInfo(googleWorkspaceProviderGroupRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * GoogleWorkspaceProviderGroup Viewset
     * @param googleWorkspaceProviderGroupRequest  (required)
     * @return ApiResponse&lt;GoogleWorkspaceProviderGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GoogleWorkspaceProviderGroup> providersGoogleWorkspaceGroupsCreateWithHttpInfo(GoogleWorkspaceProviderGroupRequest googleWorkspaceProviderGroupRequest) throws ApiException {
        okhttp3.Call localVarCall = providersGoogleWorkspaceGroupsCreateValidateBeforeCall(googleWorkspaceProviderGroupRequest, null);
        Type localVarReturnType = new TypeToken<GoogleWorkspaceProviderGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * GoogleWorkspaceProviderGroup Viewset
     * @param googleWorkspaceProviderGroupRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersGoogleWorkspaceGroupsCreateAsync(GoogleWorkspaceProviderGroupRequest googleWorkspaceProviderGroupRequest, final ApiCallback<GoogleWorkspaceProviderGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersGoogleWorkspaceGroupsCreateValidateBeforeCall(googleWorkspaceProviderGroupRequest, _callback);
        Type localVarReturnType = new TypeToken<GoogleWorkspaceProviderGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersGoogleWorkspaceGroupsDestroy
     * @param id A UUID string identifying this Google Workspace Provider Group. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersGoogleWorkspaceGroupsDestroyCall(UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/google_workspace_groups/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersGoogleWorkspaceGroupsDestroyValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling providersGoogleWorkspaceGroupsDestroy(Async)");
        }

        return providersGoogleWorkspaceGroupsDestroyCall(id, _callback);

    }

    /**
     * 
     * GoogleWorkspaceProviderGroup Viewset
     * @param id A UUID string identifying this Google Workspace Provider Group. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void providersGoogleWorkspaceGroupsDestroy(UUID id) throws ApiException {
        providersGoogleWorkspaceGroupsDestroyWithHttpInfo(id);
    }

    /**
     * 
     * GoogleWorkspaceProviderGroup Viewset
     * @param id A UUID string identifying this Google Workspace Provider Group. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> providersGoogleWorkspaceGroupsDestroyWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = providersGoogleWorkspaceGroupsDestroyValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * GoogleWorkspaceProviderGroup Viewset
     * @param id A UUID string identifying this Google Workspace Provider Group. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersGoogleWorkspaceGroupsDestroyAsync(UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersGoogleWorkspaceGroupsDestroyValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersGoogleWorkspaceGroupsList
     * @param groupGroupUuid  (optional)
     * @param groupName  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param providerId  (optional)
     * @param search A search term. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersGoogleWorkspaceGroupsListCall(UUID groupGroupUuid, String groupName, String ordering, Integer page, Integer pageSize, Integer providerId, String search, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/google_workspace_groups/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (groupGroupUuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group__group_uuid", groupGroupUuid));
        }

        if (groupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group__name", groupName));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (providerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("provider__id", providerId));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersGoogleWorkspaceGroupsListValidateBeforeCall(UUID groupGroupUuid, String groupName, String ordering, Integer page, Integer pageSize, Integer providerId, String search, final ApiCallback _callback) throws ApiException {
        return providersGoogleWorkspaceGroupsListCall(groupGroupUuid, groupName, ordering, page, pageSize, providerId, search, _callback);

    }

    /**
     * 
     * GoogleWorkspaceProviderGroup Viewset
     * @param groupGroupUuid  (optional)
     * @param groupName  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param providerId  (optional)
     * @param search A search term. (optional)
     * @return PaginatedGoogleWorkspaceProviderGroupList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedGoogleWorkspaceProviderGroupList providersGoogleWorkspaceGroupsList(UUID groupGroupUuid, String groupName, String ordering, Integer page, Integer pageSize, Integer providerId, String search) throws ApiException {
        ApiResponse<PaginatedGoogleWorkspaceProviderGroupList> localVarResp = providersGoogleWorkspaceGroupsListWithHttpInfo(groupGroupUuid, groupName, ordering, page, pageSize, providerId, search);
        return localVarResp.getData();
    }

    /**
     * 
     * GoogleWorkspaceProviderGroup Viewset
     * @param groupGroupUuid  (optional)
     * @param groupName  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param providerId  (optional)
     * @param search A search term. (optional)
     * @return ApiResponse&lt;PaginatedGoogleWorkspaceProviderGroupList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedGoogleWorkspaceProviderGroupList> providersGoogleWorkspaceGroupsListWithHttpInfo(UUID groupGroupUuid, String groupName, String ordering, Integer page, Integer pageSize, Integer providerId, String search) throws ApiException {
        okhttp3.Call localVarCall = providersGoogleWorkspaceGroupsListValidateBeforeCall(groupGroupUuid, groupName, ordering, page, pageSize, providerId, search, null);
        Type localVarReturnType = new TypeToken<PaginatedGoogleWorkspaceProviderGroupList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * GoogleWorkspaceProviderGroup Viewset
     * @param groupGroupUuid  (optional)
     * @param groupName  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param providerId  (optional)
     * @param search A search term. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersGoogleWorkspaceGroupsListAsync(UUID groupGroupUuid, String groupName, String ordering, Integer page, Integer pageSize, Integer providerId, String search, final ApiCallback<PaginatedGoogleWorkspaceProviderGroupList> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersGoogleWorkspaceGroupsListValidateBeforeCall(groupGroupUuid, groupName, ordering, page, pageSize, providerId, search, _callback);
        Type localVarReturnType = new TypeToken<PaginatedGoogleWorkspaceProviderGroupList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersGoogleWorkspaceGroupsRetrieve
     * @param id A UUID string identifying this Google Workspace Provider Group. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersGoogleWorkspaceGroupsRetrieveCall(UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/google_workspace_groups/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersGoogleWorkspaceGroupsRetrieveValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling providersGoogleWorkspaceGroupsRetrieve(Async)");
        }

        return providersGoogleWorkspaceGroupsRetrieveCall(id, _callback);

    }

    /**
     * 
     * GoogleWorkspaceProviderGroup Viewset
     * @param id A UUID string identifying this Google Workspace Provider Group. (required)
     * @return GoogleWorkspaceProviderGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GoogleWorkspaceProviderGroup providersGoogleWorkspaceGroupsRetrieve(UUID id) throws ApiException {
        ApiResponse<GoogleWorkspaceProviderGroup> localVarResp = providersGoogleWorkspaceGroupsRetrieveWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * GoogleWorkspaceProviderGroup Viewset
     * @param id A UUID string identifying this Google Workspace Provider Group. (required)
     * @return ApiResponse&lt;GoogleWorkspaceProviderGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GoogleWorkspaceProviderGroup> providersGoogleWorkspaceGroupsRetrieveWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = providersGoogleWorkspaceGroupsRetrieveValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<GoogleWorkspaceProviderGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * GoogleWorkspaceProviderGroup Viewset
     * @param id A UUID string identifying this Google Workspace Provider Group. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersGoogleWorkspaceGroupsRetrieveAsync(UUID id, final ApiCallback<GoogleWorkspaceProviderGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersGoogleWorkspaceGroupsRetrieveValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<GoogleWorkspaceProviderGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersGoogleWorkspaceGroupsUsedByList
     * @param id A UUID string identifying this Google Workspace Provider Group. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersGoogleWorkspaceGroupsUsedByListCall(UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/google_workspace_groups/{id}/used_by/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersGoogleWorkspaceGroupsUsedByListValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling providersGoogleWorkspaceGroupsUsedByList(Async)");
        }

        return providersGoogleWorkspaceGroupsUsedByListCall(id, _callback);

    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param id A UUID string identifying this Google Workspace Provider Group. (required)
     * @return List&lt;UsedBy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<UsedBy> providersGoogleWorkspaceGroupsUsedByList(UUID id) throws ApiException {
        ApiResponse<List<UsedBy>> localVarResp = providersGoogleWorkspaceGroupsUsedByListWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param id A UUID string identifying this Google Workspace Provider Group. (required)
     * @return ApiResponse&lt;List&lt;UsedBy&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UsedBy>> providersGoogleWorkspaceGroupsUsedByListWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = providersGoogleWorkspaceGroupsUsedByListValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of all objects that use this object
     * @param id A UUID string identifying this Google Workspace Provider Group. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersGoogleWorkspaceGroupsUsedByListAsync(UUID id, final ApiCallback<List<UsedBy>> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersGoogleWorkspaceGroupsUsedByListValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersGoogleWorkspaceList
     * @param delegatedSubject  (optional)
     * @param excludeUsersServiceAccount  (optional)
     * @param filterGroup  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersGoogleWorkspaceListCall(String delegatedSubject, Boolean excludeUsersServiceAccount, UUID filterGroup, String name, String ordering, Integer page, Integer pageSize, String search, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/google_workspace/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (delegatedSubject != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("delegated_subject", delegatedSubject));
        }

        if (excludeUsersServiceAccount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_users_service_account", excludeUsersServiceAccount));
        }

        if (filterGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_group", filterGroup));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersGoogleWorkspaceListValidateBeforeCall(String delegatedSubject, Boolean excludeUsersServiceAccount, UUID filterGroup, String name, String ordering, Integer page, Integer pageSize, String search, final ApiCallback _callback) throws ApiException {
        return providersGoogleWorkspaceListCall(delegatedSubject, excludeUsersServiceAccount, filterGroup, name, ordering, page, pageSize, search, _callback);

    }

    /**
     * 
     * GoogleWorkspaceProvider Viewset
     * @param delegatedSubject  (optional)
     * @param excludeUsersServiceAccount  (optional)
     * @param filterGroup  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @return PaginatedGoogleWorkspaceProviderList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedGoogleWorkspaceProviderList providersGoogleWorkspaceList(String delegatedSubject, Boolean excludeUsersServiceAccount, UUID filterGroup, String name, String ordering, Integer page, Integer pageSize, String search) throws ApiException {
        ApiResponse<PaginatedGoogleWorkspaceProviderList> localVarResp = providersGoogleWorkspaceListWithHttpInfo(delegatedSubject, excludeUsersServiceAccount, filterGroup, name, ordering, page, pageSize, search);
        return localVarResp.getData();
    }

    /**
     * 
     * GoogleWorkspaceProvider Viewset
     * @param delegatedSubject  (optional)
     * @param excludeUsersServiceAccount  (optional)
     * @param filterGroup  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @return ApiResponse&lt;PaginatedGoogleWorkspaceProviderList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedGoogleWorkspaceProviderList> providersGoogleWorkspaceListWithHttpInfo(String delegatedSubject, Boolean excludeUsersServiceAccount, UUID filterGroup, String name, String ordering, Integer page, Integer pageSize, String search) throws ApiException {
        okhttp3.Call localVarCall = providersGoogleWorkspaceListValidateBeforeCall(delegatedSubject, excludeUsersServiceAccount, filterGroup, name, ordering, page, pageSize, search, null);
        Type localVarReturnType = new TypeToken<PaginatedGoogleWorkspaceProviderList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * GoogleWorkspaceProvider Viewset
     * @param delegatedSubject  (optional)
     * @param excludeUsersServiceAccount  (optional)
     * @param filterGroup  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersGoogleWorkspaceListAsync(String delegatedSubject, Boolean excludeUsersServiceAccount, UUID filterGroup, String name, String ordering, Integer page, Integer pageSize, String search, final ApiCallback<PaginatedGoogleWorkspaceProviderList> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersGoogleWorkspaceListValidateBeforeCall(delegatedSubject, excludeUsersServiceAccount, filterGroup, name, ordering, page, pageSize, search, _callback);
        Type localVarReturnType = new TypeToken<PaginatedGoogleWorkspaceProviderList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersGoogleWorkspacePartialUpdate
     * @param id A unique integer value identifying this Google Workspace Provider. (required)
     * @param patchedGoogleWorkspaceProviderRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersGoogleWorkspacePartialUpdateCall(Integer id, PatchedGoogleWorkspaceProviderRequest patchedGoogleWorkspaceProviderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchedGoogleWorkspaceProviderRequest;

        // create path and map variables
        String localVarPath = "/providers/google_workspace/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersGoogleWorkspacePartialUpdateValidateBeforeCall(Integer id, PatchedGoogleWorkspaceProviderRequest patchedGoogleWorkspaceProviderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling providersGoogleWorkspacePartialUpdate(Async)");
        }

        return providersGoogleWorkspacePartialUpdateCall(id, patchedGoogleWorkspaceProviderRequest, _callback);

    }

    /**
     * 
     * GoogleWorkspaceProvider Viewset
     * @param id A unique integer value identifying this Google Workspace Provider. (required)
     * @param patchedGoogleWorkspaceProviderRequest  (optional)
     * @return GoogleWorkspaceProvider
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GoogleWorkspaceProvider providersGoogleWorkspacePartialUpdate(Integer id, PatchedGoogleWorkspaceProviderRequest patchedGoogleWorkspaceProviderRequest) throws ApiException {
        ApiResponse<GoogleWorkspaceProvider> localVarResp = providersGoogleWorkspacePartialUpdateWithHttpInfo(id, patchedGoogleWorkspaceProviderRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * GoogleWorkspaceProvider Viewset
     * @param id A unique integer value identifying this Google Workspace Provider. (required)
     * @param patchedGoogleWorkspaceProviderRequest  (optional)
     * @return ApiResponse&lt;GoogleWorkspaceProvider&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GoogleWorkspaceProvider> providersGoogleWorkspacePartialUpdateWithHttpInfo(Integer id, PatchedGoogleWorkspaceProviderRequest patchedGoogleWorkspaceProviderRequest) throws ApiException {
        okhttp3.Call localVarCall = providersGoogleWorkspacePartialUpdateValidateBeforeCall(id, patchedGoogleWorkspaceProviderRequest, null);
        Type localVarReturnType = new TypeToken<GoogleWorkspaceProvider>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * GoogleWorkspaceProvider Viewset
     * @param id A unique integer value identifying this Google Workspace Provider. (required)
     * @param patchedGoogleWorkspaceProviderRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersGoogleWorkspacePartialUpdateAsync(Integer id, PatchedGoogleWorkspaceProviderRequest patchedGoogleWorkspaceProviderRequest, final ApiCallback<GoogleWorkspaceProvider> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersGoogleWorkspacePartialUpdateValidateBeforeCall(id, patchedGoogleWorkspaceProviderRequest, _callback);
        Type localVarReturnType = new TypeToken<GoogleWorkspaceProvider>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersGoogleWorkspaceRetrieve
     * @param id A unique integer value identifying this Google Workspace Provider. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersGoogleWorkspaceRetrieveCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/google_workspace/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersGoogleWorkspaceRetrieveValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling providersGoogleWorkspaceRetrieve(Async)");
        }

        return providersGoogleWorkspaceRetrieveCall(id, _callback);

    }

    /**
     * 
     * GoogleWorkspaceProvider Viewset
     * @param id A unique integer value identifying this Google Workspace Provider. (required)
     * @return GoogleWorkspaceProvider
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GoogleWorkspaceProvider providersGoogleWorkspaceRetrieve(Integer id) throws ApiException {
        ApiResponse<GoogleWorkspaceProvider> localVarResp = providersGoogleWorkspaceRetrieveWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * GoogleWorkspaceProvider Viewset
     * @param id A unique integer value identifying this Google Workspace Provider. (required)
     * @return ApiResponse&lt;GoogleWorkspaceProvider&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GoogleWorkspaceProvider> providersGoogleWorkspaceRetrieveWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = providersGoogleWorkspaceRetrieveValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<GoogleWorkspaceProvider>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * GoogleWorkspaceProvider Viewset
     * @param id A unique integer value identifying this Google Workspace Provider. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersGoogleWorkspaceRetrieveAsync(Integer id, final ApiCallback<GoogleWorkspaceProvider> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersGoogleWorkspaceRetrieveValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<GoogleWorkspaceProvider>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersGoogleWorkspaceSyncStatusRetrieve
     * @param id A unique integer value identifying this Google Workspace Provider. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Task not found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersGoogleWorkspaceSyncStatusRetrieveCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/google_workspace/{id}/sync/status/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersGoogleWorkspaceSyncStatusRetrieveValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling providersGoogleWorkspaceSyncStatusRetrieve(Async)");
        }

        return providersGoogleWorkspaceSyncStatusRetrieveCall(id, _callback);

    }

    /**
     * 
     * Get provider&#39;s sync status
     * @param id A unique integer value identifying this Google Workspace Provider. (required)
     * @return SyncStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Task not found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public SyncStatus providersGoogleWorkspaceSyncStatusRetrieve(Integer id) throws ApiException {
        ApiResponse<SyncStatus> localVarResp = providersGoogleWorkspaceSyncStatusRetrieveWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Get provider&#39;s sync status
     * @param id A unique integer value identifying this Google Workspace Provider. (required)
     * @return ApiResponse&lt;SyncStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Task not found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SyncStatus> providersGoogleWorkspaceSyncStatusRetrieveWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = providersGoogleWorkspaceSyncStatusRetrieveValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<SyncStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get provider&#39;s sync status
     * @param id A unique integer value identifying this Google Workspace Provider. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Task not found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersGoogleWorkspaceSyncStatusRetrieveAsync(Integer id, final ApiCallback<SyncStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersGoogleWorkspaceSyncStatusRetrieveValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<SyncStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersGoogleWorkspaceUpdate
     * @param id A unique integer value identifying this Google Workspace Provider. (required)
     * @param googleWorkspaceProviderRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersGoogleWorkspaceUpdateCall(Integer id, GoogleWorkspaceProviderRequest googleWorkspaceProviderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = googleWorkspaceProviderRequest;

        // create path and map variables
        String localVarPath = "/providers/google_workspace/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersGoogleWorkspaceUpdateValidateBeforeCall(Integer id, GoogleWorkspaceProviderRequest googleWorkspaceProviderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling providersGoogleWorkspaceUpdate(Async)");
        }

        // verify the required parameter 'googleWorkspaceProviderRequest' is set
        if (googleWorkspaceProviderRequest == null) {
            throw new ApiException("Missing the required parameter 'googleWorkspaceProviderRequest' when calling providersGoogleWorkspaceUpdate(Async)");
        }

        return providersGoogleWorkspaceUpdateCall(id, googleWorkspaceProviderRequest, _callback);

    }

    /**
     * 
     * GoogleWorkspaceProvider Viewset
     * @param id A unique integer value identifying this Google Workspace Provider. (required)
     * @param googleWorkspaceProviderRequest  (required)
     * @return GoogleWorkspaceProvider
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GoogleWorkspaceProvider providersGoogleWorkspaceUpdate(Integer id, GoogleWorkspaceProviderRequest googleWorkspaceProviderRequest) throws ApiException {
        ApiResponse<GoogleWorkspaceProvider> localVarResp = providersGoogleWorkspaceUpdateWithHttpInfo(id, googleWorkspaceProviderRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * GoogleWorkspaceProvider Viewset
     * @param id A unique integer value identifying this Google Workspace Provider. (required)
     * @param googleWorkspaceProviderRequest  (required)
     * @return ApiResponse&lt;GoogleWorkspaceProvider&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GoogleWorkspaceProvider> providersGoogleWorkspaceUpdateWithHttpInfo(Integer id, GoogleWorkspaceProviderRequest googleWorkspaceProviderRequest) throws ApiException {
        okhttp3.Call localVarCall = providersGoogleWorkspaceUpdateValidateBeforeCall(id, googleWorkspaceProviderRequest, null);
        Type localVarReturnType = new TypeToken<GoogleWorkspaceProvider>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * GoogleWorkspaceProvider Viewset
     * @param id A unique integer value identifying this Google Workspace Provider. (required)
     * @param googleWorkspaceProviderRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersGoogleWorkspaceUpdateAsync(Integer id, GoogleWorkspaceProviderRequest googleWorkspaceProviderRequest, final ApiCallback<GoogleWorkspaceProvider> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersGoogleWorkspaceUpdateValidateBeforeCall(id, googleWorkspaceProviderRequest, _callback);
        Type localVarReturnType = new TypeToken<GoogleWorkspaceProvider>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersGoogleWorkspaceUsedByList
     * @param id A unique integer value identifying this Google Workspace Provider. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersGoogleWorkspaceUsedByListCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/google_workspace/{id}/used_by/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersGoogleWorkspaceUsedByListValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling providersGoogleWorkspaceUsedByList(Async)");
        }

        return providersGoogleWorkspaceUsedByListCall(id, _callback);

    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param id A unique integer value identifying this Google Workspace Provider. (required)
     * @return List&lt;UsedBy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<UsedBy> providersGoogleWorkspaceUsedByList(Integer id) throws ApiException {
        ApiResponse<List<UsedBy>> localVarResp = providersGoogleWorkspaceUsedByListWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param id A unique integer value identifying this Google Workspace Provider. (required)
     * @return ApiResponse&lt;List&lt;UsedBy&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UsedBy>> providersGoogleWorkspaceUsedByListWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = providersGoogleWorkspaceUsedByListValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of all objects that use this object
     * @param id A unique integer value identifying this Google Workspace Provider. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersGoogleWorkspaceUsedByListAsync(Integer id, final ApiCallback<List<UsedBy>> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersGoogleWorkspaceUsedByListValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersGoogleWorkspaceUsersCreate
     * @param googleWorkspaceProviderUserRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersGoogleWorkspaceUsersCreateCall(GoogleWorkspaceProviderUserRequest googleWorkspaceProviderUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = googleWorkspaceProviderUserRequest;

        // create path and map variables
        String localVarPath = "/providers/google_workspace_users/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersGoogleWorkspaceUsersCreateValidateBeforeCall(GoogleWorkspaceProviderUserRequest googleWorkspaceProviderUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'googleWorkspaceProviderUserRequest' is set
        if (googleWorkspaceProviderUserRequest == null) {
            throw new ApiException("Missing the required parameter 'googleWorkspaceProviderUserRequest' when calling providersGoogleWorkspaceUsersCreate(Async)");
        }

        return providersGoogleWorkspaceUsersCreateCall(googleWorkspaceProviderUserRequest, _callback);

    }

    /**
     * 
     * GoogleWorkspaceProviderUser Viewset
     * @param googleWorkspaceProviderUserRequest  (required)
     * @return GoogleWorkspaceProviderUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GoogleWorkspaceProviderUser providersGoogleWorkspaceUsersCreate(GoogleWorkspaceProviderUserRequest googleWorkspaceProviderUserRequest) throws ApiException {
        ApiResponse<GoogleWorkspaceProviderUser> localVarResp = providersGoogleWorkspaceUsersCreateWithHttpInfo(googleWorkspaceProviderUserRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * GoogleWorkspaceProviderUser Viewset
     * @param googleWorkspaceProviderUserRequest  (required)
     * @return ApiResponse&lt;GoogleWorkspaceProviderUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GoogleWorkspaceProviderUser> providersGoogleWorkspaceUsersCreateWithHttpInfo(GoogleWorkspaceProviderUserRequest googleWorkspaceProviderUserRequest) throws ApiException {
        okhttp3.Call localVarCall = providersGoogleWorkspaceUsersCreateValidateBeforeCall(googleWorkspaceProviderUserRequest, null);
        Type localVarReturnType = new TypeToken<GoogleWorkspaceProviderUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * GoogleWorkspaceProviderUser Viewset
     * @param googleWorkspaceProviderUserRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersGoogleWorkspaceUsersCreateAsync(GoogleWorkspaceProviderUserRequest googleWorkspaceProviderUserRequest, final ApiCallback<GoogleWorkspaceProviderUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersGoogleWorkspaceUsersCreateValidateBeforeCall(googleWorkspaceProviderUserRequest, _callback);
        Type localVarReturnType = new TypeToken<GoogleWorkspaceProviderUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersGoogleWorkspaceUsersDestroy
     * @param id A UUID string identifying this Google Workspace Provider User. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersGoogleWorkspaceUsersDestroyCall(UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/google_workspace_users/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersGoogleWorkspaceUsersDestroyValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling providersGoogleWorkspaceUsersDestroy(Async)");
        }

        return providersGoogleWorkspaceUsersDestroyCall(id, _callback);

    }

    /**
     * 
     * GoogleWorkspaceProviderUser Viewset
     * @param id A UUID string identifying this Google Workspace Provider User. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void providersGoogleWorkspaceUsersDestroy(UUID id) throws ApiException {
        providersGoogleWorkspaceUsersDestroyWithHttpInfo(id);
    }

    /**
     * 
     * GoogleWorkspaceProviderUser Viewset
     * @param id A UUID string identifying this Google Workspace Provider User. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> providersGoogleWorkspaceUsersDestroyWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = providersGoogleWorkspaceUsersDestroyValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * GoogleWorkspaceProviderUser Viewset
     * @param id A UUID string identifying this Google Workspace Provider User. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersGoogleWorkspaceUsersDestroyAsync(UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersGoogleWorkspaceUsersDestroyValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersGoogleWorkspaceUsersList
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param providerId  (optional)
     * @param search A search term. (optional)
     * @param userId  (optional)
     * @param userUsername  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersGoogleWorkspaceUsersListCall(String ordering, Integer page, Integer pageSize, Integer providerId, String search, Integer userId, String userUsername, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/google_workspace_users/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (providerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("provider__id", providerId));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user__id", userId));
        }

        if (userUsername != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user__username", userUsername));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersGoogleWorkspaceUsersListValidateBeforeCall(String ordering, Integer page, Integer pageSize, Integer providerId, String search, Integer userId, String userUsername, final ApiCallback _callback) throws ApiException {
        return providersGoogleWorkspaceUsersListCall(ordering, page, pageSize, providerId, search, userId, userUsername, _callback);

    }

    /**
     * 
     * GoogleWorkspaceProviderUser Viewset
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param providerId  (optional)
     * @param search A search term. (optional)
     * @param userId  (optional)
     * @param userUsername  (optional)
     * @return PaginatedGoogleWorkspaceProviderUserList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedGoogleWorkspaceProviderUserList providersGoogleWorkspaceUsersList(String ordering, Integer page, Integer pageSize, Integer providerId, String search, Integer userId, String userUsername) throws ApiException {
        ApiResponse<PaginatedGoogleWorkspaceProviderUserList> localVarResp = providersGoogleWorkspaceUsersListWithHttpInfo(ordering, page, pageSize, providerId, search, userId, userUsername);
        return localVarResp.getData();
    }

    /**
     * 
     * GoogleWorkspaceProviderUser Viewset
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param providerId  (optional)
     * @param search A search term. (optional)
     * @param userId  (optional)
     * @param userUsername  (optional)
     * @return ApiResponse&lt;PaginatedGoogleWorkspaceProviderUserList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedGoogleWorkspaceProviderUserList> providersGoogleWorkspaceUsersListWithHttpInfo(String ordering, Integer page, Integer pageSize, Integer providerId, String search, Integer userId, String userUsername) throws ApiException {
        okhttp3.Call localVarCall = providersGoogleWorkspaceUsersListValidateBeforeCall(ordering, page, pageSize, providerId, search, userId, userUsername, null);
        Type localVarReturnType = new TypeToken<PaginatedGoogleWorkspaceProviderUserList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * GoogleWorkspaceProviderUser Viewset
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param providerId  (optional)
     * @param search A search term. (optional)
     * @param userId  (optional)
     * @param userUsername  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersGoogleWorkspaceUsersListAsync(String ordering, Integer page, Integer pageSize, Integer providerId, String search, Integer userId, String userUsername, final ApiCallback<PaginatedGoogleWorkspaceProviderUserList> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersGoogleWorkspaceUsersListValidateBeforeCall(ordering, page, pageSize, providerId, search, userId, userUsername, _callback);
        Type localVarReturnType = new TypeToken<PaginatedGoogleWorkspaceProviderUserList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersGoogleWorkspaceUsersRetrieve
     * @param id A UUID string identifying this Google Workspace Provider User. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersGoogleWorkspaceUsersRetrieveCall(UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/google_workspace_users/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersGoogleWorkspaceUsersRetrieveValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling providersGoogleWorkspaceUsersRetrieve(Async)");
        }

        return providersGoogleWorkspaceUsersRetrieveCall(id, _callback);

    }

    /**
     * 
     * GoogleWorkspaceProviderUser Viewset
     * @param id A UUID string identifying this Google Workspace Provider User. (required)
     * @return GoogleWorkspaceProviderUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GoogleWorkspaceProviderUser providersGoogleWorkspaceUsersRetrieve(UUID id) throws ApiException {
        ApiResponse<GoogleWorkspaceProviderUser> localVarResp = providersGoogleWorkspaceUsersRetrieveWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * GoogleWorkspaceProviderUser Viewset
     * @param id A UUID string identifying this Google Workspace Provider User. (required)
     * @return ApiResponse&lt;GoogleWorkspaceProviderUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GoogleWorkspaceProviderUser> providersGoogleWorkspaceUsersRetrieveWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = providersGoogleWorkspaceUsersRetrieveValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<GoogleWorkspaceProviderUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * GoogleWorkspaceProviderUser Viewset
     * @param id A UUID string identifying this Google Workspace Provider User. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersGoogleWorkspaceUsersRetrieveAsync(UUID id, final ApiCallback<GoogleWorkspaceProviderUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersGoogleWorkspaceUsersRetrieveValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<GoogleWorkspaceProviderUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersGoogleWorkspaceUsersUsedByList
     * @param id A UUID string identifying this Google Workspace Provider User. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersGoogleWorkspaceUsersUsedByListCall(UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/google_workspace_users/{id}/used_by/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersGoogleWorkspaceUsersUsedByListValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling providersGoogleWorkspaceUsersUsedByList(Async)");
        }

        return providersGoogleWorkspaceUsersUsedByListCall(id, _callback);

    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param id A UUID string identifying this Google Workspace Provider User. (required)
     * @return List&lt;UsedBy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<UsedBy> providersGoogleWorkspaceUsersUsedByList(UUID id) throws ApiException {
        ApiResponse<List<UsedBy>> localVarResp = providersGoogleWorkspaceUsersUsedByListWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param id A UUID string identifying this Google Workspace Provider User. (required)
     * @return ApiResponse&lt;List&lt;UsedBy&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UsedBy>> providersGoogleWorkspaceUsersUsedByListWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = providersGoogleWorkspaceUsersUsedByListValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of all objects that use this object
     * @param id A UUID string identifying this Google Workspace Provider User. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersGoogleWorkspaceUsersUsedByListAsync(UUID id, final ApiCallback<List<UsedBy>> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersGoogleWorkspaceUsersUsedByListValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersLdapCreate
     * @param ldAPProviderRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersLdapCreateCall(LDAPProviderRequest ldAPProviderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ldAPProviderRequest;

        // create path and map variables
        String localVarPath = "/providers/ldap/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersLdapCreateValidateBeforeCall(LDAPProviderRequest ldAPProviderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ldAPProviderRequest' is set
        if (ldAPProviderRequest == null) {
            throw new ApiException("Missing the required parameter 'ldAPProviderRequest' when calling providersLdapCreate(Async)");
        }

        return providersLdapCreateCall(ldAPProviderRequest, _callback);

    }

    /**
     * 
     * LDAPProvider Viewset
     * @param ldAPProviderRequest  (required)
     * @return LDAPProvider
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public LDAPProvider providersLdapCreate(LDAPProviderRequest ldAPProviderRequest) throws ApiException {
        ApiResponse<LDAPProvider> localVarResp = providersLdapCreateWithHttpInfo(ldAPProviderRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * LDAPProvider Viewset
     * @param ldAPProviderRequest  (required)
     * @return ApiResponse&lt;LDAPProvider&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LDAPProvider> providersLdapCreateWithHttpInfo(LDAPProviderRequest ldAPProviderRequest) throws ApiException {
        okhttp3.Call localVarCall = providersLdapCreateValidateBeforeCall(ldAPProviderRequest, null);
        Type localVarReturnType = new TypeToken<LDAPProvider>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * LDAPProvider Viewset
     * @param ldAPProviderRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersLdapCreateAsync(LDAPProviderRequest ldAPProviderRequest, final ApiCallback<LDAPProvider> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersLdapCreateValidateBeforeCall(ldAPProviderRequest, _callback);
        Type localVarReturnType = new TypeToken<LDAPProvider>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersLdapDestroy
     * @param id A unique integer value identifying this LDAP Provider. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersLdapDestroyCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/ldap/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersLdapDestroyValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling providersLdapDestroy(Async)");
        }

        return providersLdapDestroyCall(id, _callback);

    }

    /**
     * 
     * LDAPProvider Viewset
     * @param id A unique integer value identifying this LDAP Provider. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void providersLdapDestroy(Integer id) throws ApiException {
        providersLdapDestroyWithHttpInfo(id);
    }

    /**
     * 
     * LDAPProvider Viewset
     * @param id A unique integer value identifying this LDAP Provider. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> providersLdapDestroyWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = providersLdapDestroyValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * LDAPProvider Viewset
     * @param id A unique integer value identifying this LDAP Provider. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersLdapDestroyAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersLdapDestroyValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersLdapList
     * @param applicationIsnull  (optional)
     * @param authorizationFlowSlugIexact  (optional)
     * @param baseDnIexact  (optional)
     * @param certificateKpUuidIexact  (optional)
     * @param certificateNameIexact  (optional)
     * @param gidStartNumberIexact  (optional)
     * @param nameIexact  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @param searchGroupGroupUuidIexact  (optional)
     * @param searchGroupNameIexact  (optional)
     * @param tlsServerNameIexact  (optional)
     * @param uidStartNumberIexact  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersLdapListCall(Boolean applicationIsnull, String authorizationFlowSlugIexact, String baseDnIexact, UUID certificateKpUuidIexact, String certificateNameIexact, Integer gidStartNumberIexact, String nameIexact, String ordering, Integer page, Integer pageSize, String search, UUID searchGroupGroupUuidIexact, String searchGroupNameIexact, String tlsServerNameIexact, Integer uidStartNumberIexact, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/ldap/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (applicationIsnull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("application__isnull", applicationIsnull));
        }

        if (authorizationFlowSlugIexact != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("authorization_flow__slug__iexact", authorizationFlowSlugIexact));
        }

        if (baseDnIexact != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("base_dn__iexact", baseDnIexact));
        }

        if (certificateKpUuidIexact != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("certificate__kp_uuid__iexact", certificateKpUuidIexact));
        }

        if (certificateNameIexact != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("certificate__name__iexact", certificateNameIexact));
        }

        if (gidStartNumberIexact != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("gid_start_number__iexact", gidStartNumberIexact));
        }

        if (nameIexact != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iexact", nameIexact));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (searchGroupGroupUuidIexact != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search_group__group_uuid__iexact", searchGroupGroupUuidIexact));
        }

        if (searchGroupNameIexact != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search_group__name__iexact", searchGroupNameIexact));
        }

        if (tlsServerNameIexact != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tls_server_name__iexact", tlsServerNameIexact));
        }

        if (uidStartNumberIexact != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uid_start_number__iexact", uidStartNumberIexact));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersLdapListValidateBeforeCall(Boolean applicationIsnull, String authorizationFlowSlugIexact, String baseDnIexact, UUID certificateKpUuidIexact, String certificateNameIexact, Integer gidStartNumberIexact, String nameIexact, String ordering, Integer page, Integer pageSize, String search, UUID searchGroupGroupUuidIexact, String searchGroupNameIexact, String tlsServerNameIexact, Integer uidStartNumberIexact, final ApiCallback _callback) throws ApiException {
        return providersLdapListCall(applicationIsnull, authorizationFlowSlugIexact, baseDnIexact, certificateKpUuidIexact, certificateNameIexact, gidStartNumberIexact, nameIexact, ordering, page, pageSize, search, searchGroupGroupUuidIexact, searchGroupNameIexact, tlsServerNameIexact, uidStartNumberIexact, _callback);

    }

    /**
     * 
     * LDAPProvider Viewset
     * @param applicationIsnull  (optional)
     * @param authorizationFlowSlugIexact  (optional)
     * @param baseDnIexact  (optional)
     * @param certificateKpUuidIexact  (optional)
     * @param certificateNameIexact  (optional)
     * @param gidStartNumberIexact  (optional)
     * @param nameIexact  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @param searchGroupGroupUuidIexact  (optional)
     * @param searchGroupNameIexact  (optional)
     * @param tlsServerNameIexact  (optional)
     * @param uidStartNumberIexact  (optional)
     * @return PaginatedLDAPProviderList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedLDAPProviderList providersLdapList(Boolean applicationIsnull, String authorizationFlowSlugIexact, String baseDnIexact, UUID certificateKpUuidIexact, String certificateNameIexact, Integer gidStartNumberIexact, String nameIexact, String ordering, Integer page, Integer pageSize, String search, UUID searchGroupGroupUuidIexact, String searchGroupNameIexact, String tlsServerNameIexact, Integer uidStartNumberIexact) throws ApiException {
        ApiResponse<PaginatedLDAPProviderList> localVarResp = providersLdapListWithHttpInfo(applicationIsnull, authorizationFlowSlugIexact, baseDnIexact, certificateKpUuidIexact, certificateNameIexact, gidStartNumberIexact, nameIexact, ordering, page, pageSize, search, searchGroupGroupUuidIexact, searchGroupNameIexact, tlsServerNameIexact, uidStartNumberIexact);
        return localVarResp.getData();
    }

    /**
     * 
     * LDAPProvider Viewset
     * @param applicationIsnull  (optional)
     * @param authorizationFlowSlugIexact  (optional)
     * @param baseDnIexact  (optional)
     * @param certificateKpUuidIexact  (optional)
     * @param certificateNameIexact  (optional)
     * @param gidStartNumberIexact  (optional)
     * @param nameIexact  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @param searchGroupGroupUuidIexact  (optional)
     * @param searchGroupNameIexact  (optional)
     * @param tlsServerNameIexact  (optional)
     * @param uidStartNumberIexact  (optional)
     * @return ApiResponse&lt;PaginatedLDAPProviderList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedLDAPProviderList> providersLdapListWithHttpInfo(Boolean applicationIsnull, String authorizationFlowSlugIexact, String baseDnIexact, UUID certificateKpUuidIexact, String certificateNameIexact, Integer gidStartNumberIexact, String nameIexact, String ordering, Integer page, Integer pageSize, String search, UUID searchGroupGroupUuidIexact, String searchGroupNameIexact, String tlsServerNameIexact, Integer uidStartNumberIexact) throws ApiException {
        okhttp3.Call localVarCall = providersLdapListValidateBeforeCall(applicationIsnull, authorizationFlowSlugIexact, baseDnIexact, certificateKpUuidIexact, certificateNameIexact, gidStartNumberIexact, nameIexact, ordering, page, pageSize, search, searchGroupGroupUuidIexact, searchGroupNameIexact, tlsServerNameIexact, uidStartNumberIexact, null);
        Type localVarReturnType = new TypeToken<PaginatedLDAPProviderList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * LDAPProvider Viewset
     * @param applicationIsnull  (optional)
     * @param authorizationFlowSlugIexact  (optional)
     * @param baseDnIexact  (optional)
     * @param certificateKpUuidIexact  (optional)
     * @param certificateNameIexact  (optional)
     * @param gidStartNumberIexact  (optional)
     * @param nameIexact  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @param searchGroupGroupUuidIexact  (optional)
     * @param searchGroupNameIexact  (optional)
     * @param tlsServerNameIexact  (optional)
     * @param uidStartNumberIexact  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersLdapListAsync(Boolean applicationIsnull, String authorizationFlowSlugIexact, String baseDnIexact, UUID certificateKpUuidIexact, String certificateNameIexact, Integer gidStartNumberIexact, String nameIexact, String ordering, Integer page, Integer pageSize, String search, UUID searchGroupGroupUuidIexact, String searchGroupNameIexact, String tlsServerNameIexact, Integer uidStartNumberIexact, final ApiCallback<PaginatedLDAPProviderList> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersLdapListValidateBeforeCall(applicationIsnull, authorizationFlowSlugIexact, baseDnIexact, certificateKpUuidIexact, certificateNameIexact, gidStartNumberIexact, nameIexact, ordering, page, pageSize, search, searchGroupGroupUuidIexact, searchGroupNameIexact, tlsServerNameIexact, uidStartNumberIexact, _callback);
        Type localVarReturnType = new TypeToken<PaginatedLDAPProviderList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersLdapPartialUpdate
     * @param id A unique integer value identifying this LDAP Provider. (required)
     * @param patchedLDAPProviderRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersLdapPartialUpdateCall(Integer id, PatchedLDAPProviderRequest patchedLDAPProviderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchedLDAPProviderRequest;

        // create path and map variables
        String localVarPath = "/providers/ldap/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersLdapPartialUpdateValidateBeforeCall(Integer id, PatchedLDAPProviderRequest patchedLDAPProviderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling providersLdapPartialUpdate(Async)");
        }

        return providersLdapPartialUpdateCall(id, patchedLDAPProviderRequest, _callback);

    }

    /**
     * 
     * LDAPProvider Viewset
     * @param id A unique integer value identifying this LDAP Provider. (required)
     * @param patchedLDAPProviderRequest  (optional)
     * @return LDAPProvider
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public LDAPProvider providersLdapPartialUpdate(Integer id, PatchedLDAPProviderRequest patchedLDAPProviderRequest) throws ApiException {
        ApiResponse<LDAPProvider> localVarResp = providersLdapPartialUpdateWithHttpInfo(id, patchedLDAPProviderRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * LDAPProvider Viewset
     * @param id A unique integer value identifying this LDAP Provider. (required)
     * @param patchedLDAPProviderRequest  (optional)
     * @return ApiResponse&lt;LDAPProvider&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LDAPProvider> providersLdapPartialUpdateWithHttpInfo(Integer id, PatchedLDAPProviderRequest patchedLDAPProviderRequest) throws ApiException {
        okhttp3.Call localVarCall = providersLdapPartialUpdateValidateBeforeCall(id, patchedLDAPProviderRequest, null);
        Type localVarReturnType = new TypeToken<LDAPProvider>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * LDAPProvider Viewset
     * @param id A unique integer value identifying this LDAP Provider. (required)
     * @param patchedLDAPProviderRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersLdapPartialUpdateAsync(Integer id, PatchedLDAPProviderRequest patchedLDAPProviderRequest, final ApiCallback<LDAPProvider> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersLdapPartialUpdateValidateBeforeCall(id, patchedLDAPProviderRequest, _callback);
        Type localVarReturnType = new TypeToken<LDAPProvider>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersLdapRetrieve
     * @param id A unique integer value identifying this LDAP Provider. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersLdapRetrieveCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/ldap/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersLdapRetrieveValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling providersLdapRetrieve(Async)");
        }

        return providersLdapRetrieveCall(id, _callback);

    }

    /**
     * 
     * LDAPProvider Viewset
     * @param id A unique integer value identifying this LDAP Provider. (required)
     * @return LDAPProvider
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public LDAPProvider providersLdapRetrieve(Integer id) throws ApiException {
        ApiResponse<LDAPProvider> localVarResp = providersLdapRetrieveWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * LDAPProvider Viewset
     * @param id A unique integer value identifying this LDAP Provider. (required)
     * @return ApiResponse&lt;LDAPProvider&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LDAPProvider> providersLdapRetrieveWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = providersLdapRetrieveValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<LDAPProvider>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * LDAPProvider Viewset
     * @param id A unique integer value identifying this LDAP Provider. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersLdapRetrieveAsync(Integer id, final ApiCallback<LDAPProvider> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersLdapRetrieveValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<LDAPProvider>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersLdapUpdate
     * @param id A unique integer value identifying this LDAP Provider. (required)
     * @param ldAPProviderRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersLdapUpdateCall(Integer id, LDAPProviderRequest ldAPProviderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ldAPProviderRequest;

        // create path and map variables
        String localVarPath = "/providers/ldap/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersLdapUpdateValidateBeforeCall(Integer id, LDAPProviderRequest ldAPProviderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling providersLdapUpdate(Async)");
        }

        // verify the required parameter 'ldAPProviderRequest' is set
        if (ldAPProviderRequest == null) {
            throw new ApiException("Missing the required parameter 'ldAPProviderRequest' when calling providersLdapUpdate(Async)");
        }

        return providersLdapUpdateCall(id, ldAPProviderRequest, _callback);

    }

    /**
     * 
     * LDAPProvider Viewset
     * @param id A unique integer value identifying this LDAP Provider. (required)
     * @param ldAPProviderRequest  (required)
     * @return LDAPProvider
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public LDAPProvider providersLdapUpdate(Integer id, LDAPProviderRequest ldAPProviderRequest) throws ApiException {
        ApiResponse<LDAPProvider> localVarResp = providersLdapUpdateWithHttpInfo(id, ldAPProviderRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * LDAPProvider Viewset
     * @param id A unique integer value identifying this LDAP Provider. (required)
     * @param ldAPProviderRequest  (required)
     * @return ApiResponse&lt;LDAPProvider&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LDAPProvider> providersLdapUpdateWithHttpInfo(Integer id, LDAPProviderRequest ldAPProviderRequest) throws ApiException {
        okhttp3.Call localVarCall = providersLdapUpdateValidateBeforeCall(id, ldAPProviderRequest, null);
        Type localVarReturnType = new TypeToken<LDAPProvider>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * LDAPProvider Viewset
     * @param id A unique integer value identifying this LDAP Provider. (required)
     * @param ldAPProviderRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersLdapUpdateAsync(Integer id, LDAPProviderRequest ldAPProviderRequest, final ApiCallback<LDAPProvider> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersLdapUpdateValidateBeforeCall(id, ldAPProviderRequest, _callback);
        Type localVarReturnType = new TypeToken<LDAPProvider>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersLdapUsedByList
     * @param id A unique integer value identifying this LDAP Provider. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersLdapUsedByListCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/ldap/{id}/used_by/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersLdapUsedByListValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling providersLdapUsedByList(Async)");
        }

        return providersLdapUsedByListCall(id, _callback);

    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param id A unique integer value identifying this LDAP Provider. (required)
     * @return List&lt;UsedBy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<UsedBy> providersLdapUsedByList(Integer id) throws ApiException {
        ApiResponse<List<UsedBy>> localVarResp = providersLdapUsedByListWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param id A unique integer value identifying this LDAP Provider. (required)
     * @return ApiResponse&lt;List&lt;UsedBy&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UsedBy>> providersLdapUsedByListWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = providersLdapUsedByListValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of all objects that use this object
     * @param id A unique integer value identifying this LDAP Provider. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersLdapUsedByListAsync(Integer id, final ApiCallback<List<UsedBy>> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersLdapUsedByListValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersMicrosoftEntraCreate
     * @param microsoftEntraProviderRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersMicrosoftEntraCreateCall(MicrosoftEntraProviderRequest microsoftEntraProviderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = microsoftEntraProviderRequest;

        // create path and map variables
        String localVarPath = "/providers/microsoft_entra/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersMicrosoftEntraCreateValidateBeforeCall(MicrosoftEntraProviderRequest microsoftEntraProviderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'microsoftEntraProviderRequest' is set
        if (microsoftEntraProviderRequest == null) {
            throw new ApiException("Missing the required parameter 'microsoftEntraProviderRequest' when calling providersMicrosoftEntraCreate(Async)");
        }

        return providersMicrosoftEntraCreateCall(microsoftEntraProviderRequest, _callback);

    }

    /**
     * 
     * MicrosoftEntraProvider Viewset
     * @param microsoftEntraProviderRequest  (required)
     * @return MicrosoftEntraProvider
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public MicrosoftEntraProvider providersMicrosoftEntraCreate(MicrosoftEntraProviderRequest microsoftEntraProviderRequest) throws ApiException {
        ApiResponse<MicrosoftEntraProvider> localVarResp = providersMicrosoftEntraCreateWithHttpInfo(microsoftEntraProviderRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * MicrosoftEntraProvider Viewset
     * @param microsoftEntraProviderRequest  (required)
     * @return ApiResponse&lt;MicrosoftEntraProvider&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MicrosoftEntraProvider> providersMicrosoftEntraCreateWithHttpInfo(MicrosoftEntraProviderRequest microsoftEntraProviderRequest) throws ApiException {
        okhttp3.Call localVarCall = providersMicrosoftEntraCreateValidateBeforeCall(microsoftEntraProviderRequest, null);
        Type localVarReturnType = new TypeToken<MicrosoftEntraProvider>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * MicrosoftEntraProvider Viewset
     * @param microsoftEntraProviderRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersMicrosoftEntraCreateAsync(MicrosoftEntraProviderRequest microsoftEntraProviderRequest, final ApiCallback<MicrosoftEntraProvider> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersMicrosoftEntraCreateValidateBeforeCall(microsoftEntraProviderRequest, _callback);
        Type localVarReturnType = new TypeToken<MicrosoftEntraProvider>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersMicrosoftEntraDestroy
     * @param id A unique integer value identifying this Microsoft Entra Provider. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersMicrosoftEntraDestroyCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/microsoft_entra/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersMicrosoftEntraDestroyValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling providersMicrosoftEntraDestroy(Async)");
        }

        return providersMicrosoftEntraDestroyCall(id, _callback);

    }

    /**
     * 
     * MicrosoftEntraProvider Viewset
     * @param id A unique integer value identifying this Microsoft Entra Provider. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void providersMicrosoftEntraDestroy(Integer id) throws ApiException {
        providersMicrosoftEntraDestroyWithHttpInfo(id);
    }

    /**
     * 
     * MicrosoftEntraProvider Viewset
     * @param id A unique integer value identifying this Microsoft Entra Provider. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> providersMicrosoftEntraDestroyWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = providersMicrosoftEntraDestroyValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * MicrosoftEntraProvider Viewset
     * @param id A unique integer value identifying this Microsoft Entra Provider. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersMicrosoftEntraDestroyAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersMicrosoftEntraDestroyValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersMicrosoftEntraGroupsCreate
     * @param microsoftEntraProviderGroupRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersMicrosoftEntraGroupsCreateCall(MicrosoftEntraProviderGroupRequest microsoftEntraProviderGroupRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = microsoftEntraProviderGroupRequest;

        // create path and map variables
        String localVarPath = "/providers/microsoft_entra_groups/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersMicrosoftEntraGroupsCreateValidateBeforeCall(MicrosoftEntraProviderGroupRequest microsoftEntraProviderGroupRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'microsoftEntraProviderGroupRequest' is set
        if (microsoftEntraProviderGroupRequest == null) {
            throw new ApiException("Missing the required parameter 'microsoftEntraProviderGroupRequest' when calling providersMicrosoftEntraGroupsCreate(Async)");
        }

        return providersMicrosoftEntraGroupsCreateCall(microsoftEntraProviderGroupRequest, _callback);

    }

    /**
     * 
     * MicrosoftEntraProviderGroup Viewset
     * @param microsoftEntraProviderGroupRequest  (required)
     * @return MicrosoftEntraProviderGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public MicrosoftEntraProviderGroup providersMicrosoftEntraGroupsCreate(MicrosoftEntraProviderGroupRequest microsoftEntraProviderGroupRequest) throws ApiException {
        ApiResponse<MicrosoftEntraProviderGroup> localVarResp = providersMicrosoftEntraGroupsCreateWithHttpInfo(microsoftEntraProviderGroupRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * MicrosoftEntraProviderGroup Viewset
     * @param microsoftEntraProviderGroupRequest  (required)
     * @return ApiResponse&lt;MicrosoftEntraProviderGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MicrosoftEntraProviderGroup> providersMicrosoftEntraGroupsCreateWithHttpInfo(MicrosoftEntraProviderGroupRequest microsoftEntraProviderGroupRequest) throws ApiException {
        okhttp3.Call localVarCall = providersMicrosoftEntraGroupsCreateValidateBeforeCall(microsoftEntraProviderGroupRequest, null);
        Type localVarReturnType = new TypeToken<MicrosoftEntraProviderGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * MicrosoftEntraProviderGroup Viewset
     * @param microsoftEntraProviderGroupRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersMicrosoftEntraGroupsCreateAsync(MicrosoftEntraProviderGroupRequest microsoftEntraProviderGroupRequest, final ApiCallback<MicrosoftEntraProviderGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersMicrosoftEntraGroupsCreateValidateBeforeCall(microsoftEntraProviderGroupRequest, _callback);
        Type localVarReturnType = new TypeToken<MicrosoftEntraProviderGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersMicrosoftEntraGroupsDestroy
     * @param id A UUID string identifying this Microsoft Entra Provider Group. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersMicrosoftEntraGroupsDestroyCall(UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/microsoft_entra_groups/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersMicrosoftEntraGroupsDestroyValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling providersMicrosoftEntraGroupsDestroy(Async)");
        }

        return providersMicrosoftEntraGroupsDestroyCall(id, _callback);

    }

    /**
     * 
     * MicrosoftEntraProviderGroup Viewset
     * @param id A UUID string identifying this Microsoft Entra Provider Group. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void providersMicrosoftEntraGroupsDestroy(UUID id) throws ApiException {
        providersMicrosoftEntraGroupsDestroyWithHttpInfo(id);
    }

    /**
     * 
     * MicrosoftEntraProviderGroup Viewset
     * @param id A UUID string identifying this Microsoft Entra Provider Group. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> providersMicrosoftEntraGroupsDestroyWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = providersMicrosoftEntraGroupsDestroyValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * MicrosoftEntraProviderGroup Viewset
     * @param id A UUID string identifying this Microsoft Entra Provider Group. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersMicrosoftEntraGroupsDestroyAsync(UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersMicrosoftEntraGroupsDestroyValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersMicrosoftEntraGroupsList
     * @param groupGroupUuid  (optional)
     * @param groupName  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param providerId  (optional)
     * @param search A search term. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersMicrosoftEntraGroupsListCall(UUID groupGroupUuid, String groupName, String ordering, Integer page, Integer pageSize, Integer providerId, String search, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/microsoft_entra_groups/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (groupGroupUuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group__group_uuid", groupGroupUuid));
        }

        if (groupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group__name", groupName));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (providerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("provider__id", providerId));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersMicrosoftEntraGroupsListValidateBeforeCall(UUID groupGroupUuid, String groupName, String ordering, Integer page, Integer pageSize, Integer providerId, String search, final ApiCallback _callback) throws ApiException {
        return providersMicrosoftEntraGroupsListCall(groupGroupUuid, groupName, ordering, page, pageSize, providerId, search, _callback);

    }

    /**
     * 
     * MicrosoftEntraProviderGroup Viewset
     * @param groupGroupUuid  (optional)
     * @param groupName  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param providerId  (optional)
     * @param search A search term. (optional)
     * @return PaginatedMicrosoftEntraProviderGroupList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedMicrosoftEntraProviderGroupList providersMicrosoftEntraGroupsList(UUID groupGroupUuid, String groupName, String ordering, Integer page, Integer pageSize, Integer providerId, String search) throws ApiException {
        ApiResponse<PaginatedMicrosoftEntraProviderGroupList> localVarResp = providersMicrosoftEntraGroupsListWithHttpInfo(groupGroupUuid, groupName, ordering, page, pageSize, providerId, search);
        return localVarResp.getData();
    }

    /**
     * 
     * MicrosoftEntraProviderGroup Viewset
     * @param groupGroupUuid  (optional)
     * @param groupName  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param providerId  (optional)
     * @param search A search term. (optional)
     * @return ApiResponse&lt;PaginatedMicrosoftEntraProviderGroupList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedMicrosoftEntraProviderGroupList> providersMicrosoftEntraGroupsListWithHttpInfo(UUID groupGroupUuid, String groupName, String ordering, Integer page, Integer pageSize, Integer providerId, String search) throws ApiException {
        okhttp3.Call localVarCall = providersMicrosoftEntraGroupsListValidateBeforeCall(groupGroupUuid, groupName, ordering, page, pageSize, providerId, search, null);
        Type localVarReturnType = new TypeToken<PaginatedMicrosoftEntraProviderGroupList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * MicrosoftEntraProviderGroup Viewset
     * @param groupGroupUuid  (optional)
     * @param groupName  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param providerId  (optional)
     * @param search A search term. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersMicrosoftEntraGroupsListAsync(UUID groupGroupUuid, String groupName, String ordering, Integer page, Integer pageSize, Integer providerId, String search, final ApiCallback<PaginatedMicrosoftEntraProviderGroupList> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersMicrosoftEntraGroupsListValidateBeforeCall(groupGroupUuid, groupName, ordering, page, pageSize, providerId, search, _callback);
        Type localVarReturnType = new TypeToken<PaginatedMicrosoftEntraProviderGroupList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersMicrosoftEntraGroupsRetrieve
     * @param id A UUID string identifying this Microsoft Entra Provider Group. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersMicrosoftEntraGroupsRetrieveCall(UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/microsoft_entra_groups/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersMicrosoftEntraGroupsRetrieveValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling providersMicrosoftEntraGroupsRetrieve(Async)");
        }

        return providersMicrosoftEntraGroupsRetrieveCall(id, _callback);

    }

    /**
     * 
     * MicrosoftEntraProviderGroup Viewset
     * @param id A UUID string identifying this Microsoft Entra Provider Group. (required)
     * @return MicrosoftEntraProviderGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public MicrosoftEntraProviderGroup providersMicrosoftEntraGroupsRetrieve(UUID id) throws ApiException {
        ApiResponse<MicrosoftEntraProviderGroup> localVarResp = providersMicrosoftEntraGroupsRetrieveWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * MicrosoftEntraProviderGroup Viewset
     * @param id A UUID string identifying this Microsoft Entra Provider Group. (required)
     * @return ApiResponse&lt;MicrosoftEntraProviderGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MicrosoftEntraProviderGroup> providersMicrosoftEntraGroupsRetrieveWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = providersMicrosoftEntraGroupsRetrieveValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<MicrosoftEntraProviderGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * MicrosoftEntraProviderGroup Viewset
     * @param id A UUID string identifying this Microsoft Entra Provider Group. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersMicrosoftEntraGroupsRetrieveAsync(UUID id, final ApiCallback<MicrosoftEntraProviderGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersMicrosoftEntraGroupsRetrieveValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<MicrosoftEntraProviderGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersMicrosoftEntraGroupsUsedByList
     * @param id A UUID string identifying this Microsoft Entra Provider Group. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersMicrosoftEntraGroupsUsedByListCall(UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/microsoft_entra_groups/{id}/used_by/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersMicrosoftEntraGroupsUsedByListValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling providersMicrosoftEntraGroupsUsedByList(Async)");
        }

        return providersMicrosoftEntraGroupsUsedByListCall(id, _callback);

    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param id A UUID string identifying this Microsoft Entra Provider Group. (required)
     * @return List&lt;UsedBy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<UsedBy> providersMicrosoftEntraGroupsUsedByList(UUID id) throws ApiException {
        ApiResponse<List<UsedBy>> localVarResp = providersMicrosoftEntraGroupsUsedByListWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param id A UUID string identifying this Microsoft Entra Provider Group. (required)
     * @return ApiResponse&lt;List&lt;UsedBy&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UsedBy>> providersMicrosoftEntraGroupsUsedByListWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = providersMicrosoftEntraGroupsUsedByListValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of all objects that use this object
     * @param id A UUID string identifying this Microsoft Entra Provider Group. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersMicrosoftEntraGroupsUsedByListAsync(UUID id, final ApiCallback<List<UsedBy>> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersMicrosoftEntraGroupsUsedByListValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersMicrosoftEntraList
     * @param excludeUsersServiceAccount  (optional)
     * @param filterGroup  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersMicrosoftEntraListCall(Boolean excludeUsersServiceAccount, UUID filterGroup, String name, String ordering, Integer page, Integer pageSize, String search, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/microsoft_entra/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (excludeUsersServiceAccount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_users_service_account", excludeUsersServiceAccount));
        }

        if (filterGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_group", filterGroup));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersMicrosoftEntraListValidateBeforeCall(Boolean excludeUsersServiceAccount, UUID filterGroup, String name, String ordering, Integer page, Integer pageSize, String search, final ApiCallback _callback) throws ApiException {
        return providersMicrosoftEntraListCall(excludeUsersServiceAccount, filterGroup, name, ordering, page, pageSize, search, _callback);

    }

    /**
     * 
     * MicrosoftEntraProvider Viewset
     * @param excludeUsersServiceAccount  (optional)
     * @param filterGroup  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @return PaginatedMicrosoftEntraProviderList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedMicrosoftEntraProviderList providersMicrosoftEntraList(Boolean excludeUsersServiceAccount, UUID filterGroup, String name, String ordering, Integer page, Integer pageSize, String search) throws ApiException {
        ApiResponse<PaginatedMicrosoftEntraProviderList> localVarResp = providersMicrosoftEntraListWithHttpInfo(excludeUsersServiceAccount, filterGroup, name, ordering, page, pageSize, search);
        return localVarResp.getData();
    }

    /**
     * 
     * MicrosoftEntraProvider Viewset
     * @param excludeUsersServiceAccount  (optional)
     * @param filterGroup  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @return ApiResponse&lt;PaginatedMicrosoftEntraProviderList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedMicrosoftEntraProviderList> providersMicrosoftEntraListWithHttpInfo(Boolean excludeUsersServiceAccount, UUID filterGroup, String name, String ordering, Integer page, Integer pageSize, String search) throws ApiException {
        okhttp3.Call localVarCall = providersMicrosoftEntraListValidateBeforeCall(excludeUsersServiceAccount, filterGroup, name, ordering, page, pageSize, search, null);
        Type localVarReturnType = new TypeToken<PaginatedMicrosoftEntraProviderList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * MicrosoftEntraProvider Viewset
     * @param excludeUsersServiceAccount  (optional)
     * @param filterGroup  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersMicrosoftEntraListAsync(Boolean excludeUsersServiceAccount, UUID filterGroup, String name, String ordering, Integer page, Integer pageSize, String search, final ApiCallback<PaginatedMicrosoftEntraProviderList> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersMicrosoftEntraListValidateBeforeCall(excludeUsersServiceAccount, filterGroup, name, ordering, page, pageSize, search, _callback);
        Type localVarReturnType = new TypeToken<PaginatedMicrosoftEntraProviderList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersMicrosoftEntraPartialUpdate
     * @param id A unique integer value identifying this Microsoft Entra Provider. (required)
     * @param patchedMicrosoftEntraProviderRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersMicrosoftEntraPartialUpdateCall(Integer id, PatchedMicrosoftEntraProviderRequest patchedMicrosoftEntraProviderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchedMicrosoftEntraProviderRequest;

        // create path and map variables
        String localVarPath = "/providers/microsoft_entra/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersMicrosoftEntraPartialUpdateValidateBeforeCall(Integer id, PatchedMicrosoftEntraProviderRequest patchedMicrosoftEntraProviderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling providersMicrosoftEntraPartialUpdate(Async)");
        }

        return providersMicrosoftEntraPartialUpdateCall(id, patchedMicrosoftEntraProviderRequest, _callback);

    }

    /**
     * 
     * MicrosoftEntraProvider Viewset
     * @param id A unique integer value identifying this Microsoft Entra Provider. (required)
     * @param patchedMicrosoftEntraProviderRequest  (optional)
     * @return MicrosoftEntraProvider
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public MicrosoftEntraProvider providersMicrosoftEntraPartialUpdate(Integer id, PatchedMicrosoftEntraProviderRequest patchedMicrosoftEntraProviderRequest) throws ApiException {
        ApiResponse<MicrosoftEntraProvider> localVarResp = providersMicrosoftEntraPartialUpdateWithHttpInfo(id, patchedMicrosoftEntraProviderRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * MicrosoftEntraProvider Viewset
     * @param id A unique integer value identifying this Microsoft Entra Provider. (required)
     * @param patchedMicrosoftEntraProviderRequest  (optional)
     * @return ApiResponse&lt;MicrosoftEntraProvider&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MicrosoftEntraProvider> providersMicrosoftEntraPartialUpdateWithHttpInfo(Integer id, PatchedMicrosoftEntraProviderRequest patchedMicrosoftEntraProviderRequest) throws ApiException {
        okhttp3.Call localVarCall = providersMicrosoftEntraPartialUpdateValidateBeforeCall(id, patchedMicrosoftEntraProviderRequest, null);
        Type localVarReturnType = new TypeToken<MicrosoftEntraProvider>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * MicrosoftEntraProvider Viewset
     * @param id A unique integer value identifying this Microsoft Entra Provider. (required)
     * @param patchedMicrosoftEntraProviderRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersMicrosoftEntraPartialUpdateAsync(Integer id, PatchedMicrosoftEntraProviderRequest patchedMicrosoftEntraProviderRequest, final ApiCallback<MicrosoftEntraProvider> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersMicrosoftEntraPartialUpdateValidateBeforeCall(id, patchedMicrosoftEntraProviderRequest, _callback);
        Type localVarReturnType = new TypeToken<MicrosoftEntraProvider>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersMicrosoftEntraRetrieve
     * @param id A unique integer value identifying this Microsoft Entra Provider. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersMicrosoftEntraRetrieveCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/microsoft_entra/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersMicrosoftEntraRetrieveValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling providersMicrosoftEntraRetrieve(Async)");
        }

        return providersMicrosoftEntraRetrieveCall(id, _callback);

    }

    /**
     * 
     * MicrosoftEntraProvider Viewset
     * @param id A unique integer value identifying this Microsoft Entra Provider. (required)
     * @return MicrosoftEntraProvider
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public MicrosoftEntraProvider providersMicrosoftEntraRetrieve(Integer id) throws ApiException {
        ApiResponse<MicrosoftEntraProvider> localVarResp = providersMicrosoftEntraRetrieveWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * MicrosoftEntraProvider Viewset
     * @param id A unique integer value identifying this Microsoft Entra Provider. (required)
     * @return ApiResponse&lt;MicrosoftEntraProvider&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MicrosoftEntraProvider> providersMicrosoftEntraRetrieveWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = providersMicrosoftEntraRetrieveValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<MicrosoftEntraProvider>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * MicrosoftEntraProvider Viewset
     * @param id A unique integer value identifying this Microsoft Entra Provider. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersMicrosoftEntraRetrieveAsync(Integer id, final ApiCallback<MicrosoftEntraProvider> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersMicrosoftEntraRetrieveValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<MicrosoftEntraProvider>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersMicrosoftEntraSyncStatusRetrieve
     * @param id A unique integer value identifying this Microsoft Entra Provider. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Task not found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersMicrosoftEntraSyncStatusRetrieveCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/microsoft_entra/{id}/sync/status/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersMicrosoftEntraSyncStatusRetrieveValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling providersMicrosoftEntraSyncStatusRetrieve(Async)");
        }

        return providersMicrosoftEntraSyncStatusRetrieveCall(id, _callback);

    }

    /**
     * 
     * Get provider&#39;s sync status
     * @param id A unique integer value identifying this Microsoft Entra Provider. (required)
     * @return SyncStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Task not found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public SyncStatus providersMicrosoftEntraSyncStatusRetrieve(Integer id) throws ApiException {
        ApiResponse<SyncStatus> localVarResp = providersMicrosoftEntraSyncStatusRetrieveWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Get provider&#39;s sync status
     * @param id A unique integer value identifying this Microsoft Entra Provider. (required)
     * @return ApiResponse&lt;SyncStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Task not found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SyncStatus> providersMicrosoftEntraSyncStatusRetrieveWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = providersMicrosoftEntraSyncStatusRetrieveValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<SyncStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get provider&#39;s sync status
     * @param id A unique integer value identifying this Microsoft Entra Provider. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Task not found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersMicrosoftEntraSyncStatusRetrieveAsync(Integer id, final ApiCallback<SyncStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersMicrosoftEntraSyncStatusRetrieveValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<SyncStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersMicrosoftEntraUpdate
     * @param id A unique integer value identifying this Microsoft Entra Provider. (required)
     * @param microsoftEntraProviderRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersMicrosoftEntraUpdateCall(Integer id, MicrosoftEntraProviderRequest microsoftEntraProviderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = microsoftEntraProviderRequest;

        // create path and map variables
        String localVarPath = "/providers/microsoft_entra/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersMicrosoftEntraUpdateValidateBeforeCall(Integer id, MicrosoftEntraProviderRequest microsoftEntraProviderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling providersMicrosoftEntraUpdate(Async)");
        }

        // verify the required parameter 'microsoftEntraProviderRequest' is set
        if (microsoftEntraProviderRequest == null) {
            throw new ApiException("Missing the required parameter 'microsoftEntraProviderRequest' when calling providersMicrosoftEntraUpdate(Async)");
        }

        return providersMicrosoftEntraUpdateCall(id, microsoftEntraProviderRequest, _callback);

    }

    /**
     * 
     * MicrosoftEntraProvider Viewset
     * @param id A unique integer value identifying this Microsoft Entra Provider. (required)
     * @param microsoftEntraProviderRequest  (required)
     * @return MicrosoftEntraProvider
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public MicrosoftEntraProvider providersMicrosoftEntraUpdate(Integer id, MicrosoftEntraProviderRequest microsoftEntraProviderRequest) throws ApiException {
        ApiResponse<MicrosoftEntraProvider> localVarResp = providersMicrosoftEntraUpdateWithHttpInfo(id, microsoftEntraProviderRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * MicrosoftEntraProvider Viewset
     * @param id A unique integer value identifying this Microsoft Entra Provider. (required)
     * @param microsoftEntraProviderRequest  (required)
     * @return ApiResponse&lt;MicrosoftEntraProvider&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MicrosoftEntraProvider> providersMicrosoftEntraUpdateWithHttpInfo(Integer id, MicrosoftEntraProviderRequest microsoftEntraProviderRequest) throws ApiException {
        okhttp3.Call localVarCall = providersMicrosoftEntraUpdateValidateBeforeCall(id, microsoftEntraProviderRequest, null);
        Type localVarReturnType = new TypeToken<MicrosoftEntraProvider>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * MicrosoftEntraProvider Viewset
     * @param id A unique integer value identifying this Microsoft Entra Provider. (required)
     * @param microsoftEntraProviderRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersMicrosoftEntraUpdateAsync(Integer id, MicrosoftEntraProviderRequest microsoftEntraProviderRequest, final ApiCallback<MicrosoftEntraProvider> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersMicrosoftEntraUpdateValidateBeforeCall(id, microsoftEntraProviderRequest, _callback);
        Type localVarReturnType = new TypeToken<MicrosoftEntraProvider>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersMicrosoftEntraUsedByList
     * @param id A unique integer value identifying this Microsoft Entra Provider. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersMicrosoftEntraUsedByListCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/microsoft_entra/{id}/used_by/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersMicrosoftEntraUsedByListValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling providersMicrosoftEntraUsedByList(Async)");
        }

        return providersMicrosoftEntraUsedByListCall(id, _callback);

    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param id A unique integer value identifying this Microsoft Entra Provider. (required)
     * @return List&lt;UsedBy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<UsedBy> providersMicrosoftEntraUsedByList(Integer id) throws ApiException {
        ApiResponse<List<UsedBy>> localVarResp = providersMicrosoftEntraUsedByListWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param id A unique integer value identifying this Microsoft Entra Provider. (required)
     * @return ApiResponse&lt;List&lt;UsedBy&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UsedBy>> providersMicrosoftEntraUsedByListWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = providersMicrosoftEntraUsedByListValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of all objects that use this object
     * @param id A unique integer value identifying this Microsoft Entra Provider. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersMicrosoftEntraUsedByListAsync(Integer id, final ApiCallback<List<UsedBy>> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersMicrosoftEntraUsedByListValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersMicrosoftEntraUsersCreate
     * @param microsoftEntraProviderUserRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersMicrosoftEntraUsersCreateCall(MicrosoftEntraProviderUserRequest microsoftEntraProviderUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = microsoftEntraProviderUserRequest;

        // create path and map variables
        String localVarPath = "/providers/microsoft_entra_users/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersMicrosoftEntraUsersCreateValidateBeforeCall(MicrosoftEntraProviderUserRequest microsoftEntraProviderUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'microsoftEntraProviderUserRequest' is set
        if (microsoftEntraProviderUserRequest == null) {
            throw new ApiException("Missing the required parameter 'microsoftEntraProviderUserRequest' when calling providersMicrosoftEntraUsersCreate(Async)");
        }

        return providersMicrosoftEntraUsersCreateCall(microsoftEntraProviderUserRequest, _callback);

    }

    /**
     * 
     * MicrosoftEntraProviderUser Viewset
     * @param microsoftEntraProviderUserRequest  (required)
     * @return MicrosoftEntraProviderUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public MicrosoftEntraProviderUser providersMicrosoftEntraUsersCreate(MicrosoftEntraProviderUserRequest microsoftEntraProviderUserRequest) throws ApiException {
        ApiResponse<MicrosoftEntraProviderUser> localVarResp = providersMicrosoftEntraUsersCreateWithHttpInfo(microsoftEntraProviderUserRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * MicrosoftEntraProviderUser Viewset
     * @param microsoftEntraProviderUserRequest  (required)
     * @return ApiResponse&lt;MicrosoftEntraProviderUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MicrosoftEntraProviderUser> providersMicrosoftEntraUsersCreateWithHttpInfo(MicrosoftEntraProviderUserRequest microsoftEntraProviderUserRequest) throws ApiException {
        okhttp3.Call localVarCall = providersMicrosoftEntraUsersCreateValidateBeforeCall(microsoftEntraProviderUserRequest, null);
        Type localVarReturnType = new TypeToken<MicrosoftEntraProviderUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * MicrosoftEntraProviderUser Viewset
     * @param microsoftEntraProviderUserRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersMicrosoftEntraUsersCreateAsync(MicrosoftEntraProviderUserRequest microsoftEntraProviderUserRequest, final ApiCallback<MicrosoftEntraProviderUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersMicrosoftEntraUsersCreateValidateBeforeCall(microsoftEntraProviderUserRequest, _callback);
        Type localVarReturnType = new TypeToken<MicrosoftEntraProviderUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersMicrosoftEntraUsersDestroy
     * @param id A UUID string identifying this Microsoft Entra Provider User. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersMicrosoftEntraUsersDestroyCall(UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/microsoft_entra_users/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersMicrosoftEntraUsersDestroyValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling providersMicrosoftEntraUsersDestroy(Async)");
        }

        return providersMicrosoftEntraUsersDestroyCall(id, _callback);

    }

    /**
     * 
     * MicrosoftEntraProviderUser Viewset
     * @param id A UUID string identifying this Microsoft Entra Provider User. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void providersMicrosoftEntraUsersDestroy(UUID id) throws ApiException {
        providersMicrosoftEntraUsersDestroyWithHttpInfo(id);
    }

    /**
     * 
     * MicrosoftEntraProviderUser Viewset
     * @param id A UUID string identifying this Microsoft Entra Provider User. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> providersMicrosoftEntraUsersDestroyWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = providersMicrosoftEntraUsersDestroyValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * MicrosoftEntraProviderUser Viewset
     * @param id A UUID string identifying this Microsoft Entra Provider User. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersMicrosoftEntraUsersDestroyAsync(UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersMicrosoftEntraUsersDestroyValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersMicrosoftEntraUsersList
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param providerId  (optional)
     * @param search A search term. (optional)
     * @param userId  (optional)
     * @param userUsername  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersMicrosoftEntraUsersListCall(String ordering, Integer page, Integer pageSize, Integer providerId, String search, Integer userId, String userUsername, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/microsoft_entra_users/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (providerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("provider__id", providerId));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user__id", userId));
        }

        if (userUsername != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user__username", userUsername));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersMicrosoftEntraUsersListValidateBeforeCall(String ordering, Integer page, Integer pageSize, Integer providerId, String search, Integer userId, String userUsername, final ApiCallback _callback) throws ApiException {
        return providersMicrosoftEntraUsersListCall(ordering, page, pageSize, providerId, search, userId, userUsername, _callback);

    }

    /**
     * 
     * MicrosoftEntraProviderUser Viewset
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param providerId  (optional)
     * @param search A search term. (optional)
     * @param userId  (optional)
     * @param userUsername  (optional)
     * @return PaginatedMicrosoftEntraProviderUserList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedMicrosoftEntraProviderUserList providersMicrosoftEntraUsersList(String ordering, Integer page, Integer pageSize, Integer providerId, String search, Integer userId, String userUsername) throws ApiException {
        ApiResponse<PaginatedMicrosoftEntraProviderUserList> localVarResp = providersMicrosoftEntraUsersListWithHttpInfo(ordering, page, pageSize, providerId, search, userId, userUsername);
        return localVarResp.getData();
    }

    /**
     * 
     * MicrosoftEntraProviderUser Viewset
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param providerId  (optional)
     * @param search A search term. (optional)
     * @param userId  (optional)
     * @param userUsername  (optional)
     * @return ApiResponse&lt;PaginatedMicrosoftEntraProviderUserList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedMicrosoftEntraProviderUserList> providersMicrosoftEntraUsersListWithHttpInfo(String ordering, Integer page, Integer pageSize, Integer providerId, String search, Integer userId, String userUsername) throws ApiException {
        okhttp3.Call localVarCall = providersMicrosoftEntraUsersListValidateBeforeCall(ordering, page, pageSize, providerId, search, userId, userUsername, null);
        Type localVarReturnType = new TypeToken<PaginatedMicrosoftEntraProviderUserList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * MicrosoftEntraProviderUser Viewset
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param providerId  (optional)
     * @param search A search term. (optional)
     * @param userId  (optional)
     * @param userUsername  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersMicrosoftEntraUsersListAsync(String ordering, Integer page, Integer pageSize, Integer providerId, String search, Integer userId, String userUsername, final ApiCallback<PaginatedMicrosoftEntraProviderUserList> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersMicrosoftEntraUsersListValidateBeforeCall(ordering, page, pageSize, providerId, search, userId, userUsername, _callback);
        Type localVarReturnType = new TypeToken<PaginatedMicrosoftEntraProviderUserList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersMicrosoftEntraUsersRetrieve
     * @param id A UUID string identifying this Microsoft Entra Provider User. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersMicrosoftEntraUsersRetrieveCall(UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/microsoft_entra_users/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersMicrosoftEntraUsersRetrieveValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling providersMicrosoftEntraUsersRetrieve(Async)");
        }

        return providersMicrosoftEntraUsersRetrieveCall(id, _callback);

    }

    /**
     * 
     * MicrosoftEntraProviderUser Viewset
     * @param id A UUID string identifying this Microsoft Entra Provider User. (required)
     * @return MicrosoftEntraProviderUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public MicrosoftEntraProviderUser providersMicrosoftEntraUsersRetrieve(UUID id) throws ApiException {
        ApiResponse<MicrosoftEntraProviderUser> localVarResp = providersMicrosoftEntraUsersRetrieveWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * MicrosoftEntraProviderUser Viewset
     * @param id A UUID string identifying this Microsoft Entra Provider User. (required)
     * @return ApiResponse&lt;MicrosoftEntraProviderUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MicrosoftEntraProviderUser> providersMicrosoftEntraUsersRetrieveWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = providersMicrosoftEntraUsersRetrieveValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<MicrosoftEntraProviderUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * MicrosoftEntraProviderUser Viewset
     * @param id A UUID string identifying this Microsoft Entra Provider User. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersMicrosoftEntraUsersRetrieveAsync(UUID id, final ApiCallback<MicrosoftEntraProviderUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersMicrosoftEntraUsersRetrieveValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<MicrosoftEntraProviderUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersMicrosoftEntraUsersUsedByList
     * @param id A UUID string identifying this Microsoft Entra Provider User. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersMicrosoftEntraUsersUsedByListCall(UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/microsoft_entra_users/{id}/used_by/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersMicrosoftEntraUsersUsedByListValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling providersMicrosoftEntraUsersUsedByList(Async)");
        }

        return providersMicrosoftEntraUsersUsedByListCall(id, _callback);

    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param id A UUID string identifying this Microsoft Entra Provider User. (required)
     * @return List&lt;UsedBy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<UsedBy> providersMicrosoftEntraUsersUsedByList(UUID id) throws ApiException {
        ApiResponse<List<UsedBy>> localVarResp = providersMicrosoftEntraUsersUsedByListWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param id A UUID string identifying this Microsoft Entra Provider User. (required)
     * @return ApiResponse&lt;List&lt;UsedBy&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UsedBy>> providersMicrosoftEntraUsersUsedByListWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = providersMicrosoftEntraUsersUsedByListValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of all objects that use this object
     * @param id A UUID string identifying this Microsoft Entra Provider User. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersMicrosoftEntraUsersUsedByListAsync(UUID id, final ApiCallback<List<UsedBy>> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersMicrosoftEntraUsersUsedByListValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersOauth2Create
     * @param oauth2ProviderRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersOauth2CreateCall(OAuth2ProviderRequest oauth2ProviderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = oauth2ProviderRequest;

        // create path and map variables
        String localVarPath = "/providers/oauth2/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersOauth2CreateValidateBeforeCall(OAuth2ProviderRequest oauth2ProviderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'oauth2ProviderRequest' is set
        if (oauth2ProviderRequest == null) {
            throw new ApiException("Missing the required parameter 'oauth2ProviderRequest' when calling providersOauth2Create(Async)");
        }

        return providersOauth2CreateCall(oauth2ProviderRequest, _callback);

    }

    /**
     * 
     * OAuth2Provider Viewset
     * @param oauth2ProviderRequest  (required)
     * @return OAuth2Provider
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public OAuth2Provider providersOauth2Create(OAuth2ProviderRequest oauth2ProviderRequest) throws ApiException {
        ApiResponse<OAuth2Provider> localVarResp = providersOauth2CreateWithHttpInfo(oauth2ProviderRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * OAuth2Provider Viewset
     * @param oauth2ProviderRequest  (required)
     * @return ApiResponse&lt;OAuth2Provider&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OAuth2Provider> providersOauth2CreateWithHttpInfo(OAuth2ProviderRequest oauth2ProviderRequest) throws ApiException {
        okhttp3.Call localVarCall = providersOauth2CreateValidateBeforeCall(oauth2ProviderRequest, null);
        Type localVarReturnType = new TypeToken<OAuth2Provider>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * OAuth2Provider Viewset
     * @param oauth2ProviderRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersOauth2CreateAsync(OAuth2ProviderRequest oauth2ProviderRequest, final ApiCallback<OAuth2Provider> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersOauth2CreateValidateBeforeCall(oauth2ProviderRequest, _callback);
        Type localVarReturnType = new TypeToken<OAuth2Provider>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersOauth2Destroy
     * @param id A unique integer value identifying this OAuth2/OpenID Provider. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersOauth2DestroyCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/oauth2/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersOauth2DestroyValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling providersOauth2Destroy(Async)");
        }

        return providersOauth2DestroyCall(id, _callback);

    }

    /**
     * 
     * OAuth2Provider Viewset
     * @param id A unique integer value identifying this OAuth2/OpenID Provider. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void providersOauth2Destroy(Integer id) throws ApiException {
        providersOauth2DestroyWithHttpInfo(id);
    }

    /**
     * 
     * OAuth2Provider Viewset
     * @param id A unique integer value identifying this OAuth2/OpenID Provider. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> providersOauth2DestroyWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = providersOauth2DestroyValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * OAuth2Provider Viewset
     * @param id A unique integer value identifying this OAuth2/OpenID Provider. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersOauth2DestroyAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersOauth2DestroyValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersOauth2List
     * @param accessCodeValidity  (optional)
     * @param accessTokenValidity  (optional)
     * @param application  (optional)
     * @param authorizationFlow  (optional)
     * @param clientId  (optional)
     * @param clientType Confidential clients are capable of maintaining the confidentiality of their credentials. Public clients are incapable   (optional)
     * @param includeClaimsInIdToken  (optional)
     * @param issuerMode Configure how the issuer field of the ID Token should be filled.   (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param propertyMappings  (optional)
     * @param redirectUris  (optional)
     * @param refreshTokenValidity  (optional)
     * @param search A search term. (optional)
     * @param signingKey  (optional)
     * @param subMode Configure what data should be used as unique User Identifier. For most cases, the default should be fine.   (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersOauth2ListCall(String accessCodeValidity, String accessTokenValidity, UUID application, UUID authorizationFlow, String clientId, String clientType, Boolean includeClaimsInIdToken, String issuerMode, String name, String ordering, Integer page, Integer pageSize, List<UUID> propertyMappings, String redirectUris, String refreshTokenValidity, String search, UUID signingKey, String subMode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/oauth2/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessCodeValidity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_code_validity", accessCodeValidity));
        }

        if (accessTokenValidity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_token_validity", accessTokenValidity));
        }

        if (application != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("application", application));
        }

        if (authorizationFlow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("authorization_flow", authorizationFlow));
        }

        if (clientId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("client_id", clientId));
        }

        if (clientType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("client_type", clientType));
        }

        if (includeClaimsInIdToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_claims_in_id_token", includeClaimsInIdToken));
        }

        if (issuerMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("issuer_mode", issuerMode));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (propertyMappings != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "property_mappings", propertyMappings));
        }

        if (redirectUris != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("redirect_uris", redirectUris));
        }

        if (refreshTokenValidity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("refresh_token_validity", refreshTokenValidity));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (signingKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("signing_key", signingKey));
        }

        if (subMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sub_mode", subMode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersOauth2ListValidateBeforeCall(String accessCodeValidity, String accessTokenValidity, UUID application, UUID authorizationFlow, String clientId, String clientType, Boolean includeClaimsInIdToken, String issuerMode, String name, String ordering, Integer page, Integer pageSize, List<UUID> propertyMappings, String redirectUris, String refreshTokenValidity, String search, UUID signingKey, String subMode, final ApiCallback _callback) throws ApiException {
        return providersOauth2ListCall(accessCodeValidity, accessTokenValidity, application, authorizationFlow, clientId, clientType, includeClaimsInIdToken, issuerMode, name, ordering, page, pageSize, propertyMappings, redirectUris, refreshTokenValidity, search, signingKey, subMode, _callback);

    }

    /**
     * 
     * OAuth2Provider Viewset
     * @param accessCodeValidity  (optional)
     * @param accessTokenValidity  (optional)
     * @param application  (optional)
     * @param authorizationFlow  (optional)
     * @param clientId  (optional)
     * @param clientType Confidential clients are capable of maintaining the confidentiality of their credentials. Public clients are incapable   (optional)
     * @param includeClaimsInIdToken  (optional)
     * @param issuerMode Configure how the issuer field of the ID Token should be filled.   (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param propertyMappings  (optional)
     * @param redirectUris  (optional)
     * @param refreshTokenValidity  (optional)
     * @param search A search term. (optional)
     * @param signingKey  (optional)
     * @param subMode Configure what data should be used as unique User Identifier. For most cases, the default should be fine.   (optional)
     * @return PaginatedOAuth2ProviderList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedOAuth2ProviderList providersOauth2List(String accessCodeValidity, String accessTokenValidity, UUID application, UUID authorizationFlow, String clientId, String clientType, Boolean includeClaimsInIdToken, String issuerMode, String name, String ordering, Integer page, Integer pageSize, List<UUID> propertyMappings, String redirectUris, String refreshTokenValidity, String search, UUID signingKey, String subMode) throws ApiException {
        ApiResponse<PaginatedOAuth2ProviderList> localVarResp = providersOauth2ListWithHttpInfo(accessCodeValidity, accessTokenValidity, application, authorizationFlow, clientId, clientType, includeClaimsInIdToken, issuerMode, name, ordering, page, pageSize, propertyMappings, redirectUris, refreshTokenValidity, search, signingKey, subMode);
        return localVarResp.getData();
    }

    /**
     * 
     * OAuth2Provider Viewset
     * @param accessCodeValidity  (optional)
     * @param accessTokenValidity  (optional)
     * @param application  (optional)
     * @param authorizationFlow  (optional)
     * @param clientId  (optional)
     * @param clientType Confidential clients are capable of maintaining the confidentiality of their credentials. Public clients are incapable   (optional)
     * @param includeClaimsInIdToken  (optional)
     * @param issuerMode Configure how the issuer field of the ID Token should be filled.   (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param propertyMappings  (optional)
     * @param redirectUris  (optional)
     * @param refreshTokenValidity  (optional)
     * @param search A search term. (optional)
     * @param signingKey  (optional)
     * @param subMode Configure what data should be used as unique User Identifier. For most cases, the default should be fine.   (optional)
     * @return ApiResponse&lt;PaginatedOAuth2ProviderList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedOAuth2ProviderList> providersOauth2ListWithHttpInfo(String accessCodeValidity, String accessTokenValidity, UUID application, UUID authorizationFlow, String clientId, String clientType, Boolean includeClaimsInIdToken, String issuerMode, String name, String ordering, Integer page, Integer pageSize, List<UUID> propertyMappings, String redirectUris, String refreshTokenValidity, String search, UUID signingKey, String subMode) throws ApiException {
        okhttp3.Call localVarCall = providersOauth2ListValidateBeforeCall(accessCodeValidity, accessTokenValidity, application, authorizationFlow, clientId, clientType, includeClaimsInIdToken, issuerMode, name, ordering, page, pageSize, propertyMappings, redirectUris, refreshTokenValidity, search, signingKey, subMode, null);
        Type localVarReturnType = new TypeToken<PaginatedOAuth2ProviderList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * OAuth2Provider Viewset
     * @param accessCodeValidity  (optional)
     * @param accessTokenValidity  (optional)
     * @param application  (optional)
     * @param authorizationFlow  (optional)
     * @param clientId  (optional)
     * @param clientType Confidential clients are capable of maintaining the confidentiality of their credentials. Public clients are incapable   (optional)
     * @param includeClaimsInIdToken  (optional)
     * @param issuerMode Configure how the issuer field of the ID Token should be filled.   (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param propertyMappings  (optional)
     * @param redirectUris  (optional)
     * @param refreshTokenValidity  (optional)
     * @param search A search term. (optional)
     * @param signingKey  (optional)
     * @param subMode Configure what data should be used as unique User Identifier. For most cases, the default should be fine.   (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersOauth2ListAsync(String accessCodeValidity, String accessTokenValidity, UUID application, UUID authorizationFlow, String clientId, String clientType, Boolean includeClaimsInIdToken, String issuerMode, String name, String ordering, Integer page, Integer pageSize, List<UUID> propertyMappings, String redirectUris, String refreshTokenValidity, String search, UUID signingKey, String subMode, final ApiCallback<PaginatedOAuth2ProviderList> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersOauth2ListValidateBeforeCall(accessCodeValidity, accessTokenValidity, application, authorizationFlow, clientId, clientType, includeClaimsInIdToken, issuerMode, name, ordering, page, pageSize, propertyMappings, redirectUris, refreshTokenValidity, search, signingKey, subMode, _callback);
        Type localVarReturnType = new TypeToken<PaginatedOAuth2ProviderList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersOauth2PartialUpdate
     * @param id A unique integer value identifying this OAuth2/OpenID Provider. (required)
     * @param patchedOAuth2ProviderRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersOauth2PartialUpdateCall(Integer id, PatchedOAuth2ProviderRequest patchedOAuth2ProviderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchedOAuth2ProviderRequest;

        // create path and map variables
        String localVarPath = "/providers/oauth2/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersOauth2PartialUpdateValidateBeforeCall(Integer id, PatchedOAuth2ProviderRequest patchedOAuth2ProviderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling providersOauth2PartialUpdate(Async)");
        }

        return providersOauth2PartialUpdateCall(id, patchedOAuth2ProviderRequest, _callback);

    }

    /**
     * 
     * OAuth2Provider Viewset
     * @param id A unique integer value identifying this OAuth2/OpenID Provider. (required)
     * @param patchedOAuth2ProviderRequest  (optional)
     * @return OAuth2Provider
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public OAuth2Provider providersOauth2PartialUpdate(Integer id, PatchedOAuth2ProviderRequest patchedOAuth2ProviderRequest) throws ApiException {
        ApiResponse<OAuth2Provider> localVarResp = providersOauth2PartialUpdateWithHttpInfo(id, patchedOAuth2ProviderRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * OAuth2Provider Viewset
     * @param id A unique integer value identifying this OAuth2/OpenID Provider. (required)
     * @param patchedOAuth2ProviderRequest  (optional)
     * @return ApiResponse&lt;OAuth2Provider&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OAuth2Provider> providersOauth2PartialUpdateWithHttpInfo(Integer id, PatchedOAuth2ProviderRequest patchedOAuth2ProviderRequest) throws ApiException {
        okhttp3.Call localVarCall = providersOauth2PartialUpdateValidateBeforeCall(id, patchedOAuth2ProviderRequest, null);
        Type localVarReturnType = new TypeToken<OAuth2Provider>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * OAuth2Provider Viewset
     * @param id A unique integer value identifying this OAuth2/OpenID Provider. (required)
     * @param patchedOAuth2ProviderRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersOauth2PartialUpdateAsync(Integer id, PatchedOAuth2ProviderRequest patchedOAuth2ProviderRequest, final ApiCallback<OAuth2Provider> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersOauth2PartialUpdateValidateBeforeCall(id, patchedOAuth2ProviderRequest, _callback);
        Type localVarReturnType = new TypeToken<OAuth2Provider>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersOauth2PreviewUserRetrieve
     * @param id A unique integer value identifying this OAuth2/OpenID Provider. (required)
     * @param forUser  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersOauth2PreviewUserRetrieveCall(Integer id, Integer forUser, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/oauth2/{id}/preview_user/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (forUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("for_user", forUser));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersOauth2PreviewUserRetrieveValidateBeforeCall(Integer id, Integer forUser, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling providersOauth2PreviewUserRetrieve(Async)");
        }

        return providersOauth2PreviewUserRetrieveCall(id, forUser, _callback);

    }

    /**
     * 
     * Preview user data for provider
     * @param id A unique integer value identifying this OAuth2/OpenID Provider. (required)
     * @param forUser  (optional)
     * @return PropertyMappingPreview
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PropertyMappingPreview providersOauth2PreviewUserRetrieve(Integer id, Integer forUser) throws ApiException {
        ApiResponse<PropertyMappingPreview> localVarResp = providersOauth2PreviewUserRetrieveWithHttpInfo(id, forUser);
        return localVarResp.getData();
    }

    /**
     * 
     * Preview user data for provider
     * @param id A unique integer value identifying this OAuth2/OpenID Provider. (required)
     * @param forUser  (optional)
     * @return ApiResponse&lt;PropertyMappingPreview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PropertyMappingPreview> providersOauth2PreviewUserRetrieveWithHttpInfo(Integer id, Integer forUser) throws ApiException {
        okhttp3.Call localVarCall = providersOauth2PreviewUserRetrieveValidateBeforeCall(id, forUser, null);
        Type localVarReturnType = new TypeToken<PropertyMappingPreview>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Preview user data for provider
     * @param id A unique integer value identifying this OAuth2/OpenID Provider. (required)
     * @param forUser  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersOauth2PreviewUserRetrieveAsync(Integer id, Integer forUser, final ApiCallback<PropertyMappingPreview> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersOauth2PreviewUserRetrieveValidateBeforeCall(id, forUser, _callback);
        Type localVarReturnType = new TypeToken<PropertyMappingPreview>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersOauth2Retrieve
     * @param id A unique integer value identifying this OAuth2/OpenID Provider. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersOauth2RetrieveCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/oauth2/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersOauth2RetrieveValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling providersOauth2Retrieve(Async)");
        }

        return providersOauth2RetrieveCall(id, _callback);

    }

    /**
     * 
     * OAuth2Provider Viewset
     * @param id A unique integer value identifying this OAuth2/OpenID Provider. (required)
     * @return OAuth2Provider
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public OAuth2Provider providersOauth2Retrieve(Integer id) throws ApiException {
        ApiResponse<OAuth2Provider> localVarResp = providersOauth2RetrieveWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * OAuth2Provider Viewset
     * @param id A unique integer value identifying this OAuth2/OpenID Provider. (required)
     * @return ApiResponse&lt;OAuth2Provider&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OAuth2Provider> providersOauth2RetrieveWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = providersOauth2RetrieveValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<OAuth2Provider>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * OAuth2Provider Viewset
     * @param id A unique integer value identifying this OAuth2/OpenID Provider. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersOauth2RetrieveAsync(Integer id, final ApiCallback<OAuth2Provider> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersOauth2RetrieveValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<OAuth2Provider>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersOauth2SetupUrlsRetrieve
     * @param id A unique integer value identifying this OAuth2/OpenID Provider. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Provider has no application assigned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersOauth2SetupUrlsRetrieveCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/oauth2/{id}/setup_urls/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersOauth2SetupUrlsRetrieveValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling providersOauth2SetupUrlsRetrieve(Async)");
        }

        return providersOauth2SetupUrlsRetrieveCall(id, _callback);

    }

    /**
     * 
     * Get Providers setup URLs
     * @param id A unique integer value identifying this OAuth2/OpenID Provider. (required)
     * @return OAuth2ProviderSetupURLs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Provider has no application assigned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public OAuth2ProviderSetupURLs providersOauth2SetupUrlsRetrieve(Integer id) throws ApiException {
        ApiResponse<OAuth2ProviderSetupURLs> localVarResp = providersOauth2SetupUrlsRetrieveWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Get Providers setup URLs
     * @param id A unique integer value identifying this OAuth2/OpenID Provider. (required)
     * @return ApiResponse&lt;OAuth2ProviderSetupURLs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Provider has no application assigned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OAuth2ProviderSetupURLs> providersOauth2SetupUrlsRetrieveWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = providersOauth2SetupUrlsRetrieveValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<OAuth2ProviderSetupURLs>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get Providers setup URLs
     * @param id A unique integer value identifying this OAuth2/OpenID Provider. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Provider has no application assigned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersOauth2SetupUrlsRetrieveAsync(Integer id, final ApiCallback<OAuth2ProviderSetupURLs> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersOauth2SetupUrlsRetrieveValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<OAuth2ProviderSetupURLs>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersOauth2Update
     * @param id A unique integer value identifying this OAuth2/OpenID Provider. (required)
     * @param oauth2ProviderRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersOauth2UpdateCall(Integer id, OAuth2ProviderRequest oauth2ProviderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = oauth2ProviderRequest;

        // create path and map variables
        String localVarPath = "/providers/oauth2/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersOauth2UpdateValidateBeforeCall(Integer id, OAuth2ProviderRequest oauth2ProviderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling providersOauth2Update(Async)");
        }

        // verify the required parameter 'oauth2ProviderRequest' is set
        if (oauth2ProviderRequest == null) {
            throw new ApiException("Missing the required parameter 'oauth2ProviderRequest' when calling providersOauth2Update(Async)");
        }

        return providersOauth2UpdateCall(id, oauth2ProviderRequest, _callback);

    }

    /**
     * 
     * OAuth2Provider Viewset
     * @param id A unique integer value identifying this OAuth2/OpenID Provider. (required)
     * @param oauth2ProviderRequest  (required)
     * @return OAuth2Provider
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public OAuth2Provider providersOauth2Update(Integer id, OAuth2ProviderRequest oauth2ProviderRequest) throws ApiException {
        ApiResponse<OAuth2Provider> localVarResp = providersOauth2UpdateWithHttpInfo(id, oauth2ProviderRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * OAuth2Provider Viewset
     * @param id A unique integer value identifying this OAuth2/OpenID Provider. (required)
     * @param oauth2ProviderRequest  (required)
     * @return ApiResponse&lt;OAuth2Provider&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OAuth2Provider> providersOauth2UpdateWithHttpInfo(Integer id, OAuth2ProviderRequest oauth2ProviderRequest) throws ApiException {
        okhttp3.Call localVarCall = providersOauth2UpdateValidateBeforeCall(id, oauth2ProviderRequest, null);
        Type localVarReturnType = new TypeToken<OAuth2Provider>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * OAuth2Provider Viewset
     * @param id A unique integer value identifying this OAuth2/OpenID Provider. (required)
     * @param oauth2ProviderRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersOauth2UpdateAsync(Integer id, OAuth2ProviderRequest oauth2ProviderRequest, final ApiCallback<OAuth2Provider> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersOauth2UpdateValidateBeforeCall(id, oauth2ProviderRequest, _callback);
        Type localVarReturnType = new TypeToken<OAuth2Provider>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersOauth2UsedByList
     * @param id A unique integer value identifying this OAuth2/OpenID Provider. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersOauth2UsedByListCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/oauth2/{id}/used_by/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersOauth2UsedByListValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling providersOauth2UsedByList(Async)");
        }

        return providersOauth2UsedByListCall(id, _callback);

    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param id A unique integer value identifying this OAuth2/OpenID Provider. (required)
     * @return List&lt;UsedBy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<UsedBy> providersOauth2UsedByList(Integer id) throws ApiException {
        ApiResponse<List<UsedBy>> localVarResp = providersOauth2UsedByListWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param id A unique integer value identifying this OAuth2/OpenID Provider. (required)
     * @return ApiResponse&lt;List&lt;UsedBy&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UsedBy>> providersOauth2UsedByListWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = providersOauth2UsedByListValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of all objects that use this object
     * @param id A unique integer value identifying this OAuth2/OpenID Provider. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersOauth2UsedByListAsync(Integer id, final ApiCallback<List<UsedBy>> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersOauth2UsedByListValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersProxyCreate
     * @param proxyProviderRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersProxyCreateCall(ProxyProviderRequest proxyProviderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = proxyProviderRequest;

        // create path and map variables
        String localVarPath = "/providers/proxy/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersProxyCreateValidateBeforeCall(ProxyProviderRequest proxyProviderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'proxyProviderRequest' is set
        if (proxyProviderRequest == null) {
            throw new ApiException("Missing the required parameter 'proxyProviderRequest' when calling providersProxyCreate(Async)");
        }

        return providersProxyCreateCall(proxyProviderRequest, _callback);

    }

    /**
     * 
     * ProxyProvider Viewset
     * @param proxyProviderRequest  (required)
     * @return ProxyProvider
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ProxyProvider providersProxyCreate(ProxyProviderRequest proxyProviderRequest) throws ApiException {
        ApiResponse<ProxyProvider> localVarResp = providersProxyCreateWithHttpInfo(proxyProviderRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * ProxyProvider Viewset
     * @param proxyProviderRequest  (required)
     * @return ApiResponse&lt;ProxyProvider&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProxyProvider> providersProxyCreateWithHttpInfo(ProxyProviderRequest proxyProviderRequest) throws ApiException {
        okhttp3.Call localVarCall = providersProxyCreateValidateBeforeCall(proxyProviderRequest, null);
        Type localVarReturnType = new TypeToken<ProxyProvider>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ProxyProvider Viewset
     * @param proxyProviderRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersProxyCreateAsync(ProxyProviderRequest proxyProviderRequest, final ApiCallback<ProxyProvider> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersProxyCreateValidateBeforeCall(proxyProviderRequest, _callback);
        Type localVarReturnType = new TypeToken<ProxyProvider>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersProxyDestroy
     * @param id A unique integer value identifying this Proxy Provider. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersProxyDestroyCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/proxy/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersProxyDestroyValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling providersProxyDestroy(Async)");
        }

        return providersProxyDestroyCall(id, _callback);

    }

    /**
     * 
     * ProxyProvider Viewset
     * @param id A unique integer value identifying this Proxy Provider. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void providersProxyDestroy(Integer id) throws ApiException {
        providersProxyDestroyWithHttpInfo(id);
    }

    /**
     * 
     * ProxyProvider Viewset
     * @param id A unique integer value identifying this Proxy Provider. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> providersProxyDestroyWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = providersProxyDestroyValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * ProxyProvider Viewset
     * @param id A unique integer value identifying this Proxy Provider. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersProxyDestroyAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersProxyDestroyValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersProxyList
     * @param applicationIsnull  (optional)
     * @param authorizationFlowSlugIexact  (optional)
     * @param basicAuthEnabledIexact  (optional)
     * @param basicAuthPasswordAttributeIexact  (optional)
     * @param basicAuthUserAttributeIexact  (optional)
     * @param certificateKpUuidIexact  (optional)
     * @param certificateNameIexact  (optional)
     * @param cookieDomainIexact  (optional)
     * @param externalHostIexact  (optional)
     * @param internalHostIexact  (optional)
     * @param internalHostSslValidationIexact  (optional)
     * @param modeIexact  (optional)
     * @param nameIexact  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param propertyMappingsIexact  (optional)
     * @param redirectUrisIexact  (optional)
     * @param search A search term. (optional)
     * @param skipPathRegexIexact  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersProxyListCall(Boolean applicationIsnull, String authorizationFlowSlugIexact, Boolean basicAuthEnabledIexact, String basicAuthPasswordAttributeIexact, String basicAuthUserAttributeIexact, UUID certificateKpUuidIexact, String certificateNameIexact, String cookieDomainIexact, String externalHostIexact, String internalHostIexact, Boolean internalHostSslValidationIexact, String modeIexact, String nameIexact, String ordering, Integer page, Integer pageSize, List<UUID> propertyMappingsIexact, String redirectUrisIexact, String search, String skipPathRegexIexact, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/proxy/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (applicationIsnull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("application__isnull", applicationIsnull));
        }

        if (authorizationFlowSlugIexact != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("authorization_flow__slug__iexact", authorizationFlowSlugIexact));
        }

        if (basicAuthEnabledIexact != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("basic_auth_enabled__iexact", basicAuthEnabledIexact));
        }

        if (basicAuthPasswordAttributeIexact != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("basic_auth_password_attribute__iexact", basicAuthPasswordAttributeIexact));
        }

        if (basicAuthUserAttributeIexact != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("basic_auth_user_attribute__iexact", basicAuthUserAttributeIexact));
        }

        if (certificateKpUuidIexact != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("certificate__kp_uuid__iexact", certificateKpUuidIexact));
        }

        if (certificateNameIexact != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("certificate__name__iexact", certificateNameIexact));
        }

        if (cookieDomainIexact != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cookie_domain__iexact", cookieDomainIexact));
        }

        if (externalHostIexact != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("external_host__iexact", externalHostIexact));
        }

        if (internalHostIexact != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("internal_host__iexact", internalHostIexact));
        }

        if (internalHostSslValidationIexact != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("internal_host_ssl_validation__iexact", internalHostSslValidationIexact));
        }

        if (modeIexact != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mode__iexact", modeIexact));
        }

        if (nameIexact != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iexact", nameIexact));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (propertyMappingsIexact != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "property_mappings__iexact", propertyMappingsIexact));
        }

        if (redirectUrisIexact != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("redirect_uris__iexact", redirectUrisIexact));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (skipPathRegexIexact != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip_path_regex__iexact", skipPathRegexIexact));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersProxyListValidateBeforeCall(Boolean applicationIsnull, String authorizationFlowSlugIexact, Boolean basicAuthEnabledIexact, String basicAuthPasswordAttributeIexact, String basicAuthUserAttributeIexact, UUID certificateKpUuidIexact, String certificateNameIexact, String cookieDomainIexact, String externalHostIexact, String internalHostIexact, Boolean internalHostSslValidationIexact, String modeIexact, String nameIexact, String ordering, Integer page, Integer pageSize, List<UUID> propertyMappingsIexact, String redirectUrisIexact, String search, String skipPathRegexIexact, final ApiCallback _callback) throws ApiException {
        return providersProxyListCall(applicationIsnull, authorizationFlowSlugIexact, basicAuthEnabledIexact, basicAuthPasswordAttributeIexact, basicAuthUserAttributeIexact, certificateKpUuidIexact, certificateNameIexact, cookieDomainIexact, externalHostIexact, internalHostIexact, internalHostSslValidationIexact, modeIexact, nameIexact, ordering, page, pageSize, propertyMappingsIexact, redirectUrisIexact, search, skipPathRegexIexact, _callback);

    }

    /**
     * 
     * ProxyProvider Viewset
     * @param applicationIsnull  (optional)
     * @param authorizationFlowSlugIexact  (optional)
     * @param basicAuthEnabledIexact  (optional)
     * @param basicAuthPasswordAttributeIexact  (optional)
     * @param basicAuthUserAttributeIexact  (optional)
     * @param certificateKpUuidIexact  (optional)
     * @param certificateNameIexact  (optional)
     * @param cookieDomainIexact  (optional)
     * @param externalHostIexact  (optional)
     * @param internalHostIexact  (optional)
     * @param internalHostSslValidationIexact  (optional)
     * @param modeIexact  (optional)
     * @param nameIexact  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param propertyMappingsIexact  (optional)
     * @param redirectUrisIexact  (optional)
     * @param search A search term. (optional)
     * @param skipPathRegexIexact  (optional)
     * @return PaginatedProxyProviderList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedProxyProviderList providersProxyList(Boolean applicationIsnull, String authorizationFlowSlugIexact, Boolean basicAuthEnabledIexact, String basicAuthPasswordAttributeIexact, String basicAuthUserAttributeIexact, UUID certificateKpUuidIexact, String certificateNameIexact, String cookieDomainIexact, String externalHostIexact, String internalHostIexact, Boolean internalHostSslValidationIexact, String modeIexact, String nameIexact, String ordering, Integer page, Integer pageSize, List<UUID> propertyMappingsIexact, String redirectUrisIexact, String search, String skipPathRegexIexact) throws ApiException {
        ApiResponse<PaginatedProxyProviderList> localVarResp = providersProxyListWithHttpInfo(applicationIsnull, authorizationFlowSlugIexact, basicAuthEnabledIexact, basicAuthPasswordAttributeIexact, basicAuthUserAttributeIexact, certificateKpUuidIexact, certificateNameIexact, cookieDomainIexact, externalHostIexact, internalHostIexact, internalHostSslValidationIexact, modeIexact, nameIexact, ordering, page, pageSize, propertyMappingsIexact, redirectUrisIexact, search, skipPathRegexIexact);
        return localVarResp.getData();
    }

    /**
     * 
     * ProxyProvider Viewset
     * @param applicationIsnull  (optional)
     * @param authorizationFlowSlugIexact  (optional)
     * @param basicAuthEnabledIexact  (optional)
     * @param basicAuthPasswordAttributeIexact  (optional)
     * @param basicAuthUserAttributeIexact  (optional)
     * @param certificateKpUuidIexact  (optional)
     * @param certificateNameIexact  (optional)
     * @param cookieDomainIexact  (optional)
     * @param externalHostIexact  (optional)
     * @param internalHostIexact  (optional)
     * @param internalHostSslValidationIexact  (optional)
     * @param modeIexact  (optional)
     * @param nameIexact  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param propertyMappingsIexact  (optional)
     * @param redirectUrisIexact  (optional)
     * @param search A search term. (optional)
     * @param skipPathRegexIexact  (optional)
     * @return ApiResponse&lt;PaginatedProxyProviderList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedProxyProviderList> providersProxyListWithHttpInfo(Boolean applicationIsnull, String authorizationFlowSlugIexact, Boolean basicAuthEnabledIexact, String basicAuthPasswordAttributeIexact, String basicAuthUserAttributeIexact, UUID certificateKpUuidIexact, String certificateNameIexact, String cookieDomainIexact, String externalHostIexact, String internalHostIexact, Boolean internalHostSslValidationIexact, String modeIexact, String nameIexact, String ordering, Integer page, Integer pageSize, List<UUID> propertyMappingsIexact, String redirectUrisIexact, String search, String skipPathRegexIexact) throws ApiException {
        okhttp3.Call localVarCall = providersProxyListValidateBeforeCall(applicationIsnull, authorizationFlowSlugIexact, basicAuthEnabledIexact, basicAuthPasswordAttributeIexact, basicAuthUserAttributeIexact, certificateKpUuidIexact, certificateNameIexact, cookieDomainIexact, externalHostIexact, internalHostIexact, internalHostSslValidationIexact, modeIexact, nameIexact, ordering, page, pageSize, propertyMappingsIexact, redirectUrisIexact, search, skipPathRegexIexact, null);
        Type localVarReturnType = new TypeToken<PaginatedProxyProviderList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ProxyProvider Viewset
     * @param applicationIsnull  (optional)
     * @param authorizationFlowSlugIexact  (optional)
     * @param basicAuthEnabledIexact  (optional)
     * @param basicAuthPasswordAttributeIexact  (optional)
     * @param basicAuthUserAttributeIexact  (optional)
     * @param certificateKpUuidIexact  (optional)
     * @param certificateNameIexact  (optional)
     * @param cookieDomainIexact  (optional)
     * @param externalHostIexact  (optional)
     * @param internalHostIexact  (optional)
     * @param internalHostSslValidationIexact  (optional)
     * @param modeIexact  (optional)
     * @param nameIexact  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param propertyMappingsIexact  (optional)
     * @param redirectUrisIexact  (optional)
     * @param search A search term. (optional)
     * @param skipPathRegexIexact  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersProxyListAsync(Boolean applicationIsnull, String authorizationFlowSlugIexact, Boolean basicAuthEnabledIexact, String basicAuthPasswordAttributeIexact, String basicAuthUserAttributeIexact, UUID certificateKpUuidIexact, String certificateNameIexact, String cookieDomainIexact, String externalHostIexact, String internalHostIexact, Boolean internalHostSslValidationIexact, String modeIexact, String nameIexact, String ordering, Integer page, Integer pageSize, List<UUID> propertyMappingsIexact, String redirectUrisIexact, String search, String skipPathRegexIexact, final ApiCallback<PaginatedProxyProviderList> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersProxyListValidateBeforeCall(applicationIsnull, authorizationFlowSlugIexact, basicAuthEnabledIexact, basicAuthPasswordAttributeIexact, basicAuthUserAttributeIexact, certificateKpUuidIexact, certificateNameIexact, cookieDomainIexact, externalHostIexact, internalHostIexact, internalHostSslValidationIexact, modeIexact, nameIexact, ordering, page, pageSize, propertyMappingsIexact, redirectUrisIexact, search, skipPathRegexIexact, _callback);
        Type localVarReturnType = new TypeToken<PaginatedProxyProviderList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersProxyPartialUpdate
     * @param id A unique integer value identifying this Proxy Provider. (required)
     * @param patchedProxyProviderRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersProxyPartialUpdateCall(Integer id, PatchedProxyProviderRequest patchedProxyProviderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchedProxyProviderRequest;

        // create path and map variables
        String localVarPath = "/providers/proxy/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersProxyPartialUpdateValidateBeforeCall(Integer id, PatchedProxyProviderRequest patchedProxyProviderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling providersProxyPartialUpdate(Async)");
        }

        return providersProxyPartialUpdateCall(id, patchedProxyProviderRequest, _callback);

    }

    /**
     * 
     * ProxyProvider Viewset
     * @param id A unique integer value identifying this Proxy Provider. (required)
     * @param patchedProxyProviderRequest  (optional)
     * @return ProxyProvider
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ProxyProvider providersProxyPartialUpdate(Integer id, PatchedProxyProviderRequest patchedProxyProviderRequest) throws ApiException {
        ApiResponse<ProxyProvider> localVarResp = providersProxyPartialUpdateWithHttpInfo(id, patchedProxyProviderRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * ProxyProvider Viewset
     * @param id A unique integer value identifying this Proxy Provider. (required)
     * @param patchedProxyProviderRequest  (optional)
     * @return ApiResponse&lt;ProxyProvider&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProxyProvider> providersProxyPartialUpdateWithHttpInfo(Integer id, PatchedProxyProviderRequest patchedProxyProviderRequest) throws ApiException {
        okhttp3.Call localVarCall = providersProxyPartialUpdateValidateBeforeCall(id, patchedProxyProviderRequest, null);
        Type localVarReturnType = new TypeToken<ProxyProvider>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ProxyProvider Viewset
     * @param id A unique integer value identifying this Proxy Provider. (required)
     * @param patchedProxyProviderRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersProxyPartialUpdateAsync(Integer id, PatchedProxyProviderRequest patchedProxyProviderRequest, final ApiCallback<ProxyProvider> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersProxyPartialUpdateValidateBeforeCall(id, patchedProxyProviderRequest, _callback);
        Type localVarReturnType = new TypeToken<ProxyProvider>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersProxyRetrieve
     * @param id A unique integer value identifying this Proxy Provider. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersProxyRetrieveCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/proxy/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersProxyRetrieveValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling providersProxyRetrieve(Async)");
        }

        return providersProxyRetrieveCall(id, _callback);

    }

    /**
     * 
     * ProxyProvider Viewset
     * @param id A unique integer value identifying this Proxy Provider. (required)
     * @return ProxyProvider
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ProxyProvider providersProxyRetrieve(Integer id) throws ApiException {
        ApiResponse<ProxyProvider> localVarResp = providersProxyRetrieveWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * ProxyProvider Viewset
     * @param id A unique integer value identifying this Proxy Provider. (required)
     * @return ApiResponse&lt;ProxyProvider&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProxyProvider> providersProxyRetrieveWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = providersProxyRetrieveValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ProxyProvider>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ProxyProvider Viewset
     * @param id A unique integer value identifying this Proxy Provider. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersProxyRetrieveAsync(Integer id, final ApiCallback<ProxyProvider> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersProxyRetrieveValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ProxyProvider>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersProxyUpdate
     * @param id A unique integer value identifying this Proxy Provider. (required)
     * @param proxyProviderRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersProxyUpdateCall(Integer id, ProxyProviderRequest proxyProviderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = proxyProviderRequest;

        // create path and map variables
        String localVarPath = "/providers/proxy/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersProxyUpdateValidateBeforeCall(Integer id, ProxyProviderRequest proxyProviderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling providersProxyUpdate(Async)");
        }

        // verify the required parameter 'proxyProviderRequest' is set
        if (proxyProviderRequest == null) {
            throw new ApiException("Missing the required parameter 'proxyProviderRequest' when calling providersProxyUpdate(Async)");
        }

        return providersProxyUpdateCall(id, proxyProviderRequest, _callback);

    }

    /**
     * 
     * ProxyProvider Viewset
     * @param id A unique integer value identifying this Proxy Provider. (required)
     * @param proxyProviderRequest  (required)
     * @return ProxyProvider
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ProxyProvider providersProxyUpdate(Integer id, ProxyProviderRequest proxyProviderRequest) throws ApiException {
        ApiResponse<ProxyProvider> localVarResp = providersProxyUpdateWithHttpInfo(id, proxyProviderRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * ProxyProvider Viewset
     * @param id A unique integer value identifying this Proxy Provider. (required)
     * @param proxyProviderRequest  (required)
     * @return ApiResponse&lt;ProxyProvider&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProxyProvider> providersProxyUpdateWithHttpInfo(Integer id, ProxyProviderRequest proxyProviderRequest) throws ApiException {
        okhttp3.Call localVarCall = providersProxyUpdateValidateBeforeCall(id, proxyProviderRequest, null);
        Type localVarReturnType = new TypeToken<ProxyProvider>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ProxyProvider Viewset
     * @param id A unique integer value identifying this Proxy Provider. (required)
     * @param proxyProviderRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersProxyUpdateAsync(Integer id, ProxyProviderRequest proxyProviderRequest, final ApiCallback<ProxyProvider> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersProxyUpdateValidateBeforeCall(id, proxyProviderRequest, _callback);
        Type localVarReturnType = new TypeToken<ProxyProvider>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersProxyUsedByList
     * @param id A unique integer value identifying this Proxy Provider. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersProxyUsedByListCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/proxy/{id}/used_by/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersProxyUsedByListValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling providersProxyUsedByList(Async)");
        }

        return providersProxyUsedByListCall(id, _callback);

    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param id A unique integer value identifying this Proxy Provider. (required)
     * @return List&lt;UsedBy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<UsedBy> providersProxyUsedByList(Integer id) throws ApiException {
        ApiResponse<List<UsedBy>> localVarResp = providersProxyUsedByListWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param id A unique integer value identifying this Proxy Provider. (required)
     * @return ApiResponse&lt;List&lt;UsedBy&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UsedBy>> providersProxyUsedByListWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = providersProxyUsedByListValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of all objects that use this object
     * @param id A unique integer value identifying this Proxy Provider. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersProxyUsedByListAsync(Integer id, final ApiCallback<List<UsedBy>> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersProxyUsedByListValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersRacCreate
     * @param raCProviderRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersRacCreateCall(RACProviderRequest raCProviderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = raCProviderRequest;

        // create path and map variables
        String localVarPath = "/providers/rac/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersRacCreateValidateBeforeCall(RACProviderRequest raCProviderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'raCProviderRequest' is set
        if (raCProviderRequest == null) {
            throw new ApiException("Missing the required parameter 'raCProviderRequest' when calling providersRacCreate(Async)");
        }

        return providersRacCreateCall(raCProviderRequest, _callback);

    }

    /**
     * 
     * RACProvider Viewset
     * @param raCProviderRequest  (required)
     * @return RACProvider
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RACProvider providersRacCreate(RACProviderRequest raCProviderRequest) throws ApiException {
        ApiResponse<RACProvider> localVarResp = providersRacCreateWithHttpInfo(raCProviderRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * RACProvider Viewset
     * @param raCProviderRequest  (required)
     * @return ApiResponse&lt;RACProvider&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RACProvider> providersRacCreateWithHttpInfo(RACProviderRequest raCProviderRequest) throws ApiException {
        okhttp3.Call localVarCall = providersRacCreateValidateBeforeCall(raCProviderRequest, null);
        Type localVarReturnType = new TypeToken<RACProvider>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * RACProvider Viewset
     * @param raCProviderRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersRacCreateAsync(RACProviderRequest raCProviderRequest, final ApiCallback<RACProvider> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersRacCreateValidateBeforeCall(raCProviderRequest, _callback);
        Type localVarReturnType = new TypeToken<RACProvider>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersRacDestroy
     * @param id A unique integer value identifying this RAC Provider. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersRacDestroyCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/rac/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersRacDestroyValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling providersRacDestroy(Async)");
        }

        return providersRacDestroyCall(id, _callback);

    }

    /**
     * 
     * RACProvider Viewset
     * @param id A unique integer value identifying this RAC Provider. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void providersRacDestroy(Integer id) throws ApiException {
        providersRacDestroyWithHttpInfo(id);
    }

    /**
     * 
     * RACProvider Viewset
     * @param id A unique integer value identifying this RAC Provider. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> providersRacDestroyWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = providersRacDestroyValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * RACProvider Viewset
     * @param id A unique integer value identifying this RAC Provider. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersRacDestroyAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersRacDestroyValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersRacList
     * @param applicationIsnull  (optional)
     * @param nameIexact  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersRacListCall(Boolean applicationIsnull, String nameIexact, String ordering, Integer page, Integer pageSize, String search, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/rac/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (applicationIsnull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("application__isnull", applicationIsnull));
        }

        if (nameIexact != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iexact", nameIexact));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersRacListValidateBeforeCall(Boolean applicationIsnull, String nameIexact, String ordering, Integer page, Integer pageSize, String search, final ApiCallback _callback) throws ApiException {
        return providersRacListCall(applicationIsnull, nameIexact, ordering, page, pageSize, search, _callback);

    }

    /**
     * 
     * RACProvider Viewset
     * @param applicationIsnull  (optional)
     * @param nameIexact  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @return PaginatedRACProviderList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedRACProviderList providersRacList(Boolean applicationIsnull, String nameIexact, String ordering, Integer page, Integer pageSize, String search) throws ApiException {
        ApiResponse<PaginatedRACProviderList> localVarResp = providersRacListWithHttpInfo(applicationIsnull, nameIexact, ordering, page, pageSize, search);
        return localVarResp.getData();
    }

    /**
     * 
     * RACProvider Viewset
     * @param applicationIsnull  (optional)
     * @param nameIexact  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @return ApiResponse&lt;PaginatedRACProviderList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedRACProviderList> providersRacListWithHttpInfo(Boolean applicationIsnull, String nameIexact, String ordering, Integer page, Integer pageSize, String search) throws ApiException {
        okhttp3.Call localVarCall = providersRacListValidateBeforeCall(applicationIsnull, nameIexact, ordering, page, pageSize, search, null);
        Type localVarReturnType = new TypeToken<PaginatedRACProviderList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * RACProvider Viewset
     * @param applicationIsnull  (optional)
     * @param nameIexact  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersRacListAsync(Boolean applicationIsnull, String nameIexact, String ordering, Integer page, Integer pageSize, String search, final ApiCallback<PaginatedRACProviderList> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersRacListValidateBeforeCall(applicationIsnull, nameIexact, ordering, page, pageSize, search, _callback);
        Type localVarReturnType = new TypeToken<PaginatedRACProviderList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersRacPartialUpdate
     * @param id A unique integer value identifying this RAC Provider. (required)
     * @param patchedRACProviderRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersRacPartialUpdateCall(Integer id, PatchedRACProviderRequest patchedRACProviderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchedRACProviderRequest;

        // create path and map variables
        String localVarPath = "/providers/rac/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersRacPartialUpdateValidateBeforeCall(Integer id, PatchedRACProviderRequest patchedRACProviderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling providersRacPartialUpdate(Async)");
        }

        return providersRacPartialUpdateCall(id, patchedRACProviderRequest, _callback);

    }

    /**
     * 
     * RACProvider Viewset
     * @param id A unique integer value identifying this RAC Provider. (required)
     * @param patchedRACProviderRequest  (optional)
     * @return RACProvider
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RACProvider providersRacPartialUpdate(Integer id, PatchedRACProviderRequest patchedRACProviderRequest) throws ApiException {
        ApiResponse<RACProvider> localVarResp = providersRacPartialUpdateWithHttpInfo(id, patchedRACProviderRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * RACProvider Viewset
     * @param id A unique integer value identifying this RAC Provider. (required)
     * @param patchedRACProviderRequest  (optional)
     * @return ApiResponse&lt;RACProvider&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RACProvider> providersRacPartialUpdateWithHttpInfo(Integer id, PatchedRACProviderRequest patchedRACProviderRequest) throws ApiException {
        okhttp3.Call localVarCall = providersRacPartialUpdateValidateBeforeCall(id, patchedRACProviderRequest, null);
        Type localVarReturnType = new TypeToken<RACProvider>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * RACProvider Viewset
     * @param id A unique integer value identifying this RAC Provider. (required)
     * @param patchedRACProviderRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersRacPartialUpdateAsync(Integer id, PatchedRACProviderRequest patchedRACProviderRequest, final ApiCallback<RACProvider> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersRacPartialUpdateValidateBeforeCall(id, patchedRACProviderRequest, _callback);
        Type localVarReturnType = new TypeToken<RACProvider>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersRacRetrieve
     * @param id A unique integer value identifying this RAC Provider. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersRacRetrieveCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/rac/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersRacRetrieveValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling providersRacRetrieve(Async)");
        }

        return providersRacRetrieveCall(id, _callback);

    }

    /**
     * 
     * RACProvider Viewset
     * @param id A unique integer value identifying this RAC Provider. (required)
     * @return RACProvider
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RACProvider providersRacRetrieve(Integer id) throws ApiException {
        ApiResponse<RACProvider> localVarResp = providersRacRetrieveWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * RACProvider Viewset
     * @param id A unique integer value identifying this RAC Provider. (required)
     * @return ApiResponse&lt;RACProvider&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RACProvider> providersRacRetrieveWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = providersRacRetrieveValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<RACProvider>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * RACProvider Viewset
     * @param id A unique integer value identifying this RAC Provider. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersRacRetrieveAsync(Integer id, final ApiCallback<RACProvider> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersRacRetrieveValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<RACProvider>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersRacUpdate
     * @param id A unique integer value identifying this RAC Provider. (required)
     * @param raCProviderRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersRacUpdateCall(Integer id, RACProviderRequest raCProviderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = raCProviderRequest;

        // create path and map variables
        String localVarPath = "/providers/rac/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersRacUpdateValidateBeforeCall(Integer id, RACProviderRequest raCProviderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling providersRacUpdate(Async)");
        }

        // verify the required parameter 'raCProviderRequest' is set
        if (raCProviderRequest == null) {
            throw new ApiException("Missing the required parameter 'raCProviderRequest' when calling providersRacUpdate(Async)");
        }

        return providersRacUpdateCall(id, raCProviderRequest, _callback);

    }

    /**
     * 
     * RACProvider Viewset
     * @param id A unique integer value identifying this RAC Provider. (required)
     * @param raCProviderRequest  (required)
     * @return RACProvider
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RACProvider providersRacUpdate(Integer id, RACProviderRequest raCProviderRequest) throws ApiException {
        ApiResponse<RACProvider> localVarResp = providersRacUpdateWithHttpInfo(id, raCProviderRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * RACProvider Viewset
     * @param id A unique integer value identifying this RAC Provider. (required)
     * @param raCProviderRequest  (required)
     * @return ApiResponse&lt;RACProvider&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RACProvider> providersRacUpdateWithHttpInfo(Integer id, RACProviderRequest raCProviderRequest) throws ApiException {
        okhttp3.Call localVarCall = providersRacUpdateValidateBeforeCall(id, raCProviderRequest, null);
        Type localVarReturnType = new TypeToken<RACProvider>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * RACProvider Viewset
     * @param id A unique integer value identifying this RAC Provider. (required)
     * @param raCProviderRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersRacUpdateAsync(Integer id, RACProviderRequest raCProviderRequest, final ApiCallback<RACProvider> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersRacUpdateValidateBeforeCall(id, raCProviderRequest, _callback);
        Type localVarReturnType = new TypeToken<RACProvider>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersRacUsedByList
     * @param id A unique integer value identifying this RAC Provider. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersRacUsedByListCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/rac/{id}/used_by/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersRacUsedByListValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling providersRacUsedByList(Async)");
        }

        return providersRacUsedByListCall(id, _callback);

    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param id A unique integer value identifying this RAC Provider. (required)
     * @return List&lt;UsedBy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<UsedBy> providersRacUsedByList(Integer id) throws ApiException {
        ApiResponse<List<UsedBy>> localVarResp = providersRacUsedByListWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param id A unique integer value identifying this RAC Provider. (required)
     * @return ApiResponse&lt;List&lt;UsedBy&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UsedBy>> providersRacUsedByListWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = providersRacUsedByListValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of all objects that use this object
     * @param id A unique integer value identifying this RAC Provider. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersRacUsedByListAsync(Integer id, final ApiCallback<List<UsedBy>> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersRacUsedByListValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersRadiusCreate
     * @param radiusProviderRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersRadiusCreateCall(RadiusProviderRequest radiusProviderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = radiusProviderRequest;

        // create path and map variables
        String localVarPath = "/providers/radius/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersRadiusCreateValidateBeforeCall(RadiusProviderRequest radiusProviderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'radiusProviderRequest' is set
        if (radiusProviderRequest == null) {
            throw new ApiException("Missing the required parameter 'radiusProviderRequest' when calling providersRadiusCreate(Async)");
        }

        return providersRadiusCreateCall(radiusProviderRequest, _callback);

    }

    /**
     * 
     * RadiusProvider Viewset
     * @param radiusProviderRequest  (required)
     * @return RadiusProvider
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RadiusProvider providersRadiusCreate(RadiusProviderRequest radiusProviderRequest) throws ApiException {
        ApiResponse<RadiusProvider> localVarResp = providersRadiusCreateWithHttpInfo(radiusProviderRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * RadiusProvider Viewset
     * @param radiusProviderRequest  (required)
     * @return ApiResponse&lt;RadiusProvider&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadiusProvider> providersRadiusCreateWithHttpInfo(RadiusProviderRequest radiusProviderRequest) throws ApiException {
        okhttp3.Call localVarCall = providersRadiusCreateValidateBeforeCall(radiusProviderRequest, null);
        Type localVarReturnType = new TypeToken<RadiusProvider>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * RadiusProvider Viewset
     * @param radiusProviderRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersRadiusCreateAsync(RadiusProviderRequest radiusProviderRequest, final ApiCallback<RadiusProvider> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersRadiusCreateValidateBeforeCall(radiusProviderRequest, _callback);
        Type localVarReturnType = new TypeToken<RadiusProvider>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersRadiusDestroy
     * @param id A unique integer value identifying this Radius Provider. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersRadiusDestroyCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/radius/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersRadiusDestroyValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling providersRadiusDestroy(Async)");
        }

        return providersRadiusDestroyCall(id, _callback);

    }

    /**
     * 
     * RadiusProvider Viewset
     * @param id A unique integer value identifying this Radius Provider. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void providersRadiusDestroy(Integer id) throws ApiException {
        providersRadiusDestroyWithHttpInfo(id);
    }

    /**
     * 
     * RadiusProvider Viewset
     * @param id A unique integer value identifying this Radius Provider. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> providersRadiusDestroyWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = providersRadiusDestroyValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * RadiusProvider Viewset
     * @param id A unique integer value identifying this Radius Provider. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersRadiusDestroyAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersRadiusDestroyValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersRadiusList
     * @param applicationIsnull  (optional)
     * @param authorizationFlowSlugIexact  (optional)
     * @param clientNetworksIexact  (optional)
     * @param nameIexact  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersRadiusListCall(Boolean applicationIsnull, String authorizationFlowSlugIexact, String clientNetworksIexact, String nameIexact, String ordering, Integer page, Integer pageSize, String search, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/radius/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (applicationIsnull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("application__isnull", applicationIsnull));
        }

        if (authorizationFlowSlugIexact != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("authorization_flow__slug__iexact", authorizationFlowSlugIexact));
        }

        if (clientNetworksIexact != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("client_networks__iexact", clientNetworksIexact));
        }

        if (nameIexact != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name__iexact", nameIexact));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersRadiusListValidateBeforeCall(Boolean applicationIsnull, String authorizationFlowSlugIexact, String clientNetworksIexact, String nameIexact, String ordering, Integer page, Integer pageSize, String search, final ApiCallback _callback) throws ApiException {
        return providersRadiusListCall(applicationIsnull, authorizationFlowSlugIexact, clientNetworksIexact, nameIexact, ordering, page, pageSize, search, _callback);

    }

    /**
     * 
     * RadiusProvider Viewset
     * @param applicationIsnull  (optional)
     * @param authorizationFlowSlugIexact  (optional)
     * @param clientNetworksIexact  (optional)
     * @param nameIexact  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @return PaginatedRadiusProviderList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedRadiusProviderList providersRadiusList(Boolean applicationIsnull, String authorizationFlowSlugIexact, String clientNetworksIexact, String nameIexact, String ordering, Integer page, Integer pageSize, String search) throws ApiException {
        ApiResponse<PaginatedRadiusProviderList> localVarResp = providersRadiusListWithHttpInfo(applicationIsnull, authorizationFlowSlugIexact, clientNetworksIexact, nameIexact, ordering, page, pageSize, search);
        return localVarResp.getData();
    }

    /**
     * 
     * RadiusProvider Viewset
     * @param applicationIsnull  (optional)
     * @param authorizationFlowSlugIexact  (optional)
     * @param clientNetworksIexact  (optional)
     * @param nameIexact  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @return ApiResponse&lt;PaginatedRadiusProviderList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedRadiusProviderList> providersRadiusListWithHttpInfo(Boolean applicationIsnull, String authorizationFlowSlugIexact, String clientNetworksIexact, String nameIexact, String ordering, Integer page, Integer pageSize, String search) throws ApiException {
        okhttp3.Call localVarCall = providersRadiusListValidateBeforeCall(applicationIsnull, authorizationFlowSlugIexact, clientNetworksIexact, nameIexact, ordering, page, pageSize, search, null);
        Type localVarReturnType = new TypeToken<PaginatedRadiusProviderList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * RadiusProvider Viewset
     * @param applicationIsnull  (optional)
     * @param authorizationFlowSlugIexact  (optional)
     * @param clientNetworksIexact  (optional)
     * @param nameIexact  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersRadiusListAsync(Boolean applicationIsnull, String authorizationFlowSlugIexact, String clientNetworksIexact, String nameIexact, String ordering, Integer page, Integer pageSize, String search, final ApiCallback<PaginatedRadiusProviderList> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersRadiusListValidateBeforeCall(applicationIsnull, authorizationFlowSlugIexact, clientNetworksIexact, nameIexact, ordering, page, pageSize, search, _callback);
        Type localVarReturnType = new TypeToken<PaginatedRadiusProviderList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersRadiusPartialUpdate
     * @param id A unique integer value identifying this Radius Provider. (required)
     * @param patchedRadiusProviderRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersRadiusPartialUpdateCall(Integer id, PatchedRadiusProviderRequest patchedRadiusProviderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchedRadiusProviderRequest;

        // create path and map variables
        String localVarPath = "/providers/radius/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersRadiusPartialUpdateValidateBeforeCall(Integer id, PatchedRadiusProviderRequest patchedRadiusProviderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling providersRadiusPartialUpdate(Async)");
        }

        return providersRadiusPartialUpdateCall(id, patchedRadiusProviderRequest, _callback);

    }

    /**
     * 
     * RadiusProvider Viewset
     * @param id A unique integer value identifying this Radius Provider. (required)
     * @param patchedRadiusProviderRequest  (optional)
     * @return RadiusProvider
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RadiusProvider providersRadiusPartialUpdate(Integer id, PatchedRadiusProviderRequest patchedRadiusProviderRequest) throws ApiException {
        ApiResponse<RadiusProvider> localVarResp = providersRadiusPartialUpdateWithHttpInfo(id, patchedRadiusProviderRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * RadiusProvider Viewset
     * @param id A unique integer value identifying this Radius Provider. (required)
     * @param patchedRadiusProviderRequest  (optional)
     * @return ApiResponse&lt;RadiusProvider&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadiusProvider> providersRadiusPartialUpdateWithHttpInfo(Integer id, PatchedRadiusProviderRequest patchedRadiusProviderRequest) throws ApiException {
        okhttp3.Call localVarCall = providersRadiusPartialUpdateValidateBeforeCall(id, patchedRadiusProviderRequest, null);
        Type localVarReturnType = new TypeToken<RadiusProvider>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * RadiusProvider Viewset
     * @param id A unique integer value identifying this Radius Provider. (required)
     * @param patchedRadiusProviderRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersRadiusPartialUpdateAsync(Integer id, PatchedRadiusProviderRequest patchedRadiusProviderRequest, final ApiCallback<RadiusProvider> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersRadiusPartialUpdateValidateBeforeCall(id, patchedRadiusProviderRequest, _callback);
        Type localVarReturnType = new TypeToken<RadiusProvider>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersRadiusRetrieve
     * @param id A unique integer value identifying this Radius Provider. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersRadiusRetrieveCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/radius/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersRadiusRetrieveValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling providersRadiusRetrieve(Async)");
        }

        return providersRadiusRetrieveCall(id, _callback);

    }

    /**
     * 
     * RadiusProvider Viewset
     * @param id A unique integer value identifying this Radius Provider. (required)
     * @return RadiusProvider
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RadiusProvider providersRadiusRetrieve(Integer id) throws ApiException {
        ApiResponse<RadiusProvider> localVarResp = providersRadiusRetrieveWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * RadiusProvider Viewset
     * @param id A unique integer value identifying this Radius Provider. (required)
     * @return ApiResponse&lt;RadiusProvider&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadiusProvider> providersRadiusRetrieveWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = providersRadiusRetrieveValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<RadiusProvider>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * RadiusProvider Viewset
     * @param id A unique integer value identifying this Radius Provider. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersRadiusRetrieveAsync(Integer id, final ApiCallback<RadiusProvider> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersRadiusRetrieveValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<RadiusProvider>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersRadiusUpdate
     * @param id A unique integer value identifying this Radius Provider. (required)
     * @param radiusProviderRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersRadiusUpdateCall(Integer id, RadiusProviderRequest radiusProviderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = radiusProviderRequest;

        // create path and map variables
        String localVarPath = "/providers/radius/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersRadiusUpdateValidateBeforeCall(Integer id, RadiusProviderRequest radiusProviderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling providersRadiusUpdate(Async)");
        }

        // verify the required parameter 'radiusProviderRequest' is set
        if (radiusProviderRequest == null) {
            throw new ApiException("Missing the required parameter 'radiusProviderRequest' when calling providersRadiusUpdate(Async)");
        }

        return providersRadiusUpdateCall(id, radiusProviderRequest, _callback);

    }

    /**
     * 
     * RadiusProvider Viewset
     * @param id A unique integer value identifying this Radius Provider. (required)
     * @param radiusProviderRequest  (required)
     * @return RadiusProvider
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RadiusProvider providersRadiusUpdate(Integer id, RadiusProviderRequest radiusProviderRequest) throws ApiException {
        ApiResponse<RadiusProvider> localVarResp = providersRadiusUpdateWithHttpInfo(id, radiusProviderRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * RadiusProvider Viewset
     * @param id A unique integer value identifying this Radius Provider. (required)
     * @param radiusProviderRequest  (required)
     * @return ApiResponse&lt;RadiusProvider&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RadiusProvider> providersRadiusUpdateWithHttpInfo(Integer id, RadiusProviderRequest radiusProviderRequest) throws ApiException {
        okhttp3.Call localVarCall = providersRadiusUpdateValidateBeforeCall(id, radiusProviderRequest, null);
        Type localVarReturnType = new TypeToken<RadiusProvider>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * RadiusProvider Viewset
     * @param id A unique integer value identifying this Radius Provider. (required)
     * @param radiusProviderRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersRadiusUpdateAsync(Integer id, RadiusProviderRequest radiusProviderRequest, final ApiCallback<RadiusProvider> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersRadiusUpdateValidateBeforeCall(id, radiusProviderRequest, _callback);
        Type localVarReturnType = new TypeToken<RadiusProvider>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersRadiusUsedByList
     * @param id A unique integer value identifying this Radius Provider. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersRadiusUsedByListCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/radius/{id}/used_by/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersRadiusUsedByListValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling providersRadiusUsedByList(Async)");
        }

        return providersRadiusUsedByListCall(id, _callback);

    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param id A unique integer value identifying this Radius Provider. (required)
     * @return List&lt;UsedBy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<UsedBy> providersRadiusUsedByList(Integer id) throws ApiException {
        ApiResponse<List<UsedBy>> localVarResp = providersRadiusUsedByListWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param id A unique integer value identifying this Radius Provider. (required)
     * @return ApiResponse&lt;List&lt;UsedBy&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UsedBy>> providersRadiusUsedByListWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = providersRadiusUsedByListValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of all objects that use this object
     * @param id A unique integer value identifying this Radius Provider. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersRadiusUsedByListAsync(Integer id, final ApiCallback<List<UsedBy>> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersRadiusUsedByListValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersSamlCreate
     * @param saMLProviderRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersSamlCreateCall(SAMLProviderRequest saMLProviderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = saMLProviderRequest;

        // create path and map variables
        String localVarPath = "/providers/saml/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersSamlCreateValidateBeforeCall(SAMLProviderRequest saMLProviderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'saMLProviderRequest' is set
        if (saMLProviderRequest == null) {
            throw new ApiException("Missing the required parameter 'saMLProviderRequest' when calling providersSamlCreate(Async)");
        }

        return providersSamlCreateCall(saMLProviderRequest, _callback);

    }

    /**
     * 
     * SAMLProvider Viewset
     * @param saMLProviderRequest  (required)
     * @return SAMLProvider
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public SAMLProvider providersSamlCreate(SAMLProviderRequest saMLProviderRequest) throws ApiException {
        ApiResponse<SAMLProvider> localVarResp = providersSamlCreateWithHttpInfo(saMLProviderRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * SAMLProvider Viewset
     * @param saMLProviderRequest  (required)
     * @return ApiResponse&lt;SAMLProvider&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SAMLProvider> providersSamlCreateWithHttpInfo(SAMLProviderRequest saMLProviderRequest) throws ApiException {
        okhttp3.Call localVarCall = providersSamlCreateValidateBeforeCall(saMLProviderRequest, null);
        Type localVarReturnType = new TypeToken<SAMLProvider>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * SAMLProvider Viewset
     * @param saMLProviderRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersSamlCreateAsync(SAMLProviderRequest saMLProviderRequest, final ApiCallback<SAMLProvider> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersSamlCreateValidateBeforeCall(saMLProviderRequest, _callback);
        Type localVarReturnType = new TypeToken<SAMLProvider>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersSamlDestroy
     * @param id A unique integer value identifying this SAML Provider. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersSamlDestroyCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/saml/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersSamlDestroyValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling providersSamlDestroy(Async)");
        }

        return providersSamlDestroyCall(id, _callback);

    }

    /**
     * 
     * SAMLProvider Viewset
     * @param id A unique integer value identifying this SAML Provider. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void providersSamlDestroy(Integer id) throws ApiException {
        providersSamlDestroyWithHttpInfo(id);
    }

    /**
     * 
     * SAMLProvider Viewset
     * @param id A unique integer value identifying this SAML Provider. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> providersSamlDestroyWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = providersSamlDestroyValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * SAMLProvider Viewset
     * @param id A unique integer value identifying this SAML Provider. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersSamlDestroyAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersSamlDestroyValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersSamlImportMetadataCreate
     * @param name  (required)
     * @param authorizationFlow  (required)
     * @param _file  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully imported provider </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersSamlImportMetadataCreateCall(String name, UUID authorizationFlow, File _file, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/saml/import_metadata/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        if (authorizationFlow != null) {
            localVarFormParams.put("authorization_flow", authorizationFlow);
        }

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersSamlImportMetadataCreateValidateBeforeCall(String name, UUID authorizationFlow, File _file, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling providersSamlImportMetadataCreate(Async)");
        }

        // verify the required parameter 'authorizationFlow' is set
        if (authorizationFlow == null) {
            throw new ApiException("Missing the required parameter 'authorizationFlow' when calling providersSamlImportMetadataCreate(Async)");
        }

        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling providersSamlImportMetadataCreate(Async)");
        }

        return providersSamlImportMetadataCreateCall(name, authorizationFlow, _file, _callback);

    }

    /**
     * 
     * Create provider from SAML Metadata
     * @param name  (required)
     * @param authorizationFlow  (required)
     * @param _file  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully imported provider </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void providersSamlImportMetadataCreate(String name, UUID authorizationFlow, File _file) throws ApiException {
        providersSamlImportMetadataCreateWithHttpInfo(name, authorizationFlow, _file);
    }

    /**
     * 
     * Create provider from SAML Metadata
     * @param name  (required)
     * @param authorizationFlow  (required)
     * @param _file  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully imported provider </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> providersSamlImportMetadataCreateWithHttpInfo(String name, UUID authorizationFlow, File _file) throws ApiException {
        okhttp3.Call localVarCall = providersSamlImportMetadataCreateValidateBeforeCall(name, authorizationFlow, _file, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Create provider from SAML Metadata
     * @param name  (required)
     * @param authorizationFlow  (required)
     * @param _file  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully imported provider </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersSamlImportMetadataCreateAsync(String name, UUID authorizationFlow, File _file, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersSamlImportMetadataCreateValidateBeforeCall(name, authorizationFlow, _file, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersSamlList
     * @param acsUrl  (optional)
     * @param assertionValidNotBefore  (optional)
     * @param assertionValidNotOnOrAfter  (optional)
     * @param audience  (optional)
     * @param authenticationFlow  (optional)
     * @param authorizationFlow  (optional)
     * @param backchannelApplication  (optional)
     * @param defaultRelayState  (optional)
     * @param digestAlgorithm  (optional)
     * @param isBackchannel  (optional)
     * @param issuer  (optional)
     * @param name  (optional)
     * @param nameIdMapping  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param propertyMappings  (optional)
     * @param search A search term. (optional)
     * @param sessionValidNotOnOrAfter  (optional)
     * @param signatureAlgorithm  (optional)
     * @param signingKp  (optional)
     * @param spBinding This determines how authentik sends the response back to the Service Provider.   (optional)
     * @param verificationKp  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersSamlListCall(String acsUrl, String assertionValidNotBefore, String assertionValidNotOnOrAfter, String audience, UUID authenticationFlow, UUID authorizationFlow, UUID backchannelApplication, String defaultRelayState, String digestAlgorithm, Boolean isBackchannel, String issuer, String name, UUID nameIdMapping, String ordering, Integer page, Integer pageSize, List<UUID> propertyMappings, String search, String sessionValidNotOnOrAfter, String signatureAlgorithm, UUID signingKp, String spBinding, UUID verificationKp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/saml/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (acsUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("acs_url", acsUrl));
        }

        if (assertionValidNotBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assertion_valid_not_before", assertionValidNotBefore));
        }

        if (assertionValidNotOnOrAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assertion_valid_not_on_or_after", assertionValidNotOnOrAfter));
        }

        if (audience != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("audience", audience));
        }

        if (authenticationFlow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("authentication_flow", authenticationFlow));
        }

        if (authorizationFlow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("authorization_flow", authorizationFlow));
        }

        if (backchannelApplication != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("backchannel_application", backchannelApplication));
        }

        if (defaultRelayState != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("default_relay_state", defaultRelayState));
        }

        if (digestAlgorithm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("digest_algorithm", digestAlgorithm));
        }

        if (isBackchannel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_backchannel", isBackchannel));
        }

        if (issuer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("issuer", issuer));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (nameIdMapping != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name_id_mapping", nameIdMapping));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (propertyMappings != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "property_mappings", propertyMappings));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (sessionValidNotOnOrAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("session_valid_not_on_or_after", sessionValidNotOnOrAfter));
        }

        if (signatureAlgorithm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("signature_algorithm", signatureAlgorithm));
        }

        if (signingKp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("signing_kp", signingKp));
        }

        if (spBinding != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sp_binding", spBinding));
        }

        if (verificationKp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("verification_kp", verificationKp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersSamlListValidateBeforeCall(String acsUrl, String assertionValidNotBefore, String assertionValidNotOnOrAfter, String audience, UUID authenticationFlow, UUID authorizationFlow, UUID backchannelApplication, String defaultRelayState, String digestAlgorithm, Boolean isBackchannel, String issuer, String name, UUID nameIdMapping, String ordering, Integer page, Integer pageSize, List<UUID> propertyMappings, String search, String sessionValidNotOnOrAfter, String signatureAlgorithm, UUID signingKp, String spBinding, UUID verificationKp, final ApiCallback _callback) throws ApiException {
        return providersSamlListCall(acsUrl, assertionValidNotBefore, assertionValidNotOnOrAfter, audience, authenticationFlow, authorizationFlow, backchannelApplication, defaultRelayState, digestAlgorithm, isBackchannel, issuer, name, nameIdMapping, ordering, page, pageSize, propertyMappings, search, sessionValidNotOnOrAfter, signatureAlgorithm, signingKp, spBinding, verificationKp, _callback);

    }

    /**
     * 
     * SAMLProvider Viewset
     * @param acsUrl  (optional)
     * @param assertionValidNotBefore  (optional)
     * @param assertionValidNotOnOrAfter  (optional)
     * @param audience  (optional)
     * @param authenticationFlow  (optional)
     * @param authorizationFlow  (optional)
     * @param backchannelApplication  (optional)
     * @param defaultRelayState  (optional)
     * @param digestAlgorithm  (optional)
     * @param isBackchannel  (optional)
     * @param issuer  (optional)
     * @param name  (optional)
     * @param nameIdMapping  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param propertyMappings  (optional)
     * @param search A search term. (optional)
     * @param sessionValidNotOnOrAfter  (optional)
     * @param signatureAlgorithm  (optional)
     * @param signingKp  (optional)
     * @param spBinding This determines how authentik sends the response back to the Service Provider.   (optional)
     * @param verificationKp  (optional)
     * @return PaginatedSAMLProviderList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedSAMLProviderList providersSamlList(String acsUrl, String assertionValidNotBefore, String assertionValidNotOnOrAfter, String audience, UUID authenticationFlow, UUID authorizationFlow, UUID backchannelApplication, String defaultRelayState, String digestAlgorithm, Boolean isBackchannel, String issuer, String name, UUID nameIdMapping, String ordering, Integer page, Integer pageSize, List<UUID> propertyMappings, String search, String sessionValidNotOnOrAfter, String signatureAlgorithm, UUID signingKp, String spBinding, UUID verificationKp) throws ApiException {
        ApiResponse<PaginatedSAMLProviderList> localVarResp = providersSamlListWithHttpInfo(acsUrl, assertionValidNotBefore, assertionValidNotOnOrAfter, audience, authenticationFlow, authorizationFlow, backchannelApplication, defaultRelayState, digestAlgorithm, isBackchannel, issuer, name, nameIdMapping, ordering, page, pageSize, propertyMappings, search, sessionValidNotOnOrAfter, signatureAlgorithm, signingKp, spBinding, verificationKp);
        return localVarResp.getData();
    }

    /**
     * 
     * SAMLProvider Viewset
     * @param acsUrl  (optional)
     * @param assertionValidNotBefore  (optional)
     * @param assertionValidNotOnOrAfter  (optional)
     * @param audience  (optional)
     * @param authenticationFlow  (optional)
     * @param authorizationFlow  (optional)
     * @param backchannelApplication  (optional)
     * @param defaultRelayState  (optional)
     * @param digestAlgorithm  (optional)
     * @param isBackchannel  (optional)
     * @param issuer  (optional)
     * @param name  (optional)
     * @param nameIdMapping  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param propertyMappings  (optional)
     * @param search A search term. (optional)
     * @param sessionValidNotOnOrAfter  (optional)
     * @param signatureAlgorithm  (optional)
     * @param signingKp  (optional)
     * @param spBinding This determines how authentik sends the response back to the Service Provider.   (optional)
     * @param verificationKp  (optional)
     * @return ApiResponse&lt;PaginatedSAMLProviderList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedSAMLProviderList> providersSamlListWithHttpInfo(String acsUrl, String assertionValidNotBefore, String assertionValidNotOnOrAfter, String audience, UUID authenticationFlow, UUID authorizationFlow, UUID backchannelApplication, String defaultRelayState, String digestAlgorithm, Boolean isBackchannel, String issuer, String name, UUID nameIdMapping, String ordering, Integer page, Integer pageSize, List<UUID> propertyMappings, String search, String sessionValidNotOnOrAfter, String signatureAlgorithm, UUID signingKp, String spBinding, UUID verificationKp) throws ApiException {
        okhttp3.Call localVarCall = providersSamlListValidateBeforeCall(acsUrl, assertionValidNotBefore, assertionValidNotOnOrAfter, audience, authenticationFlow, authorizationFlow, backchannelApplication, defaultRelayState, digestAlgorithm, isBackchannel, issuer, name, nameIdMapping, ordering, page, pageSize, propertyMappings, search, sessionValidNotOnOrAfter, signatureAlgorithm, signingKp, spBinding, verificationKp, null);
        Type localVarReturnType = new TypeToken<PaginatedSAMLProviderList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * SAMLProvider Viewset
     * @param acsUrl  (optional)
     * @param assertionValidNotBefore  (optional)
     * @param assertionValidNotOnOrAfter  (optional)
     * @param audience  (optional)
     * @param authenticationFlow  (optional)
     * @param authorizationFlow  (optional)
     * @param backchannelApplication  (optional)
     * @param defaultRelayState  (optional)
     * @param digestAlgorithm  (optional)
     * @param isBackchannel  (optional)
     * @param issuer  (optional)
     * @param name  (optional)
     * @param nameIdMapping  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param propertyMappings  (optional)
     * @param search A search term. (optional)
     * @param sessionValidNotOnOrAfter  (optional)
     * @param signatureAlgorithm  (optional)
     * @param signingKp  (optional)
     * @param spBinding This determines how authentik sends the response back to the Service Provider.   (optional)
     * @param verificationKp  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersSamlListAsync(String acsUrl, String assertionValidNotBefore, String assertionValidNotOnOrAfter, String audience, UUID authenticationFlow, UUID authorizationFlow, UUID backchannelApplication, String defaultRelayState, String digestAlgorithm, Boolean isBackchannel, String issuer, String name, UUID nameIdMapping, String ordering, Integer page, Integer pageSize, List<UUID> propertyMappings, String search, String sessionValidNotOnOrAfter, String signatureAlgorithm, UUID signingKp, String spBinding, UUID verificationKp, final ApiCallback<PaginatedSAMLProviderList> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersSamlListValidateBeforeCall(acsUrl, assertionValidNotBefore, assertionValidNotOnOrAfter, audience, authenticationFlow, authorizationFlow, backchannelApplication, defaultRelayState, digestAlgorithm, isBackchannel, issuer, name, nameIdMapping, ordering, page, pageSize, propertyMappings, search, sessionValidNotOnOrAfter, signatureAlgorithm, signingKp, spBinding, verificationKp, _callback);
        Type localVarReturnType = new TypeToken<PaginatedSAMLProviderList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersSamlMetadataRetrieve
     * @param id A unique integer value identifying this SAML Provider. (required)
     * @param download  (optional)
     * @param forceBinding Optionally force the metadata to only include one binding. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Provider has no application assigned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersSamlMetadataRetrieveCall(Integer id, Boolean download, String forceBinding, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/saml/{id}/metadata/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (download != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("download", download));
        }

        if (forceBinding != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force_binding", forceBinding));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersSamlMetadataRetrieveValidateBeforeCall(Integer id, Boolean download, String forceBinding, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling providersSamlMetadataRetrieve(Async)");
        }

        return providersSamlMetadataRetrieveCall(id, download, forceBinding, _callback);

    }

    /**
     * 
     * Return metadata as XML string
     * @param id A unique integer value identifying this SAML Provider. (required)
     * @param download  (optional)
     * @param forceBinding Optionally force the metadata to only include one binding. (optional)
     * @return SAMLMetadata
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Provider has no application assigned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public SAMLMetadata providersSamlMetadataRetrieve(Integer id, Boolean download, String forceBinding) throws ApiException {
        ApiResponse<SAMLMetadata> localVarResp = providersSamlMetadataRetrieveWithHttpInfo(id, download, forceBinding);
        return localVarResp.getData();
    }

    /**
     * 
     * Return metadata as XML string
     * @param id A unique integer value identifying this SAML Provider. (required)
     * @param download  (optional)
     * @param forceBinding Optionally force the metadata to only include one binding. (optional)
     * @return ApiResponse&lt;SAMLMetadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Provider has no application assigned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SAMLMetadata> providersSamlMetadataRetrieveWithHttpInfo(Integer id, Boolean download, String forceBinding) throws ApiException {
        okhttp3.Call localVarCall = providersSamlMetadataRetrieveValidateBeforeCall(id, download, forceBinding, null);
        Type localVarReturnType = new TypeToken<SAMLMetadata>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return metadata as XML string
     * @param id A unique integer value identifying this SAML Provider. (required)
     * @param download  (optional)
     * @param forceBinding Optionally force the metadata to only include one binding. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Provider has no application assigned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersSamlMetadataRetrieveAsync(Integer id, Boolean download, String forceBinding, final ApiCallback<SAMLMetadata> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersSamlMetadataRetrieveValidateBeforeCall(id, download, forceBinding, _callback);
        Type localVarReturnType = new TypeToken<SAMLMetadata>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersSamlPartialUpdate
     * @param id A unique integer value identifying this SAML Provider. (required)
     * @param patchedSAMLProviderRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersSamlPartialUpdateCall(Integer id, PatchedSAMLProviderRequest patchedSAMLProviderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchedSAMLProviderRequest;

        // create path and map variables
        String localVarPath = "/providers/saml/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersSamlPartialUpdateValidateBeforeCall(Integer id, PatchedSAMLProviderRequest patchedSAMLProviderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling providersSamlPartialUpdate(Async)");
        }

        return providersSamlPartialUpdateCall(id, patchedSAMLProviderRequest, _callback);

    }

    /**
     * 
     * SAMLProvider Viewset
     * @param id A unique integer value identifying this SAML Provider. (required)
     * @param patchedSAMLProviderRequest  (optional)
     * @return SAMLProvider
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public SAMLProvider providersSamlPartialUpdate(Integer id, PatchedSAMLProviderRequest patchedSAMLProviderRequest) throws ApiException {
        ApiResponse<SAMLProvider> localVarResp = providersSamlPartialUpdateWithHttpInfo(id, patchedSAMLProviderRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * SAMLProvider Viewset
     * @param id A unique integer value identifying this SAML Provider. (required)
     * @param patchedSAMLProviderRequest  (optional)
     * @return ApiResponse&lt;SAMLProvider&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SAMLProvider> providersSamlPartialUpdateWithHttpInfo(Integer id, PatchedSAMLProviderRequest patchedSAMLProviderRequest) throws ApiException {
        okhttp3.Call localVarCall = providersSamlPartialUpdateValidateBeforeCall(id, patchedSAMLProviderRequest, null);
        Type localVarReturnType = new TypeToken<SAMLProvider>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * SAMLProvider Viewset
     * @param id A unique integer value identifying this SAML Provider. (required)
     * @param patchedSAMLProviderRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersSamlPartialUpdateAsync(Integer id, PatchedSAMLProviderRequest patchedSAMLProviderRequest, final ApiCallback<SAMLProvider> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersSamlPartialUpdateValidateBeforeCall(id, patchedSAMLProviderRequest, _callback);
        Type localVarReturnType = new TypeToken<SAMLProvider>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersSamlPreviewUserRetrieve
     * @param id A unique integer value identifying this SAML Provider. (required)
     * @param forUser  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersSamlPreviewUserRetrieveCall(Integer id, Integer forUser, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/saml/{id}/preview_user/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (forUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("for_user", forUser));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersSamlPreviewUserRetrieveValidateBeforeCall(Integer id, Integer forUser, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling providersSamlPreviewUserRetrieve(Async)");
        }

        return providersSamlPreviewUserRetrieveCall(id, forUser, _callback);

    }

    /**
     * 
     * Preview user data for provider
     * @param id A unique integer value identifying this SAML Provider. (required)
     * @param forUser  (optional)
     * @return PropertyMappingPreview
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PropertyMappingPreview providersSamlPreviewUserRetrieve(Integer id, Integer forUser) throws ApiException {
        ApiResponse<PropertyMappingPreview> localVarResp = providersSamlPreviewUserRetrieveWithHttpInfo(id, forUser);
        return localVarResp.getData();
    }

    /**
     * 
     * Preview user data for provider
     * @param id A unique integer value identifying this SAML Provider. (required)
     * @param forUser  (optional)
     * @return ApiResponse&lt;PropertyMappingPreview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PropertyMappingPreview> providersSamlPreviewUserRetrieveWithHttpInfo(Integer id, Integer forUser) throws ApiException {
        okhttp3.Call localVarCall = providersSamlPreviewUserRetrieveValidateBeforeCall(id, forUser, null);
        Type localVarReturnType = new TypeToken<PropertyMappingPreview>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Preview user data for provider
     * @param id A unique integer value identifying this SAML Provider. (required)
     * @param forUser  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersSamlPreviewUserRetrieveAsync(Integer id, Integer forUser, final ApiCallback<PropertyMappingPreview> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersSamlPreviewUserRetrieveValidateBeforeCall(id, forUser, _callback);
        Type localVarReturnType = new TypeToken<PropertyMappingPreview>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersSamlRetrieve
     * @param id A unique integer value identifying this SAML Provider. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersSamlRetrieveCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/saml/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersSamlRetrieveValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling providersSamlRetrieve(Async)");
        }

        return providersSamlRetrieveCall(id, _callback);

    }

    /**
     * 
     * SAMLProvider Viewset
     * @param id A unique integer value identifying this SAML Provider. (required)
     * @return SAMLProvider
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public SAMLProvider providersSamlRetrieve(Integer id) throws ApiException {
        ApiResponse<SAMLProvider> localVarResp = providersSamlRetrieveWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * SAMLProvider Viewset
     * @param id A unique integer value identifying this SAML Provider. (required)
     * @return ApiResponse&lt;SAMLProvider&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SAMLProvider> providersSamlRetrieveWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = providersSamlRetrieveValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<SAMLProvider>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * SAMLProvider Viewset
     * @param id A unique integer value identifying this SAML Provider. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersSamlRetrieveAsync(Integer id, final ApiCallback<SAMLProvider> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersSamlRetrieveValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<SAMLProvider>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersSamlUpdate
     * @param id A unique integer value identifying this SAML Provider. (required)
     * @param saMLProviderRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersSamlUpdateCall(Integer id, SAMLProviderRequest saMLProviderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = saMLProviderRequest;

        // create path and map variables
        String localVarPath = "/providers/saml/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersSamlUpdateValidateBeforeCall(Integer id, SAMLProviderRequest saMLProviderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling providersSamlUpdate(Async)");
        }

        // verify the required parameter 'saMLProviderRequest' is set
        if (saMLProviderRequest == null) {
            throw new ApiException("Missing the required parameter 'saMLProviderRequest' when calling providersSamlUpdate(Async)");
        }

        return providersSamlUpdateCall(id, saMLProviderRequest, _callback);

    }

    /**
     * 
     * SAMLProvider Viewset
     * @param id A unique integer value identifying this SAML Provider. (required)
     * @param saMLProviderRequest  (required)
     * @return SAMLProvider
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public SAMLProvider providersSamlUpdate(Integer id, SAMLProviderRequest saMLProviderRequest) throws ApiException {
        ApiResponse<SAMLProvider> localVarResp = providersSamlUpdateWithHttpInfo(id, saMLProviderRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * SAMLProvider Viewset
     * @param id A unique integer value identifying this SAML Provider. (required)
     * @param saMLProviderRequest  (required)
     * @return ApiResponse&lt;SAMLProvider&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SAMLProvider> providersSamlUpdateWithHttpInfo(Integer id, SAMLProviderRequest saMLProviderRequest) throws ApiException {
        okhttp3.Call localVarCall = providersSamlUpdateValidateBeforeCall(id, saMLProviderRequest, null);
        Type localVarReturnType = new TypeToken<SAMLProvider>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * SAMLProvider Viewset
     * @param id A unique integer value identifying this SAML Provider. (required)
     * @param saMLProviderRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersSamlUpdateAsync(Integer id, SAMLProviderRequest saMLProviderRequest, final ApiCallback<SAMLProvider> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersSamlUpdateValidateBeforeCall(id, saMLProviderRequest, _callback);
        Type localVarReturnType = new TypeToken<SAMLProvider>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersSamlUsedByList
     * @param id A unique integer value identifying this SAML Provider. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersSamlUsedByListCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/saml/{id}/used_by/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersSamlUsedByListValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling providersSamlUsedByList(Async)");
        }

        return providersSamlUsedByListCall(id, _callback);

    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param id A unique integer value identifying this SAML Provider. (required)
     * @return List&lt;UsedBy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<UsedBy> providersSamlUsedByList(Integer id) throws ApiException {
        ApiResponse<List<UsedBy>> localVarResp = providersSamlUsedByListWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param id A unique integer value identifying this SAML Provider. (required)
     * @return ApiResponse&lt;List&lt;UsedBy&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UsedBy>> providersSamlUsedByListWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = providersSamlUsedByListValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of all objects that use this object
     * @param id A unique integer value identifying this SAML Provider. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersSamlUsedByListAsync(Integer id, final ApiCallback<List<UsedBy>> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersSamlUsedByListValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersScimCreate
     * @param scIMProviderRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersScimCreateCall(SCIMProviderRequest scIMProviderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = scIMProviderRequest;

        // create path and map variables
        String localVarPath = "/providers/scim/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersScimCreateValidateBeforeCall(SCIMProviderRequest scIMProviderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scIMProviderRequest' is set
        if (scIMProviderRequest == null) {
            throw new ApiException("Missing the required parameter 'scIMProviderRequest' when calling providersScimCreate(Async)");
        }

        return providersScimCreateCall(scIMProviderRequest, _callback);

    }

    /**
     * 
     * SCIMProvider Viewset
     * @param scIMProviderRequest  (required)
     * @return SCIMProvider
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public SCIMProvider providersScimCreate(SCIMProviderRequest scIMProviderRequest) throws ApiException {
        ApiResponse<SCIMProvider> localVarResp = providersScimCreateWithHttpInfo(scIMProviderRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * SCIMProvider Viewset
     * @param scIMProviderRequest  (required)
     * @return ApiResponse&lt;SCIMProvider&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SCIMProvider> providersScimCreateWithHttpInfo(SCIMProviderRequest scIMProviderRequest) throws ApiException {
        okhttp3.Call localVarCall = providersScimCreateValidateBeforeCall(scIMProviderRequest, null);
        Type localVarReturnType = new TypeToken<SCIMProvider>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * SCIMProvider Viewset
     * @param scIMProviderRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersScimCreateAsync(SCIMProviderRequest scIMProviderRequest, final ApiCallback<SCIMProvider> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersScimCreateValidateBeforeCall(scIMProviderRequest, _callback);
        Type localVarReturnType = new TypeToken<SCIMProvider>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersScimDestroy
     * @param id A unique integer value identifying this SCIM Provider. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersScimDestroyCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/scim/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersScimDestroyValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling providersScimDestroy(Async)");
        }

        return providersScimDestroyCall(id, _callback);

    }

    /**
     * 
     * SCIMProvider Viewset
     * @param id A unique integer value identifying this SCIM Provider. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void providersScimDestroy(Integer id) throws ApiException {
        providersScimDestroyWithHttpInfo(id);
    }

    /**
     * 
     * SCIMProvider Viewset
     * @param id A unique integer value identifying this SCIM Provider. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> providersScimDestroyWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = providersScimDestroyValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * SCIMProvider Viewset
     * @param id A unique integer value identifying this SCIM Provider. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersScimDestroyAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersScimDestroyValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersScimGroupsCreate
     * @param scIMProviderGroupRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersScimGroupsCreateCall(SCIMProviderGroupRequest scIMProviderGroupRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = scIMProviderGroupRequest;

        // create path and map variables
        String localVarPath = "/providers/scim_groups/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersScimGroupsCreateValidateBeforeCall(SCIMProviderGroupRequest scIMProviderGroupRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scIMProviderGroupRequest' is set
        if (scIMProviderGroupRequest == null) {
            throw new ApiException("Missing the required parameter 'scIMProviderGroupRequest' when calling providersScimGroupsCreate(Async)");
        }

        return providersScimGroupsCreateCall(scIMProviderGroupRequest, _callback);

    }

    /**
     * 
     * SCIMProviderGroup Viewset
     * @param scIMProviderGroupRequest  (required)
     * @return SCIMProviderGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public SCIMProviderGroup providersScimGroupsCreate(SCIMProviderGroupRequest scIMProviderGroupRequest) throws ApiException {
        ApiResponse<SCIMProviderGroup> localVarResp = providersScimGroupsCreateWithHttpInfo(scIMProviderGroupRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * SCIMProviderGroup Viewset
     * @param scIMProviderGroupRequest  (required)
     * @return ApiResponse&lt;SCIMProviderGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SCIMProviderGroup> providersScimGroupsCreateWithHttpInfo(SCIMProviderGroupRequest scIMProviderGroupRequest) throws ApiException {
        okhttp3.Call localVarCall = providersScimGroupsCreateValidateBeforeCall(scIMProviderGroupRequest, null);
        Type localVarReturnType = new TypeToken<SCIMProviderGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * SCIMProviderGroup Viewset
     * @param scIMProviderGroupRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersScimGroupsCreateAsync(SCIMProviderGroupRequest scIMProviderGroupRequest, final ApiCallback<SCIMProviderGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersScimGroupsCreateValidateBeforeCall(scIMProviderGroupRequest, _callback);
        Type localVarReturnType = new TypeToken<SCIMProviderGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersScimGroupsDestroy
     * @param id A UUID string identifying this scim provider group. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersScimGroupsDestroyCall(UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/scim_groups/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersScimGroupsDestroyValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling providersScimGroupsDestroy(Async)");
        }

        return providersScimGroupsDestroyCall(id, _callback);

    }

    /**
     * 
     * SCIMProviderGroup Viewset
     * @param id A UUID string identifying this scim provider group. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void providersScimGroupsDestroy(UUID id) throws ApiException {
        providersScimGroupsDestroyWithHttpInfo(id);
    }

    /**
     * 
     * SCIMProviderGroup Viewset
     * @param id A UUID string identifying this scim provider group. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> providersScimGroupsDestroyWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = providersScimGroupsDestroyValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * SCIMProviderGroup Viewset
     * @param id A UUID string identifying this scim provider group. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersScimGroupsDestroyAsync(UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersScimGroupsDestroyValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersScimGroupsList
     * @param groupGroupUuid  (optional)
     * @param groupName  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param providerId  (optional)
     * @param search A search term. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersScimGroupsListCall(UUID groupGroupUuid, String groupName, String ordering, Integer page, Integer pageSize, Integer providerId, String search, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/scim_groups/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (groupGroupUuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group__group_uuid", groupGroupUuid));
        }

        if (groupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group__name", groupName));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (providerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("provider__id", providerId));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersScimGroupsListValidateBeforeCall(UUID groupGroupUuid, String groupName, String ordering, Integer page, Integer pageSize, Integer providerId, String search, final ApiCallback _callback) throws ApiException {
        return providersScimGroupsListCall(groupGroupUuid, groupName, ordering, page, pageSize, providerId, search, _callback);

    }

    /**
     * 
     * SCIMProviderGroup Viewset
     * @param groupGroupUuid  (optional)
     * @param groupName  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param providerId  (optional)
     * @param search A search term. (optional)
     * @return PaginatedSCIMProviderGroupList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedSCIMProviderGroupList providersScimGroupsList(UUID groupGroupUuid, String groupName, String ordering, Integer page, Integer pageSize, Integer providerId, String search) throws ApiException {
        ApiResponse<PaginatedSCIMProviderGroupList> localVarResp = providersScimGroupsListWithHttpInfo(groupGroupUuid, groupName, ordering, page, pageSize, providerId, search);
        return localVarResp.getData();
    }

    /**
     * 
     * SCIMProviderGroup Viewset
     * @param groupGroupUuid  (optional)
     * @param groupName  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param providerId  (optional)
     * @param search A search term. (optional)
     * @return ApiResponse&lt;PaginatedSCIMProviderGroupList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedSCIMProviderGroupList> providersScimGroupsListWithHttpInfo(UUID groupGroupUuid, String groupName, String ordering, Integer page, Integer pageSize, Integer providerId, String search) throws ApiException {
        okhttp3.Call localVarCall = providersScimGroupsListValidateBeforeCall(groupGroupUuid, groupName, ordering, page, pageSize, providerId, search, null);
        Type localVarReturnType = new TypeToken<PaginatedSCIMProviderGroupList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * SCIMProviderGroup Viewset
     * @param groupGroupUuid  (optional)
     * @param groupName  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param providerId  (optional)
     * @param search A search term. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersScimGroupsListAsync(UUID groupGroupUuid, String groupName, String ordering, Integer page, Integer pageSize, Integer providerId, String search, final ApiCallback<PaginatedSCIMProviderGroupList> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersScimGroupsListValidateBeforeCall(groupGroupUuid, groupName, ordering, page, pageSize, providerId, search, _callback);
        Type localVarReturnType = new TypeToken<PaginatedSCIMProviderGroupList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersScimGroupsRetrieve
     * @param id A UUID string identifying this scim provider group. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersScimGroupsRetrieveCall(UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/scim_groups/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersScimGroupsRetrieveValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling providersScimGroupsRetrieve(Async)");
        }

        return providersScimGroupsRetrieveCall(id, _callback);

    }

    /**
     * 
     * SCIMProviderGroup Viewset
     * @param id A UUID string identifying this scim provider group. (required)
     * @return SCIMProviderGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public SCIMProviderGroup providersScimGroupsRetrieve(UUID id) throws ApiException {
        ApiResponse<SCIMProviderGroup> localVarResp = providersScimGroupsRetrieveWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * SCIMProviderGroup Viewset
     * @param id A UUID string identifying this scim provider group. (required)
     * @return ApiResponse&lt;SCIMProviderGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SCIMProviderGroup> providersScimGroupsRetrieveWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = providersScimGroupsRetrieveValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<SCIMProviderGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * SCIMProviderGroup Viewset
     * @param id A UUID string identifying this scim provider group. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersScimGroupsRetrieveAsync(UUID id, final ApiCallback<SCIMProviderGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersScimGroupsRetrieveValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<SCIMProviderGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersScimGroupsUsedByList
     * @param id A UUID string identifying this scim provider group. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersScimGroupsUsedByListCall(UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/scim_groups/{id}/used_by/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersScimGroupsUsedByListValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling providersScimGroupsUsedByList(Async)");
        }

        return providersScimGroupsUsedByListCall(id, _callback);

    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param id A UUID string identifying this scim provider group. (required)
     * @return List&lt;UsedBy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<UsedBy> providersScimGroupsUsedByList(UUID id) throws ApiException {
        ApiResponse<List<UsedBy>> localVarResp = providersScimGroupsUsedByListWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param id A UUID string identifying this scim provider group. (required)
     * @return ApiResponse&lt;List&lt;UsedBy&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UsedBy>> providersScimGroupsUsedByListWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = providersScimGroupsUsedByListValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of all objects that use this object
     * @param id A UUID string identifying this scim provider group. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersScimGroupsUsedByListAsync(UUID id, final ApiCallback<List<UsedBy>> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersScimGroupsUsedByListValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersScimList
     * @param excludeUsersServiceAccount  (optional)
     * @param filterGroup  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @param url  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersScimListCall(Boolean excludeUsersServiceAccount, UUID filterGroup, String name, String ordering, Integer page, Integer pageSize, String search, String url, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/scim/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (excludeUsersServiceAccount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_users_service_account", excludeUsersServiceAccount));
        }

        if (filterGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_group", filterGroup));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersScimListValidateBeforeCall(Boolean excludeUsersServiceAccount, UUID filterGroup, String name, String ordering, Integer page, Integer pageSize, String search, String url, final ApiCallback _callback) throws ApiException {
        return providersScimListCall(excludeUsersServiceAccount, filterGroup, name, ordering, page, pageSize, search, url, _callback);

    }

    /**
     * 
     * SCIMProvider Viewset
     * @param excludeUsersServiceAccount  (optional)
     * @param filterGroup  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @param url  (optional)
     * @return PaginatedSCIMProviderList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedSCIMProviderList providersScimList(Boolean excludeUsersServiceAccount, UUID filterGroup, String name, String ordering, Integer page, Integer pageSize, String search, String url) throws ApiException {
        ApiResponse<PaginatedSCIMProviderList> localVarResp = providersScimListWithHttpInfo(excludeUsersServiceAccount, filterGroup, name, ordering, page, pageSize, search, url);
        return localVarResp.getData();
    }

    /**
     * 
     * SCIMProvider Viewset
     * @param excludeUsersServiceAccount  (optional)
     * @param filterGroup  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @param url  (optional)
     * @return ApiResponse&lt;PaginatedSCIMProviderList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedSCIMProviderList> providersScimListWithHttpInfo(Boolean excludeUsersServiceAccount, UUID filterGroup, String name, String ordering, Integer page, Integer pageSize, String search, String url) throws ApiException {
        okhttp3.Call localVarCall = providersScimListValidateBeforeCall(excludeUsersServiceAccount, filterGroup, name, ordering, page, pageSize, search, url, null);
        Type localVarReturnType = new TypeToken<PaginatedSCIMProviderList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * SCIMProvider Viewset
     * @param excludeUsersServiceAccount  (optional)
     * @param filterGroup  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @param url  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersScimListAsync(Boolean excludeUsersServiceAccount, UUID filterGroup, String name, String ordering, Integer page, Integer pageSize, String search, String url, final ApiCallback<PaginatedSCIMProviderList> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersScimListValidateBeforeCall(excludeUsersServiceAccount, filterGroup, name, ordering, page, pageSize, search, url, _callback);
        Type localVarReturnType = new TypeToken<PaginatedSCIMProviderList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersScimPartialUpdate
     * @param id A unique integer value identifying this SCIM Provider. (required)
     * @param patchedSCIMProviderRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersScimPartialUpdateCall(Integer id, PatchedSCIMProviderRequest patchedSCIMProviderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchedSCIMProviderRequest;

        // create path and map variables
        String localVarPath = "/providers/scim/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersScimPartialUpdateValidateBeforeCall(Integer id, PatchedSCIMProviderRequest patchedSCIMProviderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling providersScimPartialUpdate(Async)");
        }

        return providersScimPartialUpdateCall(id, patchedSCIMProviderRequest, _callback);

    }

    /**
     * 
     * SCIMProvider Viewset
     * @param id A unique integer value identifying this SCIM Provider. (required)
     * @param patchedSCIMProviderRequest  (optional)
     * @return SCIMProvider
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public SCIMProvider providersScimPartialUpdate(Integer id, PatchedSCIMProviderRequest patchedSCIMProviderRequest) throws ApiException {
        ApiResponse<SCIMProvider> localVarResp = providersScimPartialUpdateWithHttpInfo(id, patchedSCIMProviderRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * SCIMProvider Viewset
     * @param id A unique integer value identifying this SCIM Provider. (required)
     * @param patchedSCIMProviderRequest  (optional)
     * @return ApiResponse&lt;SCIMProvider&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SCIMProvider> providersScimPartialUpdateWithHttpInfo(Integer id, PatchedSCIMProviderRequest patchedSCIMProviderRequest) throws ApiException {
        okhttp3.Call localVarCall = providersScimPartialUpdateValidateBeforeCall(id, patchedSCIMProviderRequest, null);
        Type localVarReturnType = new TypeToken<SCIMProvider>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * SCIMProvider Viewset
     * @param id A unique integer value identifying this SCIM Provider. (required)
     * @param patchedSCIMProviderRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersScimPartialUpdateAsync(Integer id, PatchedSCIMProviderRequest patchedSCIMProviderRequest, final ApiCallback<SCIMProvider> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersScimPartialUpdateValidateBeforeCall(id, patchedSCIMProviderRequest, _callback);
        Type localVarReturnType = new TypeToken<SCIMProvider>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersScimRetrieve
     * @param id A unique integer value identifying this SCIM Provider. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersScimRetrieveCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/scim/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersScimRetrieveValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling providersScimRetrieve(Async)");
        }

        return providersScimRetrieveCall(id, _callback);

    }

    /**
     * 
     * SCIMProvider Viewset
     * @param id A unique integer value identifying this SCIM Provider. (required)
     * @return SCIMProvider
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public SCIMProvider providersScimRetrieve(Integer id) throws ApiException {
        ApiResponse<SCIMProvider> localVarResp = providersScimRetrieveWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * SCIMProvider Viewset
     * @param id A unique integer value identifying this SCIM Provider. (required)
     * @return ApiResponse&lt;SCIMProvider&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SCIMProvider> providersScimRetrieveWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = providersScimRetrieveValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<SCIMProvider>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * SCIMProvider Viewset
     * @param id A unique integer value identifying this SCIM Provider. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersScimRetrieveAsync(Integer id, final ApiCallback<SCIMProvider> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersScimRetrieveValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<SCIMProvider>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersScimSyncStatusRetrieve
     * @param id A unique integer value identifying this SCIM Provider. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Task not found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersScimSyncStatusRetrieveCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/scim/{id}/sync/status/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersScimSyncStatusRetrieveValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling providersScimSyncStatusRetrieve(Async)");
        }

        return providersScimSyncStatusRetrieveCall(id, _callback);

    }

    /**
     * 
     * Get provider&#39;s sync status
     * @param id A unique integer value identifying this SCIM Provider. (required)
     * @return SyncStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Task not found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public SyncStatus providersScimSyncStatusRetrieve(Integer id) throws ApiException {
        ApiResponse<SyncStatus> localVarResp = providersScimSyncStatusRetrieveWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Get provider&#39;s sync status
     * @param id A unique integer value identifying this SCIM Provider. (required)
     * @return ApiResponse&lt;SyncStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Task not found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SyncStatus> providersScimSyncStatusRetrieveWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = providersScimSyncStatusRetrieveValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<SyncStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get provider&#39;s sync status
     * @param id A unique integer value identifying this SCIM Provider. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Task not found </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersScimSyncStatusRetrieveAsync(Integer id, final ApiCallback<SyncStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersScimSyncStatusRetrieveValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<SyncStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersScimUpdate
     * @param id A unique integer value identifying this SCIM Provider. (required)
     * @param scIMProviderRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersScimUpdateCall(Integer id, SCIMProviderRequest scIMProviderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = scIMProviderRequest;

        // create path and map variables
        String localVarPath = "/providers/scim/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersScimUpdateValidateBeforeCall(Integer id, SCIMProviderRequest scIMProviderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling providersScimUpdate(Async)");
        }

        // verify the required parameter 'scIMProviderRequest' is set
        if (scIMProviderRequest == null) {
            throw new ApiException("Missing the required parameter 'scIMProviderRequest' when calling providersScimUpdate(Async)");
        }

        return providersScimUpdateCall(id, scIMProviderRequest, _callback);

    }

    /**
     * 
     * SCIMProvider Viewset
     * @param id A unique integer value identifying this SCIM Provider. (required)
     * @param scIMProviderRequest  (required)
     * @return SCIMProvider
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public SCIMProvider providersScimUpdate(Integer id, SCIMProviderRequest scIMProviderRequest) throws ApiException {
        ApiResponse<SCIMProvider> localVarResp = providersScimUpdateWithHttpInfo(id, scIMProviderRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * SCIMProvider Viewset
     * @param id A unique integer value identifying this SCIM Provider. (required)
     * @param scIMProviderRequest  (required)
     * @return ApiResponse&lt;SCIMProvider&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SCIMProvider> providersScimUpdateWithHttpInfo(Integer id, SCIMProviderRequest scIMProviderRequest) throws ApiException {
        okhttp3.Call localVarCall = providersScimUpdateValidateBeforeCall(id, scIMProviderRequest, null);
        Type localVarReturnType = new TypeToken<SCIMProvider>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * SCIMProvider Viewset
     * @param id A unique integer value identifying this SCIM Provider. (required)
     * @param scIMProviderRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersScimUpdateAsync(Integer id, SCIMProviderRequest scIMProviderRequest, final ApiCallback<SCIMProvider> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersScimUpdateValidateBeforeCall(id, scIMProviderRequest, _callback);
        Type localVarReturnType = new TypeToken<SCIMProvider>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersScimUsedByList
     * @param id A unique integer value identifying this SCIM Provider. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersScimUsedByListCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/scim/{id}/used_by/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersScimUsedByListValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling providersScimUsedByList(Async)");
        }

        return providersScimUsedByListCall(id, _callback);

    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param id A unique integer value identifying this SCIM Provider. (required)
     * @return List&lt;UsedBy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<UsedBy> providersScimUsedByList(Integer id) throws ApiException {
        ApiResponse<List<UsedBy>> localVarResp = providersScimUsedByListWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param id A unique integer value identifying this SCIM Provider. (required)
     * @return ApiResponse&lt;List&lt;UsedBy&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UsedBy>> providersScimUsedByListWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = providersScimUsedByListValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of all objects that use this object
     * @param id A unique integer value identifying this SCIM Provider. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersScimUsedByListAsync(Integer id, final ApiCallback<List<UsedBy>> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersScimUsedByListValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersScimUsersCreate
     * @param scIMProviderUserRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersScimUsersCreateCall(SCIMProviderUserRequest scIMProviderUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = scIMProviderUserRequest;

        // create path and map variables
        String localVarPath = "/providers/scim_users/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersScimUsersCreateValidateBeforeCall(SCIMProviderUserRequest scIMProviderUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scIMProviderUserRequest' is set
        if (scIMProviderUserRequest == null) {
            throw new ApiException("Missing the required parameter 'scIMProviderUserRequest' when calling providersScimUsersCreate(Async)");
        }

        return providersScimUsersCreateCall(scIMProviderUserRequest, _callback);

    }

    /**
     * 
     * SCIMProviderUser Viewset
     * @param scIMProviderUserRequest  (required)
     * @return SCIMProviderUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public SCIMProviderUser providersScimUsersCreate(SCIMProviderUserRequest scIMProviderUserRequest) throws ApiException {
        ApiResponse<SCIMProviderUser> localVarResp = providersScimUsersCreateWithHttpInfo(scIMProviderUserRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * SCIMProviderUser Viewset
     * @param scIMProviderUserRequest  (required)
     * @return ApiResponse&lt;SCIMProviderUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SCIMProviderUser> providersScimUsersCreateWithHttpInfo(SCIMProviderUserRequest scIMProviderUserRequest) throws ApiException {
        okhttp3.Call localVarCall = providersScimUsersCreateValidateBeforeCall(scIMProviderUserRequest, null);
        Type localVarReturnType = new TypeToken<SCIMProviderUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * SCIMProviderUser Viewset
     * @param scIMProviderUserRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersScimUsersCreateAsync(SCIMProviderUserRequest scIMProviderUserRequest, final ApiCallback<SCIMProviderUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersScimUsersCreateValidateBeforeCall(scIMProviderUserRequest, _callback);
        Type localVarReturnType = new TypeToken<SCIMProviderUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersScimUsersDestroy
     * @param id A UUID string identifying this scim provider user. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersScimUsersDestroyCall(UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/scim_users/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersScimUsersDestroyValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling providersScimUsersDestroy(Async)");
        }

        return providersScimUsersDestroyCall(id, _callback);

    }

    /**
     * 
     * SCIMProviderUser Viewset
     * @param id A UUID string identifying this scim provider user. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void providersScimUsersDestroy(UUID id) throws ApiException {
        providersScimUsersDestroyWithHttpInfo(id);
    }

    /**
     * 
     * SCIMProviderUser Viewset
     * @param id A UUID string identifying this scim provider user. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> providersScimUsersDestroyWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = providersScimUsersDestroyValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * SCIMProviderUser Viewset
     * @param id A UUID string identifying this scim provider user. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersScimUsersDestroyAsync(UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersScimUsersDestroyValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersScimUsersList
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param providerId  (optional)
     * @param search A search term. (optional)
     * @param userId  (optional)
     * @param userUsername  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersScimUsersListCall(String ordering, Integer page, Integer pageSize, Integer providerId, String search, Integer userId, String userUsername, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/scim_users/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (providerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("provider__id", providerId));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user__id", userId));
        }

        if (userUsername != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user__username", userUsername));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersScimUsersListValidateBeforeCall(String ordering, Integer page, Integer pageSize, Integer providerId, String search, Integer userId, String userUsername, final ApiCallback _callback) throws ApiException {
        return providersScimUsersListCall(ordering, page, pageSize, providerId, search, userId, userUsername, _callback);

    }

    /**
     * 
     * SCIMProviderUser Viewset
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param providerId  (optional)
     * @param search A search term. (optional)
     * @param userId  (optional)
     * @param userUsername  (optional)
     * @return PaginatedSCIMProviderUserList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedSCIMProviderUserList providersScimUsersList(String ordering, Integer page, Integer pageSize, Integer providerId, String search, Integer userId, String userUsername) throws ApiException {
        ApiResponse<PaginatedSCIMProviderUserList> localVarResp = providersScimUsersListWithHttpInfo(ordering, page, pageSize, providerId, search, userId, userUsername);
        return localVarResp.getData();
    }

    /**
     * 
     * SCIMProviderUser Viewset
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param providerId  (optional)
     * @param search A search term. (optional)
     * @param userId  (optional)
     * @param userUsername  (optional)
     * @return ApiResponse&lt;PaginatedSCIMProviderUserList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedSCIMProviderUserList> providersScimUsersListWithHttpInfo(String ordering, Integer page, Integer pageSize, Integer providerId, String search, Integer userId, String userUsername) throws ApiException {
        okhttp3.Call localVarCall = providersScimUsersListValidateBeforeCall(ordering, page, pageSize, providerId, search, userId, userUsername, null);
        Type localVarReturnType = new TypeToken<PaginatedSCIMProviderUserList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * SCIMProviderUser Viewset
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param providerId  (optional)
     * @param search A search term. (optional)
     * @param userId  (optional)
     * @param userUsername  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersScimUsersListAsync(String ordering, Integer page, Integer pageSize, Integer providerId, String search, Integer userId, String userUsername, final ApiCallback<PaginatedSCIMProviderUserList> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersScimUsersListValidateBeforeCall(ordering, page, pageSize, providerId, search, userId, userUsername, _callback);
        Type localVarReturnType = new TypeToken<PaginatedSCIMProviderUserList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersScimUsersRetrieve
     * @param id A UUID string identifying this scim provider user. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersScimUsersRetrieveCall(UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/scim_users/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersScimUsersRetrieveValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling providersScimUsersRetrieve(Async)");
        }

        return providersScimUsersRetrieveCall(id, _callback);

    }

    /**
     * 
     * SCIMProviderUser Viewset
     * @param id A UUID string identifying this scim provider user. (required)
     * @return SCIMProviderUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public SCIMProviderUser providersScimUsersRetrieve(UUID id) throws ApiException {
        ApiResponse<SCIMProviderUser> localVarResp = providersScimUsersRetrieveWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * SCIMProviderUser Viewset
     * @param id A UUID string identifying this scim provider user. (required)
     * @return ApiResponse&lt;SCIMProviderUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SCIMProviderUser> providersScimUsersRetrieveWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = providersScimUsersRetrieveValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<SCIMProviderUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * SCIMProviderUser Viewset
     * @param id A UUID string identifying this scim provider user. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersScimUsersRetrieveAsync(UUID id, final ApiCallback<SCIMProviderUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersScimUsersRetrieveValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<SCIMProviderUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providersScimUsersUsedByList
     * @param id A UUID string identifying this scim provider user. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersScimUsersUsedByListCall(UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/scim_users/{id}/used_by/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providersScimUsersUsedByListValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling providersScimUsersUsedByList(Async)");
        }

        return providersScimUsersUsedByListCall(id, _callback);

    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param id A UUID string identifying this scim provider user. (required)
     * @return List&lt;UsedBy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<UsedBy> providersScimUsersUsedByList(UUID id) throws ApiException {
        ApiResponse<List<UsedBy>> localVarResp = providersScimUsersUsedByListWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param id A UUID string identifying this scim provider user. (required)
     * @return ApiResponse&lt;List&lt;UsedBy&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UsedBy>> providersScimUsersUsedByListWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = providersScimUsersUsedByListValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of all objects that use this object
     * @param id A UUID string identifying this scim provider user. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providersScimUsersUsedByListAsync(UUID id, final ApiCallback<List<UsedBy>> _callback) throws ApiException {

        okhttp3.Call localVarCall = providersScimUsersUsedByListValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
