/*
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.6.3
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ConnectionToken;
import org.openapitools.client.model.ConnectionTokenRequest;
import org.openapitools.client.model.Endpoint;
import org.openapitools.client.model.EndpointRequest;
import org.openapitools.client.model.GenericError;
import org.openapitools.client.model.PaginatedConnectionTokenList;
import org.openapitools.client.model.PaginatedEndpointList;
import org.openapitools.client.model.PatchedConnectionTokenRequest;
import org.openapitools.client.model.PatchedEndpointRequest;
import java.util.UUID;
import org.openapitools.client.model.UsedBy;
import org.openapitools.client.model.ValidationError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RacApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RacApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RacApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for racConnectionTokensDestroy
     * @param connectionTokenUuid A UUID string identifying this RAC Connection token. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call racConnectionTokensDestroyCall(UUID connectionTokenUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rac/connection_tokens/{connection_token_uuid}/"
            .replace("{" + "connection_token_uuid" + "}", localVarApiClient.escapeString(connectionTokenUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call racConnectionTokensDestroyValidateBeforeCall(UUID connectionTokenUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'connectionTokenUuid' is set
        if (connectionTokenUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionTokenUuid' when calling racConnectionTokensDestroy(Async)");
        }

        return racConnectionTokensDestroyCall(connectionTokenUuid, _callback);

    }

    /**
     * 
     * ConnectionToken Viewset
     * @param connectionTokenUuid A UUID string identifying this RAC Connection token. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void racConnectionTokensDestroy(UUID connectionTokenUuid) throws ApiException {
        racConnectionTokensDestroyWithHttpInfo(connectionTokenUuid);
    }

    /**
     * 
     * ConnectionToken Viewset
     * @param connectionTokenUuid A UUID string identifying this RAC Connection token. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> racConnectionTokensDestroyWithHttpInfo(UUID connectionTokenUuid) throws ApiException {
        okhttp3.Call localVarCall = racConnectionTokensDestroyValidateBeforeCall(connectionTokenUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * ConnectionToken Viewset
     * @param connectionTokenUuid A UUID string identifying this RAC Connection token. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call racConnectionTokensDestroyAsync(UUID connectionTokenUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = racConnectionTokensDestroyValidateBeforeCall(connectionTokenUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for racConnectionTokensList
     * @param endpoint  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param provider  (optional)
     * @param search A search term. (optional)
     * @param sessionUser  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call racConnectionTokensListCall(UUID endpoint, String ordering, Integer page, Integer pageSize, Integer provider, String search, Integer sessionUser, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rac/connection_tokens/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (endpoint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endpoint", endpoint));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (provider != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("provider", provider));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (sessionUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("session__user", sessionUser));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call racConnectionTokensListValidateBeforeCall(UUID endpoint, String ordering, Integer page, Integer pageSize, Integer provider, String search, Integer sessionUser, final ApiCallback _callback) throws ApiException {
        return racConnectionTokensListCall(endpoint, ordering, page, pageSize, provider, search, sessionUser, _callback);

    }

    /**
     * 
     * ConnectionToken Viewset
     * @param endpoint  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param provider  (optional)
     * @param search A search term. (optional)
     * @param sessionUser  (optional)
     * @return PaginatedConnectionTokenList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedConnectionTokenList racConnectionTokensList(UUID endpoint, String ordering, Integer page, Integer pageSize, Integer provider, String search, Integer sessionUser) throws ApiException {
        ApiResponse<PaginatedConnectionTokenList> localVarResp = racConnectionTokensListWithHttpInfo(endpoint, ordering, page, pageSize, provider, search, sessionUser);
        return localVarResp.getData();
    }

    /**
     * 
     * ConnectionToken Viewset
     * @param endpoint  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param provider  (optional)
     * @param search A search term. (optional)
     * @param sessionUser  (optional)
     * @return ApiResponse&lt;PaginatedConnectionTokenList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedConnectionTokenList> racConnectionTokensListWithHttpInfo(UUID endpoint, String ordering, Integer page, Integer pageSize, Integer provider, String search, Integer sessionUser) throws ApiException {
        okhttp3.Call localVarCall = racConnectionTokensListValidateBeforeCall(endpoint, ordering, page, pageSize, provider, search, sessionUser, null);
        Type localVarReturnType = new TypeToken<PaginatedConnectionTokenList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ConnectionToken Viewset
     * @param endpoint  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param provider  (optional)
     * @param search A search term. (optional)
     * @param sessionUser  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call racConnectionTokensListAsync(UUID endpoint, String ordering, Integer page, Integer pageSize, Integer provider, String search, Integer sessionUser, final ApiCallback<PaginatedConnectionTokenList> _callback) throws ApiException {

        okhttp3.Call localVarCall = racConnectionTokensListValidateBeforeCall(endpoint, ordering, page, pageSize, provider, search, sessionUser, _callback);
        Type localVarReturnType = new TypeToken<PaginatedConnectionTokenList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for racConnectionTokensPartialUpdate
     * @param connectionTokenUuid A UUID string identifying this RAC Connection token. (required)
     * @param patchedConnectionTokenRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call racConnectionTokensPartialUpdateCall(UUID connectionTokenUuid, PatchedConnectionTokenRequest patchedConnectionTokenRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchedConnectionTokenRequest;

        // create path and map variables
        String localVarPath = "/rac/connection_tokens/{connection_token_uuid}/"
            .replace("{" + "connection_token_uuid" + "}", localVarApiClient.escapeString(connectionTokenUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call racConnectionTokensPartialUpdateValidateBeforeCall(UUID connectionTokenUuid, PatchedConnectionTokenRequest patchedConnectionTokenRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'connectionTokenUuid' is set
        if (connectionTokenUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionTokenUuid' when calling racConnectionTokensPartialUpdate(Async)");
        }

        return racConnectionTokensPartialUpdateCall(connectionTokenUuid, patchedConnectionTokenRequest, _callback);

    }

    /**
     * 
     * ConnectionToken Viewset
     * @param connectionTokenUuid A UUID string identifying this RAC Connection token. (required)
     * @param patchedConnectionTokenRequest  (optional)
     * @return ConnectionToken
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConnectionToken racConnectionTokensPartialUpdate(UUID connectionTokenUuid, PatchedConnectionTokenRequest patchedConnectionTokenRequest) throws ApiException {
        ApiResponse<ConnectionToken> localVarResp = racConnectionTokensPartialUpdateWithHttpInfo(connectionTokenUuid, patchedConnectionTokenRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * ConnectionToken Viewset
     * @param connectionTokenUuid A UUID string identifying this RAC Connection token. (required)
     * @param patchedConnectionTokenRequest  (optional)
     * @return ApiResponse&lt;ConnectionToken&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConnectionToken> racConnectionTokensPartialUpdateWithHttpInfo(UUID connectionTokenUuid, PatchedConnectionTokenRequest patchedConnectionTokenRequest) throws ApiException {
        okhttp3.Call localVarCall = racConnectionTokensPartialUpdateValidateBeforeCall(connectionTokenUuid, patchedConnectionTokenRequest, null);
        Type localVarReturnType = new TypeToken<ConnectionToken>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ConnectionToken Viewset
     * @param connectionTokenUuid A UUID string identifying this RAC Connection token. (required)
     * @param patchedConnectionTokenRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call racConnectionTokensPartialUpdateAsync(UUID connectionTokenUuid, PatchedConnectionTokenRequest patchedConnectionTokenRequest, final ApiCallback<ConnectionToken> _callback) throws ApiException {

        okhttp3.Call localVarCall = racConnectionTokensPartialUpdateValidateBeforeCall(connectionTokenUuid, patchedConnectionTokenRequest, _callback);
        Type localVarReturnType = new TypeToken<ConnectionToken>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for racConnectionTokensRetrieve
     * @param connectionTokenUuid A UUID string identifying this RAC Connection token. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call racConnectionTokensRetrieveCall(UUID connectionTokenUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rac/connection_tokens/{connection_token_uuid}/"
            .replace("{" + "connection_token_uuid" + "}", localVarApiClient.escapeString(connectionTokenUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call racConnectionTokensRetrieveValidateBeforeCall(UUID connectionTokenUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'connectionTokenUuid' is set
        if (connectionTokenUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionTokenUuid' when calling racConnectionTokensRetrieve(Async)");
        }

        return racConnectionTokensRetrieveCall(connectionTokenUuid, _callback);

    }

    /**
     * 
     * ConnectionToken Viewset
     * @param connectionTokenUuid A UUID string identifying this RAC Connection token. (required)
     * @return ConnectionToken
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConnectionToken racConnectionTokensRetrieve(UUID connectionTokenUuid) throws ApiException {
        ApiResponse<ConnectionToken> localVarResp = racConnectionTokensRetrieveWithHttpInfo(connectionTokenUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * ConnectionToken Viewset
     * @param connectionTokenUuid A UUID string identifying this RAC Connection token. (required)
     * @return ApiResponse&lt;ConnectionToken&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConnectionToken> racConnectionTokensRetrieveWithHttpInfo(UUID connectionTokenUuid) throws ApiException {
        okhttp3.Call localVarCall = racConnectionTokensRetrieveValidateBeforeCall(connectionTokenUuid, null);
        Type localVarReturnType = new TypeToken<ConnectionToken>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ConnectionToken Viewset
     * @param connectionTokenUuid A UUID string identifying this RAC Connection token. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call racConnectionTokensRetrieveAsync(UUID connectionTokenUuid, final ApiCallback<ConnectionToken> _callback) throws ApiException {

        okhttp3.Call localVarCall = racConnectionTokensRetrieveValidateBeforeCall(connectionTokenUuid, _callback);
        Type localVarReturnType = new TypeToken<ConnectionToken>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for racConnectionTokensUpdate
     * @param connectionTokenUuid A UUID string identifying this RAC Connection token. (required)
     * @param connectionTokenRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call racConnectionTokensUpdateCall(UUID connectionTokenUuid, ConnectionTokenRequest connectionTokenRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectionTokenRequest;

        // create path and map variables
        String localVarPath = "/rac/connection_tokens/{connection_token_uuid}/"
            .replace("{" + "connection_token_uuid" + "}", localVarApiClient.escapeString(connectionTokenUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call racConnectionTokensUpdateValidateBeforeCall(UUID connectionTokenUuid, ConnectionTokenRequest connectionTokenRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'connectionTokenUuid' is set
        if (connectionTokenUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionTokenUuid' when calling racConnectionTokensUpdate(Async)");
        }

        // verify the required parameter 'connectionTokenRequest' is set
        if (connectionTokenRequest == null) {
            throw new ApiException("Missing the required parameter 'connectionTokenRequest' when calling racConnectionTokensUpdate(Async)");
        }

        return racConnectionTokensUpdateCall(connectionTokenUuid, connectionTokenRequest, _callback);

    }

    /**
     * 
     * ConnectionToken Viewset
     * @param connectionTokenUuid A UUID string identifying this RAC Connection token. (required)
     * @param connectionTokenRequest  (required)
     * @return ConnectionToken
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConnectionToken racConnectionTokensUpdate(UUID connectionTokenUuid, ConnectionTokenRequest connectionTokenRequest) throws ApiException {
        ApiResponse<ConnectionToken> localVarResp = racConnectionTokensUpdateWithHttpInfo(connectionTokenUuid, connectionTokenRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * ConnectionToken Viewset
     * @param connectionTokenUuid A UUID string identifying this RAC Connection token. (required)
     * @param connectionTokenRequest  (required)
     * @return ApiResponse&lt;ConnectionToken&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConnectionToken> racConnectionTokensUpdateWithHttpInfo(UUID connectionTokenUuid, ConnectionTokenRequest connectionTokenRequest) throws ApiException {
        okhttp3.Call localVarCall = racConnectionTokensUpdateValidateBeforeCall(connectionTokenUuid, connectionTokenRequest, null);
        Type localVarReturnType = new TypeToken<ConnectionToken>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ConnectionToken Viewset
     * @param connectionTokenUuid A UUID string identifying this RAC Connection token. (required)
     * @param connectionTokenRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call racConnectionTokensUpdateAsync(UUID connectionTokenUuid, ConnectionTokenRequest connectionTokenRequest, final ApiCallback<ConnectionToken> _callback) throws ApiException {

        okhttp3.Call localVarCall = racConnectionTokensUpdateValidateBeforeCall(connectionTokenUuid, connectionTokenRequest, _callback);
        Type localVarReturnType = new TypeToken<ConnectionToken>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for racConnectionTokensUsedByList
     * @param connectionTokenUuid A UUID string identifying this RAC Connection token. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call racConnectionTokensUsedByListCall(UUID connectionTokenUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rac/connection_tokens/{connection_token_uuid}/used_by/"
            .replace("{" + "connection_token_uuid" + "}", localVarApiClient.escapeString(connectionTokenUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call racConnectionTokensUsedByListValidateBeforeCall(UUID connectionTokenUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'connectionTokenUuid' is set
        if (connectionTokenUuid == null) {
            throw new ApiException("Missing the required parameter 'connectionTokenUuid' when calling racConnectionTokensUsedByList(Async)");
        }

        return racConnectionTokensUsedByListCall(connectionTokenUuid, _callback);

    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param connectionTokenUuid A UUID string identifying this RAC Connection token. (required)
     * @return List&lt;UsedBy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<UsedBy> racConnectionTokensUsedByList(UUID connectionTokenUuid) throws ApiException {
        ApiResponse<List<UsedBy>> localVarResp = racConnectionTokensUsedByListWithHttpInfo(connectionTokenUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param connectionTokenUuid A UUID string identifying this RAC Connection token. (required)
     * @return ApiResponse&lt;List&lt;UsedBy&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UsedBy>> racConnectionTokensUsedByListWithHttpInfo(UUID connectionTokenUuid) throws ApiException {
        okhttp3.Call localVarCall = racConnectionTokensUsedByListValidateBeforeCall(connectionTokenUuid, null);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of all objects that use this object
     * @param connectionTokenUuid A UUID string identifying this RAC Connection token. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call racConnectionTokensUsedByListAsync(UUID connectionTokenUuid, final ApiCallback<List<UsedBy>> _callback) throws ApiException {

        okhttp3.Call localVarCall = racConnectionTokensUsedByListValidateBeforeCall(connectionTokenUuid, _callback);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for racEndpointsCreate
     * @param endpointRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call racEndpointsCreateCall(EndpointRequest endpointRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = endpointRequest;

        // create path and map variables
        String localVarPath = "/rac/endpoints/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call racEndpointsCreateValidateBeforeCall(EndpointRequest endpointRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'endpointRequest' is set
        if (endpointRequest == null) {
            throw new ApiException("Missing the required parameter 'endpointRequest' when calling racEndpointsCreate(Async)");
        }

        return racEndpointsCreateCall(endpointRequest, _callback);

    }

    /**
     * 
     * Endpoint Viewset
     * @param endpointRequest  (required)
     * @return Endpoint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Endpoint racEndpointsCreate(EndpointRequest endpointRequest) throws ApiException {
        ApiResponse<Endpoint> localVarResp = racEndpointsCreateWithHttpInfo(endpointRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Endpoint Viewset
     * @param endpointRequest  (required)
     * @return ApiResponse&lt;Endpoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Endpoint> racEndpointsCreateWithHttpInfo(EndpointRequest endpointRequest) throws ApiException {
        okhttp3.Call localVarCall = racEndpointsCreateValidateBeforeCall(endpointRequest, null);
        Type localVarReturnType = new TypeToken<Endpoint>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Endpoint Viewset
     * @param endpointRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call racEndpointsCreateAsync(EndpointRequest endpointRequest, final ApiCallback<Endpoint> _callback) throws ApiException {

        okhttp3.Call localVarCall = racEndpointsCreateValidateBeforeCall(endpointRequest, _callback);
        Type localVarReturnType = new TypeToken<Endpoint>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for racEndpointsDestroy
     * @param pbmUuid A UUID string identifying this RAC Endpoint. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call racEndpointsDestroyCall(UUID pbmUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rac/endpoints/{pbm_uuid}/"
            .replace("{" + "pbm_uuid" + "}", localVarApiClient.escapeString(pbmUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call racEndpointsDestroyValidateBeforeCall(UUID pbmUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pbmUuid' is set
        if (pbmUuid == null) {
            throw new ApiException("Missing the required parameter 'pbmUuid' when calling racEndpointsDestroy(Async)");
        }

        return racEndpointsDestroyCall(pbmUuid, _callback);

    }

    /**
     * 
     * Endpoint Viewset
     * @param pbmUuid A UUID string identifying this RAC Endpoint. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void racEndpointsDestroy(UUID pbmUuid) throws ApiException {
        racEndpointsDestroyWithHttpInfo(pbmUuid);
    }

    /**
     * 
     * Endpoint Viewset
     * @param pbmUuid A UUID string identifying this RAC Endpoint. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> racEndpointsDestroyWithHttpInfo(UUID pbmUuid) throws ApiException {
        okhttp3.Call localVarCall = racEndpointsDestroyValidateBeforeCall(pbmUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Endpoint Viewset
     * @param pbmUuid A UUID string identifying this RAC Endpoint. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call racEndpointsDestroyAsync(UUID pbmUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = racEndpointsDestroyValidateBeforeCall(pbmUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for racEndpointsList
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param provider  (optional)
     * @param search  (optional)
     * @param superuserFullList  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call racEndpointsListCall(String name, String ordering, Integer page, Integer pageSize, Integer provider, String search, Boolean superuserFullList, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rac/endpoints/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (provider != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("provider", provider));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (superuserFullList != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("superuser_full_list", superuserFullList));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call racEndpointsListValidateBeforeCall(String name, String ordering, Integer page, Integer pageSize, Integer provider, String search, Boolean superuserFullList, final ApiCallback _callback) throws ApiException {
        return racEndpointsListCall(name, ordering, page, pageSize, provider, search, superuserFullList, _callback);

    }

    /**
     * 
     * List accessible endpoints
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param provider  (optional)
     * @param search  (optional)
     * @param superuserFullList  (optional)
     * @return PaginatedEndpointList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedEndpointList racEndpointsList(String name, String ordering, Integer page, Integer pageSize, Integer provider, String search, Boolean superuserFullList) throws ApiException {
        ApiResponse<PaginatedEndpointList> localVarResp = racEndpointsListWithHttpInfo(name, ordering, page, pageSize, provider, search, superuserFullList);
        return localVarResp.getData();
    }

    /**
     * 
     * List accessible endpoints
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param provider  (optional)
     * @param search  (optional)
     * @param superuserFullList  (optional)
     * @return ApiResponse&lt;PaginatedEndpointList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedEndpointList> racEndpointsListWithHttpInfo(String name, String ordering, Integer page, Integer pageSize, Integer provider, String search, Boolean superuserFullList) throws ApiException {
        okhttp3.Call localVarCall = racEndpointsListValidateBeforeCall(name, ordering, page, pageSize, provider, search, superuserFullList, null);
        Type localVarReturnType = new TypeToken<PaginatedEndpointList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List accessible endpoints
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param provider  (optional)
     * @param search  (optional)
     * @param superuserFullList  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call racEndpointsListAsync(String name, String ordering, Integer page, Integer pageSize, Integer provider, String search, Boolean superuserFullList, final ApiCallback<PaginatedEndpointList> _callback) throws ApiException {

        okhttp3.Call localVarCall = racEndpointsListValidateBeforeCall(name, ordering, page, pageSize, provider, search, superuserFullList, _callback);
        Type localVarReturnType = new TypeToken<PaginatedEndpointList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for racEndpointsPartialUpdate
     * @param pbmUuid A UUID string identifying this RAC Endpoint. (required)
     * @param patchedEndpointRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call racEndpointsPartialUpdateCall(UUID pbmUuid, PatchedEndpointRequest patchedEndpointRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchedEndpointRequest;

        // create path and map variables
        String localVarPath = "/rac/endpoints/{pbm_uuid}/"
            .replace("{" + "pbm_uuid" + "}", localVarApiClient.escapeString(pbmUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call racEndpointsPartialUpdateValidateBeforeCall(UUID pbmUuid, PatchedEndpointRequest patchedEndpointRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pbmUuid' is set
        if (pbmUuid == null) {
            throw new ApiException("Missing the required parameter 'pbmUuid' when calling racEndpointsPartialUpdate(Async)");
        }

        return racEndpointsPartialUpdateCall(pbmUuid, patchedEndpointRequest, _callback);

    }

    /**
     * 
     * Endpoint Viewset
     * @param pbmUuid A UUID string identifying this RAC Endpoint. (required)
     * @param patchedEndpointRequest  (optional)
     * @return Endpoint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Endpoint racEndpointsPartialUpdate(UUID pbmUuid, PatchedEndpointRequest patchedEndpointRequest) throws ApiException {
        ApiResponse<Endpoint> localVarResp = racEndpointsPartialUpdateWithHttpInfo(pbmUuid, patchedEndpointRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Endpoint Viewset
     * @param pbmUuid A UUID string identifying this RAC Endpoint. (required)
     * @param patchedEndpointRequest  (optional)
     * @return ApiResponse&lt;Endpoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Endpoint> racEndpointsPartialUpdateWithHttpInfo(UUID pbmUuid, PatchedEndpointRequest patchedEndpointRequest) throws ApiException {
        okhttp3.Call localVarCall = racEndpointsPartialUpdateValidateBeforeCall(pbmUuid, patchedEndpointRequest, null);
        Type localVarReturnType = new TypeToken<Endpoint>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Endpoint Viewset
     * @param pbmUuid A UUID string identifying this RAC Endpoint. (required)
     * @param patchedEndpointRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call racEndpointsPartialUpdateAsync(UUID pbmUuid, PatchedEndpointRequest patchedEndpointRequest, final ApiCallback<Endpoint> _callback) throws ApiException {

        okhttp3.Call localVarCall = racEndpointsPartialUpdateValidateBeforeCall(pbmUuid, patchedEndpointRequest, _callback);
        Type localVarReturnType = new TypeToken<Endpoint>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for racEndpointsRetrieve
     * @param pbmUuid A UUID string identifying this RAC Endpoint. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call racEndpointsRetrieveCall(UUID pbmUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rac/endpoints/{pbm_uuid}/"
            .replace("{" + "pbm_uuid" + "}", localVarApiClient.escapeString(pbmUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call racEndpointsRetrieveValidateBeforeCall(UUID pbmUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pbmUuid' is set
        if (pbmUuid == null) {
            throw new ApiException("Missing the required parameter 'pbmUuid' when calling racEndpointsRetrieve(Async)");
        }

        return racEndpointsRetrieveCall(pbmUuid, _callback);

    }

    /**
     * 
     * Endpoint Viewset
     * @param pbmUuid A UUID string identifying this RAC Endpoint. (required)
     * @return Endpoint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Endpoint racEndpointsRetrieve(UUID pbmUuid) throws ApiException {
        ApiResponse<Endpoint> localVarResp = racEndpointsRetrieveWithHttpInfo(pbmUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Endpoint Viewset
     * @param pbmUuid A UUID string identifying this RAC Endpoint. (required)
     * @return ApiResponse&lt;Endpoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Endpoint> racEndpointsRetrieveWithHttpInfo(UUID pbmUuid) throws ApiException {
        okhttp3.Call localVarCall = racEndpointsRetrieveValidateBeforeCall(pbmUuid, null);
        Type localVarReturnType = new TypeToken<Endpoint>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Endpoint Viewset
     * @param pbmUuid A UUID string identifying this RAC Endpoint. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call racEndpointsRetrieveAsync(UUID pbmUuid, final ApiCallback<Endpoint> _callback) throws ApiException {

        okhttp3.Call localVarCall = racEndpointsRetrieveValidateBeforeCall(pbmUuid, _callback);
        Type localVarReturnType = new TypeToken<Endpoint>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for racEndpointsUpdate
     * @param pbmUuid A UUID string identifying this RAC Endpoint. (required)
     * @param endpointRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call racEndpointsUpdateCall(UUID pbmUuid, EndpointRequest endpointRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = endpointRequest;

        // create path and map variables
        String localVarPath = "/rac/endpoints/{pbm_uuid}/"
            .replace("{" + "pbm_uuid" + "}", localVarApiClient.escapeString(pbmUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call racEndpointsUpdateValidateBeforeCall(UUID pbmUuid, EndpointRequest endpointRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pbmUuid' is set
        if (pbmUuid == null) {
            throw new ApiException("Missing the required parameter 'pbmUuid' when calling racEndpointsUpdate(Async)");
        }

        // verify the required parameter 'endpointRequest' is set
        if (endpointRequest == null) {
            throw new ApiException("Missing the required parameter 'endpointRequest' when calling racEndpointsUpdate(Async)");
        }

        return racEndpointsUpdateCall(pbmUuid, endpointRequest, _callback);

    }

    /**
     * 
     * Endpoint Viewset
     * @param pbmUuid A UUID string identifying this RAC Endpoint. (required)
     * @param endpointRequest  (required)
     * @return Endpoint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Endpoint racEndpointsUpdate(UUID pbmUuid, EndpointRequest endpointRequest) throws ApiException {
        ApiResponse<Endpoint> localVarResp = racEndpointsUpdateWithHttpInfo(pbmUuid, endpointRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Endpoint Viewset
     * @param pbmUuid A UUID string identifying this RAC Endpoint. (required)
     * @param endpointRequest  (required)
     * @return ApiResponse&lt;Endpoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Endpoint> racEndpointsUpdateWithHttpInfo(UUID pbmUuid, EndpointRequest endpointRequest) throws ApiException {
        okhttp3.Call localVarCall = racEndpointsUpdateValidateBeforeCall(pbmUuid, endpointRequest, null);
        Type localVarReturnType = new TypeToken<Endpoint>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Endpoint Viewset
     * @param pbmUuid A UUID string identifying this RAC Endpoint. (required)
     * @param endpointRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call racEndpointsUpdateAsync(UUID pbmUuid, EndpointRequest endpointRequest, final ApiCallback<Endpoint> _callback) throws ApiException {

        okhttp3.Call localVarCall = racEndpointsUpdateValidateBeforeCall(pbmUuid, endpointRequest, _callback);
        Type localVarReturnType = new TypeToken<Endpoint>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for racEndpointsUsedByList
     * @param pbmUuid A UUID string identifying this RAC Endpoint. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call racEndpointsUsedByListCall(UUID pbmUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rac/endpoints/{pbm_uuid}/used_by/"
            .replace("{" + "pbm_uuid" + "}", localVarApiClient.escapeString(pbmUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call racEndpointsUsedByListValidateBeforeCall(UUID pbmUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pbmUuid' is set
        if (pbmUuid == null) {
            throw new ApiException("Missing the required parameter 'pbmUuid' when calling racEndpointsUsedByList(Async)");
        }

        return racEndpointsUsedByListCall(pbmUuid, _callback);

    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param pbmUuid A UUID string identifying this RAC Endpoint. (required)
     * @return List&lt;UsedBy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<UsedBy> racEndpointsUsedByList(UUID pbmUuid) throws ApiException {
        ApiResponse<List<UsedBy>> localVarResp = racEndpointsUsedByListWithHttpInfo(pbmUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param pbmUuid A UUID string identifying this RAC Endpoint. (required)
     * @return ApiResponse&lt;List&lt;UsedBy&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UsedBy>> racEndpointsUsedByListWithHttpInfo(UUID pbmUuid) throws ApiException {
        okhttp3.Call localVarCall = racEndpointsUsedByListValidateBeforeCall(pbmUuid, null);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of all objects that use this object
     * @param pbmUuid A UUID string identifying this RAC Endpoint. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call racEndpointsUsedByListAsync(UUID pbmUuid, final ApiCallback<List<UsedBy>> _callback) throws ApiException {

        okhttp3.Call localVarCall = racEndpointsUsedByListValidateBeforeCall(pbmUuid, _callback);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
