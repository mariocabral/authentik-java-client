/*
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.6.3
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CertificateData;
import org.openapitools.client.model.CertificateGenerationRequest;
import org.openapitools.client.model.CertificateKeyPair;
import org.openapitools.client.model.CertificateKeyPairRequest;
import org.openapitools.client.model.GenericError;
import org.openapitools.client.model.PaginatedCertificateKeyPairList;
import org.openapitools.client.model.PatchedCertificateKeyPairRequest;
import java.util.UUID;
import org.openapitools.client.model.UsedBy;
import org.openapitools.client.model.ValidationError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CryptoApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CryptoApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CryptoApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for cryptoCertificatekeypairsCreate
     * @param certificateKeyPairRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cryptoCertificatekeypairsCreateCall(CertificateKeyPairRequest certificateKeyPairRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = certificateKeyPairRequest;

        // create path and map variables
        String localVarPath = "/crypto/certificatekeypairs/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cryptoCertificatekeypairsCreateValidateBeforeCall(CertificateKeyPairRequest certificateKeyPairRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'certificateKeyPairRequest' is set
        if (certificateKeyPairRequest == null) {
            throw new ApiException("Missing the required parameter 'certificateKeyPairRequest' when calling cryptoCertificatekeypairsCreate(Async)");
        }

        return cryptoCertificatekeypairsCreateCall(certificateKeyPairRequest, _callback);

    }

    /**
     * 
     * CertificateKeyPair Viewset
     * @param certificateKeyPairRequest  (required)
     * @return CertificateKeyPair
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CertificateKeyPair cryptoCertificatekeypairsCreate(CertificateKeyPairRequest certificateKeyPairRequest) throws ApiException {
        ApiResponse<CertificateKeyPair> localVarResp = cryptoCertificatekeypairsCreateWithHttpInfo(certificateKeyPairRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * CertificateKeyPair Viewset
     * @param certificateKeyPairRequest  (required)
     * @return ApiResponse&lt;CertificateKeyPair&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CertificateKeyPair> cryptoCertificatekeypairsCreateWithHttpInfo(CertificateKeyPairRequest certificateKeyPairRequest) throws ApiException {
        okhttp3.Call localVarCall = cryptoCertificatekeypairsCreateValidateBeforeCall(certificateKeyPairRequest, null);
        Type localVarReturnType = new TypeToken<CertificateKeyPair>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * CertificateKeyPair Viewset
     * @param certificateKeyPairRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cryptoCertificatekeypairsCreateAsync(CertificateKeyPairRequest certificateKeyPairRequest, final ApiCallback<CertificateKeyPair> _callback) throws ApiException {

        okhttp3.Call localVarCall = cryptoCertificatekeypairsCreateValidateBeforeCall(certificateKeyPairRequest, _callback);
        Type localVarReturnType = new TypeToken<CertificateKeyPair>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cryptoCertificatekeypairsDestroy
     * @param kpUuid A UUID string identifying this Certificate-Key Pair. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cryptoCertificatekeypairsDestroyCall(UUID kpUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/crypto/certificatekeypairs/{kp_uuid}/"
            .replace("{" + "kp_uuid" + "}", localVarApiClient.escapeString(kpUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cryptoCertificatekeypairsDestroyValidateBeforeCall(UUID kpUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'kpUuid' is set
        if (kpUuid == null) {
            throw new ApiException("Missing the required parameter 'kpUuid' when calling cryptoCertificatekeypairsDestroy(Async)");
        }

        return cryptoCertificatekeypairsDestroyCall(kpUuid, _callback);

    }

    /**
     * 
     * CertificateKeyPair Viewset
     * @param kpUuid A UUID string identifying this Certificate-Key Pair. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void cryptoCertificatekeypairsDestroy(UUID kpUuid) throws ApiException {
        cryptoCertificatekeypairsDestroyWithHttpInfo(kpUuid);
    }

    /**
     * 
     * CertificateKeyPair Viewset
     * @param kpUuid A UUID string identifying this Certificate-Key Pair. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> cryptoCertificatekeypairsDestroyWithHttpInfo(UUID kpUuid) throws ApiException {
        okhttp3.Call localVarCall = cryptoCertificatekeypairsDestroyValidateBeforeCall(kpUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * CertificateKeyPair Viewset
     * @param kpUuid A UUID string identifying this Certificate-Key Pair. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cryptoCertificatekeypairsDestroyAsync(UUID kpUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = cryptoCertificatekeypairsDestroyValidateBeforeCall(kpUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for cryptoCertificatekeypairsGenerateCreate
     * @param certificateGenerationRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cryptoCertificatekeypairsGenerateCreateCall(CertificateGenerationRequest certificateGenerationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = certificateGenerationRequest;

        // create path and map variables
        String localVarPath = "/crypto/certificatekeypairs/generate/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cryptoCertificatekeypairsGenerateCreateValidateBeforeCall(CertificateGenerationRequest certificateGenerationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'certificateGenerationRequest' is set
        if (certificateGenerationRequest == null) {
            throw new ApiException("Missing the required parameter 'certificateGenerationRequest' when calling cryptoCertificatekeypairsGenerateCreate(Async)");
        }

        return cryptoCertificatekeypairsGenerateCreateCall(certificateGenerationRequest, _callback);

    }

    /**
     * 
     * Generate a new, self-signed certificate-key pair
     * @param certificateGenerationRequest  (required)
     * @return CertificateKeyPair
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CertificateKeyPair cryptoCertificatekeypairsGenerateCreate(CertificateGenerationRequest certificateGenerationRequest) throws ApiException {
        ApiResponse<CertificateKeyPair> localVarResp = cryptoCertificatekeypairsGenerateCreateWithHttpInfo(certificateGenerationRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Generate a new, self-signed certificate-key pair
     * @param certificateGenerationRequest  (required)
     * @return ApiResponse&lt;CertificateKeyPair&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CertificateKeyPair> cryptoCertificatekeypairsGenerateCreateWithHttpInfo(CertificateGenerationRequest certificateGenerationRequest) throws ApiException {
        okhttp3.Call localVarCall = cryptoCertificatekeypairsGenerateCreateValidateBeforeCall(certificateGenerationRequest, null);
        Type localVarReturnType = new TypeToken<CertificateKeyPair>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Generate a new, self-signed certificate-key pair
     * @param certificateGenerationRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cryptoCertificatekeypairsGenerateCreateAsync(CertificateGenerationRequest certificateGenerationRequest, final ApiCallback<CertificateKeyPair> _callback) throws ApiException {

        okhttp3.Call localVarCall = cryptoCertificatekeypairsGenerateCreateValidateBeforeCall(certificateGenerationRequest, _callback);
        Type localVarReturnType = new TypeToken<CertificateKeyPair>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cryptoCertificatekeypairsList
     * @param hasKey Only return certificate-key pairs with keys (optional)
     * @param includeDetails  (optional, default to true)
     * @param managed  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cryptoCertificatekeypairsListCall(Boolean hasKey, Boolean includeDetails, String managed, String name, String ordering, Integer page, Integer pageSize, String search, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/crypto/certificatekeypairs/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (hasKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("has_key", hasKey));
        }

        if (includeDetails != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_details", includeDetails));
        }

        if (managed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("managed", managed));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cryptoCertificatekeypairsListValidateBeforeCall(Boolean hasKey, Boolean includeDetails, String managed, String name, String ordering, Integer page, Integer pageSize, String search, final ApiCallback _callback) throws ApiException {
        return cryptoCertificatekeypairsListCall(hasKey, includeDetails, managed, name, ordering, page, pageSize, search, _callback);

    }

    /**
     * 
     * CertificateKeyPair Viewset
     * @param hasKey Only return certificate-key pairs with keys (optional)
     * @param includeDetails  (optional, default to true)
     * @param managed  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @return PaginatedCertificateKeyPairList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedCertificateKeyPairList cryptoCertificatekeypairsList(Boolean hasKey, Boolean includeDetails, String managed, String name, String ordering, Integer page, Integer pageSize, String search) throws ApiException {
        ApiResponse<PaginatedCertificateKeyPairList> localVarResp = cryptoCertificatekeypairsListWithHttpInfo(hasKey, includeDetails, managed, name, ordering, page, pageSize, search);
        return localVarResp.getData();
    }

    /**
     * 
     * CertificateKeyPair Viewset
     * @param hasKey Only return certificate-key pairs with keys (optional)
     * @param includeDetails  (optional, default to true)
     * @param managed  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @return ApiResponse&lt;PaginatedCertificateKeyPairList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedCertificateKeyPairList> cryptoCertificatekeypairsListWithHttpInfo(Boolean hasKey, Boolean includeDetails, String managed, String name, String ordering, Integer page, Integer pageSize, String search) throws ApiException {
        okhttp3.Call localVarCall = cryptoCertificatekeypairsListValidateBeforeCall(hasKey, includeDetails, managed, name, ordering, page, pageSize, search, null);
        Type localVarReturnType = new TypeToken<PaginatedCertificateKeyPairList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * CertificateKeyPair Viewset
     * @param hasKey Only return certificate-key pairs with keys (optional)
     * @param includeDetails  (optional, default to true)
     * @param managed  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cryptoCertificatekeypairsListAsync(Boolean hasKey, Boolean includeDetails, String managed, String name, String ordering, Integer page, Integer pageSize, String search, final ApiCallback<PaginatedCertificateKeyPairList> _callback) throws ApiException {

        okhttp3.Call localVarCall = cryptoCertificatekeypairsListValidateBeforeCall(hasKey, includeDetails, managed, name, ordering, page, pageSize, search, _callback);
        Type localVarReturnType = new TypeToken<PaginatedCertificateKeyPairList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cryptoCertificatekeypairsPartialUpdate
     * @param kpUuid A UUID string identifying this Certificate-Key Pair. (required)
     * @param patchedCertificateKeyPairRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cryptoCertificatekeypairsPartialUpdateCall(UUID kpUuid, PatchedCertificateKeyPairRequest patchedCertificateKeyPairRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchedCertificateKeyPairRequest;

        // create path and map variables
        String localVarPath = "/crypto/certificatekeypairs/{kp_uuid}/"
            .replace("{" + "kp_uuid" + "}", localVarApiClient.escapeString(kpUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cryptoCertificatekeypairsPartialUpdateValidateBeforeCall(UUID kpUuid, PatchedCertificateKeyPairRequest patchedCertificateKeyPairRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'kpUuid' is set
        if (kpUuid == null) {
            throw new ApiException("Missing the required parameter 'kpUuid' when calling cryptoCertificatekeypairsPartialUpdate(Async)");
        }

        return cryptoCertificatekeypairsPartialUpdateCall(kpUuid, patchedCertificateKeyPairRequest, _callback);

    }

    /**
     * 
     * CertificateKeyPair Viewset
     * @param kpUuid A UUID string identifying this Certificate-Key Pair. (required)
     * @param patchedCertificateKeyPairRequest  (optional)
     * @return CertificateKeyPair
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CertificateKeyPair cryptoCertificatekeypairsPartialUpdate(UUID kpUuid, PatchedCertificateKeyPairRequest patchedCertificateKeyPairRequest) throws ApiException {
        ApiResponse<CertificateKeyPair> localVarResp = cryptoCertificatekeypairsPartialUpdateWithHttpInfo(kpUuid, patchedCertificateKeyPairRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * CertificateKeyPair Viewset
     * @param kpUuid A UUID string identifying this Certificate-Key Pair. (required)
     * @param patchedCertificateKeyPairRequest  (optional)
     * @return ApiResponse&lt;CertificateKeyPair&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CertificateKeyPair> cryptoCertificatekeypairsPartialUpdateWithHttpInfo(UUID kpUuid, PatchedCertificateKeyPairRequest patchedCertificateKeyPairRequest) throws ApiException {
        okhttp3.Call localVarCall = cryptoCertificatekeypairsPartialUpdateValidateBeforeCall(kpUuid, patchedCertificateKeyPairRequest, null);
        Type localVarReturnType = new TypeToken<CertificateKeyPair>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * CertificateKeyPair Viewset
     * @param kpUuid A UUID string identifying this Certificate-Key Pair. (required)
     * @param patchedCertificateKeyPairRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cryptoCertificatekeypairsPartialUpdateAsync(UUID kpUuid, PatchedCertificateKeyPairRequest patchedCertificateKeyPairRequest, final ApiCallback<CertificateKeyPair> _callback) throws ApiException {

        okhttp3.Call localVarCall = cryptoCertificatekeypairsPartialUpdateValidateBeforeCall(kpUuid, patchedCertificateKeyPairRequest, _callback);
        Type localVarReturnType = new TypeToken<CertificateKeyPair>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cryptoCertificatekeypairsRetrieve
     * @param kpUuid A UUID string identifying this Certificate-Key Pair. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cryptoCertificatekeypairsRetrieveCall(UUID kpUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/crypto/certificatekeypairs/{kp_uuid}/"
            .replace("{" + "kp_uuid" + "}", localVarApiClient.escapeString(kpUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cryptoCertificatekeypairsRetrieveValidateBeforeCall(UUID kpUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'kpUuid' is set
        if (kpUuid == null) {
            throw new ApiException("Missing the required parameter 'kpUuid' when calling cryptoCertificatekeypairsRetrieve(Async)");
        }

        return cryptoCertificatekeypairsRetrieveCall(kpUuid, _callback);

    }

    /**
     * 
     * CertificateKeyPair Viewset
     * @param kpUuid A UUID string identifying this Certificate-Key Pair. (required)
     * @return CertificateKeyPair
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CertificateKeyPair cryptoCertificatekeypairsRetrieve(UUID kpUuid) throws ApiException {
        ApiResponse<CertificateKeyPair> localVarResp = cryptoCertificatekeypairsRetrieveWithHttpInfo(kpUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * CertificateKeyPair Viewset
     * @param kpUuid A UUID string identifying this Certificate-Key Pair. (required)
     * @return ApiResponse&lt;CertificateKeyPair&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CertificateKeyPair> cryptoCertificatekeypairsRetrieveWithHttpInfo(UUID kpUuid) throws ApiException {
        okhttp3.Call localVarCall = cryptoCertificatekeypairsRetrieveValidateBeforeCall(kpUuid, null);
        Type localVarReturnType = new TypeToken<CertificateKeyPair>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * CertificateKeyPair Viewset
     * @param kpUuid A UUID string identifying this Certificate-Key Pair. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cryptoCertificatekeypairsRetrieveAsync(UUID kpUuid, final ApiCallback<CertificateKeyPair> _callback) throws ApiException {

        okhttp3.Call localVarCall = cryptoCertificatekeypairsRetrieveValidateBeforeCall(kpUuid, _callback);
        Type localVarReturnType = new TypeToken<CertificateKeyPair>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cryptoCertificatekeypairsUpdate
     * @param kpUuid A UUID string identifying this Certificate-Key Pair. (required)
     * @param certificateKeyPairRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cryptoCertificatekeypairsUpdateCall(UUID kpUuid, CertificateKeyPairRequest certificateKeyPairRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = certificateKeyPairRequest;

        // create path and map variables
        String localVarPath = "/crypto/certificatekeypairs/{kp_uuid}/"
            .replace("{" + "kp_uuid" + "}", localVarApiClient.escapeString(kpUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cryptoCertificatekeypairsUpdateValidateBeforeCall(UUID kpUuid, CertificateKeyPairRequest certificateKeyPairRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'kpUuid' is set
        if (kpUuid == null) {
            throw new ApiException("Missing the required parameter 'kpUuid' when calling cryptoCertificatekeypairsUpdate(Async)");
        }

        // verify the required parameter 'certificateKeyPairRequest' is set
        if (certificateKeyPairRequest == null) {
            throw new ApiException("Missing the required parameter 'certificateKeyPairRequest' when calling cryptoCertificatekeypairsUpdate(Async)");
        }

        return cryptoCertificatekeypairsUpdateCall(kpUuid, certificateKeyPairRequest, _callback);

    }

    /**
     * 
     * CertificateKeyPair Viewset
     * @param kpUuid A UUID string identifying this Certificate-Key Pair. (required)
     * @param certificateKeyPairRequest  (required)
     * @return CertificateKeyPair
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CertificateKeyPair cryptoCertificatekeypairsUpdate(UUID kpUuid, CertificateKeyPairRequest certificateKeyPairRequest) throws ApiException {
        ApiResponse<CertificateKeyPair> localVarResp = cryptoCertificatekeypairsUpdateWithHttpInfo(kpUuid, certificateKeyPairRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * CertificateKeyPair Viewset
     * @param kpUuid A UUID string identifying this Certificate-Key Pair. (required)
     * @param certificateKeyPairRequest  (required)
     * @return ApiResponse&lt;CertificateKeyPair&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CertificateKeyPair> cryptoCertificatekeypairsUpdateWithHttpInfo(UUID kpUuid, CertificateKeyPairRequest certificateKeyPairRequest) throws ApiException {
        okhttp3.Call localVarCall = cryptoCertificatekeypairsUpdateValidateBeforeCall(kpUuid, certificateKeyPairRequest, null);
        Type localVarReturnType = new TypeToken<CertificateKeyPair>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * CertificateKeyPair Viewset
     * @param kpUuid A UUID string identifying this Certificate-Key Pair. (required)
     * @param certificateKeyPairRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cryptoCertificatekeypairsUpdateAsync(UUID kpUuid, CertificateKeyPairRequest certificateKeyPairRequest, final ApiCallback<CertificateKeyPair> _callback) throws ApiException {

        okhttp3.Call localVarCall = cryptoCertificatekeypairsUpdateValidateBeforeCall(kpUuid, certificateKeyPairRequest, _callback);
        Type localVarReturnType = new TypeToken<CertificateKeyPair>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cryptoCertificatekeypairsUsedByList
     * @param kpUuid A UUID string identifying this Certificate-Key Pair. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cryptoCertificatekeypairsUsedByListCall(UUID kpUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/crypto/certificatekeypairs/{kp_uuid}/used_by/"
            .replace("{" + "kp_uuid" + "}", localVarApiClient.escapeString(kpUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cryptoCertificatekeypairsUsedByListValidateBeforeCall(UUID kpUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'kpUuid' is set
        if (kpUuid == null) {
            throw new ApiException("Missing the required parameter 'kpUuid' when calling cryptoCertificatekeypairsUsedByList(Async)");
        }

        return cryptoCertificatekeypairsUsedByListCall(kpUuid, _callback);

    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param kpUuid A UUID string identifying this Certificate-Key Pair. (required)
     * @return List&lt;UsedBy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<UsedBy> cryptoCertificatekeypairsUsedByList(UUID kpUuid) throws ApiException {
        ApiResponse<List<UsedBy>> localVarResp = cryptoCertificatekeypairsUsedByListWithHttpInfo(kpUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param kpUuid A UUID string identifying this Certificate-Key Pair. (required)
     * @return ApiResponse&lt;List&lt;UsedBy&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UsedBy>> cryptoCertificatekeypairsUsedByListWithHttpInfo(UUID kpUuid) throws ApiException {
        okhttp3.Call localVarCall = cryptoCertificatekeypairsUsedByListValidateBeforeCall(kpUuid, null);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of all objects that use this object
     * @param kpUuid A UUID string identifying this Certificate-Key Pair. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cryptoCertificatekeypairsUsedByListAsync(UUID kpUuid, final ApiCallback<List<UsedBy>> _callback) throws ApiException {

        okhttp3.Call localVarCall = cryptoCertificatekeypairsUsedByListValidateBeforeCall(kpUuid, _callback);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cryptoCertificatekeypairsViewCertificateRetrieve
     * @param kpUuid A UUID string identifying this Certificate-Key Pair. (required)
     * @param download  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cryptoCertificatekeypairsViewCertificateRetrieveCall(UUID kpUuid, Boolean download, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/crypto/certificatekeypairs/{kp_uuid}/view_certificate/"
            .replace("{" + "kp_uuid" + "}", localVarApiClient.escapeString(kpUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (download != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("download", download));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cryptoCertificatekeypairsViewCertificateRetrieveValidateBeforeCall(UUID kpUuid, Boolean download, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'kpUuid' is set
        if (kpUuid == null) {
            throw new ApiException("Missing the required parameter 'kpUuid' when calling cryptoCertificatekeypairsViewCertificateRetrieve(Async)");
        }

        return cryptoCertificatekeypairsViewCertificateRetrieveCall(kpUuid, download, _callback);

    }

    /**
     * 
     * Return certificate-key pairs certificate and log access
     * @param kpUuid A UUID string identifying this Certificate-Key Pair. (required)
     * @param download  (optional)
     * @return CertificateData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CertificateData cryptoCertificatekeypairsViewCertificateRetrieve(UUID kpUuid, Boolean download) throws ApiException {
        ApiResponse<CertificateData> localVarResp = cryptoCertificatekeypairsViewCertificateRetrieveWithHttpInfo(kpUuid, download);
        return localVarResp.getData();
    }

    /**
     * 
     * Return certificate-key pairs certificate and log access
     * @param kpUuid A UUID string identifying this Certificate-Key Pair. (required)
     * @param download  (optional)
     * @return ApiResponse&lt;CertificateData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CertificateData> cryptoCertificatekeypairsViewCertificateRetrieveWithHttpInfo(UUID kpUuid, Boolean download) throws ApiException {
        okhttp3.Call localVarCall = cryptoCertificatekeypairsViewCertificateRetrieveValidateBeforeCall(kpUuid, download, null);
        Type localVarReturnType = new TypeToken<CertificateData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return certificate-key pairs certificate and log access
     * @param kpUuid A UUID string identifying this Certificate-Key Pair. (required)
     * @param download  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cryptoCertificatekeypairsViewCertificateRetrieveAsync(UUID kpUuid, Boolean download, final ApiCallback<CertificateData> _callback) throws ApiException {

        okhttp3.Call localVarCall = cryptoCertificatekeypairsViewCertificateRetrieveValidateBeforeCall(kpUuid, download, _callback);
        Type localVarReturnType = new TypeToken<CertificateData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cryptoCertificatekeypairsViewPrivateKeyRetrieve
     * @param kpUuid A UUID string identifying this Certificate-Key Pair. (required)
     * @param download  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cryptoCertificatekeypairsViewPrivateKeyRetrieveCall(UUID kpUuid, Boolean download, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/crypto/certificatekeypairs/{kp_uuid}/view_private_key/"
            .replace("{" + "kp_uuid" + "}", localVarApiClient.escapeString(kpUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (download != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("download", download));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cryptoCertificatekeypairsViewPrivateKeyRetrieveValidateBeforeCall(UUID kpUuid, Boolean download, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'kpUuid' is set
        if (kpUuid == null) {
            throw new ApiException("Missing the required parameter 'kpUuid' when calling cryptoCertificatekeypairsViewPrivateKeyRetrieve(Async)");
        }

        return cryptoCertificatekeypairsViewPrivateKeyRetrieveCall(kpUuid, download, _callback);

    }

    /**
     * 
     * Return certificate-key pairs private key and log access
     * @param kpUuid A UUID string identifying this Certificate-Key Pair. (required)
     * @param download  (optional)
     * @return CertificateData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CertificateData cryptoCertificatekeypairsViewPrivateKeyRetrieve(UUID kpUuid, Boolean download) throws ApiException {
        ApiResponse<CertificateData> localVarResp = cryptoCertificatekeypairsViewPrivateKeyRetrieveWithHttpInfo(kpUuid, download);
        return localVarResp.getData();
    }

    /**
     * 
     * Return certificate-key pairs private key and log access
     * @param kpUuid A UUID string identifying this Certificate-Key Pair. (required)
     * @param download  (optional)
     * @return ApiResponse&lt;CertificateData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CertificateData> cryptoCertificatekeypairsViewPrivateKeyRetrieveWithHttpInfo(UUID kpUuid, Boolean download) throws ApiException {
        okhttp3.Call localVarCall = cryptoCertificatekeypairsViewPrivateKeyRetrieveValidateBeforeCall(kpUuid, download, null);
        Type localVarReturnType = new TypeToken<CertificateData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return certificate-key pairs private key and log access
     * @param kpUuid A UUID string identifying this Certificate-Key Pair. (required)
     * @param download  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cryptoCertificatekeypairsViewPrivateKeyRetrieveAsync(UUID kpUuid, Boolean download, final ApiCallback<CertificateData> _callback) throws ApiException {

        okhttp3.Call localVarCall = cryptoCertificatekeypairsViewPrivateKeyRetrieveValidateBeforeCall(kpUuid, download, _callback);
        Type localVarReturnType = new TypeToken<CertificateData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
