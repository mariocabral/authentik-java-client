/*
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.6.3
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AuthenticatorDuoStage;
import org.openapitools.client.model.AuthenticatorDuoStageDeviceImportResponse;
import org.openapitools.client.model.AuthenticatorDuoStageManualDeviceImportRequest;
import org.openapitools.client.model.AuthenticatorDuoStageRequest;
import org.openapitools.client.model.AuthenticatorSMSStage;
import org.openapitools.client.model.AuthenticatorSMSStageRequest;
import org.openapitools.client.model.AuthenticatorStaticStage;
import org.openapitools.client.model.AuthenticatorStaticStageRequest;
import org.openapitools.client.model.AuthenticatorTOTPStage;
import org.openapitools.client.model.AuthenticatorTOTPStageRequest;
import org.openapitools.client.model.AuthenticatorValidateStage;
import org.openapitools.client.model.AuthenticatorValidateStageRequest;
import org.openapitools.client.model.AuthenticatorWebAuthnStage;
import org.openapitools.client.model.AuthenticatorWebAuthnStageRequest;
import org.openapitools.client.model.CaptchaStage;
import org.openapitools.client.model.CaptchaStageRequest;
import org.openapitools.client.model.ConsentStage;
import org.openapitools.client.model.ConsentStageRequest;
import org.openapitools.client.model.DenyStage;
import org.openapitools.client.model.DenyStageRequest;
import org.openapitools.client.model.DummyStage;
import org.openapitools.client.model.DummyStageRequest;
import org.openapitools.client.model.DuoDeviceEnrollmentStatus;
import org.openapitools.client.model.EmailStage;
import org.openapitools.client.model.EmailStageRequest;
import org.openapitools.client.model.GenericError;
import org.openapitools.client.model.IdentificationStage;
import org.openapitools.client.model.IdentificationStageRequest;
import org.openapitools.client.model.Invitation;
import org.openapitools.client.model.InvitationRequest;
import org.openapitools.client.model.InvitationStage;
import org.openapitools.client.model.InvitationStageRequest;
import java.time.OffsetDateTime;
import org.openapitools.client.model.PaginatedAuthenticatorDuoStageList;
import org.openapitools.client.model.PaginatedAuthenticatorSMSStageList;
import org.openapitools.client.model.PaginatedAuthenticatorStaticStageList;
import org.openapitools.client.model.PaginatedAuthenticatorTOTPStageList;
import org.openapitools.client.model.PaginatedAuthenticatorValidateStageList;
import org.openapitools.client.model.PaginatedAuthenticatorWebAuthnStageList;
import org.openapitools.client.model.PaginatedCaptchaStageList;
import org.openapitools.client.model.PaginatedConsentStageList;
import org.openapitools.client.model.PaginatedDenyStageList;
import org.openapitools.client.model.PaginatedDummyStageList;
import org.openapitools.client.model.PaginatedEmailStageList;
import org.openapitools.client.model.PaginatedIdentificationStageList;
import org.openapitools.client.model.PaginatedInvitationList;
import org.openapitools.client.model.PaginatedInvitationStageList;
import org.openapitools.client.model.PaginatedPasswordStageList;
import org.openapitools.client.model.PaginatedPromptList;
import org.openapitools.client.model.PaginatedPromptStageList;
import org.openapitools.client.model.PaginatedSourceStageList;
import org.openapitools.client.model.PaginatedStageList;
import org.openapitools.client.model.PaginatedUserDeleteStageList;
import org.openapitools.client.model.PaginatedUserLoginStageList;
import org.openapitools.client.model.PaginatedUserLogoutStageList;
import org.openapitools.client.model.PaginatedUserWriteStageList;
import org.openapitools.client.model.PaginatedWebAuthnDeviceTypeList;
import org.openapitools.client.model.PasswordStage;
import org.openapitools.client.model.PasswordStageRequest;
import org.openapitools.client.model.PatchedAuthenticatorDuoStageRequest;
import org.openapitools.client.model.PatchedAuthenticatorSMSStageRequest;
import org.openapitools.client.model.PatchedAuthenticatorStaticStageRequest;
import org.openapitools.client.model.PatchedAuthenticatorTOTPStageRequest;
import org.openapitools.client.model.PatchedAuthenticatorValidateStageRequest;
import org.openapitools.client.model.PatchedAuthenticatorWebAuthnStageRequest;
import org.openapitools.client.model.PatchedCaptchaStageRequest;
import org.openapitools.client.model.PatchedConsentStageRequest;
import org.openapitools.client.model.PatchedDenyStageRequest;
import org.openapitools.client.model.PatchedDummyStageRequest;
import org.openapitools.client.model.PatchedEmailStageRequest;
import org.openapitools.client.model.PatchedIdentificationStageRequest;
import org.openapitools.client.model.PatchedInvitationRequest;
import org.openapitools.client.model.PatchedInvitationStageRequest;
import org.openapitools.client.model.PatchedPasswordStageRequest;
import org.openapitools.client.model.PatchedPromptRequest;
import org.openapitools.client.model.PatchedPromptStageRequest;
import org.openapitools.client.model.PatchedSourceStageRequest;
import org.openapitools.client.model.PatchedUserDeleteStageRequest;
import org.openapitools.client.model.PatchedUserLoginStageRequest;
import org.openapitools.client.model.PatchedUserLogoutStageRequest;
import org.openapitools.client.model.PatchedUserWriteStageRequest;
import org.openapitools.client.model.Prompt;
import org.openapitools.client.model.PromptChallenge;
import org.openapitools.client.model.PromptRequest;
import org.openapitools.client.model.PromptStage;
import org.openapitools.client.model.PromptStageRequest;
import org.openapitools.client.model.SourceStage;
import org.openapitools.client.model.SourceStageRequest;
import org.openapitools.client.model.Stage;
import org.openapitools.client.model.TypeCreate;
import java.util.UUID;
import org.openapitools.client.model.UsedBy;
import org.openapitools.client.model.UserDeleteStage;
import org.openapitools.client.model.UserDeleteStageRequest;
import org.openapitools.client.model.UserLoginStage;
import org.openapitools.client.model.UserLoginStageRequest;
import org.openapitools.client.model.UserLogoutStage;
import org.openapitools.client.model.UserLogoutStageRequest;
import org.openapitools.client.model.UserSetting;
import org.openapitools.client.model.UserWriteStage;
import org.openapitools.client.model.UserWriteStageRequest;
import org.openapitools.client.model.ValidationError;
import org.openapitools.client.model.WebAuthnDeviceType;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StagesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public StagesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StagesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for stagesAllDestroy
     * @param stageUuid A UUID string identifying this stage. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAllDestroyCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/all/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesAllDestroyValidateBeforeCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesAllDestroy(Async)");
        }

        return stagesAllDestroyCall(stageUuid, _callback);

    }

    /**
     * 
     * Stage Viewset
     * @param stageUuid A UUID string identifying this stage. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void stagesAllDestroy(UUID stageUuid) throws ApiException {
        stagesAllDestroyWithHttpInfo(stageUuid);
    }

    /**
     * 
     * Stage Viewset
     * @param stageUuid A UUID string identifying this stage. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> stagesAllDestroyWithHttpInfo(UUID stageUuid) throws ApiException {
        okhttp3.Call localVarCall = stagesAllDestroyValidateBeforeCall(stageUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Stage Viewset
     * @param stageUuid A UUID string identifying this stage. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAllDestroyAsync(UUID stageUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesAllDestroyValidateBeforeCall(stageUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesAllList
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAllListCall(String name, String ordering, Integer page, Integer pageSize, String search, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/all/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesAllListValidateBeforeCall(String name, String ordering, Integer page, Integer pageSize, String search, final ApiCallback _callback) throws ApiException {
        return stagesAllListCall(name, ordering, page, pageSize, search, _callback);

    }

    /**
     * 
     * Stage Viewset
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @return PaginatedStageList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedStageList stagesAllList(String name, String ordering, Integer page, Integer pageSize, String search) throws ApiException {
        ApiResponse<PaginatedStageList> localVarResp = stagesAllListWithHttpInfo(name, ordering, page, pageSize, search);
        return localVarResp.getData();
    }

    /**
     * 
     * Stage Viewset
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @return ApiResponse&lt;PaginatedStageList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedStageList> stagesAllListWithHttpInfo(String name, String ordering, Integer page, Integer pageSize, String search) throws ApiException {
        okhttp3.Call localVarCall = stagesAllListValidateBeforeCall(name, ordering, page, pageSize, search, null);
        Type localVarReturnType = new TypeToken<PaginatedStageList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Stage Viewset
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAllListAsync(String name, String ordering, Integer page, Integer pageSize, String search, final ApiCallback<PaginatedStageList> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesAllListValidateBeforeCall(name, ordering, page, pageSize, search, _callback);
        Type localVarReturnType = new TypeToken<PaginatedStageList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesAllRetrieve
     * @param stageUuid A UUID string identifying this stage. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAllRetrieveCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/all/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesAllRetrieveValidateBeforeCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesAllRetrieve(Async)");
        }

        return stagesAllRetrieveCall(stageUuid, _callback);

    }

    /**
     * 
     * Stage Viewset
     * @param stageUuid A UUID string identifying this stage. (required)
     * @return Stage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Stage stagesAllRetrieve(UUID stageUuid) throws ApiException {
        ApiResponse<Stage> localVarResp = stagesAllRetrieveWithHttpInfo(stageUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Stage Viewset
     * @param stageUuid A UUID string identifying this stage. (required)
     * @return ApiResponse&lt;Stage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Stage> stagesAllRetrieveWithHttpInfo(UUID stageUuid) throws ApiException {
        okhttp3.Call localVarCall = stagesAllRetrieveValidateBeforeCall(stageUuid, null);
        Type localVarReturnType = new TypeToken<Stage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Stage Viewset
     * @param stageUuid A UUID string identifying this stage. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAllRetrieveAsync(UUID stageUuid, final ApiCallback<Stage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesAllRetrieveValidateBeforeCall(stageUuid, _callback);
        Type localVarReturnType = new TypeToken<Stage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesAllTypesList
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAllTypesListCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/all/types/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesAllTypesListValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return stagesAllTypesListCall(_callback);

    }

    /**
     * 
     * Get all creatable types
     * @return List&lt;TypeCreate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<TypeCreate> stagesAllTypesList() throws ApiException {
        ApiResponse<List<TypeCreate>> localVarResp = stagesAllTypesListWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Get all creatable types
     * @return ApiResponse&lt;List&lt;TypeCreate&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TypeCreate>> stagesAllTypesListWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = stagesAllTypesListValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<TypeCreate>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get all creatable types
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAllTypesListAsync(final ApiCallback<List<TypeCreate>> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesAllTypesListValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<TypeCreate>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesAllUsedByList
     * @param stageUuid A UUID string identifying this stage. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAllUsedByListCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/all/{stage_uuid}/used_by/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesAllUsedByListValidateBeforeCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesAllUsedByList(Async)");
        }

        return stagesAllUsedByListCall(stageUuid, _callback);

    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param stageUuid A UUID string identifying this stage. (required)
     * @return List&lt;UsedBy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<UsedBy> stagesAllUsedByList(UUID stageUuid) throws ApiException {
        ApiResponse<List<UsedBy>> localVarResp = stagesAllUsedByListWithHttpInfo(stageUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param stageUuid A UUID string identifying this stage. (required)
     * @return ApiResponse&lt;List&lt;UsedBy&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UsedBy>> stagesAllUsedByListWithHttpInfo(UUID stageUuid) throws ApiException {
        okhttp3.Call localVarCall = stagesAllUsedByListValidateBeforeCall(stageUuid, null);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of all objects that use this object
     * @param stageUuid A UUID string identifying this stage. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAllUsedByListAsync(UUID stageUuid, final ApiCallback<List<UsedBy>> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesAllUsedByListValidateBeforeCall(stageUuid, _callback);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesAllUserSettingsList
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAllUserSettingsListCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/all/user_settings/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesAllUserSettingsListValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return stagesAllUserSettingsListCall(_callback);

    }

    /**
     * 
     * Get all stages the user can configure
     * @return List&lt;UserSetting&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<UserSetting> stagesAllUserSettingsList() throws ApiException {
        ApiResponse<List<UserSetting>> localVarResp = stagesAllUserSettingsListWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Get all stages the user can configure
     * @return ApiResponse&lt;List&lt;UserSetting&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UserSetting>> stagesAllUserSettingsListWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = stagesAllUserSettingsListValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<UserSetting>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get all stages the user can configure
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAllUserSettingsListAsync(final ApiCallback<List<UserSetting>> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesAllUserSettingsListValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<UserSetting>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesAuthenticatorDuoCreate
     * @param authenticatorDuoStageRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorDuoCreateCall(AuthenticatorDuoStageRequest authenticatorDuoStageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authenticatorDuoStageRequest;

        // create path and map variables
        String localVarPath = "/stages/authenticator/duo/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesAuthenticatorDuoCreateValidateBeforeCall(AuthenticatorDuoStageRequest authenticatorDuoStageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authenticatorDuoStageRequest' is set
        if (authenticatorDuoStageRequest == null) {
            throw new ApiException("Missing the required parameter 'authenticatorDuoStageRequest' when calling stagesAuthenticatorDuoCreate(Async)");
        }

        return stagesAuthenticatorDuoCreateCall(authenticatorDuoStageRequest, _callback);

    }

    /**
     * 
     * AuthenticatorDuoStage Viewset
     * @param authenticatorDuoStageRequest  (required)
     * @return AuthenticatorDuoStage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public AuthenticatorDuoStage stagesAuthenticatorDuoCreate(AuthenticatorDuoStageRequest authenticatorDuoStageRequest) throws ApiException {
        ApiResponse<AuthenticatorDuoStage> localVarResp = stagesAuthenticatorDuoCreateWithHttpInfo(authenticatorDuoStageRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * AuthenticatorDuoStage Viewset
     * @param authenticatorDuoStageRequest  (required)
     * @return ApiResponse&lt;AuthenticatorDuoStage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthenticatorDuoStage> stagesAuthenticatorDuoCreateWithHttpInfo(AuthenticatorDuoStageRequest authenticatorDuoStageRequest) throws ApiException {
        okhttp3.Call localVarCall = stagesAuthenticatorDuoCreateValidateBeforeCall(authenticatorDuoStageRequest, null);
        Type localVarReturnType = new TypeToken<AuthenticatorDuoStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * AuthenticatorDuoStage Viewset
     * @param authenticatorDuoStageRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorDuoCreateAsync(AuthenticatorDuoStageRequest authenticatorDuoStageRequest, final ApiCallback<AuthenticatorDuoStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesAuthenticatorDuoCreateValidateBeforeCall(authenticatorDuoStageRequest, _callback);
        Type localVarReturnType = new TypeToken<AuthenticatorDuoStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesAuthenticatorDuoDestroy
     * @param stageUuid A UUID string identifying this Duo Authenticator Setup Stage. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorDuoDestroyCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/authenticator/duo/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesAuthenticatorDuoDestroyValidateBeforeCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesAuthenticatorDuoDestroy(Async)");
        }

        return stagesAuthenticatorDuoDestroyCall(stageUuid, _callback);

    }

    /**
     * 
     * AuthenticatorDuoStage Viewset
     * @param stageUuid A UUID string identifying this Duo Authenticator Setup Stage. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void stagesAuthenticatorDuoDestroy(UUID stageUuid) throws ApiException {
        stagesAuthenticatorDuoDestroyWithHttpInfo(stageUuid);
    }

    /**
     * 
     * AuthenticatorDuoStage Viewset
     * @param stageUuid A UUID string identifying this Duo Authenticator Setup Stage. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> stagesAuthenticatorDuoDestroyWithHttpInfo(UUID stageUuid) throws ApiException {
        okhttp3.Call localVarCall = stagesAuthenticatorDuoDestroyValidateBeforeCall(stageUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * AuthenticatorDuoStage Viewset
     * @param stageUuid A UUID string identifying this Duo Authenticator Setup Stage. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorDuoDestroyAsync(UUID stageUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesAuthenticatorDuoDestroyValidateBeforeCall(stageUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesAuthenticatorDuoEnrollmentStatusCreate
     * @param stageUuid A UUID string identifying this Duo Authenticator Setup Stage. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorDuoEnrollmentStatusCreateCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/authenticator/duo/{stage_uuid}/enrollment_status/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesAuthenticatorDuoEnrollmentStatusCreateValidateBeforeCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesAuthenticatorDuoEnrollmentStatusCreate(Async)");
        }

        return stagesAuthenticatorDuoEnrollmentStatusCreateCall(stageUuid, _callback);

    }

    /**
     * 
     * Check enrollment status of user details in current session
     * @param stageUuid A UUID string identifying this Duo Authenticator Setup Stage. (required)
     * @return DuoDeviceEnrollmentStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DuoDeviceEnrollmentStatus stagesAuthenticatorDuoEnrollmentStatusCreate(UUID stageUuid) throws ApiException {
        ApiResponse<DuoDeviceEnrollmentStatus> localVarResp = stagesAuthenticatorDuoEnrollmentStatusCreateWithHttpInfo(stageUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Check enrollment status of user details in current session
     * @param stageUuid A UUID string identifying this Duo Authenticator Setup Stage. (required)
     * @return ApiResponse&lt;DuoDeviceEnrollmentStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DuoDeviceEnrollmentStatus> stagesAuthenticatorDuoEnrollmentStatusCreateWithHttpInfo(UUID stageUuid) throws ApiException {
        okhttp3.Call localVarCall = stagesAuthenticatorDuoEnrollmentStatusCreateValidateBeforeCall(stageUuid, null);
        Type localVarReturnType = new TypeToken<DuoDeviceEnrollmentStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Check enrollment status of user details in current session
     * @param stageUuid A UUID string identifying this Duo Authenticator Setup Stage. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorDuoEnrollmentStatusCreateAsync(UUID stageUuid, final ApiCallback<DuoDeviceEnrollmentStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesAuthenticatorDuoEnrollmentStatusCreateValidateBeforeCall(stageUuid, _callback);
        Type localVarReturnType = new TypeToken<DuoDeviceEnrollmentStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesAuthenticatorDuoImportDeviceManualCreate
     * @param stageUuid A UUID string identifying this Duo Authenticator Setup Stage. (required)
     * @param authenticatorDuoStageManualDeviceImportRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Enrollment successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorDuoImportDeviceManualCreateCall(UUID stageUuid, AuthenticatorDuoStageManualDeviceImportRequest authenticatorDuoStageManualDeviceImportRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authenticatorDuoStageManualDeviceImportRequest;

        // create path and map variables
        String localVarPath = "/stages/authenticator/duo/{stage_uuid}/import_device_manual/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesAuthenticatorDuoImportDeviceManualCreateValidateBeforeCall(UUID stageUuid, AuthenticatorDuoStageManualDeviceImportRequest authenticatorDuoStageManualDeviceImportRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesAuthenticatorDuoImportDeviceManualCreate(Async)");
        }

        // verify the required parameter 'authenticatorDuoStageManualDeviceImportRequest' is set
        if (authenticatorDuoStageManualDeviceImportRequest == null) {
            throw new ApiException("Missing the required parameter 'authenticatorDuoStageManualDeviceImportRequest' when calling stagesAuthenticatorDuoImportDeviceManualCreate(Async)");
        }

        return stagesAuthenticatorDuoImportDeviceManualCreateCall(stageUuid, authenticatorDuoStageManualDeviceImportRequest, _callback);

    }

    /**
     * 
     * Import duo devices into authentik
     * @param stageUuid A UUID string identifying this Duo Authenticator Setup Stage. (required)
     * @param authenticatorDuoStageManualDeviceImportRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Enrollment successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void stagesAuthenticatorDuoImportDeviceManualCreate(UUID stageUuid, AuthenticatorDuoStageManualDeviceImportRequest authenticatorDuoStageManualDeviceImportRequest) throws ApiException {
        stagesAuthenticatorDuoImportDeviceManualCreateWithHttpInfo(stageUuid, authenticatorDuoStageManualDeviceImportRequest);
    }

    /**
     * 
     * Import duo devices into authentik
     * @param stageUuid A UUID string identifying this Duo Authenticator Setup Stage. (required)
     * @param authenticatorDuoStageManualDeviceImportRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Enrollment successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> stagesAuthenticatorDuoImportDeviceManualCreateWithHttpInfo(UUID stageUuid, AuthenticatorDuoStageManualDeviceImportRequest authenticatorDuoStageManualDeviceImportRequest) throws ApiException {
        okhttp3.Call localVarCall = stagesAuthenticatorDuoImportDeviceManualCreateValidateBeforeCall(stageUuid, authenticatorDuoStageManualDeviceImportRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Import duo devices into authentik
     * @param stageUuid A UUID string identifying this Duo Authenticator Setup Stage. (required)
     * @param authenticatorDuoStageManualDeviceImportRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Enrollment successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorDuoImportDeviceManualCreateAsync(UUID stageUuid, AuthenticatorDuoStageManualDeviceImportRequest authenticatorDuoStageManualDeviceImportRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesAuthenticatorDuoImportDeviceManualCreateValidateBeforeCall(stageUuid, authenticatorDuoStageManualDeviceImportRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesAuthenticatorDuoImportDevicesAutomaticCreate
     * @param stageUuid A UUID string identifying this Duo Authenticator Setup Stage. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorDuoImportDevicesAutomaticCreateCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/authenticator/duo/{stage_uuid}/import_devices_automatic/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesAuthenticatorDuoImportDevicesAutomaticCreateValidateBeforeCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesAuthenticatorDuoImportDevicesAutomaticCreate(Async)");
        }

        return stagesAuthenticatorDuoImportDevicesAutomaticCreateCall(stageUuid, _callback);

    }

    /**
     * 
     * Import duo devices into authentik
     * @param stageUuid A UUID string identifying this Duo Authenticator Setup Stage. (required)
     * @return AuthenticatorDuoStageDeviceImportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public AuthenticatorDuoStageDeviceImportResponse stagesAuthenticatorDuoImportDevicesAutomaticCreate(UUID stageUuid) throws ApiException {
        ApiResponse<AuthenticatorDuoStageDeviceImportResponse> localVarResp = stagesAuthenticatorDuoImportDevicesAutomaticCreateWithHttpInfo(stageUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Import duo devices into authentik
     * @param stageUuid A UUID string identifying this Duo Authenticator Setup Stage. (required)
     * @return ApiResponse&lt;AuthenticatorDuoStageDeviceImportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthenticatorDuoStageDeviceImportResponse> stagesAuthenticatorDuoImportDevicesAutomaticCreateWithHttpInfo(UUID stageUuid) throws ApiException {
        okhttp3.Call localVarCall = stagesAuthenticatorDuoImportDevicesAutomaticCreateValidateBeforeCall(stageUuid, null);
        Type localVarReturnType = new TypeToken<AuthenticatorDuoStageDeviceImportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Import duo devices into authentik
     * @param stageUuid A UUID string identifying this Duo Authenticator Setup Stage. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorDuoImportDevicesAutomaticCreateAsync(UUID stageUuid, final ApiCallback<AuthenticatorDuoStageDeviceImportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesAuthenticatorDuoImportDevicesAutomaticCreateValidateBeforeCall(stageUuid, _callback);
        Type localVarReturnType = new TypeToken<AuthenticatorDuoStageDeviceImportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesAuthenticatorDuoList
     * @param apiHostname  (optional)
     * @param clientId  (optional)
     * @param configureFlow  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorDuoListCall(String apiHostname, String clientId, UUID configureFlow, String name, String ordering, Integer page, Integer pageSize, String search, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/authenticator/duo/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiHostname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_hostname", apiHostname));
        }

        if (clientId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("client_id", clientId));
        }

        if (configureFlow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("configure_flow", configureFlow));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesAuthenticatorDuoListValidateBeforeCall(String apiHostname, String clientId, UUID configureFlow, String name, String ordering, Integer page, Integer pageSize, String search, final ApiCallback _callback) throws ApiException {
        return stagesAuthenticatorDuoListCall(apiHostname, clientId, configureFlow, name, ordering, page, pageSize, search, _callback);

    }

    /**
     * 
     * AuthenticatorDuoStage Viewset
     * @param apiHostname  (optional)
     * @param clientId  (optional)
     * @param configureFlow  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @return PaginatedAuthenticatorDuoStageList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedAuthenticatorDuoStageList stagesAuthenticatorDuoList(String apiHostname, String clientId, UUID configureFlow, String name, String ordering, Integer page, Integer pageSize, String search) throws ApiException {
        ApiResponse<PaginatedAuthenticatorDuoStageList> localVarResp = stagesAuthenticatorDuoListWithHttpInfo(apiHostname, clientId, configureFlow, name, ordering, page, pageSize, search);
        return localVarResp.getData();
    }

    /**
     * 
     * AuthenticatorDuoStage Viewset
     * @param apiHostname  (optional)
     * @param clientId  (optional)
     * @param configureFlow  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @return ApiResponse&lt;PaginatedAuthenticatorDuoStageList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedAuthenticatorDuoStageList> stagesAuthenticatorDuoListWithHttpInfo(String apiHostname, String clientId, UUID configureFlow, String name, String ordering, Integer page, Integer pageSize, String search) throws ApiException {
        okhttp3.Call localVarCall = stagesAuthenticatorDuoListValidateBeforeCall(apiHostname, clientId, configureFlow, name, ordering, page, pageSize, search, null);
        Type localVarReturnType = new TypeToken<PaginatedAuthenticatorDuoStageList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * AuthenticatorDuoStage Viewset
     * @param apiHostname  (optional)
     * @param clientId  (optional)
     * @param configureFlow  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorDuoListAsync(String apiHostname, String clientId, UUID configureFlow, String name, String ordering, Integer page, Integer pageSize, String search, final ApiCallback<PaginatedAuthenticatorDuoStageList> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesAuthenticatorDuoListValidateBeforeCall(apiHostname, clientId, configureFlow, name, ordering, page, pageSize, search, _callback);
        Type localVarReturnType = new TypeToken<PaginatedAuthenticatorDuoStageList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesAuthenticatorDuoPartialUpdate
     * @param stageUuid A UUID string identifying this Duo Authenticator Setup Stage. (required)
     * @param patchedAuthenticatorDuoStageRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorDuoPartialUpdateCall(UUID stageUuid, PatchedAuthenticatorDuoStageRequest patchedAuthenticatorDuoStageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchedAuthenticatorDuoStageRequest;

        // create path and map variables
        String localVarPath = "/stages/authenticator/duo/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesAuthenticatorDuoPartialUpdateValidateBeforeCall(UUID stageUuid, PatchedAuthenticatorDuoStageRequest patchedAuthenticatorDuoStageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesAuthenticatorDuoPartialUpdate(Async)");
        }

        return stagesAuthenticatorDuoPartialUpdateCall(stageUuid, patchedAuthenticatorDuoStageRequest, _callback);

    }

    /**
     * 
     * AuthenticatorDuoStage Viewset
     * @param stageUuid A UUID string identifying this Duo Authenticator Setup Stage. (required)
     * @param patchedAuthenticatorDuoStageRequest  (optional)
     * @return AuthenticatorDuoStage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public AuthenticatorDuoStage stagesAuthenticatorDuoPartialUpdate(UUID stageUuid, PatchedAuthenticatorDuoStageRequest patchedAuthenticatorDuoStageRequest) throws ApiException {
        ApiResponse<AuthenticatorDuoStage> localVarResp = stagesAuthenticatorDuoPartialUpdateWithHttpInfo(stageUuid, patchedAuthenticatorDuoStageRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * AuthenticatorDuoStage Viewset
     * @param stageUuid A UUID string identifying this Duo Authenticator Setup Stage. (required)
     * @param patchedAuthenticatorDuoStageRequest  (optional)
     * @return ApiResponse&lt;AuthenticatorDuoStage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthenticatorDuoStage> stagesAuthenticatorDuoPartialUpdateWithHttpInfo(UUID stageUuid, PatchedAuthenticatorDuoStageRequest patchedAuthenticatorDuoStageRequest) throws ApiException {
        okhttp3.Call localVarCall = stagesAuthenticatorDuoPartialUpdateValidateBeforeCall(stageUuid, patchedAuthenticatorDuoStageRequest, null);
        Type localVarReturnType = new TypeToken<AuthenticatorDuoStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * AuthenticatorDuoStage Viewset
     * @param stageUuid A UUID string identifying this Duo Authenticator Setup Stage. (required)
     * @param patchedAuthenticatorDuoStageRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorDuoPartialUpdateAsync(UUID stageUuid, PatchedAuthenticatorDuoStageRequest patchedAuthenticatorDuoStageRequest, final ApiCallback<AuthenticatorDuoStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesAuthenticatorDuoPartialUpdateValidateBeforeCall(stageUuid, patchedAuthenticatorDuoStageRequest, _callback);
        Type localVarReturnType = new TypeToken<AuthenticatorDuoStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesAuthenticatorDuoRetrieve
     * @param stageUuid A UUID string identifying this Duo Authenticator Setup Stage. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorDuoRetrieveCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/authenticator/duo/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesAuthenticatorDuoRetrieveValidateBeforeCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesAuthenticatorDuoRetrieve(Async)");
        }

        return stagesAuthenticatorDuoRetrieveCall(stageUuid, _callback);

    }

    /**
     * 
     * AuthenticatorDuoStage Viewset
     * @param stageUuid A UUID string identifying this Duo Authenticator Setup Stage. (required)
     * @return AuthenticatorDuoStage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public AuthenticatorDuoStage stagesAuthenticatorDuoRetrieve(UUID stageUuid) throws ApiException {
        ApiResponse<AuthenticatorDuoStage> localVarResp = stagesAuthenticatorDuoRetrieveWithHttpInfo(stageUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * AuthenticatorDuoStage Viewset
     * @param stageUuid A UUID string identifying this Duo Authenticator Setup Stage. (required)
     * @return ApiResponse&lt;AuthenticatorDuoStage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthenticatorDuoStage> stagesAuthenticatorDuoRetrieveWithHttpInfo(UUID stageUuid) throws ApiException {
        okhttp3.Call localVarCall = stagesAuthenticatorDuoRetrieveValidateBeforeCall(stageUuid, null);
        Type localVarReturnType = new TypeToken<AuthenticatorDuoStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * AuthenticatorDuoStage Viewset
     * @param stageUuid A UUID string identifying this Duo Authenticator Setup Stage. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorDuoRetrieveAsync(UUID stageUuid, final ApiCallback<AuthenticatorDuoStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesAuthenticatorDuoRetrieveValidateBeforeCall(stageUuid, _callback);
        Type localVarReturnType = new TypeToken<AuthenticatorDuoStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesAuthenticatorDuoUpdate
     * @param stageUuid A UUID string identifying this Duo Authenticator Setup Stage. (required)
     * @param authenticatorDuoStageRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorDuoUpdateCall(UUID stageUuid, AuthenticatorDuoStageRequest authenticatorDuoStageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authenticatorDuoStageRequest;

        // create path and map variables
        String localVarPath = "/stages/authenticator/duo/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesAuthenticatorDuoUpdateValidateBeforeCall(UUID stageUuid, AuthenticatorDuoStageRequest authenticatorDuoStageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesAuthenticatorDuoUpdate(Async)");
        }

        // verify the required parameter 'authenticatorDuoStageRequest' is set
        if (authenticatorDuoStageRequest == null) {
            throw new ApiException("Missing the required parameter 'authenticatorDuoStageRequest' when calling stagesAuthenticatorDuoUpdate(Async)");
        }

        return stagesAuthenticatorDuoUpdateCall(stageUuid, authenticatorDuoStageRequest, _callback);

    }

    /**
     * 
     * AuthenticatorDuoStage Viewset
     * @param stageUuid A UUID string identifying this Duo Authenticator Setup Stage. (required)
     * @param authenticatorDuoStageRequest  (required)
     * @return AuthenticatorDuoStage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public AuthenticatorDuoStage stagesAuthenticatorDuoUpdate(UUID stageUuid, AuthenticatorDuoStageRequest authenticatorDuoStageRequest) throws ApiException {
        ApiResponse<AuthenticatorDuoStage> localVarResp = stagesAuthenticatorDuoUpdateWithHttpInfo(stageUuid, authenticatorDuoStageRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * AuthenticatorDuoStage Viewset
     * @param stageUuid A UUID string identifying this Duo Authenticator Setup Stage. (required)
     * @param authenticatorDuoStageRequest  (required)
     * @return ApiResponse&lt;AuthenticatorDuoStage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthenticatorDuoStage> stagesAuthenticatorDuoUpdateWithHttpInfo(UUID stageUuid, AuthenticatorDuoStageRequest authenticatorDuoStageRequest) throws ApiException {
        okhttp3.Call localVarCall = stagesAuthenticatorDuoUpdateValidateBeforeCall(stageUuid, authenticatorDuoStageRequest, null);
        Type localVarReturnType = new TypeToken<AuthenticatorDuoStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * AuthenticatorDuoStage Viewset
     * @param stageUuid A UUID string identifying this Duo Authenticator Setup Stage. (required)
     * @param authenticatorDuoStageRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorDuoUpdateAsync(UUID stageUuid, AuthenticatorDuoStageRequest authenticatorDuoStageRequest, final ApiCallback<AuthenticatorDuoStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesAuthenticatorDuoUpdateValidateBeforeCall(stageUuid, authenticatorDuoStageRequest, _callback);
        Type localVarReturnType = new TypeToken<AuthenticatorDuoStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesAuthenticatorDuoUsedByList
     * @param stageUuid A UUID string identifying this Duo Authenticator Setup Stage. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorDuoUsedByListCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/authenticator/duo/{stage_uuid}/used_by/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesAuthenticatorDuoUsedByListValidateBeforeCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesAuthenticatorDuoUsedByList(Async)");
        }

        return stagesAuthenticatorDuoUsedByListCall(stageUuid, _callback);

    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param stageUuid A UUID string identifying this Duo Authenticator Setup Stage. (required)
     * @return List&lt;UsedBy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<UsedBy> stagesAuthenticatorDuoUsedByList(UUID stageUuid) throws ApiException {
        ApiResponse<List<UsedBy>> localVarResp = stagesAuthenticatorDuoUsedByListWithHttpInfo(stageUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param stageUuid A UUID string identifying this Duo Authenticator Setup Stage. (required)
     * @return ApiResponse&lt;List&lt;UsedBy&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UsedBy>> stagesAuthenticatorDuoUsedByListWithHttpInfo(UUID stageUuid) throws ApiException {
        okhttp3.Call localVarCall = stagesAuthenticatorDuoUsedByListValidateBeforeCall(stageUuid, null);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of all objects that use this object
     * @param stageUuid A UUID string identifying this Duo Authenticator Setup Stage. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorDuoUsedByListAsync(UUID stageUuid, final ApiCallback<List<UsedBy>> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesAuthenticatorDuoUsedByListValidateBeforeCall(stageUuid, _callback);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesAuthenticatorSmsCreate
     * @param authenticatorSMSStageRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorSmsCreateCall(AuthenticatorSMSStageRequest authenticatorSMSStageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authenticatorSMSStageRequest;

        // create path and map variables
        String localVarPath = "/stages/authenticator/sms/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesAuthenticatorSmsCreateValidateBeforeCall(AuthenticatorSMSStageRequest authenticatorSMSStageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authenticatorSMSStageRequest' is set
        if (authenticatorSMSStageRequest == null) {
            throw new ApiException("Missing the required parameter 'authenticatorSMSStageRequest' when calling stagesAuthenticatorSmsCreate(Async)");
        }

        return stagesAuthenticatorSmsCreateCall(authenticatorSMSStageRequest, _callback);

    }

    /**
     * 
     * AuthenticatorSMSStage Viewset
     * @param authenticatorSMSStageRequest  (required)
     * @return AuthenticatorSMSStage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public AuthenticatorSMSStage stagesAuthenticatorSmsCreate(AuthenticatorSMSStageRequest authenticatorSMSStageRequest) throws ApiException {
        ApiResponse<AuthenticatorSMSStage> localVarResp = stagesAuthenticatorSmsCreateWithHttpInfo(authenticatorSMSStageRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * AuthenticatorSMSStage Viewset
     * @param authenticatorSMSStageRequest  (required)
     * @return ApiResponse&lt;AuthenticatorSMSStage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthenticatorSMSStage> stagesAuthenticatorSmsCreateWithHttpInfo(AuthenticatorSMSStageRequest authenticatorSMSStageRequest) throws ApiException {
        okhttp3.Call localVarCall = stagesAuthenticatorSmsCreateValidateBeforeCall(authenticatorSMSStageRequest, null);
        Type localVarReturnType = new TypeToken<AuthenticatorSMSStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * AuthenticatorSMSStage Viewset
     * @param authenticatorSMSStageRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorSmsCreateAsync(AuthenticatorSMSStageRequest authenticatorSMSStageRequest, final ApiCallback<AuthenticatorSMSStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesAuthenticatorSmsCreateValidateBeforeCall(authenticatorSMSStageRequest, _callback);
        Type localVarReturnType = new TypeToken<AuthenticatorSMSStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesAuthenticatorSmsDestroy
     * @param stageUuid A UUID string identifying this SMS Authenticator Setup Stage. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorSmsDestroyCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/authenticator/sms/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesAuthenticatorSmsDestroyValidateBeforeCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesAuthenticatorSmsDestroy(Async)");
        }

        return stagesAuthenticatorSmsDestroyCall(stageUuid, _callback);

    }

    /**
     * 
     * AuthenticatorSMSStage Viewset
     * @param stageUuid A UUID string identifying this SMS Authenticator Setup Stage. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void stagesAuthenticatorSmsDestroy(UUID stageUuid) throws ApiException {
        stagesAuthenticatorSmsDestroyWithHttpInfo(stageUuid);
    }

    /**
     * 
     * AuthenticatorSMSStage Viewset
     * @param stageUuid A UUID string identifying this SMS Authenticator Setup Stage. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> stagesAuthenticatorSmsDestroyWithHttpInfo(UUID stageUuid) throws ApiException {
        okhttp3.Call localVarCall = stagesAuthenticatorSmsDestroyValidateBeforeCall(stageUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * AuthenticatorSMSStage Viewset
     * @param stageUuid A UUID string identifying this SMS Authenticator Setup Stage. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorSmsDestroyAsync(UUID stageUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesAuthenticatorSmsDestroyValidateBeforeCall(stageUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesAuthenticatorSmsList
     * @param accountSid  (optional)
     * @param auth  (optional)
     * @param authPassword  (optional)
     * @param authType  (optional)
     * @param configureFlow  (optional)
     * @param friendlyName  (optional)
     * @param fromNumber  (optional)
     * @param mapping  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param provider  (optional)
     * @param search A search term. (optional)
     * @param stageUuid  (optional)
     * @param verifyOnly  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorSmsListCall(String accountSid, String auth, String authPassword, String authType, UUID configureFlow, String friendlyName, String fromNumber, UUID mapping, String name, String ordering, Integer page, Integer pageSize, String provider, String search, UUID stageUuid, Boolean verifyOnly, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/authenticator/sms/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accountSid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("account_sid", accountSid));
        }

        if (auth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("auth", auth));
        }

        if (authPassword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("auth_password", authPassword));
        }

        if (authType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("auth_type", authType));
        }

        if (configureFlow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("configure_flow", configureFlow));
        }

        if (friendlyName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("friendly_name", friendlyName));
        }

        if (fromNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from_number", fromNumber));
        }

        if (mapping != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mapping", mapping));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (provider != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("provider", provider));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (stageUuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stage_uuid", stageUuid));
        }

        if (verifyOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("verify_only", verifyOnly));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesAuthenticatorSmsListValidateBeforeCall(String accountSid, String auth, String authPassword, String authType, UUID configureFlow, String friendlyName, String fromNumber, UUID mapping, String name, String ordering, Integer page, Integer pageSize, String provider, String search, UUID stageUuid, Boolean verifyOnly, final ApiCallback _callback) throws ApiException {
        return stagesAuthenticatorSmsListCall(accountSid, auth, authPassword, authType, configureFlow, friendlyName, fromNumber, mapping, name, ordering, page, pageSize, provider, search, stageUuid, verifyOnly, _callback);

    }

    /**
     * 
     * AuthenticatorSMSStage Viewset
     * @param accountSid  (optional)
     * @param auth  (optional)
     * @param authPassword  (optional)
     * @param authType  (optional)
     * @param configureFlow  (optional)
     * @param friendlyName  (optional)
     * @param fromNumber  (optional)
     * @param mapping  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param provider  (optional)
     * @param search A search term. (optional)
     * @param stageUuid  (optional)
     * @param verifyOnly  (optional)
     * @return PaginatedAuthenticatorSMSStageList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedAuthenticatorSMSStageList stagesAuthenticatorSmsList(String accountSid, String auth, String authPassword, String authType, UUID configureFlow, String friendlyName, String fromNumber, UUID mapping, String name, String ordering, Integer page, Integer pageSize, String provider, String search, UUID stageUuid, Boolean verifyOnly) throws ApiException {
        ApiResponse<PaginatedAuthenticatorSMSStageList> localVarResp = stagesAuthenticatorSmsListWithHttpInfo(accountSid, auth, authPassword, authType, configureFlow, friendlyName, fromNumber, mapping, name, ordering, page, pageSize, provider, search, stageUuid, verifyOnly);
        return localVarResp.getData();
    }

    /**
     * 
     * AuthenticatorSMSStage Viewset
     * @param accountSid  (optional)
     * @param auth  (optional)
     * @param authPassword  (optional)
     * @param authType  (optional)
     * @param configureFlow  (optional)
     * @param friendlyName  (optional)
     * @param fromNumber  (optional)
     * @param mapping  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param provider  (optional)
     * @param search A search term. (optional)
     * @param stageUuid  (optional)
     * @param verifyOnly  (optional)
     * @return ApiResponse&lt;PaginatedAuthenticatorSMSStageList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedAuthenticatorSMSStageList> stagesAuthenticatorSmsListWithHttpInfo(String accountSid, String auth, String authPassword, String authType, UUID configureFlow, String friendlyName, String fromNumber, UUID mapping, String name, String ordering, Integer page, Integer pageSize, String provider, String search, UUID stageUuid, Boolean verifyOnly) throws ApiException {
        okhttp3.Call localVarCall = stagesAuthenticatorSmsListValidateBeforeCall(accountSid, auth, authPassword, authType, configureFlow, friendlyName, fromNumber, mapping, name, ordering, page, pageSize, provider, search, stageUuid, verifyOnly, null);
        Type localVarReturnType = new TypeToken<PaginatedAuthenticatorSMSStageList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * AuthenticatorSMSStage Viewset
     * @param accountSid  (optional)
     * @param auth  (optional)
     * @param authPassword  (optional)
     * @param authType  (optional)
     * @param configureFlow  (optional)
     * @param friendlyName  (optional)
     * @param fromNumber  (optional)
     * @param mapping  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param provider  (optional)
     * @param search A search term. (optional)
     * @param stageUuid  (optional)
     * @param verifyOnly  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorSmsListAsync(String accountSid, String auth, String authPassword, String authType, UUID configureFlow, String friendlyName, String fromNumber, UUID mapping, String name, String ordering, Integer page, Integer pageSize, String provider, String search, UUID stageUuid, Boolean verifyOnly, final ApiCallback<PaginatedAuthenticatorSMSStageList> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesAuthenticatorSmsListValidateBeforeCall(accountSid, auth, authPassword, authType, configureFlow, friendlyName, fromNumber, mapping, name, ordering, page, pageSize, provider, search, stageUuid, verifyOnly, _callback);
        Type localVarReturnType = new TypeToken<PaginatedAuthenticatorSMSStageList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesAuthenticatorSmsPartialUpdate
     * @param stageUuid A UUID string identifying this SMS Authenticator Setup Stage. (required)
     * @param patchedAuthenticatorSMSStageRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorSmsPartialUpdateCall(UUID stageUuid, PatchedAuthenticatorSMSStageRequest patchedAuthenticatorSMSStageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchedAuthenticatorSMSStageRequest;

        // create path and map variables
        String localVarPath = "/stages/authenticator/sms/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesAuthenticatorSmsPartialUpdateValidateBeforeCall(UUID stageUuid, PatchedAuthenticatorSMSStageRequest patchedAuthenticatorSMSStageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesAuthenticatorSmsPartialUpdate(Async)");
        }

        return stagesAuthenticatorSmsPartialUpdateCall(stageUuid, patchedAuthenticatorSMSStageRequest, _callback);

    }

    /**
     * 
     * AuthenticatorSMSStage Viewset
     * @param stageUuid A UUID string identifying this SMS Authenticator Setup Stage. (required)
     * @param patchedAuthenticatorSMSStageRequest  (optional)
     * @return AuthenticatorSMSStage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public AuthenticatorSMSStage stagesAuthenticatorSmsPartialUpdate(UUID stageUuid, PatchedAuthenticatorSMSStageRequest patchedAuthenticatorSMSStageRequest) throws ApiException {
        ApiResponse<AuthenticatorSMSStage> localVarResp = stagesAuthenticatorSmsPartialUpdateWithHttpInfo(stageUuid, patchedAuthenticatorSMSStageRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * AuthenticatorSMSStage Viewset
     * @param stageUuid A UUID string identifying this SMS Authenticator Setup Stage. (required)
     * @param patchedAuthenticatorSMSStageRequest  (optional)
     * @return ApiResponse&lt;AuthenticatorSMSStage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthenticatorSMSStage> stagesAuthenticatorSmsPartialUpdateWithHttpInfo(UUID stageUuid, PatchedAuthenticatorSMSStageRequest patchedAuthenticatorSMSStageRequest) throws ApiException {
        okhttp3.Call localVarCall = stagesAuthenticatorSmsPartialUpdateValidateBeforeCall(stageUuid, patchedAuthenticatorSMSStageRequest, null);
        Type localVarReturnType = new TypeToken<AuthenticatorSMSStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * AuthenticatorSMSStage Viewset
     * @param stageUuid A UUID string identifying this SMS Authenticator Setup Stage. (required)
     * @param patchedAuthenticatorSMSStageRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorSmsPartialUpdateAsync(UUID stageUuid, PatchedAuthenticatorSMSStageRequest patchedAuthenticatorSMSStageRequest, final ApiCallback<AuthenticatorSMSStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesAuthenticatorSmsPartialUpdateValidateBeforeCall(stageUuid, patchedAuthenticatorSMSStageRequest, _callback);
        Type localVarReturnType = new TypeToken<AuthenticatorSMSStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesAuthenticatorSmsRetrieve
     * @param stageUuid A UUID string identifying this SMS Authenticator Setup Stage. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorSmsRetrieveCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/authenticator/sms/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesAuthenticatorSmsRetrieveValidateBeforeCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesAuthenticatorSmsRetrieve(Async)");
        }

        return stagesAuthenticatorSmsRetrieveCall(stageUuid, _callback);

    }

    /**
     * 
     * AuthenticatorSMSStage Viewset
     * @param stageUuid A UUID string identifying this SMS Authenticator Setup Stage. (required)
     * @return AuthenticatorSMSStage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public AuthenticatorSMSStage stagesAuthenticatorSmsRetrieve(UUID stageUuid) throws ApiException {
        ApiResponse<AuthenticatorSMSStage> localVarResp = stagesAuthenticatorSmsRetrieveWithHttpInfo(stageUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * AuthenticatorSMSStage Viewset
     * @param stageUuid A UUID string identifying this SMS Authenticator Setup Stage. (required)
     * @return ApiResponse&lt;AuthenticatorSMSStage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthenticatorSMSStage> stagesAuthenticatorSmsRetrieveWithHttpInfo(UUID stageUuid) throws ApiException {
        okhttp3.Call localVarCall = stagesAuthenticatorSmsRetrieveValidateBeforeCall(stageUuid, null);
        Type localVarReturnType = new TypeToken<AuthenticatorSMSStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * AuthenticatorSMSStage Viewset
     * @param stageUuid A UUID string identifying this SMS Authenticator Setup Stage. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorSmsRetrieveAsync(UUID stageUuid, final ApiCallback<AuthenticatorSMSStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesAuthenticatorSmsRetrieveValidateBeforeCall(stageUuid, _callback);
        Type localVarReturnType = new TypeToken<AuthenticatorSMSStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesAuthenticatorSmsUpdate
     * @param stageUuid A UUID string identifying this SMS Authenticator Setup Stage. (required)
     * @param authenticatorSMSStageRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorSmsUpdateCall(UUID stageUuid, AuthenticatorSMSStageRequest authenticatorSMSStageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authenticatorSMSStageRequest;

        // create path and map variables
        String localVarPath = "/stages/authenticator/sms/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesAuthenticatorSmsUpdateValidateBeforeCall(UUID stageUuid, AuthenticatorSMSStageRequest authenticatorSMSStageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesAuthenticatorSmsUpdate(Async)");
        }

        // verify the required parameter 'authenticatorSMSStageRequest' is set
        if (authenticatorSMSStageRequest == null) {
            throw new ApiException("Missing the required parameter 'authenticatorSMSStageRequest' when calling stagesAuthenticatorSmsUpdate(Async)");
        }

        return stagesAuthenticatorSmsUpdateCall(stageUuid, authenticatorSMSStageRequest, _callback);

    }

    /**
     * 
     * AuthenticatorSMSStage Viewset
     * @param stageUuid A UUID string identifying this SMS Authenticator Setup Stage. (required)
     * @param authenticatorSMSStageRequest  (required)
     * @return AuthenticatorSMSStage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public AuthenticatorSMSStage stagesAuthenticatorSmsUpdate(UUID stageUuid, AuthenticatorSMSStageRequest authenticatorSMSStageRequest) throws ApiException {
        ApiResponse<AuthenticatorSMSStage> localVarResp = stagesAuthenticatorSmsUpdateWithHttpInfo(stageUuid, authenticatorSMSStageRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * AuthenticatorSMSStage Viewset
     * @param stageUuid A UUID string identifying this SMS Authenticator Setup Stage. (required)
     * @param authenticatorSMSStageRequest  (required)
     * @return ApiResponse&lt;AuthenticatorSMSStage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthenticatorSMSStage> stagesAuthenticatorSmsUpdateWithHttpInfo(UUID stageUuid, AuthenticatorSMSStageRequest authenticatorSMSStageRequest) throws ApiException {
        okhttp3.Call localVarCall = stagesAuthenticatorSmsUpdateValidateBeforeCall(stageUuid, authenticatorSMSStageRequest, null);
        Type localVarReturnType = new TypeToken<AuthenticatorSMSStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * AuthenticatorSMSStage Viewset
     * @param stageUuid A UUID string identifying this SMS Authenticator Setup Stage. (required)
     * @param authenticatorSMSStageRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorSmsUpdateAsync(UUID stageUuid, AuthenticatorSMSStageRequest authenticatorSMSStageRequest, final ApiCallback<AuthenticatorSMSStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesAuthenticatorSmsUpdateValidateBeforeCall(stageUuid, authenticatorSMSStageRequest, _callback);
        Type localVarReturnType = new TypeToken<AuthenticatorSMSStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesAuthenticatorSmsUsedByList
     * @param stageUuid A UUID string identifying this SMS Authenticator Setup Stage. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorSmsUsedByListCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/authenticator/sms/{stage_uuid}/used_by/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesAuthenticatorSmsUsedByListValidateBeforeCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesAuthenticatorSmsUsedByList(Async)");
        }

        return stagesAuthenticatorSmsUsedByListCall(stageUuid, _callback);

    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param stageUuid A UUID string identifying this SMS Authenticator Setup Stage. (required)
     * @return List&lt;UsedBy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<UsedBy> stagesAuthenticatorSmsUsedByList(UUID stageUuid) throws ApiException {
        ApiResponse<List<UsedBy>> localVarResp = stagesAuthenticatorSmsUsedByListWithHttpInfo(stageUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param stageUuid A UUID string identifying this SMS Authenticator Setup Stage. (required)
     * @return ApiResponse&lt;List&lt;UsedBy&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UsedBy>> stagesAuthenticatorSmsUsedByListWithHttpInfo(UUID stageUuid) throws ApiException {
        okhttp3.Call localVarCall = stagesAuthenticatorSmsUsedByListValidateBeforeCall(stageUuid, null);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of all objects that use this object
     * @param stageUuid A UUID string identifying this SMS Authenticator Setup Stage. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorSmsUsedByListAsync(UUID stageUuid, final ApiCallback<List<UsedBy>> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesAuthenticatorSmsUsedByListValidateBeforeCall(stageUuid, _callback);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesAuthenticatorStaticCreate
     * @param authenticatorStaticStageRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorStaticCreateCall(AuthenticatorStaticStageRequest authenticatorStaticStageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authenticatorStaticStageRequest;

        // create path and map variables
        String localVarPath = "/stages/authenticator/static/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesAuthenticatorStaticCreateValidateBeforeCall(AuthenticatorStaticStageRequest authenticatorStaticStageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authenticatorStaticStageRequest' is set
        if (authenticatorStaticStageRequest == null) {
            throw new ApiException("Missing the required parameter 'authenticatorStaticStageRequest' when calling stagesAuthenticatorStaticCreate(Async)");
        }

        return stagesAuthenticatorStaticCreateCall(authenticatorStaticStageRequest, _callback);

    }

    /**
     * 
     * AuthenticatorStaticStage Viewset
     * @param authenticatorStaticStageRequest  (required)
     * @return AuthenticatorStaticStage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public AuthenticatorStaticStage stagesAuthenticatorStaticCreate(AuthenticatorStaticStageRequest authenticatorStaticStageRequest) throws ApiException {
        ApiResponse<AuthenticatorStaticStage> localVarResp = stagesAuthenticatorStaticCreateWithHttpInfo(authenticatorStaticStageRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * AuthenticatorStaticStage Viewset
     * @param authenticatorStaticStageRequest  (required)
     * @return ApiResponse&lt;AuthenticatorStaticStage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthenticatorStaticStage> stagesAuthenticatorStaticCreateWithHttpInfo(AuthenticatorStaticStageRequest authenticatorStaticStageRequest) throws ApiException {
        okhttp3.Call localVarCall = stagesAuthenticatorStaticCreateValidateBeforeCall(authenticatorStaticStageRequest, null);
        Type localVarReturnType = new TypeToken<AuthenticatorStaticStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * AuthenticatorStaticStage Viewset
     * @param authenticatorStaticStageRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorStaticCreateAsync(AuthenticatorStaticStageRequest authenticatorStaticStageRequest, final ApiCallback<AuthenticatorStaticStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesAuthenticatorStaticCreateValidateBeforeCall(authenticatorStaticStageRequest, _callback);
        Type localVarReturnType = new TypeToken<AuthenticatorStaticStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesAuthenticatorStaticDestroy
     * @param stageUuid A UUID string identifying this Static Authenticator Setup Stage. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorStaticDestroyCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/authenticator/static/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesAuthenticatorStaticDestroyValidateBeforeCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesAuthenticatorStaticDestroy(Async)");
        }

        return stagesAuthenticatorStaticDestroyCall(stageUuid, _callback);

    }

    /**
     * 
     * AuthenticatorStaticStage Viewset
     * @param stageUuid A UUID string identifying this Static Authenticator Setup Stage. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void stagesAuthenticatorStaticDestroy(UUID stageUuid) throws ApiException {
        stagesAuthenticatorStaticDestroyWithHttpInfo(stageUuid);
    }

    /**
     * 
     * AuthenticatorStaticStage Viewset
     * @param stageUuid A UUID string identifying this Static Authenticator Setup Stage. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> stagesAuthenticatorStaticDestroyWithHttpInfo(UUID stageUuid) throws ApiException {
        okhttp3.Call localVarCall = stagesAuthenticatorStaticDestroyValidateBeforeCall(stageUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * AuthenticatorStaticStage Viewset
     * @param stageUuid A UUID string identifying this Static Authenticator Setup Stage. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorStaticDestroyAsync(UUID stageUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesAuthenticatorStaticDestroyValidateBeforeCall(stageUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesAuthenticatorStaticList
     * @param configureFlow  (optional)
     * @param friendlyName  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @param stageUuid  (optional)
     * @param tokenCount  (optional)
     * @param tokenLength  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorStaticListCall(UUID configureFlow, String friendlyName, String name, String ordering, Integer page, Integer pageSize, String search, UUID stageUuid, Integer tokenCount, Integer tokenLength, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/authenticator/static/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (configureFlow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("configure_flow", configureFlow));
        }

        if (friendlyName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("friendly_name", friendlyName));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (stageUuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stage_uuid", stageUuid));
        }

        if (tokenCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token_count", tokenCount));
        }

        if (tokenLength != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token_length", tokenLength));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesAuthenticatorStaticListValidateBeforeCall(UUID configureFlow, String friendlyName, String name, String ordering, Integer page, Integer pageSize, String search, UUID stageUuid, Integer tokenCount, Integer tokenLength, final ApiCallback _callback) throws ApiException {
        return stagesAuthenticatorStaticListCall(configureFlow, friendlyName, name, ordering, page, pageSize, search, stageUuid, tokenCount, tokenLength, _callback);

    }

    /**
     * 
     * AuthenticatorStaticStage Viewset
     * @param configureFlow  (optional)
     * @param friendlyName  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @param stageUuid  (optional)
     * @param tokenCount  (optional)
     * @param tokenLength  (optional)
     * @return PaginatedAuthenticatorStaticStageList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedAuthenticatorStaticStageList stagesAuthenticatorStaticList(UUID configureFlow, String friendlyName, String name, String ordering, Integer page, Integer pageSize, String search, UUID stageUuid, Integer tokenCount, Integer tokenLength) throws ApiException {
        ApiResponse<PaginatedAuthenticatorStaticStageList> localVarResp = stagesAuthenticatorStaticListWithHttpInfo(configureFlow, friendlyName, name, ordering, page, pageSize, search, stageUuid, tokenCount, tokenLength);
        return localVarResp.getData();
    }

    /**
     * 
     * AuthenticatorStaticStage Viewset
     * @param configureFlow  (optional)
     * @param friendlyName  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @param stageUuid  (optional)
     * @param tokenCount  (optional)
     * @param tokenLength  (optional)
     * @return ApiResponse&lt;PaginatedAuthenticatorStaticStageList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedAuthenticatorStaticStageList> stagesAuthenticatorStaticListWithHttpInfo(UUID configureFlow, String friendlyName, String name, String ordering, Integer page, Integer pageSize, String search, UUID stageUuid, Integer tokenCount, Integer tokenLength) throws ApiException {
        okhttp3.Call localVarCall = stagesAuthenticatorStaticListValidateBeforeCall(configureFlow, friendlyName, name, ordering, page, pageSize, search, stageUuid, tokenCount, tokenLength, null);
        Type localVarReturnType = new TypeToken<PaginatedAuthenticatorStaticStageList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * AuthenticatorStaticStage Viewset
     * @param configureFlow  (optional)
     * @param friendlyName  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @param stageUuid  (optional)
     * @param tokenCount  (optional)
     * @param tokenLength  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorStaticListAsync(UUID configureFlow, String friendlyName, String name, String ordering, Integer page, Integer pageSize, String search, UUID stageUuid, Integer tokenCount, Integer tokenLength, final ApiCallback<PaginatedAuthenticatorStaticStageList> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesAuthenticatorStaticListValidateBeforeCall(configureFlow, friendlyName, name, ordering, page, pageSize, search, stageUuid, tokenCount, tokenLength, _callback);
        Type localVarReturnType = new TypeToken<PaginatedAuthenticatorStaticStageList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesAuthenticatorStaticPartialUpdate
     * @param stageUuid A UUID string identifying this Static Authenticator Setup Stage. (required)
     * @param patchedAuthenticatorStaticStageRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorStaticPartialUpdateCall(UUID stageUuid, PatchedAuthenticatorStaticStageRequest patchedAuthenticatorStaticStageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchedAuthenticatorStaticStageRequest;

        // create path and map variables
        String localVarPath = "/stages/authenticator/static/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesAuthenticatorStaticPartialUpdateValidateBeforeCall(UUID stageUuid, PatchedAuthenticatorStaticStageRequest patchedAuthenticatorStaticStageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesAuthenticatorStaticPartialUpdate(Async)");
        }

        return stagesAuthenticatorStaticPartialUpdateCall(stageUuid, patchedAuthenticatorStaticStageRequest, _callback);

    }

    /**
     * 
     * AuthenticatorStaticStage Viewset
     * @param stageUuid A UUID string identifying this Static Authenticator Setup Stage. (required)
     * @param patchedAuthenticatorStaticStageRequest  (optional)
     * @return AuthenticatorStaticStage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public AuthenticatorStaticStage stagesAuthenticatorStaticPartialUpdate(UUID stageUuid, PatchedAuthenticatorStaticStageRequest patchedAuthenticatorStaticStageRequest) throws ApiException {
        ApiResponse<AuthenticatorStaticStage> localVarResp = stagesAuthenticatorStaticPartialUpdateWithHttpInfo(stageUuid, patchedAuthenticatorStaticStageRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * AuthenticatorStaticStage Viewset
     * @param stageUuid A UUID string identifying this Static Authenticator Setup Stage. (required)
     * @param patchedAuthenticatorStaticStageRequest  (optional)
     * @return ApiResponse&lt;AuthenticatorStaticStage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthenticatorStaticStage> stagesAuthenticatorStaticPartialUpdateWithHttpInfo(UUID stageUuid, PatchedAuthenticatorStaticStageRequest patchedAuthenticatorStaticStageRequest) throws ApiException {
        okhttp3.Call localVarCall = stagesAuthenticatorStaticPartialUpdateValidateBeforeCall(stageUuid, patchedAuthenticatorStaticStageRequest, null);
        Type localVarReturnType = new TypeToken<AuthenticatorStaticStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * AuthenticatorStaticStage Viewset
     * @param stageUuid A UUID string identifying this Static Authenticator Setup Stage. (required)
     * @param patchedAuthenticatorStaticStageRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorStaticPartialUpdateAsync(UUID stageUuid, PatchedAuthenticatorStaticStageRequest patchedAuthenticatorStaticStageRequest, final ApiCallback<AuthenticatorStaticStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesAuthenticatorStaticPartialUpdateValidateBeforeCall(stageUuid, patchedAuthenticatorStaticStageRequest, _callback);
        Type localVarReturnType = new TypeToken<AuthenticatorStaticStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesAuthenticatorStaticRetrieve
     * @param stageUuid A UUID string identifying this Static Authenticator Setup Stage. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorStaticRetrieveCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/authenticator/static/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesAuthenticatorStaticRetrieveValidateBeforeCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesAuthenticatorStaticRetrieve(Async)");
        }

        return stagesAuthenticatorStaticRetrieveCall(stageUuid, _callback);

    }

    /**
     * 
     * AuthenticatorStaticStage Viewset
     * @param stageUuid A UUID string identifying this Static Authenticator Setup Stage. (required)
     * @return AuthenticatorStaticStage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public AuthenticatorStaticStage stagesAuthenticatorStaticRetrieve(UUID stageUuid) throws ApiException {
        ApiResponse<AuthenticatorStaticStage> localVarResp = stagesAuthenticatorStaticRetrieveWithHttpInfo(stageUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * AuthenticatorStaticStage Viewset
     * @param stageUuid A UUID string identifying this Static Authenticator Setup Stage. (required)
     * @return ApiResponse&lt;AuthenticatorStaticStage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthenticatorStaticStage> stagesAuthenticatorStaticRetrieveWithHttpInfo(UUID stageUuid) throws ApiException {
        okhttp3.Call localVarCall = stagesAuthenticatorStaticRetrieveValidateBeforeCall(stageUuid, null);
        Type localVarReturnType = new TypeToken<AuthenticatorStaticStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * AuthenticatorStaticStage Viewset
     * @param stageUuid A UUID string identifying this Static Authenticator Setup Stage. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorStaticRetrieveAsync(UUID stageUuid, final ApiCallback<AuthenticatorStaticStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesAuthenticatorStaticRetrieveValidateBeforeCall(stageUuid, _callback);
        Type localVarReturnType = new TypeToken<AuthenticatorStaticStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesAuthenticatorStaticUpdate
     * @param stageUuid A UUID string identifying this Static Authenticator Setup Stage. (required)
     * @param authenticatorStaticStageRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorStaticUpdateCall(UUID stageUuid, AuthenticatorStaticStageRequest authenticatorStaticStageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authenticatorStaticStageRequest;

        // create path and map variables
        String localVarPath = "/stages/authenticator/static/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesAuthenticatorStaticUpdateValidateBeforeCall(UUID stageUuid, AuthenticatorStaticStageRequest authenticatorStaticStageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesAuthenticatorStaticUpdate(Async)");
        }

        // verify the required parameter 'authenticatorStaticStageRequest' is set
        if (authenticatorStaticStageRequest == null) {
            throw new ApiException("Missing the required parameter 'authenticatorStaticStageRequest' when calling stagesAuthenticatorStaticUpdate(Async)");
        }

        return stagesAuthenticatorStaticUpdateCall(stageUuid, authenticatorStaticStageRequest, _callback);

    }

    /**
     * 
     * AuthenticatorStaticStage Viewset
     * @param stageUuid A UUID string identifying this Static Authenticator Setup Stage. (required)
     * @param authenticatorStaticStageRequest  (required)
     * @return AuthenticatorStaticStage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public AuthenticatorStaticStage stagesAuthenticatorStaticUpdate(UUID stageUuid, AuthenticatorStaticStageRequest authenticatorStaticStageRequest) throws ApiException {
        ApiResponse<AuthenticatorStaticStage> localVarResp = stagesAuthenticatorStaticUpdateWithHttpInfo(stageUuid, authenticatorStaticStageRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * AuthenticatorStaticStage Viewset
     * @param stageUuid A UUID string identifying this Static Authenticator Setup Stage. (required)
     * @param authenticatorStaticStageRequest  (required)
     * @return ApiResponse&lt;AuthenticatorStaticStage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthenticatorStaticStage> stagesAuthenticatorStaticUpdateWithHttpInfo(UUID stageUuid, AuthenticatorStaticStageRequest authenticatorStaticStageRequest) throws ApiException {
        okhttp3.Call localVarCall = stagesAuthenticatorStaticUpdateValidateBeforeCall(stageUuid, authenticatorStaticStageRequest, null);
        Type localVarReturnType = new TypeToken<AuthenticatorStaticStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * AuthenticatorStaticStage Viewset
     * @param stageUuid A UUID string identifying this Static Authenticator Setup Stage. (required)
     * @param authenticatorStaticStageRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorStaticUpdateAsync(UUID stageUuid, AuthenticatorStaticStageRequest authenticatorStaticStageRequest, final ApiCallback<AuthenticatorStaticStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesAuthenticatorStaticUpdateValidateBeforeCall(stageUuid, authenticatorStaticStageRequest, _callback);
        Type localVarReturnType = new TypeToken<AuthenticatorStaticStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesAuthenticatorStaticUsedByList
     * @param stageUuid A UUID string identifying this Static Authenticator Setup Stage. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorStaticUsedByListCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/authenticator/static/{stage_uuid}/used_by/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesAuthenticatorStaticUsedByListValidateBeforeCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesAuthenticatorStaticUsedByList(Async)");
        }

        return stagesAuthenticatorStaticUsedByListCall(stageUuid, _callback);

    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param stageUuid A UUID string identifying this Static Authenticator Setup Stage. (required)
     * @return List&lt;UsedBy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<UsedBy> stagesAuthenticatorStaticUsedByList(UUID stageUuid) throws ApiException {
        ApiResponse<List<UsedBy>> localVarResp = stagesAuthenticatorStaticUsedByListWithHttpInfo(stageUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param stageUuid A UUID string identifying this Static Authenticator Setup Stage. (required)
     * @return ApiResponse&lt;List&lt;UsedBy&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UsedBy>> stagesAuthenticatorStaticUsedByListWithHttpInfo(UUID stageUuid) throws ApiException {
        okhttp3.Call localVarCall = stagesAuthenticatorStaticUsedByListValidateBeforeCall(stageUuid, null);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of all objects that use this object
     * @param stageUuid A UUID string identifying this Static Authenticator Setup Stage. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorStaticUsedByListAsync(UUID stageUuid, final ApiCallback<List<UsedBy>> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesAuthenticatorStaticUsedByListValidateBeforeCall(stageUuid, _callback);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesAuthenticatorTotpCreate
     * @param authenticatorTOTPStageRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorTotpCreateCall(AuthenticatorTOTPStageRequest authenticatorTOTPStageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authenticatorTOTPStageRequest;

        // create path and map variables
        String localVarPath = "/stages/authenticator/totp/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesAuthenticatorTotpCreateValidateBeforeCall(AuthenticatorTOTPStageRequest authenticatorTOTPStageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authenticatorTOTPStageRequest' is set
        if (authenticatorTOTPStageRequest == null) {
            throw new ApiException("Missing the required parameter 'authenticatorTOTPStageRequest' when calling stagesAuthenticatorTotpCreate(Async)");
        }

        return stagesAuthenticatorTotpCreateCall(authenticatorTOTPStageRequest, _callback);

    }

    /**
     * 
     * AuthenticatorTOTPStage Viewset
     * @param authenticatorTOTPStageRequest  (required)
     * @return AuthenticatorTOTPStage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public AuthenticatorTOTPStage stagesAuthenticatorTotpCreate(AuthenticatorTOTPStageRequest authenticatorTOTPStageRequest) throws ApiException {
        ApiResponse<AuthenticatorTOTPStage> localVarResp = stagesAuthenticatorTotpCreateWithHttpInfo(authenticatorTOTPStageRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * AuthenticatorTOTPStage Viewset
     * @param authenticatorTOTPStageRequest  (required)
     * @return ApiResponse&lt;AuthenticatorTOTPStage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthenticatorTOTPStage> stagesAuthenticatorTotpCreateWithHttpInfo(AuthenticatorTOTPStageRequest authenticatorTOTPStageRequest) throws ApiException {
        okhttp3.Call localVarCall = stagesAuthenticatorTotpCreateValidateBeforeCall(authenticatorTOTPStageRequest, null);
        Type localVarReturnType = new TypeToken<AuthenticatorTOTPStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * AuthenticatorTOTPStage Viewset
     * @param authenticatorTOTPStageRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorTotpCreateAsync(AuthenticatorTOTPStageRequest authenticatorTOTPStageRequest, final ApiCallback<AuthenticatorTOTPStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesAuthenticatorTotpCreateValidateBeforeCall(authenticatorTOTPStageRequest, _callback);
        Type localVarReturnType = new TypeToken<AuthenticatorTOTPStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesAuthenticatorTotpDestroy
     * @param stageUuid A UUID string identifying this TOTP Authenticator Setup Stage. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorTotpDestroyCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/authenticator/totp/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesAuthenticatorTotpDestroyValidateBeforeCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesAuthenticatorTotpDestroy(Async)");
        }

        return stagesAuthenticatorTotpDestroyCall(stageUuid, _callback);

    }

    /**
     * 
     * AuthenticatorTOTPStage Viewset
     * @param stageUuid A UUID string identifying this TOTP Authenticator Setup Stage. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void stagesAuthenticatorTotpDestroy(UUID stageUuid) throws ApiException {
        stagesAuthenticatorTotpDestroyWithHttpInfo(stageUuid);
    }

    /**
     * 
     * AuthenticatorTOTPStage Viewset
     * @param stageUuid A UUID string identifying this TOTP Authenticator Setup Stage. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> stagesAuthenticatorTotpDestroyWithHttpInfo(UUID stageUuid) throws ApiException {
        okhttp3.Call localVarCall = stagesAuthenticatorTotpDestroyValidateBeforeCall(stageUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * AuthenticatorTOTPStage Viewset
     * @param stageUuid A UUID string identifying this TOTP Authenticator Setup Stage. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorTotpDestroyAsync(UUID stageUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesAuthenticatorTotpDestroyValidateBeforeCall(stageUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesAuthenticatorTotpList
     * @param configureFlow  (optional)
     * @param digits  (optional)
     * @param friendlyName  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @param stageUuid  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorTotpListCall(UUID configureFlow, String digits, String friendlyName, String name, String ordering, Integer page, Integer pageSize, String search, UUID stageUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/authenticator/totp/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (configureFlow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("configure_flow", configureFlow));
        }

        if (digits != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("digits", digits));
        }

        if (friendlyName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("friendly_name", friendlyName));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (stageUuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stage_uuid", stageUuid));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesAuthenticatorTotpListValidateBeforeCall(UUID configureFlow, String digits, String friendlyName, String name, String ordering, Integer page, Integer pageSize, String search, UUID stageUuid, final ApiCallback _callback) throws ApiException {
        return stagesAuthenticatorTotpListCall(configureFlow, digits, friendlyName, name, ordering, page, pageSize, search, stageUuid, _callback);

    }

    /**
     * 
     * AuthenticatorTOTPStage Viewset
     * @param configureFlow  (optional)
     * @param digits  (optional)
     * @param friendlyName  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @param stageUuid  (optional)
     * @return PaginatedAuthenticatorTOTPStageList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedAuthenticatorTOTPStageList stagesAuthenticatorTotpList(UUID configureFlow, String digits, String friendlyName, String name, String ordering, Integer page, Integer pageSize, String search, UUID stageUuid) throws ApiException {
        ApiResponse<PaginatedAuthenticatorTOTPStageList> localVarResp = stagesAuthenticatorTotpListWithHttpInfo(configureFlow, digits, friendlyName, name, ordering, page, pageSize, search, stageUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * AuthenticatorTOTPStage Viewset
     * @param configureFlow  (optional)
     * @param digits  (optional)
     * @param friendlyName  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @param stageUuid  (optional)
     * @return ApiResponse&lt;PaginatedAuthenticatorTOTPStageList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedAuthenticatorTOTPStageList> stagesAuthenticatorTotpListWithHttpInfo(UUID configureFlow, String digits, String friendlyName, String name, String ordering, Integer page, Integer pageSize, String search, UUID stageUuid) throws ApiException {
        okhttp3.Call localVarCall = stagesAuthenticatorTotpListValidateBeforeCall(configureFlow, digits, friendlyName, name, ordering, page, pageSize, search, stageUuid, null);
        Type localVarReturnType = new TypeToken<PaginatedAuthenticatorTOTPStageList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * AuthenticatorTOTPStage Viewset
     * @param configureFlow  (optional)
     * @param digits  (optional)
     * @param friendlyName  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @param stageUuid  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorTotpListAsync(UUID configureFlow, String digits, String friendlyName, String name, String ordering, Integer page, Integer pageSize, String search, UUID stageUuid, final ApiCallback<PaginatedAuthenticatorTOTPStageList> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesAuthenticatorTotpListValidateBeforeCall(configureFlow, digits, friendlyName, name, ordering, page, pageSize, search, stageUuid, _callback);
        Type localVarReturnType = new TypeToken<PaginatedAuthenticatorTOTPStageList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesAuthenticatorTotpPartialUpdate
     * @param stageUuid A UUID string identifying this TOTP Authenticator Setup Stage. (required)
     * @param patchedAuthenticatorTOTPStageRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorTotpPartialUpdateCall(UUID stageUuid, PatchedAuthenticatorTOTPStageRequest patchedAuthenticatorTOTPStageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchedAuthenticatorTOTPStageRequest;

        // create path and map variables
        String localVarPath = "/stages/authenticator/totp/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesAuthenticatorTotpPartialUpdateValidateBeforeCall(UUID stageUuid, PatchedAuthenticatorTOTPStageRequest patchedAuthenticatorTOTPStageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesAuthenticatorTotpPartialUpdate(Async)");
        }

        return stagesAuthenticatorTotpPartialUpdateCall(stageUuid, patchedAuthenticatorTOTPStageRequest, _callback);

    }

    /**
     * 
     * AuthenticatorTOTPStage Viewset
     * @param stageUuid A UUID string identifying this TOTP Authenticator Setup Stage. (required)
     * @param patchedAuthenticatorTOTPStageRequest  (optional)
     * @return AuthenticatorTOTPStage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public AuthenticatorTOTPStage stagesAuthenticatorTotpPartialUpdate(UUID stageUuid, PatchedAuthenticatorTOTPStageRequest patchedAuthenticatorTOTPStageRequest) throws ApiException {
        ApiResponse<AuthenticatorTOTPStage> localVarResp = stagesAuthenticatorTotpPartialUpdateWithHttpInfo(stageUuid, patchedAuthenticatorTOTPStageRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * AuthenticatorTOTPStage Viewset
     * @param stageUuid A UUID string identifying this TOTP Authenticator Setup Stage. (required)
     * @param patchedAuthenticatorTOTPStageRequest  (optional)
     * @return ApiResponse&lt;AuthenticatorTOTPStage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthenticatorTOTPStage> stagesAuthenticatorTotpPartialUpdateWithHttpInfo(UUID stageUuid, PatchedAuthenticatorTOTPStageRequest patchedAuthenticatorTOTPStageRequest) throws ApiException {
        okhttp3.Call localVarCall = stagesAuthenticatorTotpPartialUpdateValidateBeforeCall(stageUuid, patchedAuthenticatorTOTPStageRequest, null);
        Type localVarReturnType = new TypeToken<AuthenticatorTOTPStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * AuthenticatorTOTPStage Viewset
     * @param stageUuid A UUID string identifying this TOTP Authenticator Setup Stage. (required)
     * @param patchedAuthenticatorTOTPStageRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorTotpPartialUpdateAsync(UUID stageUuid, PatchedAuthenticatorTOTPStageRequest patchedAuthenticatorTOTPStageRequest, final ApiCallback<AuthenticatorTOTPStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesAuthenticatorTotpPartialUpdateValidateBeforeCall(stageUuid, patchedAuthenticatorTOTPStageRequest, _callback);
        Type localVarReturnType = new TypeToken<AuthenticatorTOTPStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesAuthenticatorTotpRetrieve
     * @param stageUuid A UUID string identifying this TOTP Authenticator Setup Stage. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorTotpRetrieveCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/authenticator/totp/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesAuthenticatorTotpRetrieveValidateBeforeCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesAuthenticatorTotpRetrieve(Async)");
        }

        return stagesAuthenticatorTotpRetrieveCall(stageUuid, _callback);

    }

    /**
     * 
     * AuthenticatorTOTPStage Viewset
     * @param stageUuid A UUID string identifying this TOTP Authenticator Setup Stage. (required)
     * @return AuthenticatorTOTPStage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public AuthenticatorTOTPStage stagesAuthenticatorTotpRetrieve(UUID stageUuid) throws ApiException {
        ApiResponse<AuthenticatorTOTPStage> localVarResp = stagesAuthenticatorTotpRetrieveWithHttpInfo(stageUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * AuthenticatorTOTPStage Viewset
     * @param stageUuid A UUID string identifying this TOTP Authenticator Setup Stage. (required)
     * @return ApiResponse&lt;AuthenticatorTOTPStage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthenticatorTOTPStage> stagesAuthenticatorTotpRetrieveWithHttpInfo(UUID stageUuid) throws ApiException {
        okhttp3.Call localVarCall = stagesAuthenticatorTotpRetrieveValidateBeforeCall(stageUuid, null);
        Type localVarReturnType = new TypeToken<AuthenticatorTOTPStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * AuthenticatorTOTPStage Viewset
     * @param stageUuid A UUID string identifying this TOTP Authenticator Setup Stage. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorTotpRetrieveAsync(UUID stageUuid, final ApiCallback<AuthenticatorTOTPStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesAuthenticatorTotpRetrieveValidateBeforeCall(stageUuid, _callback);
        Type localVarReturnType = new TypeToken<AuthenticatorTOTPStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesAuthenticatorTotpUpdate
     * @param stageUuid A UUID string identifying this TOTP Authenticator Setup Stage. (required)
     * @param authenticatorTOTPStageRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorTotpUpdateCall(UUID stageUuid, AuthenticatorTOTPStageRequest authenticatorTOTPStageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authenticatorTOTPStageRequest;

        // create path and map variables
        String localVarPath = "/stages/authenticator/totp/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesAuthenticatorTotpUpdateValidateBeforeCall(UUID stageUuid, AuthenticatorTOTPStageRequest authenticatorTOTPStageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesAuthenticatorTotpUpdate(Async)");
        }

        // verify the required parameter 'authenticatorTOTPStageRequest' is set
        if (authenticatorTOTPStageRequest == null) {
            throw new ApiException("Missing the required parameter 'authenticatorTOTPStageRequest' when calling stagesAuthenticatorTotpUpdate(Async)");
        }

        return stagesAuthenticatorTotpUpdateCall(stageUuid, authenticatorTOTPStageRequest, _callback);

    }

    /**
     * 
     * AuthenticatorTOTPStage Viewset
     * @param stageUuid A UUID string identifying this TOTP Authenticator Setup Stage. (required)
     * @param authenticatorTOTPStageRequest  (required)
     * @return AuthenticatorTOTPStage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public AuthenticatorTOTPStage stagesAuthenticatorTotpUpdate(UUID stageUuid, AuthenticatorTOTPStageRequest authenticatorTOTPStageRequest) throws ApiException {
        ApiResponse<AuthenticatorTOTPStage> localVarResp = stagesAuthenticatorTotpUpdateWithHttpInfo(stageUuid, authenticatorTOTPStageRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * AuthenticatorTOTPStage Viewset
     * @param stageUuid A UUID string identifying this TOTP Authenticator Setup Stage. (required)
     * @param authenticatorTOTPStageRequest  (required)
     * @return ApiResponse&lt;AuthenticatorTOTPStage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthenticatorTOTPStage> stagesAuthenticatorTotpUpdateWithHttpInfo(UUID stageUuid, AuthenticatorTOTPStageRequest authenticatorTOTPStageRequest) throws ApiException {
        okhttp3.Call localVarCall = stagesAuthenticatorTotpUpdateValidateBeforeCall(stageUuid, authenticatorTOTPStageRequest, null);
        Type localVarReturnType = new TypeToken<AuthenticatorTOTPStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * AuthenticatorTOTPStage Viewset
     * @param stageUuid A UUID string identifying this TOTP Authenticator Setup Stage. (required)
     * @param authenticatorTOTPStageRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorTotpUpdateAsync(UUID stageUuid, AuthenticatorTOTPStageRequest authenticatorTOTPStageRequest, final ApiCallback<AuthenticatorTOTPStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesAuthenticatorTotpUpdateValidateBeforeCall(stageUuid, authenticatorTOTPStageRequest, _callback);
        Type localVarReturnType = new TypeToken<AuthenticatorTOTPStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesAuthenticatorTotpUsedByList
     * @param stageUuid A UUID string identifying this TOTP Authenticator Setup Stage. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorTotpUsedByListCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/authenticator/totp/{stage_uuid}/used_by/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesAuthenticatorTotpUsedByListValidateBeforeCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesAuthenticatorTotpUsedByList(Async)");
        }

        return stagesAuthenticatorTotpUsedByListCall(stageUuid, _callback);

    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param stageUuid A UUID string identifying this TOTP Authenticator Setup Stage. (required)
     * @return List&lt;UsedBy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<UsedBy> stagesAuthenticatorTotpUsedByList(UUID stageUuid) throws ApiException {
        ApiResponse<List<UsedBy>> localVarResp = stagesAuthenticatorTotpUsedByListWithHttpInfo(stageUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param stageUuid A UUID string identifying this TOTP Authenticator Setup Stage. (required)
     * @return ApiResponse&lt;List&lt;UsedBy&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UsedBy>> stagesAuthenticatorTotpUsedByListWithHttpInfo(UUID stageUuid) throws ApiException {
        okhttp3.Call localVarCall = stagesAuthenticatorTotpUsedByListValidateBeforeCall(stageUuid, null);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of all objects that use this object
     * @param stageUuid A UUID string identifying this TOTP Authenticator Setup Stage. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorTotpUsedByListAsync(UUID stageUuid, final ApiCallback<List<UsedBy>> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesAuthenticatorTotpUsedByListValidateBeforeCall(stageUuid, _callback);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesAuthenticatorValidateCreate
     * @param authenticatorValidateStageRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorValidateCreateCall(AuthenticatorValidateStageRequest authenticatorValidateStageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authenticatorValidateStageRequest;

        // create path and map variables
        String localVarPath = "/stages/authenticator/validate/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesAuthenticatorValidateCreateValidateBeforeCall(AuthenticatorValidateStageRequest authenticatorValidateStageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authenticatorValidateStageRequest' is set
        if (authenticatorValidateStageRequest == null) {
            throw new ApiException("Missing the required parameter 'authenticatorValidateStageRequest' when calling stagesAuthenticatorValidateCreate(Async)");
        }

        return stagesAuthenticatorValidateCreateCall(authenticatorValidateStageRequest, _callback);

    }

    /**
     * 
     * AuthenticatorValidateStage Viewset
     * @param authenticatorValidateStageRequest  (required)
     * @return AuthenticatorValidateStage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public AuthenticatorValidateStage stagesAuthenticatorValidateCreate(AuthenticatorValidateStageRequest authenticatorValidateStageRequest) throws ApiException {
        ApiResponse<AuthenticatorValidateStage> localVarResp = stagesAuthenticatorValidateCreateWithHttpInfo(authenticatorValidateStageRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * AuthenticatorValidateStage Viewset
     * @param authenticatorValidateStageRequest  (required)
     * @return ApiResponse&lt;AuthenticatorValidateStage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthenticatorValidateStage> stagesAuthenticatorValidateCreateWithHttpInfo(AuthenticatorValidateStageRequest authenticatorValidateStageRequest) throws ApiException {
        okhttp3.Call localVarCall = stagesAuthenticatorValidateCreateValidateBeforeCall(authenticatorValidateStageRequest, null);
        Type localVarReturnType = new TypeToken<AuthenticatorValidateStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * AuthenticatorValidateStage Viewset
     * @param authenticatorValidateStageRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorValidateCreateAsync(AuthenticatorValidateStageRequest authenticatorValidateStageRequest, final ApiCallback<AuthenticatorValidateStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesAuthenticatorValidateCreateValidateBeforeCall(authenticatorValidateStageRequest, _callback);
        Type localVarReturnType = new TypeToken<AuthenticatorValidateStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesAuthenticatorValidateDestroy
     * @param stageUuid A UUID string identifying this Authenticator Validation Stage. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorValidateDestroyCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/authenticator/validate/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesAuthenticatorValidateDestroyValidateBeforeCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesAuthenticatorValidateDestroy(Async)");
        }

        return stagesAuthenticatorValidateDestroyCall(stageUuid, _callback);

    }

    /**
     * 
     * AuthenticatorValidateStage Viewset
     * @param stageUuid A UUID string identifying this Authenticator Validation Stage. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void stagesAuthenticatorValidateDestroy(UUID stageUuid) throws ApiException {
        stagesAuthenticatorValidateDestroyWithHttpInfo(stageUuid);
    }

    /**
     * 
     * AuthenticatorValidateStage Viewset
     * @param stageUuid A UUID string identifying this Authenticator Validation Stage. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> stagesAuthenticatorValidateDestroyWithHttpInfo(UUID stageUuid) throws ApiException {
        okhttp3.Call localVarCall = stagesAuthenticatorValidateDestroyValidateBeforeCall(stageUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * AuthenticatorValidateStage Viewset
     * @param stageUuid A UUID string identifying this Authenticator Validation Stage. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorValidateDestroyAsync(UUID stageUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesAuthenticatorValidateDestroyValidateBeforeCall(stageUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesAuthenticatorValidateList
     * @param configurationStages  (optional)
     * @param name  (optional)
     * @param notConfiguredAction  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorValidateListCall(List<UUID> configurationStages, String name, String notConfiguredAction, String ordering, Integer page, Integer pageSize, String search, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/authenticator/validate/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (configurationStages != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "configuration_stages", configurationStages));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (notConfiguredAction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("not_configured_action", notConfiguredAction));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesAuthenticatorValidateListValidateBeforeCall(List<UUID> configurationStages, String name, String notConfiguredAction, String ordering, Integer page, Integer pageSize, String search, final ApiCallback _callback) throws ApiException {
        return stagesAuthenticatorValidateListCall(configurationStages, name, notConfiguredAction, ordering, page, pageSize, search, _callback);

    }

    /**
     * 
     * AuthenticatorValidateStage Viewset
     * @param configurationStages  (optional)
     * @param name  (optional)
     * @param notConfiguredAction  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @return PaginatedAuthenticatorValidateStageList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedAuthenticatorValidateStageList stagesAuthenticatorValidateList(List<UUID> configurationStages, String name, String notConfiguredAction, String ordering, Integer page, Integer pageSize, String search) throws ApiException {
        ApiResponse<PaginatedAuthenticatorValidateStageList> localVarResp = stagesAuthenticatorValidateListWithHttpInfo(configurationStages, name, notConfiguredAction, ordering, page, pageSize, search);
        return localVarResp.getData();
    }

    /**
     * 
     * AuthenticatorValidateStage Viewset
     * @param configurationStages  (optional)
     * @param name  (optional)
     * @param notConfiguredAction  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @return ApiResponse&lt;PaginatedAuthenticatorValidateStageList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedAuthenticatorValidateStageList> stagesAuthenticatorValidateListWithHttpInfo(List<UUID> configurationStages, String name, String notConfiguredAction, String ordering, Integer page, Integer pageSize, String search) throws ApiException {
        okhttp3.Call localVarCall = stagesAuthenticatorValidateListValidateBeforeCall(configurationStages, name, notConfiguredAction, ordering, page, pageSize, search, null);
        Type localVarReturnType = new TypeToken<PaginatedAuthenticatorValidateStageList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * AuthenticatorValidateStage Viewset
     * @param configurationStages  (optional)
     * @param name  (optional)
     * @param notConfiguredAction  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorValidateListAsync(List<UUID> configurationStages, String name, String notConfiguredAction, String ordering, Integer page, Integer pageSize, String search, final ApiCallback<PaginatedAuthenticatorValidateStageList> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesAuthenticatorValidateListValidateBeforeCall(configurationStages, name, notConfiguredAction, ordering, page, pageSize, search, _callback);
        Type localVarReturnType = new TypeToken<PaginatedAuthenticatorValidateStageList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesAuthenticatorValidatePartialUpdate
     * @param stageUuid A UUID string identifying this Authenticator Validation Stage. (required)
     * @param patchedAuthenticatorValidateStageRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorValidatePartialUpdateCall(UUID stageUuid, PatchedAuthenticatorValidateStageRequest patchedAuthenticatorValidateStageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchedAuthenticatorValidateStageRequest;

        // create path and map variables
        String localVarPath = "/stages/authenticator/validate/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesAuthenticatorValidatePartialUpdateValidateBeforeCall(UUID stageUuid, PatchedAuthenticatorValidateStageRequest patchedAuthenticatorValidateStageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesAuthenticatorValidatePartialUpdate(Async)");
        }

        return stagesAuthenticatorValidatePartialUpdateCall(stageUuid, patchedAuthenticatorValidateStageRequest, _callback);

    }

    /**
     * 
     * AuthenticatorValidateStage Viewset
     * @param stageUuid A UUID string identifying this Authenticator Validation Stage. (required)
     * @param patchedAuthenticatorValidateStageRequest  (optional)
     * @return AuthenticatorValidateStage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public AuthenticatorValidateStage stagesAuthenticatorValidatePartialUpdate(UUID stageUuid, PatchedAuthenticatorValidateStageRequest patchedAuthenticatorValidateStageRequest) throws ApiException {
        ApiResponse<AuthenticatorValidateStage> localVarResp = stagesAuthenticatorValidatePartialUpdateWithHttpInfo(stageUuid, patchedAuthenticatorValidateStageRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * AuthenticatorValidateStage Viewset
     * @param stageUuid A UUID string identifying this Authenticator Validation Stage. (required)
     * @param patchedAuthenticatorValidateStageRequest  (optional)
     * @return ApiResponse&lt;AuthenticatorValidateStage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthenticatorValidateStage> stagesAuthenticatorValidatePartialUpdateWithHttpInfo(UUID stageUuid, PatchedAuthenticatorValidateStageRequest patchedAuthenticatorValidateStageRequest) throws ApiException {
        okhttp3.Call localVarCall = stagesAuthenticatorValidatePartialUpdateValidateBeforeCall(stageUuid, patchedAuthenticatorValidateStageRequest, null);
        Type localVarReturnType = new TypeToken<AuthenticatorValidateStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * AuthenticatorValidateStage Viewset
     * @param stageUuid A UUID string identifying this Authenticator Validation Stage. (required)
     * @param patchedAuthenticatorValidateStageRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorValidatePartialUpdateAsync(UUID stageUuid, PatchedAuthenticatorValidateStageRequest patchedAuthenticatorValidateStageRequest, final ApiCallback<AuthenticatorValidateStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesAuthenticatorValidatePartialUpdateValidateBeforeCall(stageUuid, patchedAuthenticatorValidateStageRequest, _callback);
        Type localVarReturnType = new TypeToken<AuthenticatorValidateStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesAuthenticatorValidateRetrieve
     * @param stageUuid A UUID string identifying this Authenticator Validation Stage. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorValidateRetrieveCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/authenticator/validate/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesAuthenticatorValidateRetrieveValidateBeforeCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesAuthenticatorValidateRetrieve(Async)");
        }

        return stagesAuthenticatorValidateRetrieveCall(stageUuid, _callback);

    }

    /**
     * 
     * AuthenticatorValidateStage Viewset
     * @param stageUuid A UUID string identifying this Authenticator Validation Stage. (required)
     * @return AuthenticatorValidateStage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public AuthenticatorValidateStage stagesAuthenticatorValidateRetrieve(UUID stageUuid) throws ApiException {
        ApiResponse<AuthenticatorValidateStage> localVarResp = stagesAuthenticatorValidateRetrieveWithHttpInfo(stageUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * AuthenticatorValidateStage Viewset
     * @param stageUuid A UUID string identifying this Authenticator Validation Stage. (required)
     * @return ApiResponse&lt;AuthenticatorValidateStage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthenticatorValidateStage> stagesAuthenticatorValidateRetrieveWithHttpInfo(UUID stageUuid) throws ApiException {
        okhttp3.Call localVarCall = stagesAuthenticatorValidateRetrieveValidateBeforeCall(stageUuid, null);
        Type localVarReturnType = new TypeToken<AuthenticatorValidateStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * AuthenticatorValidateStage Viewset
     * @param stageUuid A UUID string identifying this Authenticator Validation Stage. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorValidateRetrieveAsync(UUID stageUuid, final ApiCallback<AuthenticatorValidateStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesAuthenticatorValidateRetrieveValidateBeforeCall(stageUuid, _callback);
        Type localVarReturnType = new TypeToken<AuthenticatorValidateStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesAuthenticatorValidateUpdate
     * @param stageUuid A UUID string identifying this Authenticator Validation Stage. (required)
     * @param authenticatorValidateStageRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorValidateUpdateCall(UUID stageUuid, AuthenticatorValidateStageRequest authenticatorValidateStageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authenticatorValidateStageRequest;

        // create path and map variables
        String localVarPath = "/stages/authenticator/validate/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesAuthenticatorValidateUpdateValidateBeforeCall(UUID stageUuid, AuthenticatorValidateStageRequest authenticatorValidateStageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesAuthenticatorValidateUpdate(Async)");
        }

        // verify the required parameter 'authenticatorValidateStageRequest' is set
        if (authenticatorValidateStageRequest == null) {
            throw new ApiException("Missing the required parameter 'authenticatorValidateStageRequest' when calling stagesAuthenticatorValidateUpdate(Async)");
        }

        return stagesAuthenticatorValidateUpdateCall(stageUuid, authenticatorValidateStageRequest, _callback);

    }

    /**
     * 
     * AuthenticatorValidateStage Viewset
     * @param stageUuid A UUID string identifying this Authenticator Validation Stage. (required)
     * @param authenticatorValidateStageRequest  (required)
     * @return AuthenticatorValidateStage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public AuthenticatorValidateStage stagesAuthenticatorValidateUpdate(UUID stageUuid, AuthenticatorValidateStageRequest authenticatorValidateStageRequest) throws ApiException {
        ApiResponse<AuthenticatorValidateStage> localVarResp = stagesAuthenticatorValidateUpdateWithHttpInfo(stageUuid, authenticatorValidateStageRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * AuthenticatorValidateStage Viewset
     * @param stageUuid A UUID string identifying this Authenticator Validation Stage. (required)
     * @param authenticatorValidateStageRequest  (required)
     * @return ApiResponse&lt;AuthenticatorValidateStage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthenticatorValidateStage> stagesAuthenticatorValidateUpdateWithHttpInfo(UUID stageUuid, AuthenticatorValidateStageRequest authenticatorValidateStageRequest) throws ApiException {
        okhttp3.Call localVarCall = stagesAuthenticatorValidateUpdateValidateBeforeCall(stageUuid, authenticatorValidateStageRequest, null);
        Type localVarReturnType = new TypeToken<AuthenticatorValidateStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * AuthenticatorValidateStage Viewset
     * @param stageUuid A UUID string identifying this Authenticator Validation Stage. (required)
     * @param authenticatorValidateStageRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorValidateUpdateAsync(UUID stageUuid, AuthenticatorValidateStageRequest authenticatorValidateStageRequest, final ApiCallback<AuthenticatorValidateStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesAuthenticatorValidateUpdateValidateBeforeCall(stageUuid, authenticatorValidateStageRequest, _callback);
        Type localVarReturnType = new TypeToken<AuthenticatorValidateStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesAuthenticatorValidateUsedByList
     * @param stageUuid A UUID string identifying this Authenticator Validation Stage. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorValidateUsedByListCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/authenticator/validate/{stage_uuid}/used_by/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesAuthenticatorValidateUsedByListValidateBeforeCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesAuthenticatorValidateUsedByList(Async)");
        }

        return stagesAuthenticatorValidateUsedByListCall(stageUuid, _callback);

    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param stageUuid A UUID string identifying this Authenticator Validation Stage. (required)
     * @return List&lt;UsedBy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<UsedBy> stagesAuthenticatorValidateUsedByList(UUID stageUuid) throws ApiException {
        ApiResponse<List<UsedBy>> localVarResp = stagesAuthenticatorValidateUsedByListWithHttpInfo(stageUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param stageUuid A UUID string identifying this Authenticator Validation Stage. (required)
     * @return ApiResponse&lt;List&lt;UsedBy&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UsedBy>> stagesAuthenticatorValidateUsedByListWithHttpInfo(UUID stageUuid) throws ApiException {
        okhttp3.Call localVarCall = stagesAuthenticatorValidateUsedByListValidateBeforeCall(stageUuid, null);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of all objects that use this object
     * @param stageUuid A UUID string identifying this Authenticator Validation Stage. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorValidateUsedByListAsync(UUID stageUuid, final ApiCallback<List<UsedBy>> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesAuthenticatorValidateUsedByListValidateBeforeCall(stageUuid, _callback);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesAuthenticatorWebauthnCreate
     * @param authenticatorWebAuthnStageRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorWebauthnCreateCall(AuthenticatorWebAuthnStageRequest authenticatorWebAuthnStageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authenticatorWebAuthnStageRequest;

        // create path and map variables
        String localVarPath = "/stages/authenticator/webauthn/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesAuthenticatorWebauthnCreateValidateBeforeCall(AuthenticatorWebAuthnStageRequest authenticatorWebAuthnStageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authenticatorWebAuthnStageRequest' is set
        if (authenticatorWebAuthnStageRequest == null) {
            throw new ApiException("Missing the required parameter 'authenticatorWebAuthnStageRequest' when calling stagesAuthenticatorWebauthnCreate(Async)");
        }

        return stagesAuthenticatorWebauthnCreateCall(authenticatorWebAuthnStageRequest, _callback);

    }

    /**
     * 
     * AuthenticatorWebAuthnStage Viewset
     * @param authenticatorWebAuthnStageRequest  (required)
     * @return AuthenticatorWebAuthnStage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public AuthenticatorWebAuthnStage stagesAuthenticatorWebauthnCreate(AuthenticatorWebAuthnStageRequest authenticatorWebAuthnStageRequest) throws ApiException {
        ApiResponse<AuthenticatorWebAuthnStage> localVarResp = stagesAuthenticatorWebauthnCreateWithHttpInfo(authenticatorWebAuthnStageRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * AuthenticatorWebAuthnStage Viewset
     * @param authenticatorWebAuthnStageRequest  (required)
     * @return ApiResponse&lt;AuthenticatorWebAuthnStage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthenticatorWebAuthnStage> stagesAuthenticatorWebauthnCreateWithHttpInfo(AuthenticatorWebAuthnStageRequest authenticatorWebAuthnStageRequest) throws ApiException {
        okhttp3.Call localVarCall = stagesAuthenticatorWebauthnCreateValidateBeforeCall(authenticatorWebAuthnStageRequest, null);
        Type localVarReturnType = new TypeToken<AuthenticatorWebAuthnStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * AuthenticatorWebAuthnStage Viewset
     * @param authenticatorWebAuthnStageRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorWebauthnCreateAsync(AuthenticatorWebAuthnStageRequest authenticatorWebAuthnStageRequest, final ApiCallback<AuthenticatorWebAuthnStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesAuthenticatorWebauthnCreateValidateBeforeCall(authenticatorWebAuthnStageRequest, _callback);
        Type localVarReturnType = new TypeToken<AuthenticatorWebAuthnStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesAuthenticatorWebauthnDestroy
     * @param stageUuid A UUID string identifying this WebAuthn Authenticator Setup Stage. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorWebauthnDestroyCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/authenticator/webauthn/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesAuthenticatorWebauthnDestroyValidateBeforeCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesAuthenticatorWebauthnDestroy(Async)");
        }

        return stagesAuthenticatorWebauthnDestroyCall(stageUuid, _callback);

    }

    /**
     * 
     * AuthenticatorWebAuthnStage Viewset
     * @param stageUuid A UUID string identifying this WebAuthn Authenticator Setup Stage. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void stagesAuthenticatorWebauthnDestroy(UUID stageUuid) throws ApiException {
        stagesAuthenticatorWebauthnDestroyWithHttpInfo(stageUuid);
    }

    /**
     * 
     * AuthenticatorWebAuthnStage Viewset
     * @param stageUuid A UUID string identifying this WebAuthn Authenticator Setup Stage. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> stagesAuthenticatorWebauthnDestroyWithHttpInfo(UUID stageUuid) throws ApiException {
        okhttp3.Call localVarCall = stagesAuthenticatorWebauthnDestroyValidateBeforeCall(stageUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * AuthenticatorWebAuthnStage Viewset
     * @param stageUuid A UUID string identifying this WebAuthn Authenticator Setup Stage. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorWebauthnDestroyAsync(UUID stageUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesAuthenticatorWebauthnDestroyValidateBeforeCall(stageUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesAuthenticatorWebauthnDeviceTypesList
     * @param aaguid  (optional)
     * @param description  (optional)
     * @param icon  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorWebauthnDeviceTypesListCall(UUID aaguid, String description, String icon, String ordering, Integer page, Integer pageSize, String search, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/authenticator/webauthn_device_types/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (aaguid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aaguid", aaguid));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (icon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("icon", icon));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesAuthenticatorWebauthnDeviceTypesListValidateBeforeCall(UUID aaguid, String description, String icon, String ordering, Integer page, Integer pageSize, String search, final ApiCallback _callback) throws ApiException {
        return stagesAuthenticatorWebauthnDeviceTypesListCall(aaguid, description, icon, ordering, page, pageSize, search, _callback);

    }

    /**
     * 
     * WebAuthnDeviceType Viewset
     * @param aaguid  (optional)
     * @param description  (optional)
     * @param icon  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @return PaginatedWebAuthnDeviceTypeList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedWebAuthnDeviceTypeList stagesAuthenticatorWebauthnDeviceTypesList(UUID aaguid, String description, String icon, String ordering, Integer page, Integer pageSize, String search) throws ApiException {
        ApiResponse<PaginatedWebAuthnDeviceTypeList> localVarResp = stagesAuthenticatorWebauthnDeviceTypesListWithHttpInfo(aaguid, description, icon, ordering, page, pageSize, search);
        return localVarResp.getData();
    }

    /**
     * 
     * WebAuthnDeviceType Viewset
     * @param aaguid  (optional)
     * @param description  (optional)
     * @param icon  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @return ApiResponse&lt;PaginatedWebAuthnDeviceTypeList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedWebAuthnDeviceTypeList> stagesAuthenticatorWebauthnDeviceTypesListWithHttpInfo(UUID aaguid, String description, String icon, String ordering, Integer page, Integer pageSize, String search) throws ApiException {
        okhttp3.Call localVarCall = stagesAuthenticatorWebauthnDeviceTypesListValidateBeforeCall(aaguid, description, icon, ordering, page, pageSize, search, null);
        Type localVarReturnType = new TypeToken<PaginatedWebAuthnDeviceTypeList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * WebAuthnDeviceType Viewset
     * @param aaguid  (optional)
     * @param description  (optional)
     * @param icon  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorWebauthnDeviceTypesListAsync(UUID aaguid, String description, String icon, String ordering, Integer page, Integer pageSize, String search, final ApiCallback<PaginatedWebAuthnDeviceTypeList> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesAuthenticatorWebauthnDeviceTypesListValidateBeforeCall(aaguid, description, icon, ordering, page, pageSize, search, _callback);
        Type localVarReturnType = new TypeToken<PaginatedWebAuthnDeviceTypeList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesAuthenticatorWebauthnDeviceTypesRetrieve
     * @param aaguid A UUID string identifying this WebAuthn Device type. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorWebauthnDeviceTypesRetrieveCall(UUID aaguid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/authenticator/webauthn_device_types/{aaguid}/"
            .replace("{" + "aaguid" + "}", localVarApiClient.escapeString(aaguid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesAuthenticatorWebauthnDeviceTypesRetrieveValidateBeforeCall(UUID aaguid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'aaguid' is set
        if (aaguid == null) {
            throw new ApiException("Missing the required parameter 'aaguid' when calling stagesAuthenticatorWebauthnDeviceTypesRetrieve(Async)");
        }

        return stagesAuthenticatorWebauthnDeviceTypesRetrieveCall(aaguid, _callback);

    }

    /**
     * 
     * WebAuthnDeviceType Viewset
     * @param aaguid A UUID string identifying this WebAuthn Device type. (required)
     * @return WebAuthnDeviceType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public WebAuthnDeviceType stagesAuthenticatorWebauthnDeviceTypesRetrieve(UUID aaguid) throws ApiException {
        ApiResponse<WebAuthnDeviceType> localVarResp = stagesAuthenticatorWebauthnDeviceTypesRetrieveWithHttpInfo(aaguid);
        return localVarResp.getData();
    }

    /**
     * 
     * WebAuthnDeviceType Viewset
     * @param aaguid A UUID string identifying this WebAuthn Device type. (required)
     * @return ApiResponse&lt;WebAuthnDeviceType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebAuthnDeviceType> stagesAuthenticatorWebauthnDeviceTypesRetrieveWithHttpInfo(UUID aaguid) throws ApiException {
        okhttp3.Call localVarCall = stagesAuthenticatorWebauthnDeviceTypesRetrieveValidateBeforeCall(aaguid, null);
        Type localVarReturnType = new TypeToken<WebAuthnDeviceType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * WebAuthnDeviceType Viewset
     * @param aaguid A UUID string identifying this WebAuthn Device type. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorWebauthnDeviceTypesRetrieveAsync(UUID aaguid, final ApiCallback<WebAuthnDeviceType> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesAuthenticatorWebauthnDeviceTypesRetrieveValidateBeforeCall(aaguid, _callback);
        Type localVarReturnType = new TypeToken<WebAuthnDeviceType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesAuthenticatorWebauthnList
     * @param authenticatorAttachment  (optional)
     * @param configureFlow  (optional)
     * @param deviceTypeRestrictions  (optional)
     * @param friendlyName  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param residentKeyRequirement  (optional)
     * @param search A search term. (optional)
     * @param stageUuid  (optional)
     * @param userVerification  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorWebauthnListCall(String authenticatorAttachment, UUID configureFlow, List<UUID> deviceTypeRestrictions, String friendlyName, String name, String ordering, Integer page, Integer pageSize, String residentKeyRequirement, String search, UUID stageUuid, String userVerification, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/authenticator/webauthn/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authenticatorAttachment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("authenticator_attachment", authenticatorAttachment));
        }

        if (configureFlow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("configure_flow", configureFlow));
        }

        if (deviceTypeRestrictions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "device_type_restrictions", deviceTypeRestrictions));
        }

        if (friendlyName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("friendly_name", friendlyName));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (residentKeyRequirement != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resident_key_requirement", residentKeyRequirement));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (stageUuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stage_uuid", stageUuid));
        }

        if (userVerification != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_verification", userVerification));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesAuthenticatorWebauthnListValidateBeforeCall(String authenticatorAttachment, UUID configureFlow, List<UUID> deviceTypeRestrictions, String friendlyName, String name, String ordering, Integer page, Integer pageSize, String residentKeyRequirement, String search, UUID stageUuid, String userVerification, final ApiCallback _callback) throws ApiException {
        return stagesAuthenticatorWebauthnListCall(authenticatorAttachment, configureFlow, deviceTypeRestrictions, friendlyName, name, ordering, page, pageSize, residentKeyRequirement, search, stageUuid, userVerification, _callback);

    }

    /**
     * 
     * AuthenticatorWebAuthnStage Viewset
     * @param authenticatorAttachment  (optional)
     * @param configureFlow  (optional)
     * @param deviceTypeRestrictions  (optional)
     * @param friendlyName  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param residentKeyRequirement  (optional)
     * @param search A search term. (optional)
     * @param stageUuid  (optional)
     * @param userVerification  (optional)
     * @return PaginatedAuthenticatorWebAuthnStageList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedAuthenticatorWebAuthnStageList stagesAuthenticatorWebauthnList(String authenticatorAttachment, UUID configureFlow, List<UUID> deviceTypeRestrictions, String friendlyName, String name, String ordering, Integer page, Integer pageSize, String residentKeyRequirement, String search, UUID stageUuid, String userVerification) throws ApiException {
        ApiResponse<PaginatedAuthenticatorWebAuthnStageList> localVarResp = stagesAuthenticatorWebauthnListWithHttpInfo(authenticatorAttachment, configureFlow, deviceTypeRestrictions, friendlyName, name, ordering, page, pageSize, residentKeyRequirement, search, stageUuid, userVerification);
        return localVarResp.getData();
    }

    /**
     * 
     * AuthenticatorWebAuthnStage Viewset
     * @param authenticatorAttachment  (optional)
     * @param configureFlow  (optional)
     * @param deviceTypeRestrictions  (optional)
     * @param friendlyName  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param residentKeyRequirement  (optional)
     * @param search A search term. (optional)
     * @param stageUuid  (optional)
     * @param userVerification  (optional)
     * @return ApiResponse&lt;PaginatedAuthenticatorWebAuthnStageList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedAuthenticatorWebAuthnStageList> stagesAuthenticatorWebauthnListWithHttpInfo(String authenticatorAttachment, UUID configureFlow, List<UUID> deviceTypeRestrictions, String friendlyName, String name, String ordering, Integer page, Integer pageSize, String residentKeyRequirement, String search, UUID stageUuid, String userVerification) throws ApiException {
        okhttp3.Call localVarCall = stagesAuthenticatorWebauthnListValidateBeforeCall(authenticatorAttachment, configureFlow, deviceTypeRestrictions, friendlyName, name, ordering, page, pageSize, residentKeyRequirement, search, stageUuid, userVerification, null);
        Type localVarReturnType = new TypeToken<PaginatedAuthenticatorWebAuthnStageList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * AuthenticatorWebAuthnStage Viewset
     * @param authenticatorAttachment  (optional)
     * @param configureFlow  (optional)
     * @param deviceTypeRestrictions  (optional)
     * @param friendlyName  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param residentKeyRequirement  (optional)
     * @param search A search term. (optional)
     * @param stageUuid  (optional)
     * @param userVerification  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorWebauthnListAsync(String authenticatorAttachment, UUID configureFlow, List<UUID> deviceTypeRestrictions, String friendlyName, String name, String ordering, Integer page, Integer pageSize, String residentKeyRequirement, String search, UUID stageUuid, String userVerification, final ApiCallback<PaginatedAuthenticatorWebAuthnStageList> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesAuthenticatorWebauthnListValidateBeforeCall(authenticatorAttachment, configureFlow, deviceTypeRestrictions, friendlyName, name, ordering, page, pageSize, residentKeyRequirement, search, stageUuid, userVerification, _callback);
        Type localVarReturnType = new TypeToken<PaginatedAuthenticatorWebAuthnStageList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesAuthenticatorWebauthnPartialUpdate
     * @param stageUuid A UUID string identifying this WebAuthn Authenticator Setup Stage. (required)
     * @param patchedAuthenticatorWebAuthnStageRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorWebauthnPartialUpdateCall(UUID stageUuid, PatchedAuthenticatorWebAuthnStageRequest patchedAuthenticatorWebAuthnStageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchedAuthenticatorWebAuthnStageRequest;

        // create path and map variables
        String localVarPath = "/stages/authenticator/webauthn/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesAuthenticatorWebauthnPartialUpdateValidateBeforeCall(UUID stageUuid, PatchedAuthenticatorWebAuthnStageRequest patchedAuthenticatorWebAuthnStageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesAuthenticatorWebauthnPartialUpdate(Async)");
        }

        return stagesAuthenticatorWebauthnPartialUpdateCall(stageUuid, patchedAuthenticatorWebAuthnStageRequest, _callback);

    }

    /**
     * 
     * AuthenticatorWebAuthnStage Viewset
     * @param stageUuid A UUID string identifying this WebAuthn Authenticator Setup Stage. (required)
     * @param patchedAuthenticatorWebAuthnStageRequest  (optional)
     * @return AuthenticatorWebAuthnStage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public AuthenticatorWebAuthnStage stagesAuthenticatorWebauthnPartialUpdate(UUID stageUuid, PatchedAuthenticatorWebAuthnStageRequest patchedAuthenticatorWebAuthnStageRequest) throws ApiException {
        ApiResponse<AuthenticatorWebAuthnStage> localVarResp = stagesAuthenticatorWebauthnPartialUpdateWithHttpInfo(stageUuid, patchedAuthenticatorWebAuthnStageRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * AuthenticatorWebAuthnStage Viewset
     * @param stageUuid A UUID string identifying this WebAuthn Authenticator Setup Stage. (required)
     * @param patchedAuthenticatorWebAuthnStageRequest  (optional)
     * @return ApiResponse&lt;AuthenticatorWebAuthnStage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthenticatorWebAuthnStage> stagesAuthenticatorWebauthnPartialUpdateWithHttpInfo(UUID stageUuid, PatchedAuthenticatorWebAuthnStageRequest patchedAuthenticatorWebAuthnStageRequest) throws ApiException {
        okhttp3.Call localVarCall = stagesAuthenticatorWebauthnPartialUpdateValidateBeforeCall(stageUuid, patchedAuthenticatorWebAuthnStageRequest, null);
        Type localVarReturnType = new TypeToken<AuthenticatorWebAuthnStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * AuthenticatorWebAuthnStage Viewset
     * @param stageUuid A UUID string identifying this WebAuthn Authenticator Setup Stage. (required)
     * @param patchedAuthenticatorWebAuthnStageRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorWebauthnPartialUpdateAsync(UUID stageUuid, PatchedAuthenticatorWebAuthnStageRequest patchedAuthenticatorWebAuthnStageRequest, final ApiCallback<AuthenticatorWebAuthnStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesAuthenticatorWebauthnPartialUpdateValidateBeforeCall(stageUuid, patchedAuthenticatorWebAuthnStageRequest, _callback);
        Type localVarReturnType = new TypeToken<AuthenticatorWebAuthnStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesAuthenticatorWebauthnRetrieve
     * @param stageUuid A UUID string identifying this WebAuthn Authenticator Setup Stage. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorWebauthnRetrieveCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/authenticator/webauthn/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesAuthenticatorWebauthnRetrieveValidateBeforeCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesAuthenticatorWebauthnRetrieve(Async)");
        }

        return stagesAuthenticatorWebauthnRetrieveCall(stageUuid, _callback);

    }

    /**
     * 
     * AuthenticatorWebAuthnStage Viewset
     * @param stageUuid A UUID string identifying this WebAuthn Authenticator Setup Stage. (required)
     * @return AuthenticatorWebAuthnStage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public AuthenticatorWebAuthnStage stagesAuthenticatorWebauthnRetrieve(UUID stageUuid) throws ApiException {
        ApiResponse<AuthenticatorWebAuthnStage> localVarResp = stagesAuthenticatorWebauthnRetrieveWithHttpInfo(stageUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * AuthenticatorWebAuthnStage Viewset
     * @param stageUuid A UUID string identifying this WebAuthn Authenticator Setup Stage. (required)
     * @return ApiResponse&lt;AuthenticatorWebAuthnStage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthenticatorWebAuthnStage> stagesAuthenticatorWebauthnRetrieveWithHttpInfo(UUID stageUuid) throws ApiException {
        okhttp3.Call localVarCall = stagesAuthenticatorWebauthnRetrieveValidateBeforeCall(stageUuid, null);
        Type localVarReturnType = new TypeToken<AuthenticatorWebAuthnStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * AuthenticatorWebAuthnStage Viewset
     * @param stageUuid A UUID string identifying this WebAuthn Authenticator Setup Stage. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorWebauthnRetrieveAsync(UUID stageUuid, final ApiCallback<AuthenticatorWebAuthnStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesAuthenticatorWebauthnRetrieveValidateBeforeCall(stageUuid, _callback);
        Type localVarReturnType = new TypeToken<AuthenticatorWebAuthnStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesAuthenticatorWebauthnUpdate
     * @param stageUuid A UUID string identifying this WebAuthn Authenticator Setup Stage. (required)
     * @param authenticatorWebAuthnStageRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorWebauthnUpdateCall(UUID stageUuid, AuthenticatorWebAuthnStageRequest authenticatorWebAuthnStageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authenticatorWebAuthnStageRequest;

        // create path and map variables
        String localVarPath = "/stages/authenticator/webauthn/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesAuthenticatorWebauthnUpdateValidateBeforeCall(UUID stageUuid, AuthenticatorWebAuthnStageRequest authenticatorWebAuthnStageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesAuthenticatorWebauthnUpdate(Async)");
        }

        // verify the required parameter 'authenticatorWebAuthnStageRequest' is set
        if (authenticatorWebAuthnStageRequest == null) {
            throw new ApiException("Missing the required parameter 'authenticatorWebAuthnStageRequest' when calling stagesAuthenticatorWebauthnUpdate(Async)");
        }

        return stagesAuthenticatorWebauthnUpdateCall(stageUuid, authenticatorWebAuthnStageRequest, _callback);

    }

    /**
     * 
     * AuthenticatorWebAuthnStage Viewset
     * @param stageUuid A UUID string identifying this WebAuthn Authenticator Setup Stage. (required)
     * @param authenticatorWebAuthnStageRequest  (required)
     * @return AuthenticatorWebAuthnStage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public AuthenticatorWebAuthnStage stagesAuthenticatorWebauthnUpdate(UUID stageUuid, AuthenticatorWebAuthnStageRequest authenticatorWebAuthnStageRequest) throws ApiException {
        ApiResponse<AuthenticatorWebAuthnStage> localVarResp = stagesAuthenticatorWebauthnUpdateWithHttpInfo(stageUuid, authenticatorWebAuthnStageRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * AuthenticatorWebAuthnStage Viewset
     * @param stageUuid A UUID string identifying this WebAuthn Authenticator Setup Stage. (required)
     * @param authenticatorWebAuthnStageRequest  (required)
     * @return ApiResponse&lt;AuthenticatorWebAuthnStage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthenticatorWebAuthnStage> stagesAuthenticatorWebauthnUpdateWithHttpInfo(UUID stageUuid, AuthenticatorWebAuthnStageRequest authenticatorWebAuthnStageRequest) throws ApiException {
        okhttp3.Call localVarCall = stagesAuthenticatorWebauthnUpdateValidateBeforeCall(stageUuid, authenticatorWebAuthnStageRequest, null);
        Type localVarReturnType = new TypeToken<AuthenticatorWebAuthnStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * AuthenticatorWebAuthnStage Viewset
     * @param stageUuid A UUID string identifying this WebAuthn Authenticator Setup Stage. (required)
     * @param authenticatorWebAuthnStageRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorWebauthnUpdateAsync(UUID stageUuid, AuthenticatorWebAuthnStageRequest authenticatorWebAuthnStageRequest, final ApiCallback<AuthenticatorWebAuthnStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesAuthenticatorWebauthnUpdateValidateBeforeCall(stageUuid, authenticatorWebAuthnStageRequest, _callback);
        Type localVarReturnType = new TypeToken<AuthenticatorWebAuthnStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesAuthenticatorWebauthnUsedByList
     * @param stageUuid A UUID string identifying this WebAuthn Authenticator Setup Stage. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorWebauthnUsedByListCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/authenticator/webauthn/{stage_uuid}/used_by/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesAuthenticatorWebauthnUsedByListValidateBeforeCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesAuthenticatorWebauthnUsedByList(Async)");
        }

        return stagesAuthenticatorWebauthnUsedByListCall(stageUuid, _callback);

    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param stageUuid A UUID string identifying this WebAuthn Authenticator Setup Stage. (required)
     * @return List&lt;UsedBy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<UsedBy> stagesAuthenticatorWebauthnUsedByList(UUID stageUuid) throws ApiException {
        ApiResponse<List<UsedBy>> localVarResp = stagesAuthenticatorWebauthnUsedByListWithHttpInfo(stageUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param stageUuid A UUID string identifying this WebAuthn Authenticator Setup Stage. (required)
     * @return ApiResponse&lt;List&lt;UsedBy&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UsedBy>> stagesAuthenticatorWebauthnUsedByListWithHttpInfo(UUID stageUuid) throws ApiException {
        okhttp3.Call localVarCall = stagesAuthenticatorWebauthnUsedByListValidateBeforeCall(stageUuid, null);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of all objects that use this object
     * @param stageUuid A UUID string identifying this WebAuthn Authenticator Setup Stage. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesAuthenticatorWebauthnUsedByListAsync(UUID stageUuid, final ApiCallback<List<UsedBy>> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesAuthenticatorWebauthnUsedByListValidateBeforeCall(stageUuid, _callback);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesCaptchaCreate
     * @param captchaStageRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesCaptchaCreateCall(CaptchaStageRequest captchaStageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = captchaStageRequest;

        // create path and map variables
        String localVarPath = "/stages/captcha/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesCaptchaCreateValidateBeforeCall(CaptchaStageRequest captchaStageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'captchaStageRequest' is set
        if (captchaStageRequest == null) {
            throw new ApiException("Missing the required parameter 'captchaStageRequest' when calling stagesCaptchaCreate(Async)");
        }

        return stagesCaptchaCreateCall(captchaStageRequest, _callback);

    }

    /**
     * 
     * CaptchaStage Viewset
     * @param captchaStageRequest  (required)
     * @return CaptchaStage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CaptchaStage stagesCaptchaCreate(CaptchaStageRequest captchaStageRequest) throws ApiException {
        ApiResponse<CaptchaStage> localVarResp = stagesCaptchaCreateWithHttpInfo(captchaStageRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * CaptchaStage Viewset
     * @param captchaStageRequest  (required)
     * @return ApiResponse&lt;CaptchaStage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CaptchaStage> stagesCaptchaCreateWithHttpInfo(CaptchaStageRequest captchaStageRequest) throws ApiException {
        okhttp3.Call localVarCall = stagesCaptchaCreateValidateBeforeCall(captchaStageRequest, null);
        Type localVarReturnType = new TypeToken<CaptchaStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * CaptchaStage Viewset
     * @param captchaStageRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesCaptchaCreateAsync(CaptchaStageRequest captchaStageRequest, final ApiCallback<CaptchaStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesCaptchaCreateValidateBeforeCall(captchaStageRequest, _callback);
        Type localVarReturnType = new TypeToken<CaptchaStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesCaptchaDestroy
     * @param stageUuid A UUID string identifying this Captcha Stage. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesCaptchaDestroyCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/captcha/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesCaptchaDestroyValidateBeforeCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesCaptchaDestroy(Async)");
        }

        return stagesCaptchaDestroyCall(stageUuid, _callback);

    }

    /**
     * 
     * CaptchaStage Viewset
     * @param stageUuid A UUID string identifying this Captcha Stage. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void stagesCaptchaDestroy(UUID stageUuid) throws ApiException {
        stagesCaptchaDestroyWithHttpInfo(stageUuid);
    }

    /**
     * 
     * CaptchaStage Viewset
     * @param stageUuid A UUID string identifying this Captcha Stage. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> stagesCaptchaDestroyWithHttpInfo(UUID stageUuid) throws ApiException {
        okhttp3.Call localVarCall = stagesCaptchaDestroyValidateBeforeCall(stageUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * CaptchaStage Viewset
     * @param stageUuid A UUID string identifying this Captcha Stage. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesCaptchaDestroyAsync(UUID stageUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesCaptchaDestroyValidateBeforeCall(stageUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesCaptchaList
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param publicKey  (optional)
     * @param search A search term. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesCaptchaListCall(String name, String ordering, Integer page, Integer pageSize, String publicKey, String search, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/captcha/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (publicKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("public_key", publicKey));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesCaptchaListValidateBeforeCall(String name, String ordering, Integer page, Integer pageSize, String publicKey, String search, final ApiCallback _callback) throws ApiException {
        return stagesCaptchaListCall(name, ordering, page, pageSize, publicKey, search, _callback);

    }

    /**
     * 
     * CaptchaStage Viewset
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param publicKey  (optional)
     * @param search A search term. (optional)
     * @return PaginatedCaptchaStageList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedCaptchaStageList stagesCaptchaList(String name, String ordering, Integer page, Integer pageSize, String publicKey, String search) throws ApiException {
        ApiResponse<PaginatedCaptchaStageList> localVarResp = stagesCaptchaListWithHttpInfo(name, ordering, page, pageSize, publicKey, search);
        return localVarResp.getData();
    }

    /**
     * 
     * CaptchaStage Viewset
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param publicKey  (optional)
     * @param search A search term. (optional)
     * @return ApiResponse&lt;PaginatedCaptchaStageList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedCaptchaStageList> stagesCaptchaListWithHttpInfo(String name, String ordering, Integer page, Integer pageSize, String publicKey, String search) throws ApiException {
        okhttp3.Call localVarCall = stagesCaptchaListValidateBeforeCall(name, ordering, page, pageSize, publicKey, search, null);
        Type localVarReturnType = new TypeToken<PaginatedCaptchaStageList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * CaptchaStage Viewset
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param publicKey  (optional)
     * @param search A search term. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesCaptchaListAsync(String name, String ordering, Integer page, Integer pageSize, String publicKey, String search, final ApiCallback<PaginatedCaptchaStageList> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesCaptchaListValidateBeforeCall(name, ordering, page, pageSize, publicKey, search, _callback);
        Type localVarReturnType = new TypeToken<PaginatedCaptchaStageList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesCaptchaPartialUpdate
     * @param stageUuid A UUID string identifying this Captcha Stage. (required)
     * @param patchedCaptchaStageRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesCaptchaPartialUpdateCall(UUID stageUuid, PatchedCaptchaStageRequest patchedCaptchaStageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchedCaptchaStageRequest;

        // create path and map variables
        String localVarPath = "/stages/captcha/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesCaptchaPartialUpdateValidateBeforeCall(UUID stageUuid, PatchedCaptchaStageRequest patchedCaptchaStageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesCaptchaPartialUpdate(Async)");
        }

        return stagesCaptchaPartialUpdateCall(stageUuid, patchedCaptchaStageRequest, _callback);

    }

    /**
     * 
     * CaptchaStage Viewset
     * @param stageUuid A UUID string identifying this Captcha Stage. (required)
     * @param patchedCaptchaStageRequest  (optional)
     * @return CaptchaStage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CaptchaStage stagesCaptchaPartialUpdate(UUID stageUuid, PatchedCaptchaStageRequest patchedCaptchaStageRequest) throws ApiException {
        ApiResponse<CaptchaStage> localVarResp = stagesCaptchaPartialUpdateWithHttpInfo(stageUuid, patchedCaptchaStageRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * CaptchaStage Viewset
     * @param stageUuid A UUID string identifying this Captcha Stage. (required)
     * @param patchedCaptchaStageRequest  (optional)
     * @return ApiResponse&lt;CaptchaStage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CaptchaStage> stagesCaptchaPartialUpdateWithHttpInfo(UUID stageUuid, PatchedCaptchaStageRequest patchedCaptchaStageRequest) throws ApiException {
        okhttp3.Call localVarCall = stagesCaptchaPartialUpdateValidateBeforeCall(stageUuid, patchedCaptchaStageRequest, null);
        Type localVarReturnType = new TypeToken<CaptchaStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * CaptchaStage Viewset
     * @param stageUuid A UUID string identifying this Captcha Stage. (required)
     * @param patchedCaptchaStageRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesCaptchaPartialUpdateAsync(UUID stageUuid, PatchedCaptchaStageRequest patchedCaptchaStageRequest, final ApiCallback<CaptchaStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesCaptchaPartialUpdateValidateBeforeCall(stageUuid, patchedCaptchaStageRequest, _callback);
        Type localVarReturnType = new TypeToken<CaptchaStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesCaptchaRetrieve
     * @param stageUuid A UUID string identifying this Captcha Stage. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesCaptchaRetrieveCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/captcha/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesCaptchaRetrieveValidateBeforeCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesCaptchaRetrieve(Async)");
        }

        return stagesCaptchaRetrieveCall(stageUuid, _callback);

    }

    /**
     * 
     * CaptchaStage Viewset
     * @param stageUuid A UUID string identifying this Captcha Stage. (required)
     * @return CaptchaStage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CaptchaStage stagesCaptchaRetrieve(UUID stageUuid) throws ApiException {
        ApiResponse<CaptchaStage> localVarResp = stagesCaptchaRetrieveWithHttpInfo(stageUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * CaptchaStage Viewset
     * @param stageUuid A UUID string identifying this Captcha Stage. (required)
     * @return ApiResponse&lt;CaptchaStage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CaptchaStage> stagesCaptchaRetrieveWithHttpInfo(UUID stageUuid) throws ApiException {
        okhttp3.Call localVarCall = stagesCaptchaRetrieveValidateBeforeCall(stageUuid, null);
        Type localVarReturnType = new TypeToken<CaptchaStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * CaptchaStage Viewset
     * @param stageUuid A UUID string identifying this Captcha Stage. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesCaptchaRetrieveAsync(UUID stageUuid, final ApiCallback<CaptchaStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesCaptchaRetrieveValidateBeforeCall(stageUuid, _callback);
        Type localVarReturnType = new TypeToken<CaptchaStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesCaptchaUpdate
     * @param stageUuid A UUID string identifying this Captcha Stage. (required)
     * @param captchaStageRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesCaptchaUpdateCall(UUID stageUuid, CaptchaStageRequest captchaStageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = captchaStageRequest;

        // create path and map variables
        String localVarPath = "/stages/captcha/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesCaptchaUpdateValidateBeforeCall(UUID stageUuid, CaptchaStageRequest captchaStageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesCaptchaUpdate(Async)");
        }

        // verify the required parameter 'captchaStageRequest' is set
        if (captchaStageRequest == null) {
            throw new ApiException("Missing the required parameter 'captchaStageRequest' when calling stagesCaptchaUpdate(Async)");
        }

        return stagesCaptchaUpdateCall(stageUuid, captchaStageRequest, _callback);

    }

    /**
     * 
     * CaptchaStage Viewset
     * @param stageUuid A UUID string identifying this Captcha Stage. (required)
     * @param captchaStageRequest  (required)
     * @return CaptchaStage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CaptchaStage stagesCaptchaUpdate(UUID stageUuid, CaptchaStageRequest captchaStageRequest) throws ApiException {
        ApiResponse<CaptchaStage> localVarResp = stagesCaptchaUpdateWithHttpInfo(stageUuid, captchaStageRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * CaptchaStage Viewset
     * @param stageUuid A UUID string identifying this Captcha Stage. (required)
     * @param captchaStageRequest  (required)
     * @return ApiResponse&lt;CaptchaStage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CaptchaStage> stagesCaptchaUpdateWithHttpInfo(UUID stageUuid, CaptchaStageRequest captchaStageRequest) throws ApiException {
        okhttp3.Call localVarCall = stagesCaptchaUpdateValidateBeforeCall(stageUuid, captchaStageRequest, null);
        Type localVarReturnType = new TypeToken<CaptchaStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * CaptchaStage Viewset
     * @param stageUuid A UUID string identifying this Captcha Stage. (required)
     * @param captchaStageRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesCaptchaUpdateAsync(UUID stageUuid, CaptchaStageRequest captchaStageRequest, final ApiCallback<CaptchaStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesCaptchaUpdateValidateBeforeCall(stageUuid, captchaStageRequest, _callback);
        Type localVarReturnType = new TypeToken<CaptchaStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesCaptchaUsedByList
     * @param stageUuid A UUID string identifying this Captcha Stage. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesCaptchaUsedByListCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/captcha/{stage_uuid}/used_by/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesCaptchaUsedByListValidateBeforeCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesCaptchaUsedByList(Async)");
        }

        return stagesCaptchaUsedByListCall(stageUuid, _callback);

    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param stageUuid A UUID string identifying this Captcha Stage. (required)
     * @return List&lt;UsedBy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<UsedBy> stagesCaptchaUsedByList(UUID stageUuid) throws ApiException {
        ApiResponse<List<UsedBy>> localVarResp = stagesCaptchaUsedByListWithHttpInfo(stageUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param stageUuid A UUID string identifying this Captcha Stage. (required)
     * @return ApiResponse&lt;List&lt;UsedBy&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UsedBy>> stagesCaptchaUsedByListWithHttpInfo(UUID stageUuid) throws ApiException {
        okhttp3.Call localVarCall = stagesCaptchaUsedByListValidateBeforeCall(stageUuid, null);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of all objects that use this object
     * @param stageUuid A UUID string identifying this Captcha Stage. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesCaptchaUsedByListAsync(UUID stageUuid, final ApiCallback<List<UsedBy>> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesCaptchaUsedByListValidateBeforeCall(stageUuid, _callback);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesConsentCreate
     * @param consentStageRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesConsentCreateCall(ConsentStageRequest consentStageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = consentStageRequest;

        // create path and map variables
        String localVarPath = "/stages/consent/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesConsentCreateValidateBeforeCall(ConsentStageRequest consentStageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'consentStageRequest' is set
        if (consentStageRequest == null) {
            throw new ApiException("Missing the required parameter 'consentStageRequest' when calling stagesConsentCreate(Async)");
        }

        return stagesConsentCreateCall(consentStageRequest, _callback);

    }

    /**
     * 
     * ConsentStage Viewset
     * @param consentStageRequest  (required)
     * @return ConsentStage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsentStage stagesConsentCreate(ConsentStageRequest consentStageRequest) throws ApiException {
        ApiResponse<ConsentStage> localVarResp = stagesConsentCreateWithHttpInfo(consentStageRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * ConsentStage Viewset
     * @param consentStageRequest  (required)
     * @return ApiResponse&lt;ConsentStage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsentStage> stagesConsentCreateWithHttpInfo(ConsentStageRequest consentStageRequest) throws ApiException {
        okhttp3.Call localVarCall = stagesConsentCreateValidateBeforeCall(consentStageRequest, null);
        Type localVarReturnType = new TypeToken<ConsentStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ConsentStage Viewset
     * @param consentStageRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesConsentCreateAsync(ConsentStageRequest consentStageRequest, final ApiCallback<ConsentStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesConsentCreateValidateBeforeCall(consentStageRequest, _callback);
        Type localVarReturnType = new TypeToken<ConsentStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesConsentDestroy
     * @param stageUuid A UUID string identifying this Consent Stage. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesConsentDestroyCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/consent/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesConsentDestroyValidateBeforeCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesConsentDestroy(Async)");
        }

        return stagesConsentDestroyCall(stageUuid, _callback);

    }

    /**
     * 
     * ConsentStage Viewset
     * @param stageUuid A UUID string identifying this Consent Stage. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void stagesConsentDestroy(UUID stageUuid) throws ApiException {
        stagesConsentDestroyWithHttpInfo(stageUuid);
    }

    /**
     * 
     * ConsentStage Viewset
     * @param stageUuid A UUID string identifying this Consent Stage. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> stagesConsentDestroyWithHttpInfo(UUID stageUuid) throws ApiException {
        okhttp3.Call localVarCall = stagesConsentDestroyValidateBeforeCall(stageUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * ConsentStage Viewset
     * @param stageUuid A UUID string identifying this Consent Stage. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesConsentDestroyAsync(UUID stageUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesConsentDestroyValidateBeforeCall(stageUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesConsentList
     * @param consentExpireIn  (optional)
     * @param mode  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @param stageUuid  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesConsentListCall(String consentExpireIn, String mode, String name, String ordering, Integer page, Integer pageSize, String search, UUID stageUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/consent/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (consentExpireIn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("consent_expire_in", consentExpireIn));
        }

        if (mode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mode", mode));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (stageUuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stage_uuid", stageUuid));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesConsentListValidateBeforeCall(String consentExpireIn, String mode, String name, String ordering, Integer page, Integer pageSize, String search, UUID stageUuid, final ApiCallback _callback) throws ApiException {
        return stagesConsentListCall(consentExpireIn, mode, name, ordering, page, pageSize, search, stageUuid, _callback);

    }

    /**
     * 
     * ConsentStage Viewset
     * @param consentExpireIn  (optional)
     * @param mode  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @param stageUuid  (optional)
     * @return PaginatedConsentStageList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedConsentStageList stagesConsentList(String consentExpireIn, String mode, String name, String ordering, Integer page, Integer pageSize, String search, UUID stageUuid) throws ApiException {
        ApiResponse<PaginatedConsentStageList> localVarResp = stagesConsentListWithHttpInfo(consentExpireIn, mode, name, ordering, page, pageSize, search, stageUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * ConsentStage Viewset
     * @param consentExpireIn  (optional)
     * @param mode  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @param stageUuid  (optional)
     * @return ApiResponse&lt;PaginatedConsentStageList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedConsentStageList> stagesConsentListWithHttpInfo(String consentExpireIn, String mode, String name, String ordering, Integer page, Integer pageSize, String search, UUID stageUuid) throws ApiException {
        okhttp3.Call localVarCall = stagesConsentListValidateBeforeCall(consentExpireIn, mode, name, ordering, page, pageSize, search, stageUuid, null);
        Type localVarReturnType = new TypeToken<PaginatedConsentStageList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ConsentStage Viewset
     * @param consentExpireIn  (optional)
     * @param mode  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @param stageUuid  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesConsentListAsync(String consentExpireIn, String mode, String name, String ordering, Integer page, Integer pageSize, String search, UUID stageUuid, final ApiCallback<PaginatedConsentStageList> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesConsentListValidateBeforeCall(consentExpireIn, mode, name, ordering, page, pageSize, search, stageUuid, _callback);
        Type localVarReturnType = new TypeToken<PaginatedConsentStageList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesConsentPartialUpdate
     * @param stageUuid A UUID string identifying this Consent Stage. (required)
     * @param patchedConsentStageRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesConsentPartialUpdateCall(UUID stageUuid, PatchedConsentStageRequest patchedConsentStageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchedConsentStageRequest;

        // create path and map variables
        String localVarPath = "/stages/consent/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesConsentPartialUpdateValidateBeforeCall(UUID stageUuid, PatchedConsentStageRequest patchedConsentStageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesConsentPartialUpdate(Async)");
        }

        return stagesConsentPartialUpdateCall(stageUuid, patchedConsentStageRequest, _callback);

    }

    /**
     * 
     * ConsentStage Viewset
     * @param stageUuid A UUID string identifying this Consent Stage. (required)
     * @param patchedConsentStageRequest  (optional)
     * @return ConsentStage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsentStage stagesConsentPartialUpdate(UUID stageUuid, PatchedConsentStageRequest patchedConsentStageRequest) throws ApiException {
        ApiResponse<ConsentStage> localVarResp = stagesConsentPartialUpdateWithHttpInfo(stageUuid, patchedConsentStageRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * ConsentStage Viewset
     * @param stageUuid A UUID string identifying this Consent Stage. (required)
     * @param patchedConsentStageRequest  (optional)
     * @return ApiResponse&lt;ConsentStage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsentStage> stagesConsentPartialUpdateWithHttpInfo(UUID stageUuid, PatchedConsentStageRequest patchedConsentStageRequest) throws ApiException {
        okhttp3.Call localVarCall = stagesConsentPartialUpdateValidateBeforeCall(stageUuid, patchedConsentStageRequest, null);
        Type localVarReturnType = new TypeToken<ConsentStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ConsentStage Viewset
     * @param stageUuid A UUID string identifying this Consent Stage. (required)
     * @param patchedConsentStageRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesConsentPartialUpdateAsync(UUID stageUuid, PatchedConsentStageRequest patchedConsentStageRequest, final ApiCallback<ConsentStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesConsentPartialUpdateValidateBeforeCall(stageUuid, patchedConsentStageRequest, _callback);
        Type localVarReturnType = new TypeToken<ConsentStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesConsentRetrieve
     * @param stageUuid A UUID string identifying this Consent Stage. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesConsentRetrieveCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/consent/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesConsentRetrieveValidateBeforeCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesConsentRetrieve(Async)");
        }

        return stagesConsentRetrieveCall(stageUuid, _callback);

    }

    /**
     * 
     * ConsentStage Viewset
     * @param stageUuid A UUID string identifying this Consent Stage. (required)
     * @return ConsentStage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsentStage stagesConsentRetrieve(UUID stageUuid) throws ApiException {
        ApiResponse<ConsentStage> localVarResp = stagesConsentRetrieveWithHttpInfo(stageUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * ConsentStage Viewset
     * @param stageUuid A UUID string identifying this Consent Stage. (required)
     * @return ApiResponse&lt;ConsentStage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsentStage> stagesConsentRetrieveWithHttpInfo(UUID stageUuid) throws ApiException {
        okhttp3.Call localVarCall = stagesConsentRetrieveValidateBeforeCall(stageUuid, null);
        Type localVarReturnType = new TypeToken<ConsentStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ConsentStage Viewset
     * @param stageUuid A UUID string identifying this Consent Stage. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesConsentRetrieveAsync(UUID stageUuid, final ApiCallback<ConsentStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesConsentRetrieveValidateBeforeCall(stageUuid, _callback);
        Type localVarReturnType = new TypeToken<ConsentStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesConsentUpdate
     * @param stageUuid A UUID string identifying this Consent Stage. (required)
     * @param consentStageRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesConsentUpdateCall(UUID stageUuid, ConsentStageRequest consentStageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = consentStageRequest;

        // create path and map variables
        String localVarPath = "/stages/consent/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesConsentUpdateValidateBeforeCall(UUID stageUuid, ConsentStageRequest consentStageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesConsentUpdate(Async)");
        }

        // verify the required parameter 'consentStageRequest' is set
        if (consentStageRequest == null) {
            throw new ApiException("Missing the required parameter 'consentStageRequest' when calling stagesConsentUpdate(Async)");
        }

        return stagesConsentUpdateCall(stageUuid, consentStageRequest, _callback);

    }

    /**
     * 
     * ConsentStage Viewset
     * @param stageUuid A UUID string identifying this Consent Stage. (required)
     * @param consentStageRequest  (required)
     * @return ConsentStage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConsentStage stagesConsentUpdate(UUID stageUuid, ConsentStageRequest consentStageRequest) throws ApiException {
        ApiResponse<ConsentStage> localVarResp = stagesConsentUpdateWithHttpInfo(stageUuid, consentStageRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * ConsentStage Viewset
     * @param stageUuid A UUID string identifying this Consent Stage. (required)
     * @param consentStageRequest  (required)
     * @return ApiResponse&lt;ConsentStage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsentStage> stagesConsentUpdateWithHttpInfo(UUID stageUuid, ConsentStageRequest consentStageRequest) throws ApiException {
        okhttp3.Call localVarCall = stagesConsentUpdateValidateBeforeCall(stageUuid, consentStageRequest, null);
        Type localVarReturnType = new TypeToken<ConsentStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ConsentStage Viewset
     * @param stageUuid A UUID string identifying this Consent Stage. (required)
     * @param consentStageRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesConsentUpdateAsync(UUID stageUuid, ConsentStageRequest consentStageRequest, final ApiCallback<ConsentStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesConsentUpdateValidateBeforeCall(stageUuid, consentStageRequest, _callback);
        Type localVarReturnType = new TypeToken<ConsentStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesConsentUsedByList
     * @param stageUuid A UUID string identifying this Consent Stage. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesConsentUsedByListCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/consent/{stage_uuid}/used_by/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesConsentUsedByListValidateBeforeCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesConsentUsedByList(Async)");
        }

        return stagesConsentUsedByListCall(stageUuid, _callback);

    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param stageUuid A UUID string identifying this Consent Stage. (required)
     * @return List&lt;UsedBy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<UsedBy> stagesConsentUsedByList(UUID stageUuid) throws ApiException {
        ApiResponse<List<UsedBy>> localVarResp = stagesConsentUsedByListWithHttpInfo(stageUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param stageUuid A UUID string identifying this Consent Stage. (required)
     * @return ApiResponse&lt;List&lt;UsedBy&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UsedBy>> stagesConsentUsedByListWithHttpInfo(UUID stageUuid) throws ApiException {
        okhttp3.Call localVarCall = stagesConsentUsedByListValidateBeforeCall(stageUuid, null);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of all objects that use this object
     * @param stageUuid A UUID string identifying this Consent Stage. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesConsentUsedByListAsync(UUID stageUuid, final ApiCallback<List<UsedBy>> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesConsentUsedByListValidateBeforeCall(stageUuid, _callback);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesDenyCreate
     * @param denyStageRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesDenyCreateCall(DenyStageRequest denyStageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = denyStageRequest;

        // create path and map variables
        String localVarPath = "/stages/deny/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesDenyCreateValidateBeforeCall(DenyStageRequest denyStageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'denyStageRequest' is set
        if (denyStageRequest == null) {
            throw new ApiException("Missing the required parameter 'denyStageRequest' when calling stagesDenyCreate(Async)");
        }

        return stagesDenyCreateCall(denyStageRequest, _callback);

    }

    /**
     * 
     * DenyStage Viewset
     * @param denyStageRequest  (required)
     * @return DenyStage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DenyStage stagesDenyCreate(DenyStageRequest denyStageRequest) throws ApiException {
        ApiResponse<DenyStage> localVarResp = stagesDenyCreateWithHttpInfo(denyStageRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * DenyStage Viewset
     * @param denyStageRequest  (required)
     * @return ApiResponse&lt;DenyStage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DenyStage> stagesDenyCreateWithHttpInfo(DenyStageRequest denyStageRequest) throws ApiException {
        okhttp3.Call localVarCall = stagesDenyCreateValidateBeforeCall(denyStageRequest, null);
        Type localVarReturnType = new TypeToken<DenyStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * DenyStage Viewset
     * @param denyStageRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesDenyCreateAsync(DenyStageRequest denyStageRequest, final ApiCallback<DenyStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesDenyCreateValidateBeforeCall(denyStageRequest, _callback);
        Type localVarReturnType = new TypeToken<DenyStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesDenyDestroy
     * @param stageUuid A UUID string identifying this Deny Stage. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesDenyDestroyCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/deny/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesDenyDestroyValidateBeforeCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesDenyDestroy(Async)");
        }

        return stagesDenyDestroyCall(stageUuid, _callback);

    }

    /**
     * 
     * DenyStage Viewset
     * @param stageUuid A UUID string identifying this Deny Stage. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void stagesDenyDestroy(UUID stageUuid) throws ApiException {
        stagesDenyDestroyWithHttpInfo(stageUuid);
    }

    /**
     * 
     * DenyStage Viewset
     * @param stageUuid A UUID string identifying this Deny Stage. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> stagesDenyDestroyWithHttpInfo(UUID stageUuid) throws ApiException {
        okhttp3.Call localVarCall = stagesDenyDestroyValidateBeforeCall(stageUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * DenyStage Viewset
     * @param stageUuid A UUID string identifying this Deny Stage. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesDenyDestroyAsync(UUID stageUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesDenyDestroyValidateBeforeCall(stageUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesDenyList
     * @param denyMessage  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @param stageUuid  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesDenyListCall(String denyMessage, String name, String ordering, Integer page, Integer pageSize, String search, UUID stageUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/deny/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (denyMessage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deny_message", denyMessage));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (stageUuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stage_uuid", stageUuid));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesDenyListValidateBeforeCall(String denyMessage, String name, String ordering, Integer page, Integer pageSize, String search, UUID stageUuid, final ApiCallback _callback) throws ApiException {
        return stagesDenyListCall(denyMessage, name, ordering, page, pageSize, search, stageUuid, _callback);

    }

    /**
     * 
     * DenyStage Viewset
     * @param denyMessage  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @param stageUuid  (optional)
     * @return PaginatedDenyStageList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedDenyStageList stagesDenyList(String denyMessage, String name, String ordering, Integer page, Integer pageSize, String search, UUID stageUuid) throws ApiException {
        ApiResponse<PaginatedDenyStageList> localVarResp = stagesDenyListWithHttpInfo(denyMessage, name, ordering, page, pageSize, search, stageUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * DenyStage Viewset
     * @param denyMessage  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @param stageUuid  (optional)
     * @return ApiResponse&lt;PaginatedDenyStageList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedDenyStageList> stagesDenyListWithHttpInfo(String denyMessage, String name, String ordering, Integer page, Integer pageSize, String search, UUID stageUuid) throws ApiException {
        okhttp3.Call localVarCall = stagesDenyListValidateBeforeCall(denyMessage, name, ordering, page, pageSize, search, stageUuid, null);
        Type localVarReturnType = new TypeToken<PaginatedDenyStageList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * DenyStage Viewset
     * @param denyMessage  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @param stageUuid  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesDenyListAsync(String denyMessage, String name, String ordering, Integer page, Integer pageSize, String search, UUID stageUuid, final ApiCallback<PaginatedDenyStageList> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesDenyListValidateBeforeCall(denyMessage, name, ordering, page, pageSize, search, stageUuid, _callback);
        Type localVarReturnType = new TypeToken<PaginatedDenyStageList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesDenyPartialUpdate
     * @param stageUuid A UUID string identifying this Deny Stage. (required)
     * @param patchedDenyStageRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesDenyPartialUpdateCall(UUID stageUuid, PatchedDenyStageRequest patchedDenyStageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchedDenyStageRequest;

        // create path and map variables
        String localVarPath = "/stages/deny/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesDenyPartialUpdateValidateBeforeCall(UUID stageUuid, PatchedDenyStageRequest patchedDenyStageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesDenyPartialUpdate(Async)");
        }

        return stagesDenyPartialUpdateCall(stageUuid, patchedDenyStageRequest, _callback);

    }

    /**
     * 
     * DenyStage Viewset
     * @param stageUuid A UUID string identifying this Deny Stage. (required)
     * @param patchedDenyStageRequest  (optional)
     * @return DenyStage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DenyStage stagesDenyPartialUpdate(UUID stageUuid, PatchedDenyStageRequest patchedDenyStageRequest) throws ApiException {
        ApiResponse<DenyStage> localVarResp = stagesDenyPartialUpdateWithHttpInfo(stageUuid, patchedDenyStageRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * DenyStage Viewset
     * @param stageUuid A UUID string identifying this Deny Stage. (required)
     * @param patchedDenyStageRequest  (optional)
     * @return ApiResponse&lt;DenyStage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DenyStage> stagesDenyPartialUpdateWithHttpInfo(UUID stageUuid, PatchedDenyStageRequest patchedDenyStageRequest) throws ApiException {
        okhttp3.Call localVarCall = stagesDenyPartialUpdateValidateBeforeCall(stageUuid, patchedDenyStageRequest, null);
        Type localVarReturnType = new TypeToken<DenyStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * DenyStage Viewset
     * @param stageUuid A UUID string identifying this Deny Stage. (required)
     * @param patchedDenyStageRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesDenyPartialUpdateAsync(UUID stageUuid, PatchedDenyStageRequest patchedDenyStageRequest, final ApiCallback<DenyStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesDenyPartialUpdateValidateBeforeCall(stageUuid, patchedDenyStageRequest, _callback);
        Type localVarReturnType = new TypeToken<DenyStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesDenyRetrieve
     * @param stageUuid A UUID string identifying this Deny Stage. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesDenyRetrieveCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/deny/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesDenyRetrieveValidateBeforeCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesDenyRetrieve(Async)");
        }

        return stagesDenyRetrieveCall(stageUuid, _callback);

    }

    /**
     * 
     * DenyStage Viewset
     * @param stageUuid A UUID string identifying this Deny Stage. (required)
     * @return DenyStage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DenyStage stagesDenyRetrieve(UUID stageUuid) throws ApiException {
        ApiResponse<DenyStage> localVarResp = stagesDenyRetrieveWithHttpInfo(stageUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * DenyStage Viewset
     * @param stageUuid A UUID string identifying this Deny Stage. (required)
     * @return ApiResponse&lt;DenyStage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DenyStage> stagesDenyRetrieveWithHttpInfo(UUID stageUuid) throws ApiException {
        okhttp3.Call localVarCall = stagesDenyRetrieveValidateBeforeCall(stageUuid, null);
        Type localVarReturnType = new TypeToken<DenyStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * DenyStage Viewset
     * @param stageUuid A UUID string identifying this Deny Stage. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesDenyRetrieveAsync(UUID stageUuid, final ApiCallback<DenyStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesDenyRetrieveValidateBeforeCall(stageUuid, _callback);
        Type localVarReturnType = new TypeToken<DenyStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesDenyUpdate
     * @param stageUuid A UUID string identifying this Deny Stage. (required)
     * @param denyStageRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesDenyUpdateCall(UUID stageUuid, DenyStageRequest denyStageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = denyStageRequest;

        // create path and map variables
        String localVarPath = "/stages/deny/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesDenyUpdateValidateBeforeCall(UUID stageUuid, DenyStageRequest denyStageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesDenyUpdate(Async)");
        }

        // verify the required parameter 'denyStageRequest' is set
        if (denyStageRequest == null) {
            throw new ApiException("Missing the required parameter 'denyStageRequest' when calling stagesDenyUpdate(Async)");
        }

        return stagesDenyUpdateCall(stageUuid, denyStageRequest, _callback);

    }

    /**
     * 
     * DenyStage Viewset
     * @param stageUuid A UUID string identifying this Deny Stage. (required)
     * @param denyStageRequest  (required)
     * @return DenyStage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DenyStage stagesDenyUpdate(UUID stageUuid, DenyStageRequest denyStageRequest) throws ApiException {
        ApiResponse<DenyStage> localVarResp = stagesDenyUpdateWithHttpInfo(stageUuid, denyStageRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * DenyStage Viewset
     * @param stageUuid A UUID string identifying this Deny Stage. (required)
     * @param denyStageRequest  (required)
     * @return ApiResponse&lt;DenyStage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DenyStage> stagesDenyUpdateWithHttpInfo(UUID stageUuid, DenyStageRequest denyStageRequest) throws ApiException {
        okhttp3.Call localVarCall = stagesDenyUpdateValidateBeforeCall(stageUuid, denyStageRequest, null);
        Type localVarReturnType = new TypeToken<DenyStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * DenyStage Viewset
     * @param stageUuid A UUID string identifying this Deny Stage. (required)
     * @param denyStageRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesDenyUpdateAsync(UUID stageUuid, DenyStageRequest denyStageRequest, final ApiCallback<DenyStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesDenyUpdateValidateBeforeCall(stageUuid, denyStageRequest, _callback);
        Type localVarReturnType = new TypeToken<DenyStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesDenyUsedByList
     * @param stageUuid A UUID string identifying this Deny Stage. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesDenyUsedByListCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/deny/{stage_uuid}/used_by/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesDenyUsedByListValidateBeforeCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesDenyUsedByList(Async)");
        }

        return stagesDenyUsedByListCall(stageUuid, _callback);

    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param stageUuid A UUID string identifying this Deny Stage. (required)
     * @return List&lt;UsedBy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<UsedBy> stagesDenyUsedByList(UUID stageUuid) throws ApiException {
        ApiResponse<List<UsedBy>> localVarResp = stagesDenyUsedByListWithHttpInfo(stageUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param stageUuid A UUID string identifying this Deny Stage. (required)
     * @return ApiResponse&lt;List&lt;UsedBy&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UsedBy>> stagesDenyUsedByListWithHttpInfo(UUID stageUuid) throws ApiException {
        okhttp3.Call localVarCall = stagesDenyUsedByListValidateBeforeCall(stageUuid, null);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of all objects that use this object
     * @param stageUuid A UUID string identifying this Deny Stage. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesDenyUsedByListAsync(UUID stageUuid, final ApiCallback<List<UsedBy>> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesDenyUsedByListValidateBeforeCall(stageUuid, _callback);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesDummyCreate
     * @param dummyStageRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesDummyCreateCall(DummyStageRequest dummyStageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dummyStageRequest;

        // create path and map variables
        String localVarPath = "/stages/dummy/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesDummyCreateValidateBeforeCall(DummyStageRequest dummyStageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dummyStageRequest' is set
        if (dummyStageRequest == null) {
            throw new ApiException("Missing the required parameter 'dummyStageRequest' when calling stagesDummyCreate(Async)");
        }

        return stagesDummyCreateCall(dummyStageRequest, _callback);

    }

    /**
     * 
     * DummyStage Viewset
     * @param dummyStageRequest  (required)
     * @return DummyStage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DummyStage stagesDummyCreate(DummyStageRequest dummyStageRequest) throws ApiException {
        ApiResponse<DummyStage> localVarResp = stagesDummyCreateWithHttpInfo(dummyStageRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * DummyStage Viewset
     * @param dummyStageRequest  (required)
     * @return ApiResponse&lt;DummyStage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DummyStage> stagesDummyCreateWithHttpInfo(DummyStageRequest dummyStageRequest) throws ApiException {
        okhttp3.Call localVarCall = stagesDummyCreateValidateBeforeCall(dummyStageRequest, null);
        Type localVarReturnType = new TypeToken<DummyStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * DummyStage Viewset
     * @param dummyStageRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesDummyCreateAsync(DummyStageRequest dummyStageRequest, final ApiCallback<DummyStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesDummyCreateValidateBeforeCall(dummyStageRequest, _callback);
        Type localVarReturnType = new TypeToken<DummyStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesDummyDestroy
     * @param stageUuid A UUID string identifying this Dummy Stage. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesDummyDestroyCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/dummy/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesDummyDestroyValidateBeforeCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesDummyDestroy(Async)");
        }

        return stagesDummyDestroyCall(stageUuid, _callback);

    }

    /**
     * 
     * DummyStage Viewset
     * @param stageUuid A UUID string identifying this Dummy Stage. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void stagesDummyDestroy(UUID stageUuid) throws ApiException {
        stagesDummyDestroyWithHttpInfo(stageUuid);
    }

    /**
     * 
     * DummyStage Viewset
     * @param stageUuid A UUID string identifying this Dummy Stage. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> stagesDummyDestroyWithHttpInfo(UUID stageUuid) throws ApiException {
        okhttp3.Call localVarCall = stagesDummyDestroyValidateBeforeCall(stageUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * DummyStage Viewset
     * @param stageUuid A UUID string identifying this Dummy Stage. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesDummyDestroyAsync(UUID stageUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesDummyDestroyValidateBeforeCall(stageUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesDummyList
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @param stageUuid  (optional)
     * @param throwError  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesDummyListCall(String name, String ordering, Integer page, Integer pageSize, String search, UUID stageUuid, Boolean throwError, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/dummy/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (stageUuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stage_uuid", stageUuid));
        }

        if (throwError != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("throw_error", throwError));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesDummyListValidateBeforeCall(String name, String ordering, Integer page, Integer pageSize, String search, UUID stageUuid, Boolean throwError, final ApiCallback _callback) throws ApiException {
        return stagesDummyListCall(name, ordering, page, pageSize, search, stageUuid, throwError, _callback);

    }

    /**
     * 
     * DummyStage Viewset
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @param stageUuid  (optional)
     * @param throwError  (optional)
     * @return PaginatedDummyStageList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedDummyStageList stagesDummyList(String name, String ordering, Integer page, Integer pageSize, String search, UUID stageUuid, Boolean throwError) throws ApiException {
        ApiResponse<PaginatedDummyStageList> localVarResp = stagesDummyListWithHttpInfo(name, ordering, page, pageSize, search, stageUuid, throwError);
        return localVarResp.getData();
    }

    /**
     * 
     * DummyStage Viewset
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @param stageUuid  (optional)
     * @param throwError  (optional)
     * @return ApiResponse&lt;PaginatedDummyStageList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedDummyStageList> stagesDummyListWithHttpInfo(String name, String ordering, Integer page, Integer pageSize, String search, UUID stageUuid, Boolean throwError) throws ApiException {
        okhttp3.Call localVarCall = stagesDummyListValidateBeforeCall(name, ordering, page, pageSize, search, stageUuid, throwError, null);
        Type localVarReturnType = new TypeToken<PaginatedDummyStageList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * DummyStage Viewset
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @param stageUuid  (optional)
     * @param throwError  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesDummyListAsync(String name, String ordering, Integer page, Integer pageSize, String search, UUID stageUuid, Boolean throwError, final ApiCallback<PaginatedDummyStageList> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesDummyListValidateBeforeCall(name, ordering, page, pageSize, search, stageUuid, throwError, _callback);
        Type localVarReturnType = new TypeToken<PaginatedDummyStageList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesDummyPartialUpdate
     * @param stageUuid A UUID string identifying this Dummy Stage. (required)
     * @param patchedDummyStageRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesDummyPartialUpdateCall(UUID stageUuid, PatchedDummyStageRequest patchedDummyStageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchedDummyStageRequest;

        // create path and map variables
        String localVarPath = "/stages/dummy/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesDummyPartialUpdateValidateBeforeCall(UUID stageUuid, PatchedDummyStageRequest patchedDummyStageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesDummyPartialUpdate(Async)");
        }

        return stagesDummyPartialUpdateCall(stageUuid, patchedDummyStageRequest, _callback);

    }

    /**
     * 
     * DummyStage Viewset
     * @param stageUuid A UUID string identifying this Dummy Stage. (required)
     * @param patchedDummyStageRequest  (optional)
     * @return DummyStage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DummyStage stagesDummyPartialUpdate(UUID stageUuid, PatchedDummyStageRequest patchedDummyStageRequest) throws ApiException {
        ApiResponse<DummyStage> localVarResp = stagesDummyPartialUpdateWithHttpInfo(stageUuid, patchedDummyStageRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * DummyStage Viewset
     * @param stageUuid A UUID string identifying this Dummy Stage. (required)
     * @param patchedDummyStageRequest  (optional)
     * @return ApiResponse&lt;DummyStage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DummyStage> stagesDummyPartialUpdateWithHttpInfo(UUID stageUuid, PatchedDummyStageRequest patchedDummyStageRequest) throws ApiException {
        okhttp3.Call localVarCall = stagesDummyPartialUpdateValidateBeforeCall(stageUuid, patchedDummyStageRequest, null);
        Type localVarReturnType = new TypeToken<DummyStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * DummyStage Viewset
     * @param stageUuid A UUID string identifying this Dummy Stage. (required)
     * @param patchedDummyStageRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesDummyPartialUpdateAsync(UUID stageUuid, PatchedDummyStageRequest patchedDummyStageRequest, final ApiCallback<DummyStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesDummyPartialUpdateValidateBeforeCall(stageUuid, patchedDummyStageRequest, _callback);
        Type localVarReturnType = new TypeToken<DummyStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesDummyRetrieve
     * @param stageUuid A UUID string identifying this Dummy Stage. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesDummyRetrieveCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/dummy/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesDummyRetrieveValidateBeforeCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesDummyRetrieve(Async)");
        }

        return stagesDummyRetrieveCall(stageUuid, _callback);

    }

    /**
     * 
     * DummyStage Viewset
     * @param stageUuid A UUID string identifying this Dummy Stage. (required)
     * @return DummyStage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DummyStage stagesDummyRetrieve(UUID stageUuid) throws ApiException {
        ApiResponse<DummyStage> localVarResp = stagesDummyRetrieveWithHttpInfo(stageUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * DummyStage Viewset
     * @param stageUuid A UUID string identifying this Dummy Stage. (required)
     * @return ApiResponse&lt;DummyStage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DummyStage> stagesDummyRetrieveWithHttpInfo(UUID stageUuid) throws ApiException {
        okhttp3.Call localVarCall = stagesDummyRetrieveValidateBeforeCall(stageUuid, null);
        Type localVarReturnType = new TypeToken<DummyStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * DummyStage Viewset
     * @param stageUuid A UUID string identifying this Dummy Stage. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesDummyRetrieveAsync(UUID stageUuid, final ApiCallback<DummyStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesDummyRetrieveValidateBeforeCall(stageUuid, _callback);
        Type localVarReturnType = new TypeToken<DummyStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesDummyUpdate
     * @param stageUuid A UUID string identifying this Dummy Stage. (required)
     * @param dummyStageRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesDummyUpdateCall(UUID stageUuid, DummyStageRequest dummyStageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dummyStageRequest;

        // create path and map variables
        String localVarPath = "/stages/dummy/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesDummyUpdateValidateBeforeCall(UUID stageUuid, DummyStageRequest dummyStageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesDummyUpdate(Async)");
        }

        // verify the required parameter 'dummyStageRequest' is set
        if (dummyStageRequest == null) {
            throw new ApiException("Missing the required parameter 'dummyStageRequest' when calling stagesDummyUpdate(Async)");
        }

        return stagesDummyUpdateCall(stageUuid, dummyStageRequest, _callback);

    }

    /**
     * 
     * DummyStage Viewset
     * @param stageUuid A UUID string identifying this Dummy Stage. (required)
     * @param dummyStageRequest  (required)
     * @return DummyStage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DummyStage stagesDummyUpdate(UUID stageUuid, DummyStageRequest dummyStageRequest) throws ApiException {
        ApiResponse<DummyStage> localVarResp = stagesDummyUpdateWithHttpInfo(stageUuid, dummyStageRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * DummyStage Viewset
     * @param stageUuid A UUID string identifying this Dummy Stage. (required)
     * @param dummyStageRequest  (required)
     * @return ApiResponse&lt;DummyStage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DummyStage> stagesDummyUpdateWithHttpInfo(UUID stageUuid, DummyStageRequest dummyStageRequest) throws ApiException {
        okhttp3.Call localVarCall = stagesDummyUpdateValidateBeforeCall(stageUuid, dummyStageRequest, null);
        Type localVarReturnType = new TypeToken<DummyStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * DummyStage Viewset
     * @param stageUuid A UUID string identifying this Dummy Stage. (required)
     * @param dummyStageRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesDummyUpdateAsync(UUID stageUuid, DummyStageRequest dummyStageRequest, final ApiCallback<DummyStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesDummyUpdateValidateBeforeCall(stageUuid, dummyStageRequest, _callback);
        Type localVarReturnType = new TypeToken<DummyStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesDummyUsedByList
     * @param stageUuid A UUID string identifying this Dummy Stage. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesDummyUsedByListCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/dummy/{stage_uuid}/used_by/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesDummyUsedByListValidateBeforeCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesDummyUsedByList(Async)");
        }

        return stagesDummyUsedByListCall(stageUuid, _callback);

    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param stageUuid A UUID string identifying this Dummy Stage. (required)
     * @return List&lt;UsedBy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<UsedBy> stagesDummyUsedByList(UUID stageUuid) throws ApiException {
        ApiResponse<List<UsedBy>> localVarResp = stagesDummyUsedByListWithHttpInfo(stageUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param stageUuid A UUID string identifying this Dummy Stage. (required)
     * @return ApiResponse&lt;List&lt;UsedBy&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UsedBy>> stagesDummyUsedByListWithHttpInfo(UUID stageUuid) throws ApiException {
        okhttp3.Call localVarCall = stagesDummyUsedByListValidateBeforeCall(stageUuid, null);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of all objects that use this object
     * @param stageUuid A UUID string identifying this Dummy Stage. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesDummyUsedByListAsync(UUID stageUuid, final ApiCallback<List<UsedBy>> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesDummyUsedByListValidateBeforeCall(stageUuid, _callback);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesEmailCreate
     * @param emailStageRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesEmailCreateCall(EmailStageRequest emailStageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = emailStageRequest;

        // create path and map variables
        String localVarPath = "/stages/email/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesEmailCreateValidateBeforeCall(EmailStageRequest emailStageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'emailStageRequest' is set
        if (emailStageRequest == null) {
            throw new ApiException("Missing the required parameter 'emailStageRequest' when calling stagesEmailCreate(Async)");
        }

        return stagesEmailCreateCall(emailStageRequest, _callback);

    }

    /**
     * 
     * EmailStage Viewset
     * @param emailStageRequest  (required)
     * @return EmailStage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public EmailStage stagesEmailCreate(EmailStageRequest emailStageRequest) throws ApiException {
        ApiResponse<EmailStage> localVarResp = stagesEmailCreateWithHttpInfo(emailStageRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * EmailStage Viewset
     * @param emailStageRequest  (required)
     * @return ApiResponse&lt;EmailStage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmailStage> stagesEmailCreateWithHttpInfo(EmailStageRequest emailStageRequest) throws ApiException {
        okhttp3.Call localVarCall = stagesEmailCreateValidateBeforeCall(emailStageRequest, null);
        Type localVarReturnType = new TypeToken<EmailStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * EmailStage Viewset
     * @param emailStageRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesEmailCreateAsync(EmailStageRequest emailStageRequest, final ApiCallback<EmailStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesEmailCreateValidateBeforeCall(emailStageRequest, _callback);
        Type localVarReturnType = new TypeToken<EmailStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesEmailDestroy
     * @param stageUuid A UUID string identifying this Email Stage. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesEmailDestroyCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/email/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesEmailDestroyValidateBeforeCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesEmailDestroy(Async)");
        }

        return stagesEmailDestroyCall(stageUuid, _callback);

    }

    /**
     * 
     * EmailStage Viewset
     * @param stageUuid A UUID string identifying this Email Stage. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void stagesEmailDestroy(UUID stageUuid) throws ApiException {
        stagesEmailDestroyWithHttpInfo(stageUuid);
    }

    /**
     * 
     * EmailStage Viewset
     * @param stageUuid A UUID string identifying this Email Stage. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> stagesEmailDestroyWithHttpInfo(UUID stageUuid) throws ApiException {
        okhttp3.Call localVarCall = stagesEmailDestroyValidateBeforeCall(stageUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * EmailStage Viewset
     * @param stageUuid A UUID string identifying this Email Stage. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesEmailDestroyAsync(UUID stageUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesEmailDestroyValidateBeforeCall(stageUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesEmailList
     * @param activateUserOnSuccess  (optional)
     * @param fromAddress  (optional)
     * @param host  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param port  (optional)
     * @param search A search term. (optional)
     * @param subject  (optional)
     * @param template  (optional)
     * @param timeout  (optional)
     * @param tokenExpiry  (optional)
     * @param useGlobalSettings  (optional)
     * @param useSsl  (optional)
     * @param useTls  (optional)
     * @param username  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesEmailListCall(Boolean activateUserOnSuccess, String fromAddress, String host, String name, String ordering, Integer page, Integer pageSize, Integer port, String search, String subject, String template, Integer timeout, Integer tokenExpiry, Boolean useGlobalSettings, Boolean useSsl, Boolean useTls, String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/email/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (activateUserOnSuccess != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("activate_user_on_success", activateUserOnSuccess));
        }

        if (fromAddress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from_address", fromAddress));
        }

        if (host != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("host", host));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (port != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("port", port));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (subject != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("subject", subject));
        }

        if (template != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("template", template));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (tokenExpiry != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token_expiry", tokenExpiry));
        }

        if (useGlobalSettings != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_global_settings", useGlobalSettings));
        }

        if (useSsl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_ssl", useSsl));
        }

        if (useTls != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("use_tls", useTls));
        }

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesEmailListValidateBeforeCall(Boolean activateUserOnSuccess, String fromAddress, String host, String name, String ordering, Integer page, Integer pageSize, Integer port, String search, String subject, String template, Integer timeout, Integer tokenExpiry, Boolean useGlobalSettings, Boolean useSsl, Boolean useTls, String username, final ApiCallback _callback) throws ApiException {
        return stagesEmailListCall(activateUserOnSuccess, fromAddress, host, name, ordering, page, pageSize, port, search, subject, template, timeout, tokenExpiry, useGlobalSettings, useSsl, useTls, username, _callback);

    }

    /**
     * 
     * EmailStage Viewset
     * @param activateUserOnSuccess  (optional)
     * @param fromAddress  (optional)
     * @param host  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param port  (optional)
     * @param search A search term. (optional)
     * @param subject  (optional)
     * @param template  (optional)
     * @param timeout  (optional)
     * @param tokenExpiry  (optional)
     * @param useGlobalSettings  (optional)
     * @param useSsl  (optional)
     * @param useTls  (optional)
     * @param username  (optional)
     * @return PaginatedEmailStageList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedEmailStageList stagesEmailList(Boolean activateUserOnSuccess, String fromAddress, String host, String name, String ordering, Integer page, Integer pageSize, Integer port, String search, String subject, String template, Integer timeout, Integer tokenExpiry, Boolean useGlobalSettings, Boolean useSsl, Boolean useTls, String username) throws ApiException {
        ApiResponse<PaginatedEmailStageList> localVarResp = stagesEmailListWithHttpInfo(activateUserOnSuccess, fromAddress, host, name, ordering, page, pageSize, port, search, subject, template, timeout, tokenExpiry, useGlobalSettings, useSsl, useTls, username);
        return localVarResp.getData();
    }

    /**
     * 
     * EmailStage Viewset
     * @param activateUserOnSuccess  (optional)
     * @param fromAddress  (optional)
     * @param host  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param port  (optional)
     * @param search A search term. (optional)
     * @param subject  (optional)
     * @param template  (optional)
     * @param timeout  (optional)
     * @param tokenExpiry  (optional)
     * @param useGlobalSettings  (optional)
     * @param useSsl  (optional)
     * @param useTls  (optional)
     * @param username  (optional)
     * @return ApiResponse&lt;PaginatedEmailStageList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedEmailStageList> stagesEmailListWithHttpInfo(Boolean activateUserOnSuccess, String fromAddress, String host, String name, String ordering, Integer page, Integer pageSize, Integer port, String search, String subject, String template, Integer timeout, Integer tokenExpiry, Boolean useGlobalSettings, Boolean useSsl, Boolean useTls, String username) throws ApiException {
        okhttp3.Call localVarCall = stagesEmailListValidateBeforeCall(activateUserOnSuccess, fromAddress, host, name, ordering, page, pageSize, port, search, subject, template, timeout, tokenExpiry, useGlobalSettings, useSsl, useTls, username, null);
        Type localVarReturnType = new TypeToken<PaginatedEmailStageList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * EmailStage Viewset
     * @param activateUserOnSuccess  (optional)
     * @param fromAddress  (optional)
     * @param host  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param port  (optional)
     * @param search A search term. (optional)
     * @param subject  (optional)
     * @param template  (optional)
     * @param timeout  (optional)
     * @param tokenExpiry  (optional)
     * @param useGlobalSettings  (optional)
     * @param useSsl  (optional)
     * @param useTls  (optional)
     * @param username  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesEmailListAsync(Boolean activateUserOnSuccess, String fromAddress, String host, String name, String ordering, Integer page, Integer pageSize, Integer port, String search, String subject, String template, Integer timeout, Integer tokenExpiry, Boolean useGlobalSettings, Boolean useSsl, Boolean useTls, String username, final ApiCallback<PaginatedEmailStageList> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesEmailListValidateBeforeCall(activateUserOnSuccess, fromAddress, host, name, ordering, page, pageSize, port, search, subject, template, timeout, tokenExpiry, useGlobalSettings, useSsl, useTls, username, _callback);
        Type localVarReturnType = new TypeToken<PaginatedEmailStageList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesEmailPartialUpdate
     * @param stageUuid A UUID string identifying this Email Stage. (required)
     * @param patchedEmailStageRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesEmailPartialUpdateCall(UUID stageUuid, PatchedEmailStageRequest patchedEmailStageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchedEmailStageRequest;

        // create path and map variables
        String localVarPath = "/stages/email/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesEmailPartialUpdateValidateBeforeCall(UUID stageUuid, PatchedEmailStageRequest patchedEmailStageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesEmailPartialUpdate(Async)");
        }

        return stagesEmailPartialUpdateCall(stageUuid, patchedEmailStageRequest, _callback);

    }

    /**
     * 
     * EmailStage Viewset
     * @param stageUuid A UUID string identifying this Email Stage. (required)
     * @param patchedEmailStageRequest  (optional)
     * @return EmailStage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public EmailStage stagesEmailPartialUpdate(UUID stageUuid, PatchedEmailStageRequest patchedEmailStageRequest) throws ApiException {
        ApiResponse<EmailStage> localVarResp = stagesEmailPartialUpdateWithHttpInfo(stageUuid, patchedEmailStageRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * EmailStage Viewset
     * @param stageUuid A UUID string identifying this Email Stage. (required)
     * @param patchedEmailStageRequest  (optional)
     * @return ApiResponse&lt;EmailStage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmailStage> stagesEmailPartialUpdateWithHttpInfo(UUID stageUuid, PatchedEmailStageRequest patchedEmailStageRequest) throws ApiException {
        okhttp3.Call localVarCall = stagesEmailPartialUpdateValidateBeforeCall(stageUuid, patchedEmailStageRequest, null);
        Type localVarReturnType = new TypeToken<EmailStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * EmailStage Viewset
     * @param stageUuid A UUID string identifying this Email Stage. (required)
     * @param patchedEmailStageRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesEmailPartialUpdateAsync(UUID stageUuid, PatchedEmailStageRequest patchedEmailStageRequest, final ApiCallback<EmailStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesEmailPartialUpdateValidateBeforeCall(stageUuid, patchedEmailStageRequest, _callback);
        Type localVarReturnType = new TypeToken<EmailStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesEmailRetrieve
     * @param stageUuid A UUID string identifying this Email Stage. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesEmailRetrieveCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/email/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesEmailRetrieveValidateBeforeCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesEmailRetrieve(Async)");
        }

        return stagesEmailRetrieveCall(stageUuid, _callback);

    }

    /**
     * 
     * EmailStage Viewset
     * @param stageUuid A UUID string identifying this Email Stage. (required)
     * @return EmailStage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public EmailStage stagesEmailRetrieve(UUID stageUuid) throws ApiException {
        ApiResponse<EmailStage> localVarResp = stagesEmailRetrieveWithHttpInfo(stageUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * EmailStage Viewset
     * @param stageUuid A UUID string identifying this Email Stage. (required)
     * @return ApiResponse&lt;EmailStage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmailStage> stagesEmailRetrieveWithHttpInfo(UUID stageUuid) throws ApiException {
        okhttp3.Call localVarCall = stagesEmailRetrieveValidateBeforeCall(stageUuid, null);
        Type localVarReturnType = new TypeToken<EmailStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * EmailStage Viewset
     * @param stageUuid A UUID string identifying this Email Stage. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesEmailRetrieveAsync(UUID stageUuid, final ApiCallback<EmailStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesEmailRetrieveValidateBeforeCall(stageUuid, _callback);
        Type localVarReturnType = new TypeToken<EmailStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesEmailTemplatesList
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesEmailTemplatesListCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/email/templates/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesEmailTemplatesListValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return stagesEmailTemplatesListCall(_callback);

    }

    /**
     * 
     * Get all available templates, including custom templates
     * @return List&lt;TypeCreate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<TypeCreate> stagesEmailTemplatesList() throws ApiException {
        ApiResponse<List<TypeCreate>> localVarResp = stagesEmailTemplatesListWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Get all available templates, including custom templates
     * @return ApiResponse&lt;List&lt;TypeCreate&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TypeCreate>> stagesEmailTemplatesListWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = stagesEmailTemplatesListValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<TypeCreate>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get all available templates, including custom templates
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesEmailTemplatesListAsync(final ApiCallback<List<TypeCreate>> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesEmailTemplatesListValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<TypeCreate>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesEmailUpdate
     * @param stageUuid A UUID string identifying this Email Stage. (required)
     * @param emailStageRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesEmailUpdateCall(UUID stageUuid, EmailStageRequest emailStageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = emailStageRequest;

        // create path and map variables
        String localVarPath = "/stages/email/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesEmailUpdateValidateBeforeCall(UUID stageUuid, EmailStageRequest emailStageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesEmailUpdate(Async)");
        }

        // verify the required parameter 'emailStageRequest' is set
        if (emailStageRequest == null) {
            throw new ApiException("Missing the required parameter 'emailStageRequest' when calling stagesEmailUpdate(Async)");
        }

        return stagesEmailUpdateCall(stageUuid, emailStageRequest, _callback);

    }

    /**
     * 
     * EmailStage Viewset
     * @param stageUuid A UUID string identifying this Email Stage. (required)
     * @param emailStageRequest  (required)
     * @return EmailStage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public EmailStage stagesEmailUpdate(UUID stageUuid, EmailStageRequest emailStageRequest) throws ApiException {
        ApiResponse<EmailStage> localVarResp = stagesEmailUpdateWithHttpInfo(stageUuid, emailStageRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * EmailStage Viewset
     * @param stageUuid A UUID string identifying this Email Stage. (required)
     * @param emailStageRequest  (required)
     * @return ApiResponse&lt;EmailStage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmailStage> stagesEmailUpdateWithHttpInfo(UUID stageUuid, EmailStageRequest emailStageRequest) throws ApiException {
        okhttp3.Call localVarCall = stagesEmailUpdateValidateBeforeCall(stageUuid, emailStageRequest, null);
        Type localVarReturnType = new TypeToken<EmailStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * EmailStage Viewset
     * @param stageUuid A UUID string identifying this Email Stage. (required)
     * @param emailStageRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesEmailUpdateAsync(UUID stageUuid, EmailStageRequest emailStageRequest, final ApiCallback<EmailStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesEmailUpdateValidateBeforeCall(stageUuid, emailStageRequest, _callback);
        Type localVarReturnType = new TypeToken<EmailStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesEmailUsedByList
     * @param stageUuid A UUID string identifying this Email Stage. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesEmailUsedByListCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/email/{stage_uuid}/used_by/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesEmailUsedByListValidateBeforeCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesEmailUsedByList(Async)");
        }

        return stagesEmailUsedByListCall(stageUuid, _callback);

    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param stageUuid A UUID string identifying this Email Stage. (required)
     * @return List&lt;UsedBy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<UsedBy> stagesEmailUsedByList(UUID stageUuid) throws ApiException {
        ApiResponse<List<UsedBy>> localVarResp = stagesEmailUsedByListWithHttpInfo(stageUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param stageUuid A UUID string identifying this Email Stage. (required)
     * @return ApiResponse&lt;List&lt;UsedBy&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UsedBy>> stagesEmailUsedByListWithHttpInfo(UUID stageUuid) throws ApiException {
        okhttp3.Call localVarCall = stagesEmailUsedByListValidateBeforeCall(stageUuid, null);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of all objects that use this object
     * @param stageUuid A UUID string identifying this Email Stage. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesEmailUsedByListAsync(UUID stageUuid, final ApiCallback<List<UsedBy>> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesEmailUsedByListValidateBeforeCall(stageUuid, _callback);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesIdentificationCreate
     * @param identificationStageRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesIdentificationCreateCall(IdentificationStageRequest identificationStageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = identificationStageRequest;

        // create path and map variables
        String localVarPath = "/stages/identification/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesIdentificationCreateValidateBeforeCall(IdentificationStageRequest identificationStageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'identificationStageRequest' is set
        if (identificationStageRequest == null) {
            throw new ApiException("Missing the required parameter 'identificationStageRequest' when calling stagesIdentificationCreate(Async)");
        }

        return stagesIdentificationCreateCall(identificationStageRequest, _callback);

    }

    /**
     * 
     * IdentificationStage Viewset
     * @param identificationStageRequest  (required)
     * @return IdentificationStage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public IdentificationStage stagesIdentificationCreate(IdentificationStageRequest identificationStageRequest) throws ApiException {
        ApiResponse<IdentificationStage> localVarResp = stagesIdentificationCreateWithHttpInfo(identificationStageRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * IdentificationStage Viewset
     * @param identificationStageRequest  (required)
     * @return ApiResponse&lt;IdentificationStage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IdentificationStage> stagesIdentificationCreateWithHttpInfo(IdentificationStageRequest identificationStageRequest) throws ApiException {
        okhttp3.Call localVarCall = stagesIdentificationCreateValidateBeforeCall(identificationStageRequest, null);
        Type localVarReturnType = new TypeToken<IdentificationStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * IdentificationStage Viewset
     * @param identificationStageRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesIdentificationCreateAsync(IdentificationStageRequest identificationStageRequest, final ApiCallback<IdentificationStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesIdentificationCreateValidateBeforeCall(identificationStageRequest, _callback);
        Type localVarReturnType = new TypeToken<IdentificationStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesIdentificationDestroy
     * @param stageUuid A UUID string identifying this Identification Stage. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesIdentificationDestroyCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/identification/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesIdentificationDestroyValidateBeforeCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesIdentificationDestroy(Async)");
        }

        return stagesIdentificationDestroyCall(stageUuid, _callback);

    }

    /**
     * 
     * IdentificationStage Viewset
     * @param stageUuid A UUID string identifying this Identification Stage. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void stagesIdentificationDestroy(UUID stageUuid) throws ApiException {
        stagesIdentificationDestroyWithHttpInfo(stageUuid);
    }

    /**
     * 
     * IdentificationStage Viewset
     * @param stageUuid A UUID string identifying this Identification Stage. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> stagesIdentificationDestroyWithHttpInfo(UUID stageUuid) throws ApiException {
        okhttp3.Call localVarCall = stagesIdentificationDestroyValidateBeforeCall(stageUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * IdentificationStage Viewset
     * @param stageUuid A UUID string identifying this Identification Stage. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesIdentificationDestroyAsync(UUID stageUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesIdentificationDestroyValidateBeforeCall(stageUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesIdentificationList
     * @param caseInsensitiveMatching  (optional)
     * @param enrollmentFlow  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param passwordStage  (optional)
     * @param passwordlessFlow  (optional)
     * @param recoveryFlow  (optional)
     * @param search A search term. (optional)
     * @param showMatchedUser  (optional)
     * @param showSourceLabels  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesIdentificationListCall(Boolean caseInsensitiveMatching, UUID enrollmentFlow, String name, String ordering, Integer page, Integer pageSize, UUID passwordStage, UUID passwordlessFlow, UUID recoveryFlow, String search, Boolean showMatchedUser, Boolean showSourceLabels, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/identification/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (caseInsensitiveMatching != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("case_insensitive_matching", caseInsensitiveMatching));
        }

        if (enrollmentFlow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enrollment_flow", enrollmentFlow));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (passwordStage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("password_stage", passwordStage));
        }

        if (passwordlessFlow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("passwordless_flow", passwordlessFlow));
        }

        if (recoveryFlow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recovery_flow", recoveryFlow));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (showMatchedUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("show_matched_user", showMatchedUser));
        }

        if (showSourceLabels != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("show_source_labels", showSourceLabels));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesIdentificationListValidateBeforeCall(Boolean caseInsensitiveMatching, UUID enrollmentFlow, String name, String ordering, Integer page, Integer pageSize, UUID passwordStage, UUID passwordlessFlow, UUID recoveryFlow, String search, Boolean showMatchedUser, Boolean showSourceLabels, final ApiCallback _callback) throws ApiException {
        return stagesIdentificationListCall(caseInsensitiveMatching, enrollmentFlow, name, ordering, page, pageSize, passwordStage, passwordlessFlow, recoveryFlow, search, showMatchedUser, showSourceLabels, _callback);

    }

    /**
     * 
     * IdentificationStage Viewset
     * @param caseInsensitiveMatching  (optional)
     * @param enrollmentFlow  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param passwordStage  (optional)
     * @param passwordlessFlow  (optional)
     * @param recoveryFlow  (optional)
     * @param search A search term. (optional)
     * @param showMatchedUser  (optional)
     * @param showSourceLabels  (optional)
     * @return PaginatedIdentificationStageList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedIdentificationStageList stagesIdentificationList(Boolean caseInsensitiveMatching, UUID enrollmentFlow, String name, String ordering, Integer page, Integer pageSize, UUID passwordStage, UUID passwordlessFlow, UUID recoveryFlow, String search, Boolean showMatchedUser, Boolean showSourceLabels) throws ApiException {
        ApiResponse<PaginatedIdentificationStageList> localVarResp = stagesIdentificationListWithHttpInfo(caseInsensitiveMatching, enrollmentFlow, name, ordering, page, pageSize, passwordStage, passwordlessFlow, recoveryFlow, search, showMatchedUser, showSourceLabels);
        return localVarResp.getData();
    }

    /**
     * 
     * IdentificationStage Viewset
     * @param caseInsensitiveMatching  (optional)
     * @param enrollmentFlow  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param passwordStage  (optional)
     * @param passwordlessFlow  (optional)
     * @param recoveryFlow  (optional)
     * @param search A search term. (optional)
     * @param showMatchedUser  (optional)
     * @param showSourceLabels  (optional)
     * @return ApiResponse&lt;PaginatedIdentificationStageList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedIdentificationStageList> stagesIdentificationListWithHttpInfo(Boolean caseInsensitiveMatching, UUID enrollmentFlow, String name, String ordering, Integer page, Integer pageSize, UUID passwordStage, UUID passwordlessFlow, UUID recoveryFlow, String search, Boolean showMatchedUser, Boolean showSourceLabels) throws ApiException {
        okhttp3.Call localVarCall = stagesIdentificationListValidateBeforeCall(caseInsensitiveMatching, enrollmentFlow, name, ordering, page, pageSize, passwordStage, passwordlessFlow, recoveryFlow, search, showMatchedUser, showSourceLabels, null);
        Type localVarReturnType = new TypeToken<PaginatedIdentificationStageList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * IdentificationStage Viewset
     * @param caseInsensitiveMatching  (optional)
     * @param enrollmentFlow  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param passwordStage  (optional)
     * @param passwordlessFlow  (optional)
     * @param recoveryFlow  (optional)
     * @param search A search term. (optional)
     * @param showMatchedUser  (optional)
     * @param showSourceLabels  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesIdentificationListAsync(Boolean caseInsensitiveMatching, UUID enrollmentFlow, String name, String ordering, Integer page, Integer pageSize, UUID passwordStage, UUID passwordlessFlow, UUID recoveryFlow, String search, Boolean showMatchedUser, Boolean showSourceLabels, final ApiCallback<PaginatedIdentificationStageList> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesIdentificationListValidateBeforeCall(caseInsensitiveMatching, enrollmentFlow, name, ordering, page, pageSize, passwordStage, passwordlessFlow, recoveryFlow, search, showMatchedUser, showSourceLabels, _callback);
        Type localVarReturnType = new TypeToken<PaginatedIdentificationStageList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesIdentificationPartialUpdate
     * @param stageUuid A UUID string identifying this Identification Stage. (required)
     * @param patchedIdentificationStageRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesIdentificationPartialUpdateCall(UUID stageUuid, PatchedIdentificationStageRequest patchedIdentificationStageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchedIdentificationStageRequest;

        // create path and map variables
        String localVarPath = "/stages/identification/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesIdentificationPartialUpdateValidateBeforeCall(UUID stageUuid, PatchedIdentificationStageRequest patchedIdentificationStageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesIdentificationPartialUpdate(Async)");
        }

        return stagesIdentificationPartialUpdateCall(stageUuid, patchedIdentificationStageRequest, _callback);

    }

    /**
     * 
     * IdentificationStage Viewset
     * @param stageUuid A UUID string identifying this Identification Stage. (required)
     * @param patchedIdentificationStageRequest  (optional)
     * @return IdentificationStage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public IdentificationStage stagesIdentificationPartialUpdate(UUID stageUuid, PatchedIdentificationStageRequest patchedIdentificationStageRequest) throws ApiException {
        ApiResponse<IdentificationStage> localVarResp = stagesIdentificationPartialUpdateWithHttpInfo(stageUuid, patchedIdentificationStageRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * IdentificationStage Viewset
     * @param stageUuid A UUID string identifying this Identification Stage. (required)
     * @param patchedIdentificationStageRequest  (optional)
     * @return ApiResponse&lt;IdentificationStage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IdentificationStage> stagesIdentificationPartialUpdateWithHttpInfo(UUID stageUuid, PatchedIdentificationStageRequest patchedIdentificationStageRequest) throws ApiException {
        okhttp3.Call localVarCall = stagesIdentificationPartialUpdateValidateBeforeCall(stageUuid, patchedIdentificationStageRequest, null);
        Type localVarReturnType = new TypeToken<IdentificationStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * IdentificationStage Viewset
     * @param stageUuid A UUID string identifying this Identification Stage. (required)
     * @param patchedIdentificationStageRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesIdentificationPartialUpdateAsync(UUID stageUuid, PatchedIdentificationStageRequest patchedIdentificationStageRequest, final ApiCallback<IdentificationStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesIdentificationPartialUpdateValidateBeforeCall(stageUuid, patchedIdentificationStageRequest, _callback);
        Type localVarReturnType = new TypeToken<IdentificationStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesIdentificationRetrieve
     * @param stageUuid A UUID string identifying this Identification Stage. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesIdentificationRetrieveCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/identification/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesIdentificationRetrieveValidateBeforeCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesIdentificationRetrieve(Async)");
        }

        return stagesIdentificationRetrieveCall(stageUuid, _callback);

    }

    /**
     * 
     * IdentificationStage Viewset
     * @param stageUuid A UUID string identifying this Identification Stage. (required)
     * @return IdentificationStage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public IdentificationStage stagesIdentificationRetrieve(UUID stageUuid) throws ApiException {
        ApiResponse<IdentificationStage> localVarResp = stagesIdentificationRetrieveWithHttpInfo(stageUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * IdentificationStage Viewset
     * @param stageUuid A UUID string identifying this Identification Stage. (required)
     * @return ApiResponse&lt;IdentificationStage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IdentificationStage> stagesIdentificationRetrieveWithHttpInfo(UUID stageUuid) throws ApiException {
        okhttp3.Call localVarCall = stagesIdentificationRetrieveValidateBeforeCall(stageUuid, null);
        Type localVarReturnType = new TypeToken<IdentificationStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * IdentificationStage Viewset
     * @param stageUuid A UUID string identifying this Identification Stage. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesIdentificationRetrieveAsync(UUID stageUuid, final ApiCallback<IdentificationStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesIdentificationRetrieveValidateBeforeCall(stageUuid, _callback);
        Type localVarReturnType = new TypeToken<IdentificationStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesIdentificationUpdate
     * @param stageUuid A UUID string identifying this Identification Stage. (required)
     * @param identificationStageRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesIdentificationUpdateCall(UUID stageUuid, IdentificationStageRequest identificationStageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = identificationStageRequest;

        // create path and map variables
        String localVarPath = "/stages/identification/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesIdentificationUpdateValidateBeforeCall(UUID stageUuid, IdentificationStageRequest identificationStageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesIdentificationUpdate(Async)");
        }

        // verify the required parameter 'identificationStageRequest' is set
        if (identificationStageRequest == null) {
            throw new ApiException("Missing the required parameter 'identificationStageRequest' when calling stagesIdentificationUpdate(Async)");
        }

        return stagesIdentificationUpdateCall(stageUuid, identificationStageRequest, _callback);

    }

    /**
     * 
     * IdentificationStage Viewset
     * @param stageUuid A UUID string identifying this Identification Stage. (required)
     * @param identificationStageRequest  (required)
     * @return IdentificationStage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public IdentificationStage stagesIdentificationUpdate(UUID stageUuid, IdentificationStageRequest identificationStageRequest) throws ApiException {
        ApiResponse<IdentificationStage> localVarResp = stagesIdentificationUpdateWithHttpInfo(stageUuid, identificationStageRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * IdentificationStage Viewset
     * @param stageUuid A UUID string identifying this Identification Stage. (required)
     * @param identificationStageRequest  (required)
     * @return ApiResponse&lt;IdentificationStage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IdentificationStage> stagesIdentificationUpdateWithHttpInfo(UUID stageUuid, IdentificationStageRequest identificationStageRequest) throws ApiException {
        okhttp3.Call localVarCall = stagesIdentificationUpdateValidateBeforeCall(stageUuid, identificationStageRequest, null);
        Type localVarReturnType = new TypeToken<IdentificationStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * IdentificationStage Viewset
     * @param stageUuid A UUID string identifying this Identification Stage. (required)
     * @param identificationStageRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesIdentificationUpdateAsync(UUID stageUuid, IdentificationStageRequest identificationStageRequest, final ApiCallback<IdentificationStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesIdentificationUpdateValidateBeforeCall(stageUuid, identificationStageRequest, _callback);
        Type localVarReturnType = new TypeToken<IdentificationStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesIdentificationUsedByList
     * @param stageUuid A UUID string identifying this Identification Stage. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesIdentificationUsedByListCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/identification/{stage_uuid}/used_by/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesIdentificationUsedByListValidateBeforeCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesIdentificationUsedByList(Async)");
        }

        return stagesIdentificationUsedByListCall(stageUuid, _callback);

    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param stageUuid A UUID string identifying this Identification Stage. (required)
     * @return List&lt;UsedBy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<UsedBy> stagesIdentificationUsedByList(UUID stageUuid) throws ApiException {
        ApiResponse<List<UsedBy>> localVarResp = stagesIdentificationUsedByListWithHttpInfo(stageUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param stageUuid A UUID string identifying this Identification Stage. (required)
     * @return ApiResponse&lt;List&lt;UsedBy&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UsedBy>> stagesIdentificationUsedByListWithHttpInfo(UUID stageUuid) throws ApiException {
        okhttp3.Call localVarCall = stagesIdentificationUsedByListValidateBeforeCall(stageUuid, null);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of all objects that use this object
     * @param stageUuid A UUID string identifying this Identification Stage. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesIdentificationUsedByListAsync(UUID stageUuid, final ApiCallback<List<UsedBy>> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesIdentificationUsedByListValidateBeforeCall(stageUuid, _callback);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesInvitationInvitationsCreate
     * @param invitationRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesInvitationInvitationsCreateCall(InvitationRequest invitationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = invitationRequest;

        // create path and map variables
        String localVarPath = "/stages/invitation/invitations/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesInvitationInvitationsCreateValidateBeforeCall(InvitationRequest invitationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'invitationRequest' is set
        if (invitationRequest == null) {
            throw new ApiException("Missing the required parameter 'invitationRequest' when calling stagesInvitationInvitationsCreate(Async)");
        }

        return stagesInvitationInvitationsCreateCall(invitationRequest, _callback);

    }

    /**
     * 
     * Invitation Viewset
     * @param invitationRequest  (required)
     * @return Invitation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Invitation stagesInvitationInvitationsCreate(InvitationRequest invitationRequest) throws ApiException {
        ApiResponse<Invitation> localVarResp = stagesInvitationInvitationsCreateWithHttpInfo(invitationRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Invitation Viewset
     * @param invitationRequest  (required)
     * @return ApiResponse&lt;Invitation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Invitation> stagesInvitationInvitationsCreateWithHttpInfo(InvitationRequest invitationRequest) throws ApiException {
        okhttp3.Call localVarCall = stagesInvitationInvitationsCreateValidateBeforeCall(invitationRequest, null);
        Type localVarReturnType = new TypeToken<Invitation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Invitation Viewset
     * @param invitationRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesInvitationInvitationsCreateAsync(InvitationRequest invitationRequest, final ApiCallback<Invitation> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesInvitationInvitationsCreateValidateBeforeCall(invitationRequest, _callback);
        Type localVarReturnType = new TypeToken<Invitation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesInvitationInvitationsDestroy
     * @param inviteUuid A UUID string identifying this Invitation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesInvitationInvitationsDestroyCall(UUID inviteUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/invitation/invitations/{invite_uuid}/"
            .replace("{" + "invite_uuid" + "}", localVarApiClient.escapeString(inviteUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesInvitationInvitationsDestroyValidateBeforeCall(UUID inviteUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inviteUuid' is set
        if (inviteUuid == null) {
            throw new ApiException("Missing the required parameter 'inviteUuid' when calling stagesInvitationInvitationsDestroy(Async)");
        }

        return stagesInvitationInvitationsDestroyCall(inviteUuid, _callback);

    }

    /**
     * 
     * Invitation Viewset
     * @param inviteUuid A UUID string identifying this Invitation. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void stagesInvitationInvitationsDestroy(UUID inviteUuid) throws ApiException {
        stagesInvitationInvitationsDestroyWithHttpInfo(inviteUuid);
    }

    /**
     * 
     * Invitation Viewset
     * @param inviteUuid A UUID string identifying this Invitation. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> stagesInvitationInvitationsDestroyWithHttpInfo(UUID inviteUuid) throws ApiException {
        okhttp3.Call localVarCall = stagesInvitationInvitationsDestroyValidateBeforeCall(inviteUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Invitation Viewset
     * @param inviteUuid A UUID string identifying this Invitation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesInvitationInvitationsDestroyAsync(UUID inviteUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesInvitationInvitationsDestroyValidateBeforeCall(inviteUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesInvitationInvitationsList
     * @param createdByUsername  (optional)
     * @param expires  (optional)
     * @param flowSlug  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesInvitationInvitationsListCall(String createdByUsername, OffsetDateTime expires, String flowSlug, String name, String ordering, Integer page, Integer pageSize, String search, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/invitation/invitations/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (createdByUsername != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_by__username", createdByUsername));
        }

        if (expires != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expires", expires));
        }

        if (flowSlug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("flow__slug", flowSlug));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesInvitationInvitationsListValidateBeforeCall(String createdByUsername, OffsetDateTime expires, String flowSlug, String name, String ordering, Integer page, Integer pageSize, String search, final ApiCallback _callback) throws ApiException {
        return stagesInvitationInvitationsListCall(createdByUsername, expires, flowSlug, name, ordering, page, pageSize, search, _callback);

    }

    /**
     * 
     * Invitation Viewset
     * @param createdByUsername  (optional)
     * @param expires  (optional)
     * @param flowSlug  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @return PaginatedInvitationList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedInvitationList stagesInvitationInvitationsList(String createdByUsername, OffsetDateTime expires, String flowSlug, String name, String ordering, Integer page, Integer pageSize, String search) throws ApiException {
        ApiResponse<PaginatedInvitationList> localVarResp = stagesInvitationInvitationsListWithHttpInfo(createdByUsername, expires, flowSlug, name, ordering, page, pageSize, search);
        return localVarResp.getData();
    }

    /**
     * 
     * Invitation Viewset
     * @param createdByUsername  (optional)
     * @param expires  (optional)
     * @param flowSlug  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @return ApiResponse&lt;PaginatedInvitationList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedInvitationList> stagesInvitationInvitationsListWithHttpInfo(String createdByUsername, OffsetDateTime expires, String flowSlug, String name, String ordering, Integer page, Integer pageSize, String search) throws ApiException {
        okhttp3.Call localVarCall = stagesInvitationInvitationsListValidateBeforeCall(createdByUsername, expires, flowSlug, name, ordering, page, pageSize, search, null);
        Type localVarReturnType = new TypeToken<PaginatedInvitationList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Invitation Viewset
     * @param createdByUsername  (optional)
     * @param expires  (optional)
     * @param flowSlug  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesInvitationInvitationsListAsync(String createdByUsername, OffsetDateTime expires, String flowSlug, String name, String ordering, Integer page, Integer pageSize, String search, final ApiCallback<PaginatedInvitationList> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesInvitationInvitationsListValidateBeforeCall(createdByUsername, expires, flowSlug, name, ordering, page, pageSize, search, _callback);
        Type localVarReturnType = new TypeToken<PaginatedInvitationList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesInvitationInvitationsPartialUpdate
     * @param inviteUuid A UUID string identifying this Invitation. (required)
     * @param patchedInvitationRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesInvitationInvitationsPartialUpdateCall(UUID inviteUuid, PatchedInvitationRequest patchedInvitationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchedInvitationRequest;

        // create path and map variables
        String localVarPath = "/stages/invitation/invitations/{invite_uuid}/"
            .replace("{" + "invite_uuid" + "}", localVarApiClient.escapeString(inviteUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesInvitationInvitationsPartialUpdateValidateBeforeCall(UUID inviteUuid, PatchedInvitationRequest patchedInvitationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inviteUuid' is set
        if (inviteUuid == null) {
            throw new ApiException("Missing the required parameter 'inviteUuid' when calling stagesInvitationInvitationsPartialUpdate(Async)");
        }

        return stagesInvitationInvitationsPartialUpdateCall(inviteUuid, patchedInvitationRequest, _callback);

    }

    /**
     * 
     * Invitation Viewset
     * @param inviteUuid A UUID string identifying this Invitation. (required)
     * @param patchedInvitationRequest  (optional)
     * @return Invitation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Invitation stagesInvitationInvitationsPartialUpdate(UUID inviteUuid, PatchedInvitationRequest patchedInvitationRequest) throws ApiException {
        ApiResponse<Invitation> localVarResp = stagesInvitationInvitationsPartialUpdateWithHttpInfo(inviteUuid, patchedInvitationRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Invitation Viewset
     * @param inviteUuid A UUID string identifying this Invitation. (required)
     * @param patchedInvitationRequest  (optional)
     * @return ApiResponse&lt;Invitation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Invitation> stagesInvitationInvitationsPartialUpdateWithHttpInfo(UUID inviteUuid, PatchedInvitationRequest patchedInvitationRequest) throws ApiException {
        okhttp3.Call localVarCall = stagesInvitationInvitationsPartialUpdateValidateBeforeCall(inviteUuid, patchedInvitationRequest, null);
        Type localVarReturnType = new TypeToken<Invitation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Invitation Viewset
     * @param inviteUuid A UUID string identifying this Invitation. (required)
     * @param patchedInvitationRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesInvitationInvitationsPartialUpdateAsync(UUID inviteUuid, PatchedInvitationRequest patchedInvitationRequest, final ApiCallback<Invitation> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesInvitationInvitationsPartialUpdateValidateBeforeCall(inviteUuid, patchedInvitationRequest, _callback);
        Type localVarReturnType = new TypeToken<Invitation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesInvitationInvitationsRetrieve
     * @param inviteUuid A UUID string identifying this Invitation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesInvitationInvitationsRetrieveCall(UUID inviteUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/invitation/invitations/{invite_uuid}/"
            .replace("{" + "invite_uuid" + "}", localVarApiClient.escapeString(inviteUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesInvitationInvitationsRetrieveValidateBeforeCall(UUID inviteUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inviteUuid' is set
        if (inviteUuid == null) {
            throw new ApiException("Missing the required parameter 'inviteUuid' when calling stagesInvitationInvitationsRetrieve(Async)");
        }

        return stagesInvitationInvitationsRetrieveCall(inviteUuid, _callback);

    }

    /**
     * 
     * Invitation Viewset
     * @param inviteUuid A UUID string identifying this Invitation. (required)
     * @return Invitation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Invitation stagesInvitationInvitationsRetrieve(UUID inviteUuid) throws ApiException {
        ApiResponse<Invitation> localVarResp = stagesInvitationInvitationsRetrieveWithHttpInfo(inviteUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Invitation Viewset
     * @param inviteUuid A UUID string identifying this Invitation. (required)
     * @return ApiResponse&lt;Invitation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Invitation> stagesInvitationInvitationsRetrieveWithHttpInfo(UUID inviteUuid) throws ApiException {
        okhttp3.Call localVarCall = stagesInvitationInvitationsRetrieveValidateBeforeCall(inviteUuid, null);
        Type localVarReturnType = new TypeToken<Invitation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Invitation Viewset
     * @param inviteUuid A UUID string identifying this Invitation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesInvitationInvitationsRetrieveAsync(UUID inviteUuid, final ApiCallback<Invitation> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesInvitationInvitationsRetrieveValidateBeforeCall(inviteUuid, _callback);
        Type localVarReturnType = new TypeToken<Invitation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesInvitationInvitationsUpdate
     * @param inviteUuid A UUID string identifying this Invitation. (required)
     * @param invitationRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesInvitationInvitationsUpdateCall(UUID inviteUuid, InvitationRequest invitationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = invitationRequest;

        // create path and map variables
        String localVarPath = "/stages/invitation/invitations/{invite_uuid}/"
            .replace("{" + "invite_uuid" + "}", localVarApiClient.escapeString(inviteUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesInvitationInvitationsUpdateValidateBeforeCall(UUID inviteUuid, InvitationRequest invitationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inviteUuid' is set
        if (inviteUuid == null) {
            throw new ApiException("Missing the required parameter 'inviteUuid' when calling stagesInvitationInvitationsUpdate(Async)");
        }

        // verify the required parameter 'invitationRequest' is set
        if (invitationRequest == null) {
            throw new ApiException("Missing the required parameter 'invitationRequest' when calling stagesInvitationInvitationsUpdate(Async)");
        }

        return stagesInvitationInvitationsUpdateCall(inviteUuid, invitationRequest, _callback);

    }

    /**
     * 
     * Invitation Viewset
     * @param inviteUuid A UUID string identifying this Invitation. (required)
     * @param invitationRequest  (required)
     * @return Invitation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Invitation stagesInvitationInvitationsUpdate(UUID inviteUuid, InvitationRequest invitationRequest) throws ApiException {
        ApiResponse<Invitation> localVarResp = stagesInvitationInvitationsUpdateWithHttpInfo(inviteUuid, invitationRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Invitation Viewset
     * @param inviteUuid A UUID string identifying this Invitation. (required)
     * @param invitationRequest  (required)
     * @return ApiResponse&lt;Invitation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Invitation> stagesInvitationInvitationsUpdateWithHttpInfo(UUID inviteUuid, InvitationRequest invitationRequest) throws ApiException {
        okhttp3.Call localVarCall = stagesInvitationInvitationsUpdateValidateBeforeCall(inviteUuid, invitationRequest, null);
        Type localVarReturnType = new TypeToken<Invitation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Invitation Viewset
     * @param inviteUuid A UUID string identifying this Invitation. (required)
     * @param invitationRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesInvitationInvitationsUpdateAsync(UUID inviteUuid, InvitationRequest invitationRequest, final ApiCallback<Invitation> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesInvitationInvitationsUpdateValidateBeforeCall(inviteUuid, invitationRequest, _callback);
        Type localVarReturnType = new TypeToken<Invitation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesInvitationInvitationsUsedByList
     * @param inviteUuid A UUID string identifying this Invitation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesInvitationInvitationsUsedByListCall(UUID inviteUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/invitation/invitations/{invite_uuid}/used_by/"
            .replace("{" + "invite_uuid" + "}", localVarApiClient.escapeString(inviteUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesInvitationInvitationsUsedByListValidateBeforeCall(UUID inviteUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inviteUuid' is set
        if (inviteUuid == null) {
            throw new ApiException("Missing the required parameter 'inviteUuid' when calling stagesInvitationInvitationsUsedByList(Async)");
        }

        return stagesInvitationInvitationsUsedByListCall(inviteUuid, _callback);

    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param inviteUuid A UUID string identifying this Invitation. (required)
     * @return List&lt;UsedBy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<UsedBy> stagesInvitationInvitationsUsedByList(UUID inviteUuid) throws ApiException {
        ApiResponse<List<UsedBy>> localVarResp = stagesInvitationInvitationsUsedByListWithHttpInfo(inviteUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param inviteUuid A UUID string identifying this Invitation. (required)
     * @return ApiResponse&lt;List&lt;UsedBy&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UsedBy>> stagesInvitationInvitationsUsedByListWithHttpInfo(UUID inviteUuid) throws ApiException {
        okhttp3.Call localVarCall = stagesInvitationInvitationsUsedByListValidateBeforeCall(inviteUuid, null);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of all objects that use this object
     * @param inviteUuid A UUID string identifying this Invitation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesInvitationInvitationsUsedByListAsync(UUID inviteUuid, final ApiCallback<List<UsedBy>> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesInvitationInvitationsUsedByListValidateBeforeCall(inviteUuid, _callback);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesInvitationStagesCreate
     * @param invitationStageRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesInvitationStagesCreateCall(InvitationStageRequest invitationStageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = invitationStageRequest;

        // create path and map variables
        String localVarPath = "/stages/invitation/stages/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesInvitationStagesCreateValidateBeforeCall(InvitationStageRequest invitationStageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'invitationStageRequest' is set
        if (invitationStageRequest == null) {
            throw new ApiException("Missing the required parameter 'invitationStageRequest' when calling stagesInvitationStagesCreate(Async)");
        }

        return stagesInvitationStagesCreateCall(invitationStageRequest, _callback);

    }

    /**
     * 
     * InvitationStage Viewset
     * @param invitationStageRequest  (required)
     * @return InvitationStage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InvitationStage stagesInvitationStagesCreate(InvitationStageRequest invitationStageRequest) throws ApiException {
        ApiResponse<InvitationStage> localVarResp = stagesInvitationStagesCreateWithHttpInfo(invitationStageRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * InvitationStage Viewset
     * @param invitationStageRequest  (required)
     * @return ApiResponse&lt;InvitationStage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InvitationStage> stagesInvitationStagesCreateWithHttpInfo(InvitationStageRequest invitationStageRequest) throws ApiException {
        okhttp3.Call localVarCall = stagesInvitationStagesCreateValidateBeforeCall(invitationStageRequest, null);
        Type localVarReturnType = new TypeToken<InvitationStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * InvitationStage Viewset
     * @param invitationStageRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesInvitationStagesCreateAsync(InvitationStageRequest invitationStageRequest, final ApiCallback<InvitationStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesInvitationStagesCreateValidateBeforeCall(invitationStageRequest, _callback);
        Type localVarReturnType = new TypeToken<InvitationStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesInvitationStagesDestroy
     * @param stageUuid A UUID string identifying this Invitation Stage. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesInvitationStagesDestroyCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/invitation/stages/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesInvitationStagesDestroyValidateBeforeCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesInvitationStagesDestroy(Async)");
        }

        return stagesInvitationStagesDestroyCall(stageUuid, _callback);

    }

    /**
     * 
     * InvitationStage Viewset
     * @param stageUuid A UUID string identifying this Invitation Stage. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void stagesInvitationStagesDestroy(UUID stageUuid) throws ApiException {
        stagesInvitationStagesDestroyWithHttpInfo(stageUuid);
    }

    /**
     * 
     * InvitationStage Viewset
     * @param stageUuid A UUID string identifying this Invitation Stage. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> stagesInvitationStagesDestroyWithHttpInfo(UUID stageUuid) throws ApiException {
        okhttp3.Call localVarCall = stagesInvitationStagesDestroyValidateBeforeCall(stageUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * InvitationStage Viewset
     * @param stageUuid A UUID string identifying this Invitation Stage. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesInvitationStagesDestroyAsync(UUID stageUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesInvitationStagesDestroyValidateBeforeCall(stageUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesInvitationStagesList
     * @param continueFlowWithoutInvitation  (optional)
     * @param name  (optional)
     * @param noFlows  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @param stageUuid  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesInvitationStagesListCall(Boolean continueFlowWithoutInvitation, String name, Boolean noFlows, String ordering, Integer page, Integer pageSize, String search, UUID stageUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/invitation/stages/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (continueFlowWithoutInvitation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("continue_flow_without_invitation", continueFlowWithoutInvitation));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (noFlows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("no_flows", noFlows));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (stageUuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stage_uuid", stageUuid));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesInvitationStagesListValidateBeforeCall(Boolean continueFlowWithoutInvitation, String name, Boolean noFlows, String ordering, Integer page, Integer pageSize, String search, UUID stageUuid, final ApiCallback _callback) throws ApiException {
        return stagesInvitationStagesListCall(continueFlowWithoutInvitation, name, noFlows, ordering, page, pageSize, search, stageUuid, _callback);

    }

    /**
     * 
     * InvitationStage Viewset
     * @param continueFlowWithoutInvitation  (optional)
     * @param name  (optional)
     * @param noFlows  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @param stageUuid  (optional)
     * @return PaginatedInvitationStageList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedInvitationStageList stagesInvitationStagesList(Boolean continueFlowWithoutInvitation, String name, Boolean noFlows, String ordering, Integer page, Integer pageSize, String search, UUID stageUuid) throws ApiException {
        ApiResponse<PaginatedInvitationStageList> localVarResp = stagesInvitationStagesListWithHttpInfo(continueFlowWithoutInvitation, name, noFlows, ordering, page, pageSize, search, stageUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * InvitationStage Viewset
     * @param continueFlowWithoutInvitation  (optional)
     * @param name  (optional)
     * @param noFlows  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @param stageUuid  (optional)
     * @return ApiResponse&lt;PaginatedInvitationStageList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedInvitationStageList> stagesInvitationStagesListWithHttpInfo(Boolean continueFlowWithoutInvitation, String name, Boolean noFlows, String ordering, Integer page, Integer pageSize, String search, UUID stageUuid) throws ApiException {
        okhttp3.Call localVarCall = stagesInvitationStagesListValidateBeforeCall(continueFlowWithoutInvitation, name, noFlows, ordering, page, pageSize, search, stageUuid, null);
        Type localVarReturnType = new TypeToken<PaginatedInvitationStageList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * InvitationStage Viewset
     * @param continueFlowWithoutInvitation  (optional)
     * @param name  (optional)
     * @param noFlows  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @param stageUuid  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesInvitationStagesListAsync(Boolean continueFlowWithoutInvitation, String name, Boolean noFlows, String ordering, Integer page, Integer pageSize, String search, UUID stageUuid, final ApiCallback<PaginatedInvitationStageList> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesInvitationStagesListValidateBeforeCall(continueFlowWithoutInvitation, name, noFlows, ordering, page, pageSize, search, stageUuid, _callback);
        Type localVarReturnType = new TypeToken<PaginatedInvitationStageList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesInvitationStagesPartialUpdate
     * @param stageUuid A UUID string identifying this Invitation Stage. (required)
     * @param patchedInvitationStageRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesInvitationStagesPartialUpdateCall(UUID stageUuid, PatchedInvitationStageRequest patchedInvitationStageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchedInvitationStageRequest;

        // create path and map variables
        String localVarPath = "/stages/invitation/stages/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesInvitationStagesPartialUpdateValidateBeforeCall(UUID stageUuid, PatchedInvitationStageRequest patchedInvitationStageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesInvitationStagesPartialUpdate(Async)");
        }

        return stagesInvitationStagesPartialUpdateCall(stageUuid, patchedInvitationStageRequest, _callback);

    }

    /**
     * 
     * InvitationStage Viewset
     * @param stageUuid A UUID string identifying this Invitation Stage. (required)
     * @param patchedInvitationStageRequest  (optional)
     * @return InvitationStage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InvitationStage stagesInvitationStagesPartialUpdate(UUID stageUuid, PatchedInvitationStageRequest patchedInvitationStageRequest) throws ApiException {
        ApiResponse<InvitationStage> localVarResp = stagesInvitationStagesPartialUpdateWithHttpInfo(stageUuid, patchedInvitationStageRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * InvitationStage Viewset
     * @param stageUuid A UUID string identifying this Invitation Stage. (required)
     * @param patchedInvitationStageRequest  (optional)
     * @return ApiResponse&lt;InvitationStage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InvitationStage> stagesInvitationStagesPartialUpdateWithHttpInfo(UUID stageUuid, PatchedInvitationStageRequest patchedInvitationStageRequest) throws ApiException {
        okhttp3.Call localVarCall = stagesInvitationStagesPartialUpdateValidateBeforeCall(stageUuid, patchedInvitationStageRequest, null);
        Type localVarReturnType = new TypeToken<InvitationStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * InvitationStage Viewset
     * @param stageUuid A UUID string identifying this Invitation Stage. (required)
     * @param patchedInvitationStageRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesInvitationStagesPartialUpdateAsync(UUID stageUuid, PatchedInvitationStageRequest patchedInvitationStageRequest, final ApiCallback<InvitationStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesInvitationStagesPartialUpdateValidateBeforeCall(stageUuid, patchedInvitationStageRequest, _callback);
        Type localVarReturnType = new TypeToken<InvitationStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesInvitationStagesRetrieve
     * @param stageUuid A UUID string identifying this Invitation Stage. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesInvitationStagesRetrieveCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/invitation/stages/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesInvitationStagesRetrieveValidateBeforeCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesInvitationStagesRetrieve(Async)");
        }

        return stagesInvitationStagesRetrieveCall(stageUuid, _callback);

    }

    /**
     * 
     * InvitationStage Viewset
     * @param stageUuid A UUID string identifying this Invitation Stage. (required)
     * @return InvitationStage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InvitationStage stagesInvitationStagesRetrieve(UUID stageUuid) throws ApiException {
        ApiResponse<InvitationStage> localVarResp = stagesInvitationStagesRetrieveWithHttpInfo(stageUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * InvitationStage Viewset
     * @param stageUuid A UUID string identifying this Invitation Stage. (required)
     * @return ApiResponse&lt;InvitationStage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InvitationStage> stagesInvitationStagesRetrieveWithHttpInfo(UUID stageUuid) throws ApiException {
        okhttp3.Call localVarCall = stagesInvitationStagesRetrieveValidateBeforeCall(stageUuid, null);
        Type localVarReturnType = new TypeToken<InvitationStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * InvitationStage Viewset
     * @param stageUuid A UUID string identifying this Invitation Stage. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesInvitationStagesRetrieveAsync(UUID stageUuid, final ApiCallback<InvitationStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesInvitationStagesRetrieveValidateBeforeCall(stageUuid, _callback);
        Type localVarReturnType = new TypeToken<InvitationStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesInvitationStagesUpdate
     * @param stageUuid A UUID string identifying this Invitation Stage. (required)
     * @param invitationStageRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesInvitationStagesUpdateCall(UUID stageUuid, InvitationStageRequest invitationStageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = invitationStageRequest;

        // create path and map variables
        String localVarPath = "/stages/invitation/stages/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesInvitationStagesUpdateValidateBeforeCall(UUID stageUuid, InvitationStageRequest invitationStageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesInvitationStagesUpdate(Async)");
        }

        // verify the required parameter 'invitationStageRequest' is set
        if (invitationStageRequest == null) {
            throw new ApiException("Missing the required parameter 'invitationStageRequest' when calling stagesInvitationStagesUpdate(Async)");
        }

        return stagesInvitationStagesUpdateCall(stageUuid, invitationStageRequest, _callback);

    }

    /**
     * 
     * InvitationStage Viewset
     * @param stageUuid A UUID string identifying this Invitation Stage. (required)
     * @param invitationStageRequest  (required)
     * @return InvitationStage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InvitationStage stagesInvitationStagesUpdate(UUID stageUuid, InvitationStageRequest invitationStageRequest) throws ApiException {
        ApiResponse<InvitationStage> localVarResp = stagesInvitationStagesUpdateWithHttpInfo(stageUuid, invitationStageRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * InvitationStage Viewset
     * @param stageUuid A UUID string identifying this Invitation Stage. (required)
     * @param invitationStageRequest  (required)
     * @return ApiResponse&lt;InvitationStage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InvitationStage> stagesInvitationStagesUpdateWithHttpInfo(UUID stageUuid, InvitationStageRequest invitationStageRequest) throws ApiException {
        okhttp3.Call localVarCall = stagesInvitationStagesUpdateValidateBeforeCall(stageUuid, invitationStageRequest, null);
        Type localVarReturnType = new TypeToken<InvitationStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * InvitationStage Viewset
     * @param stageUuid A UUID string identifying this Invitation Stage. (required)
     * @param invitationStageRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesInvitationStagesUpdateAsync(UUID stageUuid, InvitationStageRequest invitationStageRequest, final ApiCallback<InvitationStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesInvitationStagesUpdateValidateBeforeCall(stageUuid, invitationStageRequest, _callback);
        Type localVarReturnType = new TypeToken<InvitationStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesInvitationStagesUsedByList
     * @param stageUuid A UUID string identifying this Invitation Stage. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesInvitationStagesUsedByListCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/invitation/stages/{stage_uuid}/used_by/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesInvitationStagesUsedByListValidateBeforeCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesInvitationStagesUsedByList(Async)");
        }

        return stagesInvitationStagesUsedByListCall(stageUuid, _callback);

    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param stageUuid A UUID string identifying this Invitation Stage. (required)
     * @return List&lt;UsedBy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<UsedBy> stagesInvitationStagesUsedByList(UUID stageUuid) throws ApiException {
        ApiResponse<List<UsedBy>> localVarResp = stagesInvitationStagesUsedByListWithHttpInfo(stageUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param stageUuid A UUID string identifying this Invitation Stage. (required)
     * @return ApiResponse&lt;List&lt;UsedBy&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UsedBy>> stagesInvitationStagesUsedByListWithHttpInfo(UUID stageUuid) throws ApiException {
        okhttp3.Call localVarCall = stagesInvitationStagesUsedByListValidateBeforeCall(stageUuid, null);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of all objects that use this object
     * @param stageUuid A UUID string identifying this Invitation Stage. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesInvitationStagesUsedByListAsync(UUID stageUuid, final ApiCallback<List<UsedBy>> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesInvitationStagesUsedByListValidateBeforeCall(stageUuid, _callback);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesPasswordCreate
     * @param passwordStageRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesPasswordCreateCall(PasswordStageRequest passwordStageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = passwordStageRequest;

        // create path and map variables
        String localVarPath = "/stages/password/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesPasswordCreateValidateBeforeCall(PasswordStageRequest passwordStageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'passwordStageRequest' is set
        if (passwordStageRequest == null) {
            throw new ApiException("Missing the required parameter 'passwordStageRequest' when calling stagesPasswordCreate(Async)");
        }

        return stagesPasswordCreateCall(passwordStageRequest, _callback);

    }

    /**
     * 
     * PasswordStage Viewset
     * @param passwordStageRequest  (required)
     * @return PasswordStage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PasswordStage stagesPasswordCreate(PasswordStageRequest passwordStageRequest) throws ApiException {
        ApiResponse<PasswordStage> localVarResp = stagesPasswordCreateWithHttpInfo(passwordStageRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * PasswordStage Viewset
     * @param passwordStageRequest  (required)
     * @return ApiResponse&lt;PasswordStage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PasswordStage> stagesPasswordCreateWithHttpInfo(PasswordStageRequest passwordStageRequest) throws ApiException {
        okhttp3.Call localVarCall = stagesPasswordCreateValidateBeforeCall(passwordStageRequest, null);
        Type localVarReturnType = new TypeToken<PasswordStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * PasswordStage Viewset
     * @param passwordStageRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesPasswordCreateAsync(PasswordStageRequest passwordStageRequest, final ApiCallback<PasswordStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesPasswordCreateValidateBeforeCall(passwordStageRequest, _callback);
        Type localVarReturnType = new TypeToken<PasswordStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesPasswordDestroy
     * @param stageUuid A UUID string identifying this Password Stage. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesPasswordDestroyCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/password/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesPasswordDestroyValidateBeforeCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesPasswordDestroy(Async)");
        }

        return stagesPasswordDestroyCall(stageUuid, _callback);

    }

    /**
     * 
     * PasswordStage Viewset
     * @param stageUuid A UUID string identifying this Password Stage. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void stagesPasswordDestroy(UUID stageUuid) throws ApiException {
        stagesPasswordDestroyWithHttpInfo(stageUuid);
    }

    /**
     * 
     * PasswordStage Viewset
     * @param stageUuid A UUID string identifying this Password Stage. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> stagesPasswordDestroyWithHttpInfo(UUID stageUuid) throws ApiException {
        okhttp3.Call localVarCall = stagesPasswordDestroyValidateBeforeCall(stageUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * PasswordStage Viewset
     * @param stageUuid A UUID string identifying this Password Stage. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesPasswordDestroyAsync(UUID stageUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesPasswordDestroyValidateBeforeCall(stageUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesPasswordList
     * @param configureFlow  (optional)
     * @param failedAttemptsBeforeCancel  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesPasswordListCall(UUID configureFlow, Integer failedAttemptsBeforeCancel, String name, String ordering, Integer page, Integer pageSize, String search, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/password/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (configureFlow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("configure_flow", configureFlow));
        }

        if (failedAttemptsBeforeCancel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("failed_attempts_before_cancel", failedAttemptsBeforeCancel));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesPasswordListValidateBeforeCall(UUID configureFlow, Integer failedAttemptsBeforeCancel, String name, String ordering, Integer page, Integer pageSize, String search, final ApiCallback _callback) throws ApiException {
        return stagesPasswordListCall(configureFlow, failedAttemptsBeforeCancel, name, ordering, page, pageSize, search, _callback);

    }

    /**
     * 
     * PasswordStage Viewset
     * @param configureFlow  (optional)
     * @param failedAttemptsBeforeCancel  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @return PaginatedPasswordStageList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedPasswordStageList stagesPasswordList(UUID configureFlow, Integer failedAttemptsBeforeCancel, String name, String ordering, Integer page, Integer pageSize, String search) throws ApiException {
        ApiResponse<PaginatedPasswordStageList> localVarResp = stagesPasswordListWithHttpInfo(configureFlow, failedAttemptsBeforeCancel, name, ordering, page, pageSize, search);
        return localVarResp.getData();
    }

    /**
     * 
     * PasswordStage Viewset
     * @param configureFlow  (optional)
     * @param failedAttemptsBeforeCancel  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @return ApiResponse&lt;PaginatedPasswordStageList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedPasswordStageList> stagesPasswordListWithHttpInfo(UUID configureFlow, Integer failedAttemptsBeforeCancel, String name, String ordering, Integer page, Integer pageSize, String search) throws ApiException {
        okhttp3.Call localVarCall = stagesPasswordListValidateBeforeCall(configureFlow, failedAttemptsBeforeCancel, name, ordering, page, pageSize, search, null);
        Type localVarReturnType = new TypeToken<PaginatedPasswordStageList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * PasswordStage Viewset
     * @param configureFlow  (optional)
     * @param failedAttemptsBeforeCancel  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesPasswordListAsync(UUID configureFlow, Integer failedAttemptsBeforeCancel, String name, String ordering, Integer page, Integer pageSize, String search, final ApiCallback<PaginatedPasswordStageList> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesPasswordListValidateBeforeCall(configureFlow, failedAttemptsBeforeCancel, name, ordering, page, pageSize, search, _callback);
        Type localVarReturnType = new TypeToken<PaginatedPasswordStageList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesPasswordPartialUpdate
     * @param stageUuid A UUID string identifying this Password Stage. (required)
     * @param patchedPasswordStageRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesPasswordPartialUpdateCall(UUID stageUuid, PatchedPasswordStageRequest patchedPasswordStageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchedPasswordStageRequest;

        // create path and map variables
        String localVarPath = "/stages/password/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesPasswordPartialUpdateValidateBeforeCall(UUID stageUuid, PatchedPasswordStageRequest patchedPasswordStageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesPasswordPartialUpdate(Async)");
        }

        return stagesPasswordPartialUpdateCall(stageUuid, patchedPasswordStageRequest, _callback);

    }

    /**
     * 
     * PasswordStage Viewset
     * @param stageUuid A UUID string identifying this Password Stage. (required)
     * @param patchedPasswordStageRequest  (optional)
     * @return PasswordStage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PasswordStage stagesPasswordPartialUpdate(UUID stageUuid, PatchedPasswordStageRequest patchedPasswordStageRequest) throws ApiException {
        ApiResponse<PasswordStage> localVarResp = stagesPasswordPartialUpdateWithHttpInfo(stageUuid, patchedPasswordStageRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * PasswordStage Viewset
     * @param stageUuid A UUID string identifying this Password Stage. (required)
     * @param patchedPasswordStageRequest  (optional)
     * @return ApiResponse&lt;PasswordStage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PasswordStage> stagesPasswordPartialUpdateWithHttpInfo(UUID stageUuid, PatchedPasswordStageRequest patchedPasswordStageRequest) throws ApiException {
        okhttp3.Call localVarCall = stagesPasswordPartialUpdateValidateBeforeCall(stageUuid, patchedPasswordStageRequest, null);
        Type localVarReturnType = new TypeToken<PasswordStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * PasswordStage Viewset
     * @param stageUuid A UUID string identifying this Password Stage. (required)
     * @param patchedPasswordStageRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesPasswordPartialUpdateAsync(UUID stageUuid, PatchedPasswordStageRequest patchedPasswordStageRequest, final ApiCallback<PasswordStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesPasswordPartialUpdateValidateBeforeCall(stageUuid, patchedPasswordStageRequest, _callback);
        Type localVarReturnType = new TypeToken<PasswordStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesPasswordRetrieve
     * @param stageUuid A UUID string identifying this Password Stage. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesPasswordRetrieveCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/password/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesPasswordRetrieveValidateBeforeCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesPasswordRetrieve(Async)");
        }

        return stagesPasswordRetrieveCall(stageUuid, _callback);

    }

    /**
     * 
     * PasswordStage Viewset
     * @param stageUuid A UUID string identifying this Password Stage. (required)
     * @return PasswordStage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PasswordStage stagesPasswordRetrieve(UUID stageUuid) throws ApiException {
        ApiResponse<PasswordStage> localVarResp = stagesPasswordRetrieveWithHttpInfo(stageUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * PasswordStage Viewset
     * @param stageUuid A UUID string identifying this Password Stage. (required)
     * @return ApiResponse&lt;PasswordStage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PasswordStage> stagesPasswordRetrieveWithHttpInfo(UUID stageUuid) throws ApiException {
        okhttp3.Call localVarCall = stagesPasswordRetrieveValidateBeforeCall(stageUuid, null);
        Type localVarReturnType = new TypeToken<PasswordStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * PasswordStage Viewset
     * @param stageUuid A UUID string identifying this Password Stage. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesPasswordRetrieveAsync(UUID stageUuid, final ApiCallback<PasswordStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesPasswordRetrieveValidateBeforeCall(stageUuid, _callback);
        Type localVarReturnType = new TypeToken<PasswordStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesPasswordUpdate
     * @param stageUuid A UUID string identifying this Password Stage. (required)
     * @param passwordStageRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesPasswordUpdateCall(UUID stageUuid, PasswordStageRequest passwordStageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = passwordStageRequest;

        // create path and map variables
        String localVarPath = "/stages/password/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesPasswordUpdateValidateBeforeCall(UUID stageUuid, PasswordStageRequest passwordStageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesPasswordUpdate(Async)");
        }

        // verify the required parameter 'passwordStageRequest' is set
        if (passwordStageRequest == null) {
            throw new ApiException("Missing the required parameter 'passwordStageRequest' when calling stagesPasswordUpdate(Async)");
        }

        return stagesPasswordUpdateCall(stageUuid, passwordStageRequest, _callback);

    }

    /**
     * 
     * PasswordStage Viewset
     * @param stageUuid A UUID string identifying this Password Stage. (required)
     * @param passwordStageRequest  (required)
     * @return PasswordStage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PasswordStage stagesPasswordUpdate(UUID stageUuid, PasswordStageRequest passwordStageRequest) throws ApiException {
        ApiResponse<PasswordStage> localVarResp = stagesPasswordUpdateWithHttpInfo(stageUuid, passwordStageRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * PasswordStage Viewset
     * @param stageUuid A UUID string identifying this Password Stage. (required)
     * @param passwordStageRequest  (required)
     * @return ApiResponse&lt;PasswordStage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PasswordStage> stagesPasswordUpdateWithHttpInfo(UUID stageUuid, PasswordStageRequest passwordStageRequest) throws ApiException {
        okhttp3.Call localVarCall = stagesPasswordUpdateValidateBeforeCall(stageUuid, passwordStageRequest, null);
        Type localVarReturnType = new TypeToken<PasswordStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * PasswordStage Viewset
     * @param stageUuid A UUID string identifying this Password Stage. (required)
     * @param passwordStageRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesPasswordUpdateAsync(UUID stageUuid, PasswordStageRequest passwordStageRequest, final ApiCallback<PasswordStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesPasswordUpdateValidateBeforeCall(stageUuid, passwordStageRequest, _callback);
        Type localVarReturnType = new TypeToken<PasswordStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesPasswordUsedByList
     * @param stageUuid A UUID string identifying this Password Stage. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesPasswordUsedByListCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/password/{stage_uuid}/used_by/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesPasswordUsedByListValidateBeforeCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesPasswordUsedByList(Async)");
        }

        return stagesPasswordUsedByListCall(stageUuid, _callback);

    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param stageUuid A UUID string identifying this Password Stage. (required)
     * @return List&lt;UsedBy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<UsedBy> stagesPasswordUsedByList(UUID stageUuid) throws ApiException {
        ApiResponse<List<UsedBy>> localVarResp = stagesPasswordUsedByListWithHttpInfo(stageUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param stageUuid A UUID string identifying this Password Stage. (required)
     * @return ApiResponse&lt;List&lt;UsedBy&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UsedBy>> stagesPasswordUsedByListWithHttpInfo(UUID stageUuid) throws ApiException {
        okhttp3.Call localVarCall = stagesPasswordUsedByListValidateBeforeCall(stageUuid, null);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of all objects that use this object
     * @param stageUuid A UUID string identifying this Password Stage. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesPasswordUsedByListAsync(UUID stageUuid, final ApiCallback<List<UsedBy>> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesPasswordUsedByListValidateBeforeCall(stageUuid, _callback);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesPromptPromptsCreate
     * @param promptRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesPromptPromptsCreateCall(PromptRequest promptRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = promptRequest;

        // create path and map variables
        String localVarPath = "/stages/prompt/prompts/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesPromptPromptsCreateValidateBeforeCall(PromptRequest promptRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'promptRequest' is set
        if (promptRequest == null) {
            throw new ApiException("Missing the required parameter 'promptRequest' when calling stagesPromptPromptsCreate(Async)");
        }

        return stagesPromptPromptsCreateCall(promptRequest, _callback);

    }

    /**
     * 
     * Prompt Viewset
     * @param promptRequest  (required)
     * @return Prompt
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Prompt stagesPromptPromptsCreate(PromptRequest promptRequest) throws ApiException {
        ApiResponse<Prompt> localVarResp = stagesPromptPromptsCreateWithHttpInfo(promptRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Prompt Viewset
     * @param promptRequest  (required)
     * @return ApiResponse&lt;Prompt&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Prompt> stagesPromptPromptsCreateWithHttpInfo(PromptRequest promptRequest) throws ApiException {
        okhttp3.Call localVarCall = stagesPromptPromptsCreateValidateBeforeCall(promptRequest, null);
        Type localVarReturnType = new TypeToken<Prompt>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Prompt Viewset
     * @param promptRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesPromptPromptsCreateAsync(PromptRequest promptRequest, final ApiCallback<Prompt> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesPromptPromptsCreateValidateBeforeCall(promptRequest, _callback);
        Type localVarReturnType = new TypeToken<Prompt>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesPromptPromptsDestroy
     * @param promptUuid A UUID string identifying this Prompt. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesPromptPromptsDestroyCall(UUID promptUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/prompt/prompts/{prompt_uuid}/"
            .replace("{" + "prompt_uuid" + "}", localVarApiClient.escapeString(promptUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesPromptPromptsDestroyValidateBeforeCall(UUID promptUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'promptUuid' is set
        if (promptUuid == null) {
            throw new ApiException("Missing the required parameter 'promptUuid' when calling stagesPromptPromptsDestroy(Async)");
        }

        return stagesPromptPromptsDestroyCall(promptUuid, _callback);

    }

    /**
     * 
     * Prompt Viewset
     * @param promptUuid A UUID string identifying this Prompt. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void stagesPromptPromptsDestroy(UUID promptUuid) throws ApiException {
        stagesPromptPromptsDestroyWithHttpInfo(promptUuid);
    }

    /**
     * 
     * Prompt Viewset
     * @param promptUuid A UUID string identifying this Prompt. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> stagesPromptPromptsDestroyWithHttpInfo(UUID promptUuid) throws ApiException {
        okhttp3.Call localVarCall = stagesPromptPromptsDestroyValidateBeforeCall(promptUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Prompt Viewset
     * @param promptUuid A UUID string identifying this Prompt. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesPromptPromptsDestroyAsync(UUID promptUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesPromptPromptsDestroyValidateBeforeCall(promptUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesPromptPromptsList
     * @param fieldKey  (optional)
     * @param label  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param placeholder  (optional)
     * @param search A search term. (optional)
     * @param type  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesPromptPromptsListCall(String fieldKey, String label, String name, String ordering, Integer page, Integer pageSize, String placeholder, String search, String type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/prompt/prompts/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fieldKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("field_key", fieldKey));
        }

        if (label != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label", label));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (placeholder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("placeholder", placeholder));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesPromptPromptsListValidateBeforeCall(String fieldKey, String label, String name, String ordering, Integer page, Integer pageSize, String placeholder, String search, String type, final ApiCallback _callback) throws ApiException {
        return stagesPromptPromptsListCall(fieldKey, label, name, ordering, page, pageSize, placeholder, search, type, _callback);

    }

    /**
     * 
     * Prompt Viewset
     * @param fieldKey  (optional)
     * @param label  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param placeholder  (optional)
     * @param search A search term. (optional)
     * @param type  (optional)
     * @return PaginatedPromptList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedPromptList stagesPromptPromptsList(String fieldKey, String label, String name, String ordering, Integer page, Integer pageSize, String placeholder, String search, String type) throws ApiException {
        ApiResponse<PaginatedPromptList> localVarResp = stagesPromptPromptsListWithHttpInfo(fieldKey, label, name, ordering, page, pageSize, placeholder, search, type);
        return localVarResp.getData();
    }

    /**
     * 
     * Prompt Viewset
     * @param fieldKey  (optional)
     * @param label  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param placeholder  (optional)
     * @param search A search term. (optional)
     * @param type  (optional)
     * @return ApiResponse&lt;PaginatedPromptList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedPromptList> stagesPromptPromptsListWithHttpInfo(String fieldKey, String label, String name, String ordering, Integer page, Integer pageSize, String placeholder, String search, String type) throws ApiException {
        okhttp3.Call localVarCall = stagesPromptPromptsListValidateBeforeCall(fieldKey, label, name, ordering, page, pageSize, placeholder, search, type, null);
        Type localVarReturnType = new TypeToken<PaginatedPromptList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Prompt Viewset
     * @param fieldKey  (optional)
     * @param label  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param placeholder  (optional)
     * @param search A search term. (optional)
     * @param type  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesPromptPromptsListAsync(String fieldKey, String label, String name, String ordering, Integer page, Integer pageSize, String placeholder, String search, String type, final ApiCallback<PaginatedPromptList> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesPromptPromptsListValidateBeforeCall(fieldKey, label, name, ordering, page, pageSize, placeholder, search, type, _callback);
        Type localVarReturnType = new TypeToken<PaginatedPromptList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesPromptPromptsPartialUpdate
     * @param promptUuid A UUID string identifying this Prompt. (required)
     * @param patchedPromptRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesPromptPromptsPartialUpdateCall(UUID promptUuid, PatchedPromptRequest patchedPromptRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchedPromptRequest;

        // create path and map variables
        String localVarPath = "/stages/prompt/prompts/{prompt_uuid}/"
            .replace("{" + "prompt_uuid" + "}", localVarApiClient.escapeString(promptUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesPromptPromptsPartialUpdateValidateBeforeCall(UUID promptUuid, PatchedPromptRequest patchedPromptRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'promptUuid' is set
        if (promptUuid == null) {
            throw new ApiException("Missing the required parameter 'promptUuid' when calling stagesPromptPromptsPartialUpdate(Async)");
        }

        return stagesPromptPromptsPartialUpdateCall(promptUuid, patchedPromptRequest, _callback);

    }

    /**
     * 
     * Prompt Viewset
     * @param promptUuid A UUID string identifying this Prompt. (required)
     * @param patchedPromptRequest  (optional)
     * @return Prompt
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Prompt stagesPromptPromptsPartialUpdate(UUID promptUuid, PatchedPromptRequest patchedPromptRequest) throws ApiException {
        ApiResponse<Prompt> localVarResp = stagesPromptPromptsPartialUpdateWithHttpInfo(promptUuid, patchedPromptRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Prompt Viewset
     * @param promptUuid A UUID string identifying this Prompt. (required)
     * @param patchedPromptRequest  (optional)
     * @return ApiResponse&lt;Prompt&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Prompt> stagesPromptPromptsPartialUpdateWithHttpInfo(UUID promptUuid, PatchedPromptRequest patchedPromptRequest) throws ApiException {
        okhttp3.Call localVarCall = stagesPromptPromptsPartialUpdateValidateBeforeCall(promptUuid, patchedPromptRequest, null);
        Type localVarReturnType = new TypeToken<Prompt>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Prompt Viewset
     * @param promptUuid A UUID string identifying this Prompt. (required)
     * @param patchedPromptRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesPromptPromptsPartialUpdateAsync(UUID promptUuid, PatchedPromptRequest patchedPromptRequest, final ApiCallback<Prompt> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesPromptPromptsPartialUpdateValidateBeforeCall(promptUuid, patchedPromptRequest, _callback);
        Type localVarReturnType = new TypeToken<Prompt>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesPromptPromptsPreviewCreate
     * @param promptRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesPromptPromptsPreviewCreateCall(PromptRequest promptRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = promptRequest;

        // create path and map variables
        String localVarPath = "/stages/prompt/prompts/preview/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesPromptPromptsPreviewCreateValidateBeforeCall(PromptRequest promptRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'promptRequest' is set
        if (promptRequest == null) {
            throw new ApiException("Missing the required parameter 'promptRequest' when calling stagesPromptPromptsPreviewCreate(Async)");
        }

        return stagesPromptPromptsPreviewCreateCall(promptRequest, _callback);

    }

    /**
     * 
     * Preview a prompt as a challenge, just like a flow would receive
     * @param promptRequest  (required)
     * @return PromptChallenge
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PromptChallenge stagesPromptPromptsPreviewCreate(PromptRequest promptRequest) throws ApiException {
        ApiResponse<PromptChallenge> localVarResp = stagesPromptPromptsPreviewCreateWithHttpInfo(promptRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Preview a prompt as a challenge, just like a flow would receive
     * @param promptRequest  (required)
     * @return ApiResponse&lt;PromptChallenge&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PromptChallenge> stagesPromptPromptsPreviewCreateWithHttpInfo(PromptRequest promptRequest) throws ApiException {
        okhttp3.Call localVarCall = stagesPromptPromptsPreviewCreateValidateBeforeCall(promptRequest, null);
        Type localVarReturnType = new TypeToken<PromptChallenge>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Preview a prompt as a challenge, just like a flow would receive
     * @param promptRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesPromptPromptsPreviewCreateAsync(PromptRequest promptRequest, final ApiCallback<PromptChallenge> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesPromptPromptsPreviewCreateValidateBeforeCall(promptRequest, _callback);
        Type localVarReturnType = new TypeToken<PromptChallenge>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesPromptPromptsRetrieve
     * @param promptUuid A UUID string identifying this Prompt. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesPromptPromptsRetrieveCall(UUID promptUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/prompt/prompts/{prompt_uuid}/"
            .replace("{" + "prompt_uuid" + "}", localVarApiClient.escapeString(promptUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesPromptPromptsRetrieveValidateBeforeCall(UUID promptUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'promptUuid' is set
        if (promptUuid == null) {
            throw new ApiException("Missing the required parameter 'promptUuid' when calling stagesPromptPromptsRetrieve(Async)");
        }

        return stagesPromptPromptsRetrieveCall(promptUuid, _callback);

    }

    /**
     * 
     * Prompt Viewset
     * @param promptUuid A UUID string identifying this Prompt. (required)
     * @return Prompt
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Prompt stagesPromptPromptsRetrieve(UUID promptUuid) throws ApiException {
        ApiResponse<Prompt> localVarResp = stagesPromptPromptsRetrieveWithHttpInfo(promptUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Prompt Viewset
     * @param promptUuid A UUID string identifying this Prompt. (required)
     * @return ApiResponse&lt;Prompt&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Prompt> stagesPromptPromptsRetrieveWithHttpInfo(UUID promptUuid) throws ApiException {
        okhttp3.Call localVarCall = stagesPromptPromptsRetrieveValidateBeforeCall(promptUuid, null);
        Type localVarReturnType = new TypeToken<Prompt>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Prompt Viewset
     * @param promptUuid A UUID string identifying this Prompt. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesPromptPromptsRetrieveAsync(UUID promptUuid, final ApiCallback<Prompt> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesPromptPromptsRetrieveValidateBeforeCall(promptUuid, _callback);
        Type localVarReturnType = new TypeToken<Prompt>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesPromptPromptsUpdate
     * @param promptUuid A UUID string identifying this Prompt. (required)
     * @param promptRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesPromptPromptsUpdateCall(UUID promptUuid, PromptRequest promptRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = promptRequest;

        // create path and map variables
        String localVarPath = "/stages/prompt/prompts/{prompt_uuid}/"
            .replace("{" + "prompt_uuid" + "}", localVarApiClient.escapeString(promptUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesPromptPromptsUpdateValidateBeforeCall(UUID promptUuid, PromptRequest promptRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'promptUuid' is set
        if (promptUuid == null) {
            throw new ApiException("Missing the required parameter 'promptUuid' when calling stagesPromptPromptsUpdate(Async)");
        }

        // verify the required parameter 'promptRequest' is set
        if (promptRequest == null) {
            throw new ApiException("Missing the required parameter 'promptRequest' when calling stagesPromptPromptsUpdate(Async)");
        }

        return stagesPromptPromptsUpdateCall(promptUuid, promptRequest, _callback);

    }

    /**
     * 
     * Prompt Viewset
     * @param promptUuid A UUID string identifying this Prompt. (required)
     * @param promptRequest  (required)
     * @return Prompt
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Prompt stagesPromptPromptsUpdate(UUID promptUuid, PromptRequest promptRequest) throws ApiException {
        ApiResponse<Prompt> localVarResp = stagesPromptPromptsUpdateWithHttpInfo(promptUuid, promptRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Prompt Viewset
     * @param promptUuid A UUID string identifying this Prompt. (required)
     * @param promptRequest  (required)
     * @return ApiResponse&lt;Prompt&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Prompt> stagesPromptPromptsUpdateWithHttpInfo(UUID promptUuid, PromptRequest promptRequest) throws ApiException {
        okhttp3.Call localVarCall = stagesPromptPromptsUpdateValidateBeforeCall(promptUuid, promptRequest, null);
        Type localVarReturnType = new TypeToken<Prompt>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Prompt Viewset
     * @param promptUuid A UUID string identifying this Prompt. (required)
     * @param promptRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesPromptPromptsUpdateAsync(UUID promptUuid, PromptRequest promptRequest, final ApiCallback<Prompt> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesPromptPromptsUpdateValidateBeforeCall(promptUuid, promptRequest, _callback);
        Type localVarReturnType = new TypeToken<Prompt>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesPromptPromptsUsedByList
     * @param promptUuid A UUID string identifying this Prompt. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesPromptPromptsUsedByListCall(UUID promptUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/prompt/prompts/{prompt_uuid}/used_by/"
            .replace("{" + "prompt_uuid" + "}", localVarApiClient.escapeString(promptUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesPromptPromptsUsedByListValidateBeforeCall(UUID promptUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'promptUuid' is set
        if (promptUuid == null) {
            throw new ApiException("Missing the required parameter 'promptUuid' when calling stagesPromptPromptsUsedByList(Async)");
        }

        return stagesPromptPromptsUsedByListCall(promptUuid, _callback);

    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param promptUuid A UUID string identifying this Prompt. (required)
     * @return List&lt;UsedBy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<UsedBy> stagesPromptPromptsUsedByList(UUID promptUuid) throws ApiException {
        ApiResponse<List<UsedBy>> localVarResp = stagesPromptPromptsUsedByListWithHttpInfo(promptUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param promptUuid A UUID string identifying this Prompt. (required)
     * @return ApiResponse&lt;List&lt;UsedBy&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UsedBy>> stagesPromptPromptsUsedByListWithHttpInfo(UUID promptUuid) throws ApiException {
        okhttp3.Call localVarCall = stagesPromptPromptsUsedByListValidateBeforeCall(promptUuid, null);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of all objects that use this object
     * @param promptUuid A UUID string identifying this Prompt. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesPromptPromptsUsedByListAsync(UUID promptUuid, final ApiCallback<List<UsedBy>> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesPromptPromptsUsedByListValidateBeforeCall(promptUuid, _callback);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesPromptStagesCreate
     * @param promptStageRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesPromptStagesCreateCall(PromptStageRequest promptStageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = promptStageRequest;

        // create path and map variables
        String localVarPath = "/stages/prompt/stages/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesPromptStagesCreateValidateBeforeCall(PromptStageRequest promptStageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'promptStageRequest' is set
        if (promptStageRequest == null) {
            throw new ApiException("Missing the required parameter 'promptStageRequest' when calling stagesPromptStagesCreate(Async)");
        }

        return stagesPromptStagesCreateCall(promptStageRequest, _callback);

    }

    /**
     * 
     * PromptStage Viewset
     * @param promptStageRequest  (required)
     * @return PromptStage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PromptStage stagesPromptStagesCreate(PromptStageRequest promptStageRequest) throws ApiException {
        ApiResponse<PromptStage> localVarResp = stagesPromptStagesCreateWithHttpInfo(promptStageRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * PromptStage Viewset
     * @param promptStageRequest  (required)
     * @return ApiResponse&lt;PromptStage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PromptStage> stagesPromptStagesCreateWithHttpInfo(PromptStageRequest promptStageRequest) throws ApiException {
        okhttp3.Call localVarCall = stagesPromptStagesCreateValidateBeforeCall(promptStageRequest, null);
        Type localVarReturnType = new TypeToken<PromptStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * PromptStage Viewset
     * @param promptStageRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesPromptStagesCreateAsync(PromptStageRequest promptStageRequest, final ApiCallback<PromptStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesPromptStagesCreateValidateBeforeCall(promptStageRequest, _callback);
        Type localVarReturnType = new TypeToken<PromptStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesPromptStagesDestroy
     * @param stageUuid A UUID string identifying this Prompt Stage. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesPromptStagesDestroyCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/prompt/stages/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesPromptStagesDestroyValidateBeforeCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesPromptStagesDestroy(Async)");
        }

        return stagesPromptStagesDestroyCall(stageUuid, _callback);

    }

    /**
     * 
     * PromptStage Viewset
     * @param stageUuid A UUID string identifying this Prompt Stage. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void stagesPromptStagesDestroy(UUID stageUuid) throws ApiException {
        stagesPromptStagesDestroyWithHttpInfo(stageUuid);
    }

    /**
     * 
     * PromptStage Viewset
     * @param stageUuid A UUID string identifying this Prompt Stage. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> stagesPromptStagesDestroyWithHttpInfo(UUID stageUuid) throws ApiException {
        okhttp3.Call localVarCall = stagesPromptStagesDestroyValidateBeforeCall(stageUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * PromptStage Viewset
     * @param stageUuid A UUID string identifying this Prompt Stage. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesPromptStagesDestroyAsync(UUID stageUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesPromptStagesDestroyValidateBeforeCall(stageUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesPromptStagesList
     * @param fields  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @param stageUuid  (optional)
     * @param validationPolicies  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesPromptStagesListCall(List<UUID> fields, String name, String ordering, Integer page, Integer pageSize, String search, UUID stageUuid, List<UUID> validationPolicies, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/prompt/stages/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "fields", fields));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (stageUuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stage_uuid", stageUuid));
        }

        if (validationPolicies != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "validation_policies", validationPolicies));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesPromptStagesListValidateBeforeCall(List<UUID> fields, String name, String ordering, Integer page, Integer pageSize, String search, UUID stageUuid, List<UUID> validationPolicies, final ApiCallback _callback) throws ApiException {
        return stagesPromptStagesListCall(fields, name, ordering, page, pageSize, search, stageUuid, validationPolicies, _callback);

    }

    /**
     * 
     * PromptStage Viewset
     * @param fields  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @param stageUuid  (optional)
     * @param validationPolicies  (optional)
     * @return PaginatedPromptStageList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedPromptStageList stagesPromptStagesList(List<UUID> fields, String name, String ordering, Integer page, Integer pageSize, String search, UUID stageUuid, List<UUID> validationPolicies) throws ApiException {
        ApiResponse<PaginatedPromptStageList> localVarResp = stagesPromptStagesListWithHttpInfo(fields, name, ordering, page, pageSize, search, stageUuid, validationPolicies);
        return localVarResp.getData();
    }

    /**
     * 
     * PromptStage Viewset
     * @param fields  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @param stageUuid  (optional)
     * @param validationPolicies  (optional)
     * @return ApiResponse&lt;PaginatedPromptStageList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedPromptStageList> stagesPromptStagesListWithHttpInfo(List<UUID> fields, String name, String ordering, Integer page, Integer pageSize, String search, UUID stageUuid, List<UUID> validationPolicies) throws ApiException {
        okhttp3.Call localVarCall = stagesPromptStagesListValidateBeforeCall(fields, name, ordering, page, pageSize, search, stageUuid, validationPolicies, null);
        Type localVarReturnType = new TypeToken<PaginatedPromptStageList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * PromptStage Viewset
     * @param fields  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @param stageUuid  (optional)
     * @param validationPolicies  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesPromptStagesListAsync(List<UUID> fields, String name, String ordering, Integer page, Integer pageSize, String search, UUID stageUuid, List<UUID> validationPolicies, final ApiCallback<PaginatedPromptStageList> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesPromptStagesListValidateBeforeCall(fields, name, ordering, page, pageSize, search, stageUuid, validationPolicies, _callback);
        Type localVarReturnType = new TypeToken<PaginatedPromptStageList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesPromptStagesPartialUpdate
     * @param stageUuid A UUID string identifying this Prompt Stage. (required)
     * @param patchedPromptStageRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesPromptStagesPartialUpdateCall(UUID stageUuid, PatchedPromptStageRequest patchedPromptStageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchedPromptStageRequest;

        // create path and map variables
        String localVarPath = "/stages/prompt/stages/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesPromptStagesPartialUpdateValidateBeforeCall(UUID stageUuid, PatchedPromptStageRequest patchedPromptStageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesPromptStagesPartialUpdate(Async)");
        }

        return stagesPromptStagesPartialUpdateCall(stageUuid, patchedPromptStageRequest, _callback);

    }

    /**
     * 
     * PromptStage Viewset
     * @param stageUuid A UUID string identifying this Prompt Stage. (required)
     * @param patchedPromptStageRequest  (optional)
     * @return PromptStage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PromptStage stagesPromptStagesPartialUpdate(UUID stageUuid, PatchedPromptStageRequest patchedPromptStageRequest) throws ApiException {
        ApiResponse<PromptStage> localVarResp = stagesPromptStagesPartialUpdateWithHttpInfo(stageUuid, patchedPromptStageRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * PromptStage Viewset
     * @param stageUuid A UUID string identifying this Prompt Stage. (required)
     * @param patchedPromptStageRequest  (optional)
     * @return ApiResponse&lt;PromptStage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PromptStage> stagesPromptStagesPartialUpdateWithHttpInfo(UUID stageUuid, PatchedPromptStageRequest patchedPromptStageRequest) throws ApiException {
        okhttp3.Call localVarCall = stagesPromptStagesPartialUpdateValidateBeforeCall(stageUuid, patchedPromptStageRequest, null);
        Type localVarReturnType = new TypeToken<PromptStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * PromptStage Viewset
     * @param stageUuid A UUID string identifying this Prompt Stage. (required)
     * @param patchedPromptStageRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesPromptStagesPartialUpdateAsync(UUID stageUuid, PatchedPromptStageRequest patchedPromptStageRequest, final ApiCallback<PromptStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesPromptStagesPartialUpdateValidateBeforeCall(stageUuid, patchedPromptStageRequest, _callback);
        Type localVarReturnType = new TypeToken<PromptStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesPromptStagesRetrieve
     * @param stageUuid A UUID string identifying this Prompt Stage. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesPromptStagesRetrieveCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/prompt/stages/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesPromptStagesRetrieveValidateBeforeCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesPromptStagesRetrieve(Async)");
        }

        return stagesPromptStagesRetrieveCall(stageUuid, _callback);

    }

    /**
     * 
     * PromptStage Viewset
     * @param stageUuid A UUID string identifying this Prompt Stage. (required)
     * @return PromptStage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PromptStage stagesPromptStagesRetrieve(UUID stageUuid) throws ApiException {
        ApiResponse<PromptStage> localVarResp = stagesPromptStagesRetrieveWithHttpInfo(stageUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * PromptStage Viewset
     * @param stageUuid A UUID string identifying this Prompt Stage. (required)
     * @return ApiResponse&lt;PromptStage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PromptStage> stagesPromptStagesRetrieveWithHttpInfo(UUID stageUuid) throws ApiException {
        okhttp3.Call localVarCall = stagesPromptStagesRetrieveValidateBeforeCall(stageUuid, null);
        Type localVarReturnType = new TypeToken<PromptStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * PromptStage Viewset
     * @param stageUuid A UUID string identifying this Prompt Stage. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesPromptStagesRetrieveAsync(UUID stageUuid, final ApiCallback<PromptStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesPromptStagesRetrieveValidateBeforeCall(stageUuid, _callback);
        Type localVarReturnType = new TypeToken<PromptStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesPromptStagesUpdate
     * @param stageUuid A UUID string identifying this Prompt Stage. (required)
     * @param promptStageRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesPromptStagesUpdateCall(UUID stageUuid, PromptStageRequest promptStageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = promptStageRequest;

        // create path and map variables
        String localVarPath = "/stages/prompt/stages/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesPromptStagesUpdateValidateBeforeCall(UUID stageUuid, PromptStageRequest promptStageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesPromptStagesUpdate(Async)");
        }

        // verify the required parameter 'promptStageRequest' is set
        if (promptStageRequest == null) {
            throw new ApiException("Missing the required parameter 'promptStageRequest' when calling stagesPromptStagesUpdate(Async)");
        }

        return stagesPromptStagesUpdateCall(stageUuid, promptStageRequest, _callback);

    }

    /**
     * 
     * PromptStage Viewset
     * @param stageUuid A UUID string identifying this Prompt Stage. (required)
     * @param promptStageRequest  (required)
     * @return PromptStage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PromptStage stagesPromptStagesUpdate(UUID stageUuid, PromptStageRequest promptStageRequest) throws ApiException {
        ApiResponse<PromptStage> localVarResp = stagesPromptStagesUpdateWithHttpInfo(stageUuid, promptStageRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * PromptStage Viewset
     * @param stageUuid A UUID string identifying this Prompt Stage. (required)
     * @param promptStageRequest  (required)
     * @return ApiResponse&lt;PromptStage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PromptStage> stagesPromptStagesUpdateWithHttpInfo(UUID stageUuid, PromptStageRequest promptStageRequest) throws ApiException {
        okhttp3.Call localVarCall = stagesPromptStagesUpdateValidateBeforeCall(stageUuid, promptStageRequest, null);
        Type localVarReturnType = new TypeToken<PromptStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * PromptStage Viewset
     * @param stageUuid A UUID string identifying this Prompt Stage. (required)
     * @param promptStageRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesPromptStagesUpdateAsync(UUID stageUuid, PromptStageRequest promptStageRequest, final ApiCallback<PromptStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesPromptStagesUpdateValidateBeforeCall(stageUuid, promptStageRequest, _callback);
        Type localVarReturnType = new TypeToken<PromptStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesPromptStagesUsedByList
     * @param stageUuid A UUID string identifying this Prompt Stage. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesPromptStagesUsedByListCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/prompt/stages/{stage_uuid}/used_by/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesPromptStagesUsedByListValidateBeforeCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesPromptStagesUsedByList(Async)");
        }

        return stagesPromptStagesUsedByListCall(stageUuid, _callback);

    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param stageUuid A UUID string identifying this Prompt Stage. (required)
     * @return List&lt;UsedBy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<UsedBy> stagesPromptStagesUsedByList(UUID stageUuid) throws ApiException {
        ApiResponse<List<UsedBy>> localVarResp = stagesPromptStagesUsedByListWithHttpInfo(stageUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param stageUuid A UUID string identifying this Prompt Stage. (required)
     * @return ApiResponse&lt;List&lt;UsedBy&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UsedBy>> stagesPromptStagesUsedByListWithHttpInfo(UUID stageUuid) throws ApiException {
        okhttp3.Call localVarCall = stagesPromptStagesUsedByListValidateBeforeCall(stageUuid, null);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of all objects that use this object
     * @param stageUuid A UUID string identifying this Prompt Stage. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesPromptStagesUsedByListAsync(UUID stageUuid, final ApiCallback<List<UsedBy>> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesPromptStagesUsedByListValidateBeforeCall(stageUuid, _callback);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesSourceCreate
     * @param sourceStageRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesSourceCreateCall(SourceStageRequest sourceStageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sourceStageRequest;

        // create path and map variables
        String localVarPath = "/stages/source/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesSourceCreateValidateBeforeCall(SourceStageRequest sourceStageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sourceStageRequest' is set
        if (sourceStageRequest == null) {
            throw new ApiException("Missing the required parameter 'sourceStageRequest' when calling stagesSourceCreate(Async)");
        }

        return stagesSourceCreateCall(sourceStageRequest, _callback);

    }

    /**
     * 
     * SourceStage Viewset
     * @param sourceStageRequest  (required)
     * @return SourceStage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public SourceStage stagesSourceCreate(SourceStageRequest sourceStageRequest) throws ApiException {
        ApiResponse<SourceStage> localVarResp = stagesSourceCreateWithHttpInfo(sourceStageRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * SourceStage Viewset
     * @param sourceStageRequest  (required)
     * @return ApiResponse&lt;SourceStage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SourceStage> stagesSourceCreateWithHttpInfo(SourceStageRequest sourceStageRequest) throws ApiException {
        okhttp3.Call localVarCall = stagesSourceCreateValidateBeforeCall(sourceStageRequest, null);
        Type localVarReturnType = new TypeToken<SourceStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * SourceStage Viewset
     * @param sourceStageRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesSourceCreateAsync(SourceStageRequest sourceStageRequest, final ApiCallback<SourceStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesSourceCreateValidateBeforeCall(sourceStageRequest, _callback);
        Type localVarReturnType = new TypeToken<SourceStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesSourceDestroy
     * @param stageUuid A UUID string identifying this Source Stage. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesSourceDestroyCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/source/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesSourceDestroyValidateBeforeCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesSourceDestroy(Async)");
        }

        return stagesSourceDestroyCall(stageUuid, _callback);

    }

    /**
     * 
     * SourceStage Viewset
     * @param stageUuid A UUID string identifying this Source Stage. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void stagesSourceDestroy(UUID stageUuid) throws ApiException {
        stagesSourceDestroyWithHttpInfo(stageUuid);
    }

    /**
     * 
     * SourceStage Viewset
     * @param stageUuid A UUID string identifying this Source Stage. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> stagesSourceDestroyWithHttpInfo(UUID stageUuid) throws ApiException {
        okhttp3.Call localVarCall = stagesSourceDestroyValidateBeforeCall(stageUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * SourceStage Viewset
     * @param stageUuid A UUID string identifying this Source Stage. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesSourceDestroyAsync(UUID stageUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesSourceDestroyValidateBeforeCall(stageUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesSourceList
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param resumeTimeout  (optional)
     * @param search A search term. (optional)
     * @param source  (optional)
     * @param stageUuid  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesSourceListCall(String name, String ordering, Integer page, Integer pageSize, String resumeTimeout, String search, UUID source, UUID stageUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/source/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (resumeTimeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resume_timeout", resumeTimeout));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (source != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source", source));
        }

        if (stageUuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stage_uuid", stageUuid));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesSourceListValidateBeforeCall(String name, String ordering, Integer page, Integer pageSize, String resumeTimeout, String search, UUID source, UUID stageUuid, final ApiCallback _callback) throws ApiException {
        return stagesSourceListCall(name, ordering, page, pageSize, resumeTimeout, search, source, stageUuid, _callback);

    }

    /**
     * 
     * SourceStage Viewset
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param resumeTimeout  (optional)
     * @param search A search term. (optional)
     * @param source  (optional)
     * @param stageUuid  (optional)
     * @return PaginatedSourceStageList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedSourceStageList stagesSourceList(String name, String ordering, Integer page, Integer pageSize, String resumeTimeout, String search, UUID source, UUID stageUuid) throws ApiException {
        ApiResponse<PaginatedSourceStageList> localVarResp = stagesSourceListWithHttpInfo(name, ordering, page, pageSize, resumeTimeout, search, source, stageUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * SourceStage Viewset
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param resumeTimeout  (optional)
     * @param search A search term. (optional)
     * @param source  (optional)
     * @param stageUuid  (optional)
     * @return ApiResponse&lt;PaginatedSourceStageList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedSourceStageList> stagesSourceListWithHttpInfo(String name, String ordering, Integer page, Integer pageSize, String resumeTimeout, String search, UUID source, UUID stageUuid) throws ApiException {
        okhttp3.Call localVarCall = stagesSourceListValidateBeforeCall(name, ordering, page, pageSize, resumeTimeout, search, source, stageUuid, null);
        Type localVarReturnType = new TypeToken<PaginatedSourceStageList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * SourceStage Viewset
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param resumeTimeout  (optional)
     * @param search A search term. (optional)
     * @param source  (optional)
     * @param stageUuid  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesSourceListAsync(String name, String ordering, Integer page, Integer pageSize, String resumeTimeout, String search, UUID source, UUID stageUuid, final ApiCallback<PaginatedSourceStageList> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesSourceListValidateBeforeCall(name, ordering, page, pageSize, resumeTimeout, search, source, stageUuid, _callback);
        Type localVarReturnType = new TypeToken<PaginatedSourceStageList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesSourcePartialUpdate
     * @param stageUuid A UUID string identifying this Source Stage. (required)
     * @param patchedSourceStageRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesSourcePartialUpdateCall(UUID stageUuid, PatchedSourceStageRequest patchedSourceStageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchedSourceStageRequest;

        // create path and map variables
        String localVarPath = "/stages/source/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesSourcePartialUpdateValidateBeforeCall(UUID stageUuid, PatchedSourceStageRequest patchedSourceStageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesSourcePartialUpdate(Async)");
        }

        return stagesSourcePartialUpdateCall(stageUuid, patchedSourceStageRequest, _callback);

    }

    /**
     * 
     * SourceStage Viewset
     * @param stageUuid A UUID string identifying this Source Stage. (required)
     * @param patchedSourceStageRequest  (optional)
     * @return SourceStage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public SourceStage stagesSourcePartialUpdate(UUID stageUuid, PatchedSourceStageRequest patchedSourceStageRequest) throws ApiException {
        ApiResponse<SourceStage> localVarResp = stagesSourcePartialUpdateWithHttpInfo(stageUuid, patchedSourceStageRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * SourceStage Viewset
     * @param stageUuid A UUID string identifying this Source Stage. (required)
     * @param patchedSourceStageRequest  (optional)
     * @return ApiResponse&lt;SourceStage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SourceStage> stagesSourcePartialUpdateWithHttpInfo(UUID stageUuid, PatchedSourceStageRequest patchedSourceStageRequest) throws ApiException {
        okhttp3.Call localVarCall = stagesSourcePartialUpdateValidateBeforeCall(stageUuid, patchedSourceStageRequest, null);
        Type localVarReturnType = new TypeToken<SourceStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * SourceStage Viewset
     * @param stageUuid A UUID string identifying this Source Stage. (required)
     * @param patchedSourceStageRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesSourcePartialUpdateAsync(UUID stageUuid, PatchedSourceStageRequest patchedSourceStageRequest, final ApiCallback<SourceStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesSourcePartialUpdateValidateBeforeCall(stageUuid, patchedSourceStageRequest, _callback);
        Type localVarReturnType = new TypeToken<SourceStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesSourceRetrieve
     * @param stageUuid A UUID string identifying this Source Stage. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesSourceRetrieveCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/source/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesSourceRetrieveValidateBeforeCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesSourceRetrieve(Async)");
        }

        return stagesSourceRetrieveCall(stageUuid, _callback);

    }

    /**
     * 
     * SourceStage Viewset
     * @param stageUuid A UUID string identifying this Source Stage. (required)
     * @return SourceStage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public SourceStage stagesSourceRetrieve(UUID stageUuid) throws ApiException {
        ApiResponse<SourceStage> localVarResp = stagesSourceRetrieveWithHttpInfo(stageUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * SourceStage Viewset
     * @param stageUuid A UUID string identifying this Source Stage. (required)
     * @return ApiResponse&lt;SourceStage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SourceStage> stagesSourceRetrieveWithHttpInfo(UUID stageUuid) throws ApiException {
        okhttp3.Call localVarCall = stagesSourceRetrieveValidateBeforeCall(stageUuid, null);
        Type localVarReturnType = new TypeToken<SourceStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * SourceStage Viewset
     * @param stageUuid A UUID string identifying this Source Stage. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesSourceRetrieveAsync(UUID stageUuid, final ApiCallback<SourceStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesSourceRetrieveValidateBeforeCall(stageUuid, _callback);
        Type localVarReturnType = new TypeToken<SourceStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesSourceUpdate
     * @param stageUuid A UUID string identifying this Source Stage. (required)
     * @param sourceStageRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesSourceUpdateCall(UUID stageUuid, SourceStageRequest sourceStageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sourceStageRequest;

        // create path and map variables
        String localVarPath = "/stages/source/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesSourceUpdateValidateBeforeCall(UUID stageUuid, SourceStageRequest sourceStageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesSourceUpdate(Async)");
        }

        // verify the required parameter 'sourceStageRequest' is set
        if (sourceStageRequest == null) {
            throw new ApiException("Missing the required parameter 'sourceStageRequest' when calling stagesSourceUpdate(Async)");
        }

        return stagesSourceUpdateCall(stageUuid, sourceStageRequest, _callback);

    }

    /**
     * 
     * SourceStage Viewset
     * @param stageUuid A UUID string identifying this Source Stage. (required)
     * @param sourceStageRequest  (required)
     * @return SourceStage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public SourceStage stagesSourceUpdate(UUID stageUuid, SourceStageRequest sourceStageRequest) throws ApiException {
        ApiResponse<SourceStage> localVarResp = stagesSourceUpdateWithHttpInfo(stageUuid, sourceStageRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * SourceStage Viewset
     * @param stageUuid A UUID string identifying this Source Stage. (required)
     * @param sourceStageRequest  (required)
     * @return ApiResponse&lt;SourceStage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SourceStage> stagesSourceUpdateWithHttpInfo(UUID stageUuid, SourceStageRequest sourceStageRequest) throws ApiException {
        okhttp3.Call localVarCall = stagesSourceUpdateValidateBeforeCall(stageUuid, sourceStageRequest, null);
        Type localVarReturnType = new TypeToken<SourceStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * SourceStage Viewset
     * @param stageUuid A UUID string identifying this Source Stage. (required)
     * @param sourceStageRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesSourceUpdateAsync(UUID stageUuid, SourceStageRequest sourceStageRequest, final ApiCallback<SourceStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesSourceUpdateValidateBeforeCall(stageUuid, sourceStageRequest, _callback);
        Type localVarReturnType = new TypeToken<SourceStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesSourceUsedByList
     * @param stageUuid A UUID string identifying this Source Stage. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesSourceUsedByListCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/source/{stage_uuid}/used_by/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesSourceUsedByListValidateBeforeCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesSourceUsedByList(Async)");
        }

        return stagesSourceUsedByListCall(stageUuid, _callback);

    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param stageUuid A UUID string identifying this Source Stage. (required)
     * @return List&lt;UsedBy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<UsedBy> stagesSourceUsedByList(UUID stageUuid) throws ApiException {
        ApiResponse<List<UsedBy>> localVarResp = stagesSourceUsedByListWithHttpInfo(stageUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param stageUuid A UUID string identifying this Source Stage. (required)
     * @return ApiResponse&lt;List&lt;UsedBy&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UsedBy>> stagesSourceUsedByListWithHttpInfo(UUID stageUuid) throws ApiException {
        okhttp3.Call localVarCall = stagesSourceUsedByListValidateBeforeCall(stageUuid, null);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of all objects that use this object
     * @param stageUuid A UUID string identifying this Source Stage. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesSourceUsedByListAsync(UUID stageUuid, final ApiCallback<List<UsedBy>> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesSourceUsedByListValidateBeforeCall(stageUuid, _callback);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesUserDeleteCreate
     * @param userDeleteStageRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesUserDeleteCreateCall(UserDeleteStageRequest userDeleteStageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userDeleteStageRequest;

        // create path and map variables
        String localVarPath = "/stages/user_delete/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesUserDeleteCreateValidateBeforeCall(UserDeleteStageRequest userDeleteStageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userDeleteStageRequest' is set
        if (userDeleteStageRequest == null) {
            throw new ApiException("Missing the required parameter 'userDeleteStageRequest' when calling stagesUserDeleteCreate(Async)");
        }

        return stagesUserDeleteCreateCall(userDeleteStageRequest, _callback);

    }

    /**
     * 
     * UserDeleteStage Viewset
     * @param userDeleteStageRequest  (required)
     * @return UserDeleteStage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UserDeleteStage stagesUserDeleteCreate(UserDeleteStageRequest userDeleteStageRequest) throws ApiException {
        ApiResponse<UserDeleteStage> localVarResp = stagesUserDeleteCreateWithHttpInfo(userDeleteStageRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * UserDeleteStage Viewset
     * @param userDeleteStageRequest  (required)
     * @return ApiResponse&lt;UserDeleteStage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserDeleteStage> stagesUserDeleteCreateWithHttpInfo(UserDeleteStageRequest userDeleteStageRequest) throws ApiException {
        okhttp3.Call localVarCall = stagesUserDeleteCreateValidateBeforeCall(userDeleteStageRequest, null);
        Type localVarReturnType = new TypeToken<UserDeleteStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * UserDeleteStage Viewset
     * @param userDeleteStageRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesUserDeleteCreateAsync(UserDeleteStageRequest userDeleteStageRequest, final ApiCallback<UserDeleteStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesUserDeleteCreateValidateBeforeCall(userDeleteStageRequest, _callback);
        Type localVarReturnType = new TypeToken<UserDeleteStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesUserDeleteDestroy
     * @param stageUuid A UUID string identifying this User Delete Stage. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesUserDeleteDestroyCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/user_delete/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesUserDeleteDestroyValidateBeforeCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesUserDeleteDestroy(Async)");
        }

        return stagesUserDeleteDestroyCall(stageUuid, _callback);

    }

    /**
     * 
     * UserDeleteStage Viewset
     * @param stageUuid A UUID string identifying this User Delete Stage. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void stagesUserDeleteDestroy(UUID stageUuid) throws ApiException {
        stagesUserDeleteDestroyWithHttpInfo(stageUuid);
    }

    /**
     * 
     * UserDeleteStage Viewset
     * @param stageUuid A UUID string identifying this User Delete Stage. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> stagesUserDeleteDestroyWithHttpInfo(UUID stageUuid) throws ApiException {
        okhttp3.Call localVarCall = stagesUserDeleteDestroyValidateBeforeCall(stageUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * UserDeleteStage Viewset
     * @param stageUuid A UUID string identifying this User Delete Stage. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesUserDeleteDestroyAsync(UUID stageUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesUserDeleteDestroyValidateBeforeCall(stageUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesUserDeleteList
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @param stageUuid  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesUserDeleteListCall(String name, String ordering, Integer page, Integer pageSize, String search, UUID stageUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/user_delete/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (stageUuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stage_uuid", stageUuid));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesUserDeleteListValidateBeforeCall(String name, String ordering, Integer page, Integer pageSize, String search, UUID stageUuid, final ApiCallback _callback) throws ApiException {
        return stagesUserDeleteListCall(name, ordering, page, pageSize, search, stageUuid, _callback);

    }

    /**
     * 
     * UserDeleteStage Viewset
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @param stageUuid  (optional)
     * @return PaginatedUserDeleteStageList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedUserDeleteStageList stagesUserDeleteList(String name, String ordering, Integer page, Integer pageSize, String search, UUID stageUuid) throws ApiException {
        ApiResponse<PaginatedUserDeleteStageList> localVarResp = stagesUserDeleteListWithHttpInfo(name, ordering, page, pageSize, search, stageUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * UserDeleteStage Viewset
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @param stageUuid  (optional)
     * @return ApiResponse&lt;PaginatedUserDeleteStageList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedUserDeleteStageList> stagesUserDeleteListWithHttpInfo(String name, String ordering, Integer page, Integer pageSize, String search, UUID stageUuid) throws ApiException {
        okhttp3.Call localVarCall = stagesUserDeleteListValidateBeforeCall(name, ordering, page, pageSize, search, stageUuid, null);
        Type localVarReturnType = new TypeToken<PaginatedUserDeleteStageList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * UserDeleteStage Viewset
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @param stageUuid  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesUserDeleteListAsync(String name, String ordering, Integer page, Integer pageSize, String search, UUID stageUuid, final ApiCallback<PaginatedUserDeleteStageList> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesUserDeleteListValidateBeforeCall(name, ordering, page, pageSize, search, stageUuid, _callback);
        Type localVarReturnType = new TypeToken<PaginatedUserDeleteStageList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesUserDeletePartialUpdate
     * @param stageUuid A UUID string identifying this User Delete Stage. (required)
     * @param patchedUserDeleteStageRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesUserDeletePartialUpdateCall(UUID stageUuid, PatchedUserDeleteStageRequest patchedUserDeleteStageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchedUserDeleteStageRequest;

        // create path and map variables
        String localVarPath = "/stages/user_delete/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesUserDeletePartialUpdateValidateBeforeCall(UUID stageUuid, PatchedUserDeleteStageRequest patchedUserDeleteStageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesUserDeletePartialUpdate(Async)");
        }

        return stagesUserDeletePartialUpdateCall(stageUuid, patchedUserDeleteStageRequest, _callback);

    }

    /**
     * 
     * UserDeleteStage Viewset
     * @param stageUuid A UUID string identifying this User Delete Stage. (required)
     * @param patchedUserDeleteStageRequest  (optional)
     * @return UserDeleteStage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UserDeleteStage stagesUserDeletePartialUpdate(UUID stageUuid, PatchedUserDeleteStageRequest patchedUserDeleteStageRequest) throws ApiException {
        ApiResponse<UserDeleteStage> localVarResp = stagesUserDeletePartialUpdateWithHttpInfo(stageUuid, patchedUserDeleteStageRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * UserDeleteStage Viewset
     * @param stageUuid A UUID string identifying this User Delete Stage. (required)
     * @param patchedUserDeleteStageRequest  (optional)
     * @return ApiResponse&lt;UserDeleteStage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserDeleteStage> stagesUserDeletePartialUpdateWithHttpInfo(UUID stageUuid, PatchedUserDeleteStageRequest patchedUserDeleteStageRequest) throws ApiException {
        okhttp3.Call localVarCall = stagesUserDeletePartialUpdateValidateBeforeCall(stageUuid, patchedUserDeleteStageRequest, null);
        Type localVarReturnType = new TypeToken<UserDeleteStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * UserDeleteStage Viewset
     * @param stageUuid A UUID string identifying this User Delete Stage. (required)
     * @param patchedUserDeleteStageRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesUserDeletePartialUpdateAsync(UUID stageUuid, PatchedUserDeleteStageRequest patchedUserDeleteStageRequest, final ApiCallback<UserDeleteStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesUserDeletePartialUpdateValidateBeforeCall(stageUuid, patchedUserDeleteStageRequest, _callback);
        Type localVarReturnType = new TypeToken<UserDeleteStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesUserDeleteRetrieve
     * @param stageUuid A UUID string identifying this User Delete Stage. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesUserDeleteRetrieveCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/user_delete/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesUserDeleteRetrieveValidateBeforeCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesUserDeleteRetrieve(Async)");
        }

        return stagesUserDeleteRetrieveCall(stageUuid, _callback);

    }

    /**
     * 
     * UserDeleteStage Viewset
     * @param stageUuid A UUID string identifying this User Delete Stage. (required)
     * @return UserDeleteStage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UserDeleteStage stagesUserDeleteRetrieve(UUID stageUuid) throws ApiException {
        ApiResponse<UserDeleteStage> localVarResp = stagesUserDeleteRetrieveWithHttpInfo(stageUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * UserDeleteStage Viewset
     * @param stageUuid A UUID string identifying this User Delete Stage. (required)
     * @return ApiResponse&lt;UserDeleteStage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserDeleteStage> stagesUserDeleteRetrieveWithHttpInfo(UUID stageUuid) throws ApiException {
        okhttp3.Call localVarCall = stagesUserDeleteRetrieveValidateBeforeCall(stageUuid, null);
        Type localVarReturnType = new TypeToken<UserDeleteStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * UserDeleteStage Viewset
     * @param stageUuid A UUID string identifying this User Delete Stage. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesUserDeleteRetrieveAsync(UUID stageUuid, final ApiCallback<UserDeleteStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesUserDeleteRetrieveValidateBeforeCall(stageUuid, _callback);
        Type localVarReturnType = new TypeToken<UserDeleteStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesUserDeleteUpdate
     * @param stageUuid A UUID string identifying this User Delete Stage. (required)
     * @param userDeleteStageRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesUserDeleteUpdateCall(UUID stageUuid, UserDeleteStageRequest userDeleteStageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userDeleteStageRequest;

        // create path and map variables
        String localVarPath = "/stages/user_delete/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesUserDeleteUpdateValidateBeforeCall(UUID stageUuid, UserDeleteStageRequest userDeleteStageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesUserDeleteUpdate(Async)");
        }

        // verify the required parameter 'userDeleteStageRequest' is set
        if (userDeleteStageRequest == null) {
            throw new ApiException("Missing the required parameter 'userDeleteStageRequest' when calling stagesUserDeleteUpdate(Async)");
        }

        return stagesUserDeleteUpdateCall(stageUuid, userDeleteStageRequest, _callback);

    }

    /**
     * 
     * UserDeleteStage Viewset
     * @param stageUuid A UUID string identifying this User Delete Stage. (required)
     * @param userDeleteStageRequest  (required)
     * @return UserDeleteStage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UserDeleteStage stagesUserDeleteUpdate(UUID stageUuid, UserDeleteStageRequest userDeleteStageRequest) throws ApiException {
        ApiResponse<UserDeleteStage> localVarResp = stagesUserDeleteUpdateWithHttpInfo(stageUuid, userDeleteStageRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * UserDeleteStage Viewset
     * @param stageUuid A UUID string identifying this User Delete Stage. (required)
     * @param userDeleteStageRequest  (required)
     * @return ApiResponse&lt;UserDeleteStage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserDeleteStage> stagesUserDeleteUpdateWithHttpInfo(UUID stageUuid, UserDeleteStageRequest userDeleteStageRequest) throws ApiException {
        okhttp3.Call localVarCall = stagesUserDeleteUpdateValidateBeforeCall(stageUuid, userDeleteStageRequest, null);
        Type localVarReturnType = new TypeToken<UserDeleteStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * UserDeleteStage Viewset
     * @param stageUuid A UUID string identifying this User Delete Stage. (required)
     * @param userDeleteStageRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesUserDeleteUpdateAsync(UUID stageUuid, UserDeleteStageRequest userDeleteStageRequest, final ApiCallback<UserDeleteStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesUserDeleteUpdateValidateBeforeCall(stageUuid, userDeleteStageRequest, _callback);
        Type localVarReturnType = new TypeToken<UserDeleteStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesUserDeleteUsedByList
     * @param stageUuid A UUID string identifying this User Delete Stage. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesUserDeleteUsedByListCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/user_delete/{stage_uuid}/used_by/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesUserDeleteUsedByListValidateBeforeCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesUserDeleteUsedByList(Async)");
        }

        return stagesUserDeleteUsedByListCall(stageUuid, _callback);

    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param stageUuid A UUID string identifying this User Delete Stage. (required)
     * @return List&lt;UsedBy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<UsedBy> stagesUserDeleteUsedByList(UUID stageUuid) throws ApiException {
        ApiResponse<List<UsedBy>> localVarResp = stagesUserDeleteUsedByListWithHttpInfo(stageUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param stageUuid A UUID string identifying this User Delete Stage. (required)
     * @return ApiResponse&lt;List&lt;UsedBy&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UsedBy>> stagesUserDeleteUsedByListWithHttpInfo(UUID stageUuid) throws ApiException {
        okhttp3.Call localVarCall = stagesUserDeleteUsedByListValidateBeforeCall(stageUuid, null);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of all objects that use this object
     * @param stageUuid A UUID string identifying this User Delete Stage. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesUserDeleteUsedByListAsync(UUID stageUuid, final ApiCallback<List<UsedBy>> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesUserDeleteUsedByListValidateBeforeCall(stageUuid, _callback);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesUserLoginCreate
     * @param userLoginStageRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesUserLoginCreateCall(UserLoginStageRequest userLoginStageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userLoginStageRequest;

        // create path and map variables
        String localVarPath = "/stages/user_login/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesUserLoginCreateValidateBeforeCall(UserLoginStageRequest userLoginStageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userLoginStageRequest' is set
        if (userLoginStageRequest == null) {
            throw new ApiException("Missing the required parameter 'userLoginStageRequest' when calling stagesUserLoginCreate(Async)");
        }

        return stagesUserLoginCreateCall(userLoginStageRequest, _callback);

    }

    /**
     * 
     * UserLoginStage Viewset
     * @param userLoginStageRequest  (required)
     * @return UserLoginStage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UserLoginStage stagesUserLoginCreate(UserLoginStageRequest userLoginStageRequest) throws ApiException {
        ApiResponse<UserLoginStage> localVarResp = stagesUserLoginCreateWithHttpInfo(userLoginStageRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * UserLoginStage Viewset
     * @param userLoginStageRequest  (required)
     * @return ApiResponse&lt;UserLoginStage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserLoginStage> stagesUserLoginCreateWithHttpInfo(UserLoginStageRequest userLoginStageRequest) throws ApiException {
        okhttp3.Call localVarCall = stagesUserLoginCreateValidateBeforeCall(userLoginStageRequest, null);
        Type localVarReturnType = new TypeToken<UserLoginStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * UserLoginStage Viewset
     * @param userLoginStageRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesUserLoginCreateAsync(UserLoginStageRequest userLoginStageRequest, final ApiCallback<UserLoginStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesUserLoginCreateValidateBeforeCall(userLoginStageRequest, _callback);
        Type localVarReturnType = new TypeToken<UserLoginStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesUserLoginDestroy
     * @param stageUuid A UUID string identifying this User Login Stage. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesUserLoginDestroyCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/user_login/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesUserLoginDestroyValidateBeforeCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesUserLoginDestroy(Async)");
        }

        return stagesUserLoginDestroyCall(stageUuid, _callback);

    }

    /**
     * 
     * UserLoginStage Viewset
     * @param stageUuid A UUID string identifying this User Login Stage. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void stagesUserLoginDestroy(UUID stageUuid) throws ApiException {
        stagesUserLoginDestroyWithHttpInfo(stageUuid);
    }

    /**
     * 
     * UserLoginStage Viewset
     * @param stageUuid A UUID string identifying this User Login Stage. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> stagesUserLoginDestroyWithHttpInfo(UUID stageUuid) throws ApiException {
        okhttp3.Call localVarCall = stagesUserLoginDestroyValidateBeforeCall(stageUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * UserLoginStage Viewset
     * @param stageUuid A UUID string identifying this User Login Stage. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesUserLoginDestroyAsync(UUID stageUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesUserLoginDestroyValidateBeforeCall(stageUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesUserLoginList
     * @param geoipBinding Bind sessions created by this stage to the configured GeoIP location   (optional)
     * @param name  (optional)
     * @param networkBinding Bind sessions created by this stage to the configured network   (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param rememberMeOffset  (optional)
     * @param search A search term. (optional)
     * @param sessionDuration  (optional)
     * @param stageUuid  (optional)
     * @param terminateOtherSessions  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesUserLoginListCall(String geoipBinding, String name, String networkBinding, String ordering, Integer page, Integer pageSize, String rememberMeOffset, String search, String sessionDuration, UUID stageUuid, Boolean terminateOtherSessions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/user_login/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (geoipBinding != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("geoip_binding", geoipBinding));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (networkBinding != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("network_binding", networkBinding));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (rememberMeOffset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("remember_me_offset", rememberMeOffset));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (sessionDuration != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("session_duration", sessionDuration));
        }

        if (stageUuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stage_uuid", stageUuid));
        }

        if (terminateOtherSessions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("terminate_other_sessions", terminateOtherSessions));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesUserLoginListValidateBeforeCall(String geoipBinding, String name, String networkBinding, String ordering, Integer page, Integer pageSize, String rememberMeOffset, String search, String sessionDuration, UUID stageUuid, Boolean terminateOtherSessions, final ApiCallback _callback) throws ApiException {
        return stagesUserLoginListCall(geoipBinding, name, networkBinding, ordering, page, pageSize, rememberMeOffset, search, sessionDuration, stageUuid, terminateOtherSessions, _callback);

    }

    /**
     * 
     * UserLoginStage Viewset
     * @param geoipBinding Bind sessions created by this stage to the configured GeoIP location   (optional)
     * @param name  (optional)
     * @param networkBinding Bind sessions created by this stage to the configured network   (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param rememberMeOffset  (optional)
     * @param search A search term. (optional)
     * @param sessionDuration  (optional)
     * @param stageUuid  (optional)
     * @param terminateOtherSessions  (optional)
     * @return PaginatedUserLoginStageList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedUserLoginStageList stagesUserLoginList(String geoipBinding, String name, String networkBinding, String ordering, Integer page, Integer pageSize, String rememberMeOffset, String search, String sessionDuration, UUID stageUuid, Boolean terminateOtherSessions) throws ApiException {
        ApiResponse<PaginatedUserLoginStageList> localVarResp = stagesUserLoginListWithHttpInfo(geoipBinding, name, networkBinding, ordering, page, pageSize, rememberMeOffset, search, sessionDuration, stageUuid, terminateOtherSessions);
        return localVarResp.getData();
    }

    /**
     * 
     * UserLoginStage Viewset
     * @param geoipBinding Bind sessions created by this stage to the configured GeoIP location   (optional)
     * @param name  (optional)
     * @param networkBinding Bind sessions created by this stage to the configured network   (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param rememberMeOffset  (optional)
     * @param search A search term. (optional)
     * @param sessionDuration  (optional)
     * @param stageUuid  (optional)
     * @param terminateOtherSessions  (optional)
     * @return ApiResponse&lt;PaginatedUserLoginStageList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedUserLoginStageList> stagesUserLoginListWithHttpInfo(String geoipBinding, String name, String networkBinding, String ordering, Integer page, Integer pageSize, String rememberMeOffset, String search, String sessionDuration, UUID stageUuid, Boolean terminateOtherSessions) throws ApiException {
        okhttp3.Call localVarCall = stagesUserLoginListValidateBeforeCall(geoipBinding, name, networkBinding, ordering, page, pageSize, rememberMeOffset, search, sessionDuration, stageUuid, terminateOtherSessions, null);
        Type localVarReturnType = new TypeToken<PaginatedUserLoginStageList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * UserLoginStage Viewset
     * @param geoipBinding Bind sessions created by this stage to the configured GeoIP location   (optional)
     * @param name  (optional)
     * @param networkBinding Bind sessions created by this stage to the configured network   (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param rememberMeOffset  (optional)
     * @param search A search term. (optional)
     * @param sessionDuration  (optional)
     * @param stageUuid  (optional)
     * @param terminateOtherSessions  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesUserLoginListAsync(String geoipBinding, String name, String networkBinding, String ordering, Integer page, Integer pageSize, String rememberMeOffset, String search, String sessionDuration, UUID stageUuid, Boolean terminateOtherSessions, final ApiCallback<PaginatedUserLoginStageList> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesUserLoginListValidateBeforeCall(geoipBinding, name, networkBinding, ordering, page, pageSize, rememberMeOffset, search, sessionDuration, stageUuid, terminateOtherSessions, _callback);
        Type localVarReturnType = new TypeToken<PaginatedUserLoginStageList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesUserLoginPartialUpdate
     * @param stageUuid A UUID string identifying this User Login Stage. (required)
     * @param patchedUserLoginStageRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesUserLoginPartialUpdateCall(UUID stageUuid, PatchedUserLoginStageRequest patchedUserLoginStageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchedUserLoginStageRequest;

        // create path and map variables
        String localVarPath = "/stages/user_login/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesUserLoginPartialUpdateValidateBeforeCall(UUID stageUuid, PatchedUserLoginStageRequest patchedUserLoginStageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesUserLoginPartialUpdate(Async)");
        }

        return stagesUserLoginPartialUpdateCall(stageUuid, patchedUserLoginStageRequest, _callback);

    }

    /**
     * 
     * UserLoginStage Viewset
     * @param stageUuid A UUID string identifying this User Login Stage. (required)
     * @param patchedUserLoginStageRequest  (optional)
     * @return UserLoginStage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UserLoginStage stagesUserLoginPartialUpdate(UUID stageUuid, PatchedUserLoginStageRequest patchedUserLoginStageRequest) throws ApiException {
        ApiResponse<UserLoginStage> localVarResp = stagesUserLoginPartialUpdateWithHttpInfo(stageUuid, patchedUserLoginStageRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * UserLoginStage Viewset
     * @param stageUuid A UUID string identifying this User Login Stage. (required)
     * @param patchedUserLoginStageRequest  (optional)
     * @return ApiResponse&lt;UserLoginStage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserLoginStage> stagesUserLoginPartialUpdateWithHttpInfo(UUID stageUuid, PatchedUserLoginStageRequest patchedUserLoginStageRequest) throws ApiException {
        okhttp3.Call localVarCall = stagesUserLoginPartialUpdateValidateBeforeCall(stageUuid, patchedUserLoginStageRequest, null);
        Type localVarReturnType = new TypeToken<UserLoginStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * UserLoginStage Viewset
     * @param stageUuid A UUID string identifying this User Login Stage. (required)
     * @param patchedUserLoginStageRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesUserLoginPartialUpdateAsync(UUID stageUuid, PatchedUserLoginStageRequest patchedUserLoginStageRequest, final ApiCallback<UserLoginStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesUserLoginPartialUpdateValidateBeforeCall(stageUuid, patchedUserLoginStageRequest, _callback);
        Type localVarReturnType = new TypeToken<UserLoginStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesUserLoginRetrieve
     * @param stageUuid A UUID string identifying this User Login Stage. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesUserLoginRetrieveCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/user_login/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesUserLoginRetrieveValidateBeforeCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesUserLoginRetrieve(Async)");
        }

        return stagesUserLoginRetrieveCall(stageUuid, _callback);

    }

    /**
     * 
     * UserLoginStage Viewset
     * @param stageUuid A UUID string identifying this User Login Stage. (required)
     * @return UserLoginStage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UserLoginStage stagesUserLoginRetrieve(UUID stageUuid) throws ApiException {
        ApiResponse<UserLoginStage> localVarResp = stagesUserLoginRetrieveWithHttpInfo(stageUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * UserLoginStage Viewset
     * @param stageUuid A UUID string identifying this User Login Stage. (required)
     * @return ApiResponse&lt;UserLoginStage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserLoginStage> stagesUserLoginRetrieveWithHttpInfo(UUID stageUuid) throws ApiException {
        okhttp3.Call localVarCall = stagesUserLoginRetrieveValidateBeforeCall(stageUuid, null);
        Type localVarReturnType = new TypeToken<UserLoginStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * UserLoginStage Viewset
     * @param stageUuid A UUID string identifying this User Login Stage. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesUserLoginRetrieveAsync(UUID stageUuid, final ApiCallback<UserLoginStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesUserLoginRetrieveValidateBeforeCall(stageUuid, _callback);
        Type localVarReturnType = new TypeToken<UserLoginStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesUserLoginUpdate
     * @param stageUuid A UUID string identifying this User Login Stage. (required)
     * @param userLoginStageRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesUserLoginUpdateCall(UUID stageUuid, UserLoginStageRequest userLoginStageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userLoginStageRequest;

        // create path and map variables
        String localVarPath = "/stages/user_login/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesUserLoginUpdateValidateBeforeCall(UUID stageUuid, UserLoginStageRequest userLoginStageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesUserLoginUpdate(Async)");
        }

        // verify the required parameter 'userLoginStageRequest' is set
        if (userLoginStageRequest == null) {
            throw new ApiException("Missing the required parameter 'userLoginStageRequest' when calling stagesUserLoginUpdate(Async)");
        }

        return stagesUserLoginUpdateCall(stageUuid, userLoginStageRequest, _callback);

    }

    /**
     * 
     * UserLoginStage Viewset
     * @param stageUuid A UUID string identifying this User Login Stage. (required)
     * @param userLoginStageRequest  (required)
     * @return UserLoginStage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UserLoginStage stagesUserLoginUpdate(UUID stageUuid, UserLoginStageRequest userLoginStageRequest) throws ApiException {
        ApiResponse<UserLoginStage> localVarResp = stagesUserLoginUpdateWithHttpInfo(stageUuid, userLoginStageRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * UserLoginStage Viewset
     * @param stageUuid A UUID string identifying this User Login Stage. (required)
     * @param userLoginStageRequest  (required)
     * @return ApiResponse&lt;UserLoginStage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserLoginStage> stagesUserLoginUpdateWithHttpInfo(UUID stageUuid, UserLoginStageRequest userLoginStageRequest) throws ApiException {
        okhttp3.Call localVarCall = stagesUserLoginUpdateValidateBeforeCall(stageUuid, userLoginStageRequest, null);
        Type localVarReturnType = new TypeToken<UserLoginStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * UserLoginStage Viewset
     * @param stageUuid A UUID string identifying this User Login Stage. (required)
     * @param userLoginStageRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesUserLoginUpdateAsync(UUID stageUuid, UserLoginStageRequest userLoginStageRequest, final ApiCallback<UserLoginStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesUserLoginUpdateValidateBeforeCall(stageUuid, userLoginStageRequest, _callback);
        Type localVarReturnType = new TypeToken<UserLoginStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesUserLoginUsedByList
     * @param stageUuid A UUID string identifying this User Login Stage. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesUserLoginUsedByListCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/user_login/{stage_uuid}/used_by/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesUserLoginUsedByListValidateBeforeCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesUserLoginUsedByList(Async)");
        }

        return stagesUserLoginUsedByListCall(stageUuid, _callback);

    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param stageUuid A UUID string identifying this User Login Stage. (required)
     * @return List&lt;UsedBy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<UsedBy> stagesUserLoginUsedByList(UUID stageUuid) throws ApiException {
        ApiResponse<List<UsedBy>> localVarResp = stagesUserLoginUsedByListWithHttpInfo(stageUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param stageUuid A UUID string identifying this User Login Stage. (required)
     * @return ApiResponse&lt;List&lt;UsedBy&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UsedBy>> stagesUserLoginUsedByListWithHttpInfo(UUID stageUuid) throws ApiException {
        okhttp3.Call localVarCall = stagesUserLoginUsedByListValidateBeforeCall(stageUuid, null);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of all objects that use this object
     * @param stageUuid A UUID string identifying this User Login Stage. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesUserLoginUsedByListAsync(UUID stageUuid, final ApiCallback<List<UsedBy>> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesUserLoginUsedByListValidateBeforeCall(stageUuid, _callback);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesUserLogoutCreate
     * @param userLogoutStageRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesUserLogoutCreateCall(UserLogoutStageRequest userLogoutStageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userLogoutStageRequest;

        // create path and map variables
        String localVarPath = "/stages/user_logout/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesUserLogoutCreateValidateBeforeCall(UserLogoutStageRequest userLogoutStageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userLogoutStageRequest' is set
        if (userLogoutStageRequest == null) {
            throw new ApiException("Missing the required parameter 'userLogoutStageRequest' when calling stagesUserLogoutCreate(Async)");
        }

        return stagesUserLogoutCreateCall(userLogoutStageRequest, _callback);

    }

    /**
     * 
     * UserLogoutStage Viewset
     * @param userLogoutStageRequest  (required)
     * @return UserLogoutStage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UserLogoutStage stagesUserLogoutCreate(UserLogoutStageRequest userLogoutStageRequest) throws ApiException {
        ApiResponse<UserLogoutStage> localVarResp = stagesUserLogoutCreateWithHttpInfo(userLogoutStageRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * UserLogoutStage Viewset
     * @param userLogoutStageRequest  (required)
     * @return ApiResponse&lt;UserLogoutStage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserLogoutStage> stagesUserLogoutCreateWithHttpInfo(UserLogoutStageRequest userLogoutStageRequest) throws ApiException {
        okhttp3.Call localVarCall = stagesUserLogoutCreateValidateBeforeCall(userLogoutStageRequest, null);
        Type localVarReturnType = new TypeToken<UserLogoutStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * UserLogoutStage Viewset
     * @param userLogoutStageRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesUserLogoutCreateAsync(UserLogoutStageRequest userLogoutStageRequest, final ApiCallback<UserLogoutStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesUserLogoutCreateValidateBeforeCall(userLogoutStageRequest, _callback);
        Type localVarReturnType = new TypeToken<UserLogoutStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesUserLogoutDestroy
     * @param stageUuid A UUID string identifying this User Logout Stage. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesUserLogoutDestroyCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/user_logout/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesUserLogoutDestroyValidateBeforeCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesUserLogoutDestroy(Async)");
        }

        return stagesUserLogoutDestroyCall(stageUuid, _callback);

    }

    /**
     * 
     * UserLogoutStage Viewset
     * @param stageUuid A UUID string identifying this User Logout Stage. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void stagesUserLogoutDestroy(UUID stageUuid) throws ApiException {
        stagesUserLogoutDestroyWithHttpInfo(stageUuid);
    }

    /**
     * 
     * UserLogoutStage Viewset
     * @param stageUuid A UUID string identifying this User Logout Stage. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> stagesUserLogoutDestroyWithHttpInfo(UUID stageUuid) throws ApiException {
        okhttp3.Call localVarCall = stagesUserLogoutDestroyValidateBeforeCall(stageUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * UserLogoutStage Viewset
     * @param stageUuid A UUID string identifying this User Logout Stage. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesUserLogoutDestroyAsync(UUID stageUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesUserLogoutDestroyValidateBeforeCall(stageUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesUserLogoutList
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @param stageUuid  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesUserLogoutListCall(String name, String ordering, Integer page, Integer pageSize, String search, UUID stageUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/user_logout/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (stageUuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stage_uuid", stageUuid));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesUserLogoutListValidateBeforeCall(String name, String ordering, Integer page, Integer pageSize, String search, UUID stageUuid, final ApiCallback _callback) throws ApiException {
        return stagesUserLogoutListCall(name, ordering, page, pageSize, search, stageUuid, _callback);

    }

    /**
     * 
     * UserLogoutStage Viewset
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @param stageUuid  (optional)
     * @return PaginatedUserLogoutStageList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedUserLogoutStageList stagesUserLogoutList(String name, String ordering, Integer page, Integer pageSize, String search, UUID stageUuid) throws ApiException {
        ApiResponse<PaginatedUserLogoutStageList> localVarResp = stagesUserLogoutListWithHttpInfo(name, ordering, page, pageSize, search, stageUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * UserLogoutStage Viewset
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @param stageUuid  (optional)
     * @return ApiResponse&lt;PaginatedUserLogoutStageList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedUserLogoutStageList> stagesUserLogoutListWithHttpInfo(String name, String ordering, Integer page, Integer pageSize, String search, UUID stageUuid) throws ApiException {
        okhttp3.Call localVarCall = stagesUserLogoutListValidateBeforeCall(name, ordering, page, pageSize, search, stageUuid, null);
        Type localVarReturnType = new TypeToken<PaginatedUserLogoutStageList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * UserLogoutStage Viewset
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @param stageUuid  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesUserLogoutListAsync(String name, String ordering, Integer page, Integer pageSize, String search, UUID stageUuid, final ApiCallback<PaginatedUserLogoutStageList> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesUserLogoutListValidateBeforeCall(name, ordering, page, pageSize, search, stageUuid, _callback);
        Type localVarReturnType = new TypeToken<PaginatedUserLogoutStageList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesUserLogoutPartialUpdate
     * @param stageUuid A UUID string identifying this User Logout Stage. (required)
     * @param patchedUserLogoutStageRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesUserLogoutPartialUpdateCall(UUID stageUuid, PatchedUserLogoutStageRequest patchedUserLogoutStageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchedUserLogoutStageRequest;

        // create path and map variables
        String localVarPath = "/stages/user_logout/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesUserLogoutPartialUpdateValidateBeforeCall(UUID stageUuid, PatchedUserLogoutStageRequest patchedUserLogoutStageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesUserLogoutPartialUpdate(Async)");
        }

        return stagesUserLogoutPartialUpdateCall(stageUuid, patchedUserLogoutStageRequest, _callback);

    }

    /**
     * 
     * UserLogoutStage Viewset
     * @param stageUuid A UUID string identifying this User Logout Stage. (required)
     * @param patchedUserLogoutStageRequest  (optional)
     * @return UserLogoutStage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UserLogoutStage stagesUserLogoutPartialUpdate(UUID stageUuid, PatchedUserLogoutStageRequest patchedUserLogoutStageRequest) throws ApiException {
        ApiResponse<UserLogoutStage> localVarResp = stagesUserLogoutPartialUpdateWithHttpInfo(stageUuid, patchedUserLogoutStageRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * UserLogoutStage Viewset
     * @param stageUuid A UUID string identifying this User Logout Stage. (required)
     * @param patchedUserLogoutStageRequest  (optional)
     * @return ApiResponse&lt;UserLogoutStage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserLogoutStage> stagesUserLogoutPartialUpdateWithHttpInfo(UUID stageUuid, PatchedUserLogoutStageRequest patchedUserLogoutStageRequest) throws ApiException {
        okhttp3.Call localVarCall = stagesUserLogoutPartialUpdateValidateBeforeCall(stageUuid, patchedUserLogoutStageRequest, null);
        Type localVarReturnType = new TypeToken<UserLogoutStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * UserLogoutStage Viewset
     * @param stageUuid A UUID string identifying this User Logout Stage. (required)
     * @param patchedUserLogoutStageRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesUserLogoutPartialUpdateAsync(UUID stageUuid, PatchedUserLogoutStageRequest patchedUserLogoutStageRequest, final ApiCallback<UserLogoutStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesUserLogoutPartialUpdateValidateBeforeCall(stageUuid, patchedUserLogoutStageRequest, _callback);
        Type localVarReturnType = new TypeToken<UserLogoutStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesUserLogoutRetrieve
     * @param stageUuid A UUID string identifying this User Logout Stage. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesUserLogoutRetrieveCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/user_logout/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesUserLogoutRetrieveValidateBeforeCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesUserLogoutRetrieve(Async)");
        }

        return stagesUserLogoutRetrieveCall(stageUuid, _callback);

    }

    /**
     * 
     * UserLogoutStage Viewset
     * @param stageUuid A UUID string identifying this User Logout Stage. (required)
     * @return UserLogoutStage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UserLogoutStage stagesUserLogoutRetrieve(UUID stageUuid) throws ApiException {
        ApiResponse<UserLogoutStage> localVarResp = stagesUserLogoutRetrieveWithHttpInfo(stageUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * UserLogoutStage Viewset
     * @param stageUuid A UUID string identifying this User Logout Stage. (required)
     * @return ApiResponse&lt;UserLogoutStage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserLogoutStage> stagesUserLogoutRetrieveWithHttpInfo(UUID stageUuid) throws ApiException {
        okhttp3.Call localVarCall = stagesUserLogoutRetrieveValidateBeforeCall(stageUuid, null);
        Type localVarReturnType = new TypeToken<UserLogoutStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * UserLogoutStage Viewset
     * @param stageUuid A UUID string identifying this User Logout Stage. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesUserLogoutRetrieveAsync(UUID stageUuid, final ApiCallback<UserLogoutStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesUserLogoutRetrieveValidateBeforeCall(stageUuid, _callback);
        Type localVarReturnType = new TypeToken<UserLogoutStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesUserLogoutUpdate
     * @param stageUuid A UUID string identifying this User Logout Stage. (required)
     * @param userLogoutStageRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesUserLogoutUpdateCall(UUID stageUuid, UserLogoutStageRequest userLogoutStageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userLogoutStageRequest;

        // create path and map variables
        String localVarPath = "/stages/user_logout/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesUserLogoutUpdateValidateBeforeCall(UUID stageUuid, UserLogoutStageRequest userLogoutStageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesUserLogoutUpdate(Async)");
        }

        // verify the required parameter 'userLogoutStageRequest' is set
        if (userLogoutStageRequest == null) {
            throw new ApiException("Missing the required parameter 'userLogoutStageRequest' when calling stagesUserLogoutUpdate(Async)");
        }

        return stagesUserLogoutUpdateCall(stageUuid, userLogoutStageRequest, _callback);

    }

    /**
     * 
     * UserLogoutStage Viewset
     * @param stageUuid A UUID string identifying this User Logout Stage. (required)
     * @param userLogoutStageRequest  (required)
     * @return UserLogoutStage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UserLogoutStage stagesUserLogoutUpdate(UUID stageUuid, UserLogoutStageRequest userLogoutStageRequest) throws ApiException {
        ApiResponse<UserLogoutStage> localVarResp = stagesUserLogoutUpdateWithHttpInfo(stageUuid, userLogoutStageRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * UserLogoutStage Viewset
     * @param stageUuid A UUID string identifying this User Logout Stage. (required)
     * @param userLogoutStageRequest  (required)
     * @return ApiResponse&lt;UserLogoutStage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserLogoutStage> stagesUserLogoutUpdateWithHttpInfo(UUID stageUuid, UserLogoutStageRequest userLogoutStageRequest) throws ApiException {
        okhttp3.Call localVarCall = stagesUserLogoutUpdateValidateBeforeCall(stageUuid, userLogoutStageRequest, null);
        Type localVarReturnType = new TypeToken<UserLogoutStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * UserLogoutStage Viewset
     * @param stageUuid A UUID string identifying this User Logout Stage. (required)
     * @param userLogoutStageRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesUserLogoutUpdateAsync(UUID stageUuid, UserLogoutStageRequest userLogoutStageRequest, final ApiCallback<UserLogoutStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesUserLogoutUpdateValidateBeforeCall(stageUuid, userLogoutStageRequest, _callback);
        Type localVarReturnType = new TypeToken<UserLogoutStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesUserLogoutUsedByList
     * @param stageUuid A UUID string identifying this User Logout Stage. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesUserLogoutUsedByListCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/user_logout/{stage_uuid}/used_by/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesUserLogoutUsedByListValidateBeforeCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesUserLogoutUsedByList(Async)");
        }

        return stagesUserLogoutUsedByListCall(stageUuid, _callback);

    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param stageUuid A UUID string identifying this User Logout Stage. (required)
     * @return List&lt;UsedBy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<UsedBy> stagesUserLogoutUsedByList(UUID stageUuid) throws ApiException {
        ApiResponse<List<UsedBy>> localVarResp = stagesUserLogoutUsedByListWithHttpInfo(stageUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param stageUuid A UUID string identifying this User Logout Stage. (required)
     * @return ApiResponse&lt;List&lt;UsedBy&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UsedBy>> stagesUserLogoutUsedByListWithHttpInfo(UUID stageUuid) throws ApiException {
        okhttp3.Call localVarCall = stagesUserLogoutUsedByListValidateBeforeCall(stageUuid, null);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of all objects that use this object
     * @param stageUuid A UUID string identifying this User Logout Stage. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesUserLogoutUsedByListAsync(UUID stageUuid, final ApiCallback<List<UsedBy>> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesUserLogoutUsedByListValidateBeforeCall(stageUuid, _callback);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesUserWriteCreate
     * @param userWriteStageRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesUserWriteCreateCall(UserWriteStageRequest userWriteStageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userWriteStageRequest;

        // create path and map variables
        String localVarPath = "/stages/user_write/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesUserWriteCreateValidateBeforeCall(UserWriteStageRequest userWriteStageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userWriteStageRequest' is set
        if (userWriteStageRequest == null) {
            throw new ApiException("Missing the required parameter 'userWriteStageRequest' when calling stagesUserWriteCreate(Async)");
        }

        return stagesUserWriteCreateCall(userWriteStageRequest, _callback);

    }

    /**
     * 
     * UserWriteStage Viewset
     * @param userWriteStageRequest  (required)
     * @return UserWriteStage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UserWriteStage stagesUserWriteCreate(UserWriteStageRequest userWriteStageRequest) throws ApiException {
        ApiResponse<UserWriteStage> localVarResp = stagesUserWriteCreateWithHttpInfo(userWriteStageRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * UserWriteStage Viewset
     * @param userWriteStageRequest  (required)
     * @return ApiResponse&lt;UserWriteStage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserWriteStage> stagesUserWriteCreateWithHttpInfo(UserWriteStageRequest userWriteStageRequest) throws ApiException {
        okhttp3.Call localVarCall = stagesUserWriteCreateValidateBeforeCall(userWriteStageRequest, null);
        Type localVarReturnType = new TypeToken<UserWriteStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * UserWriteStage Viewset
     * @param userWriteStageRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesUserWriteCreateAsync(UserWriteStageRequest userWriteStageRequest, final ApiCallback<UserWriteStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesUserWriteCreateValidateBeforeCall(userWriteStageRequest, _callback);
        Type localVarReturnType = new TypeToken<UserWriteStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesUserWriteDestroy
     * @param stageUuid A UUID string identifying this User Write Stage. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesUserWriteDestroyCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/user_write/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesUserWriteDestroyValidateBeforeCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesUserWriteDestroy(Async)");
        }

        return stagesUserWriteDestroyCall(stageUuid, _callback);

    }

    /**
     * 
     * UserWriteStage Viewset
     * @param stageUuid A UUID string identifying this User Write Stage. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void stagesUserWriteDestroy(UUID stageUuid) throws ApiException {
        stagesUserWriteDestroyWithHttpInfo(stageUuid);
    }

    /**
     * 
     * UserWriteStage Viewset
     * @param stageUuid A UUID string identifying this User Write Stage. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> stagesUserWriteDestroyWithHttpInfo(UUID stageUuid) throws ApiException {
        okhttp3.Call localVarCall = stagesUserWriteDestroyValidateBeforeCall(stageUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * UserWriteStage Viewset
     * @param stageUuid A UUID string identifying this User Write Stage. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesUserWriteDestroyAsync(UUID stageUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesUserWriteDestroyValidateBeforeCall(stageUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesUserWriteList
     * @param createUsersAsInactive  (optional)
     * @param createUsersGroup  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @param stageUuid  (optional)
     * @param userCreationMode  (optional)
     * @param userPathTemplate  (optional)
     * @param userType  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesUserWriteListCall(Boolean createUsersAsInactive, UUID createUsersGroup, String name, String ordering, Integer page, Integer pageSize, String search, UUID stageUuid, String userCreationMode, String userPathTemplate, String userType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/user_write/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (createUsersAsInactive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("create_users_as_inactive", createUsersAsInactive));
        }

        if (createUsersGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("create_users_group", createUsersGroup));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (stageUuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stage_uuid", stageUuid));
        }

        if (userCreationMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_creation_mode", userCreationMode));
        }

        if (userPathTemplate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_path_template", userPathTemplate));
        }

        if (userType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_type", userType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesUserWriteListValidateBeforeCall(Boolean createUsersAsInactive, UUID createUsersGroup, String name, String ordering, Integer page, Integer pageSize, String search, UUID stageUuid, String userCreationMode, String userPathTemplate, String userType, final ApiCallback _callback) throws ApiException {
        return stagesUserWriteListCall(createUsersAsInactive, createUsersGroup, name, ordering, page, pageSize, search, stageUuid, userCreationMode, userPathTemplate, userType, _callback);

    }

    /**
     * 
     * UserWriteStage Viewset
     * @param createUsersAsInactive  (optional)
     * @param createUsersGroup  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @param stageUuid  (optional)
     * @param userCreationMode  (optional)
     * @param userPathTemplate  (optional)
     * @param userType  (optional)
     * @return PaginatedUserWriteStageList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedUserWriteStageList stagesUserWriteList(Boolean createUsersAsInactive, UUID createUsersGroup, String name, String ordering, Integer page, Integer pageSize, String search, UUID stageUuid, String userCreationMode, String userPathTemplate, String userType) throws ApiException {
        ApiResponse<PaginatedUserWriteStageList> localVarResp = stagesUserWriteListWithHttpInfo(createUsersAsInactive, createUsersGroup, name, ordering, page, pageSize, search, stageUuid, userCreationMode, userPathTemplate, userType);
        return localVarResp.getData();
    }

    /**
     * 
     * UserWriteStage Viewset
     * @param createUsersAsInactive  (optional)
     * @param createUsersGroup  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @param stageUuid  (optional)
     * @param userCreationMode  (optional)
     * @param userPathTemplate  (optional)
     * @param userType  (optional)
     * @return ApiResponse&lt;PaginatedUserWriteStageList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedUserWriteStageList> stagesUserWriteListWithHttpInfo(Boolean createUsersAsInactive, UUID createUsersGroup, String name, String ordering, Integer page, Integer pageSize, String search, UUID stageUuid, String userCreationMode, String userPathTemplate, String userType) throws ApiException {
        okhttp3.Call localVarCall = stagesUserWriteListValidateBeforeCall(createUsersAsInactive, createUsersGroup, name, ordering, page, pageSize, search, stageUuid, userCreationMode, userPathTemplate, userType, null);
        Type localVarReturnType = new TypeToken<PaginatedUserWriteStageList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * UserWriteStage Viewset
     * @param createUsersAsInactive  (optional)
     * @param createUsersGroup  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @param stageUuid  (optional)
     * @param userCreationMode  (optional)
     * @param userPathTemplate  (optional)
     * @param userType  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesUserWriteListAsync(Boolean createUsersAsInactive, UUID createUsersGroup, String name, String ordering, Integer page, Integer pageSize, String search, UUID stageUuid, String userCreationMode, String userPathTemplate, String userType, final ApiCallback<PaginatedUserWriteStageList> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesUserWriteListValidateBeforeCall(createUsersAsInactive, createUsersGroup, name, ordering, page, pageSize, search, stageUuid, userCreationMode, userPathTemplate, userType, _callback);
        Type localVarReturnType = new TypeToken<PaginatedUserWriteStageList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesUserWritePartialUpdate
     * @param stageUuid A UUID string identifying this User Write Stage. (required)
     * @param patchedUserWriteStageRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesUserWritePartialUpdateCall(UUID stageUuid, PatchedUserWriteStageRequest patchedUserWriteStageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchedUserWriteStageRequest;

        // create path and map variables
        String localVarPath = "/stages/user_write/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesUserWritePartialUpdateValidateBeforeCall(UUID stageUuid, PatchedUserWriteStageRequest patchedUserWriteStageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesUserWritePartialUpdate(Async)");
        }

        return stagesUserWritePartialUpdateCall(stageUuid, patchedUserWriteStageRequest, _callback);

    }

    /**
     * 
     * UserWriteStage Viewset
     * @param stageUuid A UUID string identifying this User Write Stage. (required)
     * @param patchedUserWriteStageRequest  (optional)
     * @return UserWriteStage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UserWriteStage stagesUserWritePartialUpdate(UUID stageUuid, PatchedUserWriteStageRequest patchedUserWriteStageRequest) throws ApiException {
        ApiResponse<UserWriteStage> localVarResp = stagesUserWritePartialUpdateWithHttpInfo(stageUuid, patchedUserWriteStageRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * UserWriteStage Viewset
     * @param stageUuid A UUID string identifying this User Write Stage. (required)
     * @param patchedUserWriteStageRequest  (optional)
     * @return ApiResponse&lt;UserWriteStage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserWriteStage> stagesUserWritePartialUpdateWithHttpInfo(UUID stageUuid, PatchedUserWriteStageRequest patchedUserWriteStageRequest) throws ApiException {
        okhttp3.Call localVarCall = stagesUserWritePartialUpdateValidateBeforeCall(stageUuid, patchedUserWriteStageRequest, null);
        Type localVarReturnType = new TypeToken<UserWriteStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * UserWriteStage Viewset
     * @param stageUuid A UUID string identifying this User Write Stage. (required)
     * @param patchedUserWriteStageRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesUserWritePartialUpdateAsync(UUID stageUuid, PatchedUserWriteStageRequest patchedUserWriteStageRequest, final ApiCallback<UserWriteStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesUserWritePartialUpdateValidateBeforeCall(stageUuid, patchedUserWriteStageRequest, _callback);
        Type localVarReturnType = new TypeToken<UserWriteStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesUserWriteRetrieve
     * @param stageUuid A UUID string identifying this User Write Stage. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesUserWriteRetrieveCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/user_write/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesUserWriteRetrieveValidateBeforeCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesUserWriteRetrieve(Async)");
        }

        return stagesUserWriteRetrieveCall(stageUuid, _callback);

    }

    /**
     * 
     * UserWriteStage Viewset
     * @param stageUuid A UUID string identifying this User Write Stage. (required)
     * @return UserWriteStage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UserWriteStage stagesUserWriteRetrieve(UUID stageUuid) throws ApiException {
        ApiResponse<UserWriteStage> localVarResp = stagesUserWriteRetrieveWithHttpInfo(stageUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * UserWriteStage Viewset
     * @param stageUuid A UUID string identifying this User Write Stage. (required)
     * @return ApiResponse&lt;UserWriteStage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserWriteStage> stagesUserWriteRetrieveWithHttpInfo(UUID stageUuid) throws ApiException {
        okhttp3.Call localVarCall = stagesUserWriteRetrieveValidateBeforeCall(stageUuid, null);
        Type localVarReturnType = new TypeToken<UserWriteStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * UserWriteStage Viewset
     * @param stageUuid A UUID string identifying this User Write Stage. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesUserWriteRetrieveAsync(UUID stageUuid, final ApiCallback<UserWriteStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesUserWriteRetrieveValidateBeforeCall(stageUuid, _callback);
        Type localVarReturnType = new TypeToken<UserWriteStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesUserWriteUpdate
     * @param stageUuid A UUID string identifying this User Write Stage. (required)
     * @param userWriteStageRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesUserWriteUpdateCall(UUID stageUuid, UserWriteStageRequest userWriteStageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userWriteStageRequest;

        // create path and map variables
        String localVarPath = "/stages/user_write/{stage_uuid}/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesUserWriteUpdateValidateBeforeCall(UUID stageUuid, UserWriteStageRequest userWriteStageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesUserWriteUpdate(Async)");
        }

        // verify the required parameter 'userWriteStageRequest' is set
        if (userWriteStageRequest == null) {
            throw new ApiException("Missing the required parameter 'userWriteStageRequest' when calling stagesUserWriteUpdate(Async)");
        }

        return stagesUserWriteUpdateCall(stageUuid, userWriteStageRequest, _callback);

    }

    /**
     * 
     * UserWriteStage Viewset
     * @param stageUuid A UUID string identifying this User Write Stage. (required)
     * @param userWriteStageRequest  (required)
     * @return UserWriteStage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UserWriteStage stagesUserWriteUpdate(UUID stageUuid, UserWriteStageRequest userWriteStageRequest) throws ApiException {
        ApiResponse<UserWriteStage> localVarResp = stagesUserWriteUpdateWithHttpInfo(stageUuid, userWriteStageRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * UserWriteStage Viewset
     * @param stageUuid A UUID string identifying this User Write Stage. (required)
     * @param userWriteStageRequest  (required)
     * @return ApiResponse&lt;UserWriteStage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserWriteStage> stagesUserWriteUpdateWithHttpInfo(UUID stageUuid, UserWriteStageRequest userWriteStageRequest) throws ApiException {
        okhttp3.Call localVarCall = stagesUserWriteUpdateValidateBeforeCall(stageUuid, userWriteStageRequest, null);
        Type localVarReturnType = new TypeToken<UserWriteStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * UserWriteStage Viewset
     * @param stageUuid A UUID string identifying this User Write Stage. (required)
     * @param userWriteStageRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesUserWriteUpdateAsync(UUID stageUuid, UserWriteStageRequest userWriteStageRequest, final ApiCallback<UserWriteStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesUserWriteUpdateValidateBeforeCall(stageUuid, userWriteStageRequest, _callback);
        Type localVarReturnType = new TypeToken<UserWriteStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stagesUserWriteUsedByList
     * @param stageUuid A UUID string identifying this User Write Stage. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesUserWriteUsedByListCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stages/user_write/{stage_uuid}/used_by/"
            .replace("{" + "stage_uuid" + "}", localVarApiClient.escapeString(stageUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stagesUserWriteUsedByListValidateBeforeCall(UUID stageUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stageUuid' is set
        if (stageUuid == null) {
            throw new ApiException("Missing the required parameter 'stageUuid' when calling stagesUserWriteUsedByList(Async)");
        }

        return stagesUserWriteUsedByListCall(stageUuid, _callback);

    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param stageUuid A UUID string identifying this User Write Stage. (required)
     * @return List&lt;UsedBy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<UsedBy> stagesUserWriteUsedByList(UUID stageUuid) throws ApiException {
        ApiResponse<List<UsedBy>> localVarResp = stagesUserWriteUsedByListWithHttpInfo(stageUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param stageUuid A UUID string identifying this User Write Stage. (required)
     * @return ApiResponse&lt;List&lt;UsedBy&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UsedBy>> stagesUserWriteUsedByListWithHttpInfo(UUID stageUuid) throws ApiException {
        okhttp3.Call localVarCall = stagesUserWriteUsedByListValidateBeforeCall(stageUuid, null);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of all objects that use this object
     * @param stageUuid A UUID string identifying this User Write Stage. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stagesUserWriteUsedByListAsync(UUID stageUuid, final ApiCallback<List<UsedBy>> _callback) throws ApiException {

        okhttp3.Call localVarCall = stagesUserWriteUsedByListValidateBeforeCall(stageUuid, _callback);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
