/*
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.6.3
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Cache;
import org.openapitools.client.model.DummyPolicy;
import org.openapitools.client.model.DummyPolicyRequest;
import org.openapitools.client.model.EventMatcherPolicy;
import org.openapitools.client.model.EventMatcherPolicyRequest;
import org.openapitools.client.model.ExpressionPolicy;
import org.openapitools.client.model.ExpressionPolicyRequest;
import org.openapitools.client.model.GenericError;
import java.time.OffsetDateTime;
import org.openapitools.client.model.PaginatedDummyPolicyList;
import org.openapitools.client.model.PaginatedEventMatcherPolicyList;
import org.openapitools.client.model.PaginatedExpressionPolicyList;
import org.openapitools.client.model.PaginatedPasswordExpiryPolicyList;
import org.openapitools.client.model.PaginatedPasswordPolicyList;
import org.openapitools.client.model.PaginatedPolicyBindingList;
import org.openapitools.client.model.PaginatedPolicyList;
import org.openapitools.client.model.PaginatedReputationList;
import org.openapitools.client.model.PaginatedReputationPolicyList;
import org.openapitools.client.model.PasswordExpiryPolicy;
import org.openapitools.client.model.PasswordExpiryPolicyRequest;
import org.openapitools.client.model.PasswordPolicy;
import org.openapitools.client.model.PasswordPolicyRequest;
import org.openapitools.client.model.PatchedDummyPolicyRequest;
import org.openapitools.client.model.PatchedEventMatcherPolicyRequest;
import org.openapitools.client.model.PatchedExpressionPolicyRequest;
import org.openapitools.client.model.PatchedPasswordExpiryPolicyRequest;
import org.openapitools.client.model.PatchedPasswordPolicyRequest;
import org.openapitools.client.model.PatchedPolicyBindingRequest;
import org.openapitools.client.model.PatchedReputationPolicyRequest;
import org.openapitools.client.model.Policy;
import org.openapitools.client.model.PolicyBinding;
import org.openapitools.client.model.PolicyBindingRequest;
import org.openapitools.client.model.PolicyTestRequest;
import org.openapitools.client.model.PolicyTestResult;
import org.openapitools.client.model.Reputation;
import org.openapitools.client.model.ReputationPolicy;
import org.openapitools.client.model.ReputationPolicyRequest;
import org.openapitools.client.model.TypeCreate;
import java.util.UUID;
import org.openapitools.client.model.UsedBy;
import org.openapitools.client.model.ValidationError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PoliciesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PoliciesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PoliciesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for policiesAllCacheClearCreate
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully cleared cache </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesAllCacheClearCreateCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/policies/all/cache_clear/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policiesAllCacheClearCreateValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return policiesAllCacheClearCreateCall(_callback);

    }

    /**
     * 
     * Clear policy cache
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully cleared cache </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void policiesAllCacheClearCreate() throws ApiException {
        policiesAllCacheClearCreateWithHttpInfo();
    }

    /**
     * 
     * Clear policy cache
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully cleared cache </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> policiesAllCacheClearCreateWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = policiesAllCacheClearCreateValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Clear policy cache
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully cleared cache </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesAllCacheClearCreateAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = policiesAllCacheClearCreateValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for policiesAllCacheInfoRetrieve
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesAllCacheInfoRetrieveCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/policies/all/cache_info/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policiesAllCacheInfoRetrieveValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return policiesAllCacheInfoRetrieveCall(_callback);

    }

    /**
     * 
     * Info about cached policies
     * @return Cache
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Cache policiesAllCacheInfoRetrieve() throws ApiException {
        ApiResponse<Cache> localVarResp = policiesAllCacheInfoRetrieveWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Info about cached policies
     * @return ApiResponse&lt;Cache&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Cache> policiesAllCacheInfoRetrieveWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = policiesAllCacheInfoRetrieveValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Cache>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Info about cached policies
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesAllCacheInfoRetrieveAsync(final ApiCallback<Cache> _callback) throws ApiException {

        okhttp3.Call localVarCall = policiesAllCacheInfoRetrieveValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Cache>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policiesAllDestroy
     * @param policyUuid A UUID string identifying this Policy. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesAllDestroyCall(UUID policyUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/policies/all/{policy_uuid}/"
            .replace("{" + "policy_uuid" + "}", localVarApiClient.escapeString(policyUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policiesAllDestroyValidateBeforeCall(UUID policyUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyUuid' is set
        if (policyUuid == null) {
            throw new ApiException("Missing the required parameter 'policyUuid' when calling policiesAllDestroy(Async)");
        }

        return policiesAllDestroyCall(policyUuid, _callback);

    }

    /**
     * 
     * Policy Viewset
     * @param policyUuid A UUID string identifying this Policy. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void policiesAllDestroy(UUID policyUuid) throws ApiException {
        policiesAllDestroyWithHttpInfo(policyUuid);
    }

    /**
     * 
     * Policy Viewset
     * @param policyUuid A UUID string identifying this Policy. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> policiesAllDestroyWithHttpInfo(UUID policyUuid) throws ApiException {
        okhttp3.Call localVarCall = policiesAllDestroyValidateBeforeCall(policyUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Policy Viewset
     * @param policyUuid A UUID string identifying this Policy. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesAllDestroyAsync(UUID policyUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = policiesAllDestroyValidateBeforeCall(policyUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for policiesAllList
     * @param bindingsIsnull  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param promptstageIsnull  (optional)
     * @param search A search term. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesAllListCall(Boolean bindingsIsnull, String ordering, Integer page, Integer pageSize, Boolean promptstageIsnull, String search, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/policies/all/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (bindingsIsnull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bindings__isnull", bindingsIsnull));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (promptstageIsnull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("promptstage__isnull", promptstageIsnull));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policiesAllListValidateBeforeCall(Boolean bindingsIsnull, String ordering, Integer page, Integer pageSize, Boolean promptstageIsnull, String search, final ApiCallback _callback) throws ApiException {
        return policiesAllListCall(bindingsIsnull, ordering, page, pageSize, promptstageIsnull, search, _callback);

    }

    /**
     * 
     * Policy Viewset
     * @param bindingsIsnull  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param promptstageIsnull  (optional)
     * @param search A search term. (optional)
     * @return PaginatedPolicyList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedPolicyList policiesAllList(Boolean bindingsIsnull, String ordering, Integer page, Integer pageSize, Boolean promptstageIsnull, String search) throws ApiException {
        ApiResponse<PaginatedPolicyList> localVarResp = policiesAllListWithHttpInfo(bindingsIsnull, ordering, page, pageSize, promptstageIsnull, search);
        return localVarResp.getData();
    }

    /**
     * 
     * Policy Viewset
     * @param bindingsIsnull  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param promptstageIsnull  (optional)
     * @param search A search term. (optional)
     * @return ApiResponse&lt;PaginatedPolicyList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedPolicyList> policiesAllListWithHttpInfo(Boolean bindingsIsnull, String ordering, Integer page, Integer pageSize, Boolean promptstageIsnull, String search) throws ApiException {
        okhttp3.Call localVarCall = policiesAllListValidateBeforeCall(bindingsIsnull, ordering, page, pageSize, promptstageIsnull, search, null);
        Type localVarReturnType = new TypeToken<PaginatedPolicyList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Policy Viewset
     * @param bindingsIsnull  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param promptstageIsnull  (optional)
     * @param search A search term. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesAllListAsync(Boolean bindingsIsnull, String ordering, Integer page, Integer pageSize, Boolean promptstageIsnull, String search, final ApiCallback<PaginatedPolicyList> _callback) throws ApiException {

        okhttp3.Call localVarCall = policiesAllListValidateBeforeCall(bindingsIsnull, ordering, page, pageSize, promptstageIsnull, search, _callback);
        Type localVarReturnType = new TypeToken<PaginatedPolicyList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policiesAllRetrieve
     * @param policyUuid A UUID string identifying this Policy. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesAllRetrieveCall(UUID policyUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/policies/all/{policy_uuid}/"
            .replace("{" + "policy_uuid" + "}", localVarApiClient.escapeString(policyUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policiesAllRetrieveValidateBeforeCall(UUID policyUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyUuid' is set
        if (policyUuid == null) {
            throw new ApiException("Missing the required parameter 'policyUuid' when calling policiesAllRetrieve(Async)");
        }

        return policiesAllRetrieveCall(policyUuid, _callback);

    }

    /**
     * 
     * Policy Viewset
     * @param policyUuid A UUID string identifying this Policy. (required)
     * @return Policy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Policy policiesAllRetrieve(UUID policyUuid) throws ApiException {
        ApiResponse<Policy> localVarResp = policiesAllRetrieveWithHttpInfo(policyUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Policy Viewset
     * @param policyUuid A UUID string identifying this Policy. (required)
     * @return ApiResponse&lt;Policy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Policy> policiesAllRetrieveWithHttpInfo(UUID policyUuid) throws ApiException {
        okhttp3.Call localVarCall = policiesAllRetrieveValidateBeforeCall(policyUuid, null);
        Type localVarReturnType = new TypeToken<Policy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Policy Viewset
     * @param policyUuid A UUID string identifying this Policy. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesAllRetrieveAsync(UUID policyUuid, final ApiCallback<Policy> _callback) throws ApiException {

        okhttp3.Call localVarCall = policiesAllRetrieveValidateBeforeCall(policyUuid, _callback);
        Type localVarReturnType = new TypeToken<Policy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policiesAllTestCreate
     * @param policyUuid A UUID string identifying this Policy. (required)
     * @param policyTestRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameters </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesAllTestCreateCall(UUID policyUuid, PolicyTestRequest policyTestRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = policyTestRequest;

        // create path and map variables
        String localVarPath = "/policies/all/{policy_uuid}/test/"
            .replace("{" + "policy_uuid" + "}", localVarApiClient.escapeString(policyUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policiesAllTestCreateValidateBeforeCall(UUID policyUuid, PolicyTestRequest policyTestRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyUuid' is set
        if (policyUuid == null) {
            throw new ApiException("Missing the required parameter 'policyUuid' when calling policiesAllTestCreate(Async)");
        }

        // verify the required parameter 'policyTestRequest' is set
        if (policyTestRequest == null) {
            throw new ApiException("Missing the required parameter 'policyTestRequest' when calling policiesAllTestCreate(Async)");
        }

        return policiesAllTestCreateCall(policyUuid, policyTestRequest, _callback);

    }

    /**
     * 
     * Test policy
     * @param policyUuid A UUID string identifying this Policy. (required)
     * @param policyTestRequest  (required)
     * @return PolicyTestResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameters </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PolicyTestResult policiesAllTestCreate(UUID policyUuid, PolicyTestRequest policyTestRequest) throws ApiException {
        ApiResponse<PolicyTestResult> localVarResp = policiesAllTestCreateWithHttpInfo(policyUuid, policyTestRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Test policy
     * @param policyUuid A UUID string identifying this Policy. (required)
     * @param policyTestRequest  (required)
     * @return ApiResponse&lt;PolicyTestResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameters </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PolicyTestResult> policiesAllTestCreateWithHttpInfo(UUID policyUuid, PolicyTestRequest policyTestRequest) throws ApiException {
        okhttp3.Call localVarCall = policiesAllTestCreateValidateBeforeCall(policyUuid, policyTestRequest, null);
        Type localVarReturnType = new TypeToken<PolicyTestResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Test policy
     * @param policyUuid A UUID string identifying this Policy. (required)
     * @param policyTestRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameters </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesAllTestCreateAsync(UUID policyUuid, PolicyTestRequest policyTestRequest, final ApiCallback<PolicyTestResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = policiesAllTestCreateValidateBeforeCall(policyUuid, policyTestRequest, _callback);
        Type localVarReturnType = new TypeToken<PolicyTestResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policiesAllTypesList
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesAllTypesListCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/policies/all/types/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policiesAllTypesListValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return policiesAllTypesListCall(_callback);

    }

    /**
     * 
     * Get all creatable types
     * @return List&lt;TypeCreate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<TypeCreate> policiesAllTypesList() throws ApiException {
        ApiResponse<List<TypeCreate>> localVarResp = policiesAllTypesListWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Get all creatable types
     * @return ApiResponse&lt;List&lt;TypeCreate&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TypeCreate>> policiesAllTypesListWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = policiesAllTypesListValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<TypeCreate>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get all creatable types
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesAllTypesListAsync(final ApiCallback<List<TypeCreate>> _callback) throws ApiException {

        okhttp3.Call localVarCall = policiesAllTypesListValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<TypeCreate>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policiesAllUsedByList
     * @param policyUuid A UUID string identifying this Policy. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesAllUsedByListCall(UUID policyUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/policies/all/{policy_uuid}/used_by/"
            .replace("{" + "policy_uuid" + "}", localVarApiClient.escapeString(policyUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policiesAllUsedByListValidateBeforeCall(UUID policyUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyUuid' is set
        if (policyUuid == null) {
            throw new ApiException("Missing the required parameter 'policyUuid' when calling policiesAllUsedByList(Async)");
        }

        return policiesAllUsedByListCall(policyUuid, _callback);

    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param policyUuid A UUID string identifying this Policy. (required)
     * @return List&lt;UsedBy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<UsedBy> policiesAllUsedByList(UUID policyUuid) throws ApiException {
        ApiResponse<List<UsedBy>> localVarResp = policiesAllUsedByListWithHttpInfo(policyUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param policyUuid A UUID string identifying this Policy. (required)
     * @return ApiResponse&lt;List&lt;UsedBy&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UsedBy>> policiesAllUsedByListWithHttpInfo(UUID policyUuid) throws ApiException {
        okhttp3.Call localVarCall = policiesAllUsedByListValidateBeforeCall(policyUuid, null);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of all objects that use this object
     * @param policyUuid A UUID string identifying this Policy. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesAllUsedByListAsync(UUID policyUuid, final ApiCallback<List<UsedBy>> _callback) throws ApiException {

        okhttp3.Call localVarCall = policiesAllUsedByListValidateBeforeCall(policyUuid, _callback);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policiesBindingsCreate
     * @param policyBindingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesBindingsCreateCall(PolicyBindingRequest policyBindingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = policyBindingRequest;

        // create path and map variables
        String localVarPath = "/policies/bindings/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policiesBindingsCreateValidateBeforeCall(PolicyBindingRequest policyBindingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyBindingRequest' is set
        if (policyBindingRequest == null) {
            throw new ApiException("Missing the required parameter 'policyBindingRequest' when calling policiesBindingsCreate(Async)");
        }

        return policiesBindingsCreateCall(policyBindingRequest, _callback);

    }

    /**
     * 
     * PolicyBinding Viewset
     * @param policyBindingRequest  (required)
     * @return PolicyBinding
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PolicyBinding policiesBindingsCreate(PolicyBindingRequest policyBindingRequest) throws ApiException {
        ApiResponse<PolicyBinding> localVarResp = policiesBindingsCreateWithHttpInfo(policyBindingRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * PolicyBinding Viewset
     * @param policyBindingRequest  (required)
     * @return ApiResponse&lt;PolicyBinding&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PolicyBinding> policiesBindingsCreateWithHttpInfo(PolicyBindingRequest policyBindingRequest) throws ApiException {
        okhttp3.Call localVarCall = policiesBindingsCreateValidateBeforeCall(policyBindingRequest, null);
        Type localVarReturnType = new TypeToken<PolicyBinding>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * PolicyBinding Viewset
     * @param policyBindingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesBindingsCreateAsync(PolicyBindingRequest policyBindingRequest, final ApiCallback<PolicyBinding> _callback) throws ApiException {

        okhttp3.Call localVarCall = policiesBindingsCreateValidateBeforeCall(policyBindingRequest, _callback);
        Type localVarReturnType = new TypeToken<PolicyBinding>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policiesBindingsDestroy
     * @param policyBindingUuid A UUID string identifying this Policy Binding. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesBindingsDestroyCall(UUID policyBindingUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/policies/bindings/{policy_binding_uuid}/"
            .replace("{" + "policy_binding_uuid" + "}", localVarApiClient.escapeString(policyBindingUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policiesBindingsDestroyValidateBeforeCall(UUID policyBindingUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyBindingUuid' is set
        if (policyBindingUuid == null) {
            throw new ApiException("Missing the required parameter 'policyBindingUuid' when calling policiesBindingsDestroy(Async)");
        }

        return policiesBindingsDestroyCall(policyBindingUuid, _callback);

    }

    /**
     * 
     * PolicyBinding Viewset
     * @param policyBindingUuid A UUID string identifying this Policy Binding. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void policiesBindingsDestroy(UUID policyBindingUuid) throws ApiException {
        policiesBindingsDestroyWithHttpInfo(policyBindingUuid);
    }

    /**
     * 
     * PolicyBinding Viewset
     * @param policyBindingUuid A UUID string identifying this Policy Binding. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> policiesBindingsDestroyWithHttpInfo(UUID policyBindingUuid) throws ApiException {
        okhttp3.Call localVarCall = policiesBindingsDestroyValidateBeforeCall(policyBindingUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * PolicyBinding Viewset
     * @param policyBindingUuid A UUID string identifying this Policy Binding. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesBindingsDestroyAsync(UUID policyBindingUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = policiesBindingsDestroyValidateBeforeCall(policyBindingUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for policiesBindingsList
     * @param enabled  (optional)
     * @param order  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param policy  (optional)
     * @param policyIsnull  (optional)
     * @param search A search term. (optional)
     * @param target  (optional)
     * @param targetIn  (optional)
     * @param timeout  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesBindingsListCall(Boolean enabled, Integer order, String ordering, Integer page, Integer pageSize, UUID policy, Boolean policyIsnull, String search, UUID target, List<UUID> targetIn, Integer timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/policies/bindings/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (enabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enabled", enabled));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (policy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("policy", policy));
        }

        if (policyIsnull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("policy__isnull", policyIsnull));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (target != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("target", target));
        }

        if (targetIn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "target_in", targetIn));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policiesBindingsListValidateBeforeCall(Boolean enabled, Integer order, String ordering, Integer page, Integer pageSize, UUID policy, Boolean policyIsnull, String search, UUID target, List<UUID> targetIn, Integer timeout, final ApiCallback _callback) throws ApiException {
        return policiesBindingsListCall(enabled, order, ordering, page, pageSize, policy, policyIsnull, search, target, targetIn, timeout, _callback);

    }

    /**
     * 
     * PolicyBinding Viewset
     * @param enabled  (optional)
     * @param order  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param policy  (optional)
     * @param policyIsnull  (optional)
     * @param search A search term. (optional)
     * @param target  (optional)
     * @param targetIn  (optional)
     * @param timeout  (optional)
     * @return PaginatedPolicyBindingList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedPolicyBindingList policiesBindingsList(Boolean enabled, Integer order, String ordering, Integer page, Integer pageSize, UUID policy, Boolean policyIsnull, String search, UUID target, List<UUID> targetIn, Integer timeout) throws ApiException {
        ApiResponse<PaginatedPolicyBindingList> localVarResp = policiesBindingsListWithHttpInfo(enabled, order, ordering, page, pageSize, policy, policyIsnull, search, target, targetIn, timeout);
        return localVarResp.getData();
    }

    /**
     * 
     * PolicyBinding Viewset
     * @param enabled  (optional)
     * @param order  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param policy  (optional)
     * @param policyIsnull  (optional)
     * @param search A search term. (optional)
     * @param target  (optional)
     * @param targetIn  (optional)
     * @param timeout  (optional)
     * @return ApiResponse&lt;PaginatedPolicyBindingList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedPolicyBindingList> policiesBindingsListWithHttpInfo(Boolean enabled, Integer order, String ordering, Integer page, Integer pageSize, UUID policy, Boolean policyIsnull, String search, UUID target, List<UUID> targetIn, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = policiesBindingsListValidateBeforeCall(enabled, order, ordering, page, pageSize, policy, policyIsnull, search, target, targetIn, timeout, null);
        Type localVarReturnType = new TypeToken<PaginatedPolicyBindingList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * PolicyBinding Viewset
     * @param enabled  (optional)
     * @param order  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param policy  (optional)
     * @param policyIsnull  (optional)
     * @param search A search term. (optional)
     * @param target  (optional)
     * @param targetIn  (optional)
     * @param timeout  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesBindingsListAsync(Boolean enabled, Integer order, String ordering, Integer page, Integer pageSize, UUID policy, Boolean policyIsnull, String search, UUID target, List<UUID> targetIn, Integer timeout, final ApiCallback<PaginatedPolicyBindingList> _callback) throws ApiException {

        okhttp3.Call localVarCall = policiesBindingsListValidateBeforeCall(enabled, order, ordering, page, pageSize, policy, policyIsnull, search, target, targetIn, timeout, _callback);
        Type localVarReturnType = new TypeToken<PaginatedPolicyBindingList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policiesBindingsPartialUpdate
     * @param policyBindingUuid A UUID string identifying this Policy Binding. (required)
     * @param patchedPolicyBindingRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesBindingsPartialUpdateCall(UUID policyBindingUuid, PatchedPolicyBindingRequest patchedPolicyBindingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchedPolicyBindingRequest;

        // create path and map variables
        String localVarPath = "/policies/bindings/{policy_binding_uuid}/"
            .replace("{" + "policy_binding_uuid" + "}", localVarApiClient.escapeString(policyBindingUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policiesBindingsPartialUpdateValidateBeforeCall(UUID policyBindingUuid, PatchedPolicyBindingRequest patchedPolicyBindingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyBindingUuid' is set
        if (policyBindingUuid == null) {
            throw new ApiException("Missing the required parameter 'policyBindingUuid' when calling policiesBindingsPartialUpdate(Async)");
        }

        return policiesBindingsPartialUpdateCall(policyBindingUuid, patchedPolicyBindingRequest, _callback);

    }

    /**
     * 
     * PolicyBinding Viewset
     * @param policyBindingUuid A UUID string identifying this Policy Binding. (required)
     * @param patchedPolicyBindingRequest  (optional)
     * @return PolicyBinding
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PolicyBinding policiesBindingsPartialUpdate(UUID policyBindingUuid, PatchedPolicyBindingRequest patchedPolicyBindingRequest) throws ApiException {
        ApiResponse<PolicyBinding> localVarResp = policiesBindingsPartialUpdateWithHttpInfo(policyBindingUuid, patchedPolicyBindingRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * PolicyBinding Viewset
     * @param policyBindingUuid A UUID string identifying this Policy Binding. (required)
     * @param patchedPolicyBindingRequest  (optional)
     * @return ApiResponse&lt;PolicyBinding&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PolicyBinding> policiesBindingsPartialUpdateWithHttpInfo(UUID policyBindingUuid, PatchedPolicyBindingRequest patchedPolicyBindingRequest) throws ApiException {
        okhttp3.Call localVarCall = policiesBindingsPartialUpdateValidateBeforeCall(policyBindingUuid, patchedPolicyBindingRequest, null);
        Type localVarReturnType = new TypeToken<PolicyBinding>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * PolicyBinding Viewset
     * @param policyBindingUuid A UUID string identifying this Policy Binding. (required)
     * @param patchedPolicyBindingRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesBindingsPartialUpdateAsync(UUID policyBindingUuid, PatchedPolicyBindingRequest patchedPolicyBindingRequest, final ApiCallback<PolicyBinding> _callback) throws ApiException {

        okhttp3.Call localVarCall = policiesBindingsPartialUpdateValidateBeforeCall(policyBindingUuid, patchedPolicyBindingRequest, _callback);
        Type localVarReturnType = new TypeToken<PolicyBinding>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policiesBindingsRetrieve
     * @param policyBindingUuid A UUID string identifying this Policy Binding. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesBindingsRetrieveCall(UUID policyBindingUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/policies/bindings/{policy_binding_uuid}/"
            .replace("{" + "policy_binding_uuid" + "}", localVarApiClient.escapeString(policyBindingUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policiesBindingsRetrieveValidateBeforeCall(UUID policyBindingUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyBindingUuid' is set
        if (policyBindingUuid == null) {
            throw new ApiException("Missing the required parameter 'policyBindingUuid' when calling policiesBindingsRetrieve(Async)");
        }

        return policiesBindingsRetrieveCall(policyBindingUuid, _callback);

    }

    /**
     * 
     * PolicyBinding Viewset
     * @param policyBindingUuid A UUID string identifying this Policy Binding. (required)
     * @return PolicyBinding
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PolicyBinding policiesBindingsRetrieve(UUID policyBindingUuid) throws ApiException {
        ApiResponse<PolicyBinding> localVarResp = policiesBindingsRetrieveWithHttpInfo(policyBindingUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * PolicyBinding Viewset
     * @param policyBindingUuid A UUID string identifying this Policy Binding. (required)
     * @return ApiResponse&lt;PolicyBinding&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PolicyBinding> policiesBindingsRetrieveWithHttpInfo(UUID policyBindingUuid) throws ApiException {
        okhttp3.Call localVarCall = policiesBindingsRetrieveValidateBeforeCall(policyBindingUuid, null);
        Type localVarReturnType = new TypeToken<PolicyBinding>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * PolicyBinding Viewset
     * @param policyBindingUuid A UUID string identifying this Policy Binding. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesBindingsRetrieveAsync(UUID policyBindingUuid, final ApiCallback<PolicyBinding> _callback) throws ApiException {

        okhttp3.Call localVarCall = policiesBindingsRetrieveValidateBeforeCall(policyBindingUuid, _callback);
        Type localVarReturnType = new TypeToken<PolicyBinding>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policiesBindingsUpdate
     * @param policyBindingUuid A UUID string identifying this Policy Binding. (required)
     * @param policyBindingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesBindingsUpdateCall(UUID policyBindingUuid, PolicyBindingRequest policyBindingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = policyBindingRequest;

        // create path and map variables
        String localVarPath = "/policies/bindings/{policy_binding_uuid}/"
            .replace("{" + "policy_binding_uuid" + "}", localVarApiClient.escapeString(policyBindingUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policiesBindingsUpdateValidateBeforeCall(UUID policyBindingUuid, PolicyBindingRequest policyBindingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyBindingUuid' is set
        if (policyBindingUuid == null) {
            throw new ApiException("Missing the required parameter 'policyBindingUuid' when calling policiesBindingsUpdate(Async)");
        }

        // verify the required parameter 'policyBindingRequest' is set
        if (policyBindingRequest == null) {
            throw new ApiException("Missing the required parameter 'policyBindingRequest' when calling policiesBindingsUpdate(Async)");
        }

        return policiesBindingsUpdateCall(policyBindingUuid, policyBindingRequest, _callback);

    }

    /**
     * 
     * PolicyBinding Viewset
     * @param policyBindingUuid A UUID string identifying this Policy Binding. (required)
     * @param policyBindingRequest  (required)
     * @return PolicyBinding
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PolicyBinding policiesBindingsUpdate(UUID policyBindingUuid, PolicyBindingRequest policyBindingRequest) throws ApiException {
        ApiResponse<PolicyBinding> localVarResp = policiesBindingsUpdateWithHttpInfo(policyBindingUuid, policyBindingRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * PolicyBinding Viewset
     * @param policyBindingUuid A UUID string identifying this Policy Binding. (required)
     * @param policyBindingRequest  (required)
     * @return ApiResponse&lt;PolicyBinding&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PolicyBinding> policiesBindingsUpdateWithHttpInfo(UUID policyBindingUuid, PolicyBindingRequest policyBindingRequest) throws ApiException {
        okhttp3.Call localVarCall = policiesBindingsUpdateValidateBeforeCall(policyBindingUuid, policyBindingRequest, null);
        Type localVarReturnType = new TypeToken<PolicyBinding>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * PolicyBinding Viewset
     * @param policyBindingUuid A UUID string identifying this Policy Binding. (required)
     * @param policyBindingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesBindingsUpdateAsync(UUID policyBindingUuid, PolicyBindingRequest policyBindingRequest, final ApiCallback<PolicyBinding> _callback) throws ApiException {

        okhttp3.Call localVarCall = policiesBindingsUpdateValidateBeforeCall(policyBindingUuid, policyBindingRequest, _callback);
        Type localVarReturnType = new TypeToken<PolicyBinding>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policiesBindingsUsedByList
     * @param policyBindingUuid A UUID string identifying this Policy Binding. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesBindingsUsedByListCall(UUID policyBindingUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/policies/bindings/{policy_binding_uuid}/used_by/"
            .replace("{" + "policy_binding_uuid" + "}", localVarApiClient.escapeString(policyBindingUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policiesBindingsUsedByListValidateBeforeCall(UUID policyBindingUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyBindingUuid' is set
        if (policyBindingUuid == null) {
            throw new ApiException("Missing the required parameter 'policyBindingUuid' when calling policiesBindingsUsedByList(Async)");
        }

        return policiesBindingsUsedByListCall(policyBindingUuid, _callback);

    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param policyBindingUuid A UUID string identifying this Policy Binding. (required)
     * @return List&lt;UsedBy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<UsedBy> policiesBindingsUsedByList(UUID policyBindingUuid) throws ApiException {
        ApiResponse<List<UsedBy>> localVarResp = policiesBindingsUsedByListWithHttpInfo(policyBindingUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param policyBindingUuid A UUID string identifying this Policy Binding. (required)
     * @return ApiResponse&lt;List&lt;UsedBy&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UsedBy>> policiesBindingsUsedByListWithHttpInfo(UUID policyBindingUuid) throws ApiException {
        okhttp3.Call localVarCall = policiesBindingsUsedByListValidateBeforeCall(policyBindingUuid, null);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of all objects that use this object
     * @param policyBindingUuid A UUID string identifying this Policy Binding. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesBindingsUsedByListAsync(UUID policyBindingUuid, final ApiCallback<List<UsedBy>> _callback) throws ApiException {

        okhttp3.Call localVarCall = policiesBindingsUsedByListValidateBeforeCall(policyBindingUuid, _callback);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policiesDummyCreate
     * @param dummyPolicyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesDummyCreateCall(DummyPolicyRequest dummyPolicyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dummyPolicyRequest;

        // create path and map variables
        String localVarPath = "/policies/dummy/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policiesDummyCreateValidateBeforeCall(DummyPolicyRequest dummyPolicyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dummyPolicyRequest' is set
        if (dummyPolicyRequest == null) {
            throw new ApiException("Missing the required parameter 'dummyPolicyRequest' when calling policiesDummyCreate(Async)");
        }

        return policiesDummyCreateCall(dummyPolicyRequest, _callback);

    }

    /**
     * 
     * Dummy Viewset
     * @param dummyPolicyRequest  (required)
     * @return DummyPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DummyPolicy policiesDummyCreate(DummyPolicyRequest dummyPolicyRequest) throws ApiException {
        ApiResponse<DummyPolicy> localVarResp = policiesDummyCreateWithHttpInfo(dummyPolicyRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Dummy Viewset
     * @param dummyPolicyRequest  (required)
     * @return ApiResponse&lt;DummyPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DummyPolicy> policiesDummyCreateWithHttpInfo(DummyPolicyRequest dummyPolicyRequest) throws ApiException {
        okhttp3.Call localVarCall = policiesDummyCreateValidateBeforeCall(dummyPolicyRequest, null);
        Type localVarReturnType = new TypeToken<DummyPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Dummy Viewset
     * @param dummyPolicyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesDummyCreateAsync(DummyPolicyRequest dummyPolicyRequest, final ApiCallback<DummyPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = policiesDummyCreateValidateBeforeCall(dummyPolicyRequest, _callback);
        Type localVarReturnType = new TypeToken<DummyPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policiesDummyDestroy
     * @param policyUuid A UUID string identifying this Dummy Policy. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesDummyDestroyCall(UUID policyUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/policies/dummy/{policy_uuid}/"
            .replace("{" + "policy_uuid" + "}", localVarApiClient.escapeString(policyUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policiesDummyDestroyValidateBeforeCall(UUID policyUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyUuid' is set
        if (policyUuid == null) {
            throw new ApiException("Missing the required parameter 'policyUuid' when calling policiesDummyDestroy(Async)");
        }

        return policiesDummyDestroyCall(policyUuid, _callback);

    }

    /**
     * 
     * Dummy Viewset
     * @param policyUuid A UUID string identifying this Dummy Policy. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void policiesDummyDestroy(UUID policyUuid) throws ApiException {
        policiesDummyDestroyWithHttpInfo(policyUuid);
    }

    /**
     * 
     * Dummy Viewset
     * @param policyUuid A UUID string identifying this Dummy Policy. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> policiesDummyDestroyWithHttpInfo(UUID policyUuid) throws ApiException {
        okhttp3.Call localVarCall = policiesDummyDestroyValidateBeforeCall(policyUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Dummy Viewset
     * @param policyUuid A UUID string identifying this Dummy Policy. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesDummyDestroyAsync(UUID policyUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = policiesDummyDestroyValidateBeforeCall(policyUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for policiesDummyList
     * @param created  (optional)
     * @param executionLogging  (optional)
     * @param lastUpdated  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param policyUuid  (optional)
     * @param result  (optional)
     * @param search A search term. (optional)
     * @param waitMax  (optional)
     * @param waitMin  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesDummyListCall(OffsetDateTime created, Boolean executionLogging, OffsetDateTime lastUpdated, String name, String ordering, Integer page, Integer pageSize, UUID policyUuid, Boolean result, String search, Integer waitMax, Integer waitMin, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/policies/dummy/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (executionLogging != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("execution_logging", executionLogging));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (policyUuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("policy_uuid", policyUuid));
        }

        if (result != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("result", result));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (waitMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("wait_max", waitMax));
        }

        if (waitMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("wait_min", waitMin));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policiesDummyListValidateBeforeCall(OffsetDateTime created, Boolean executionLogging, OffsetDateTime lastUpdated, String name, String ordering, Integer page, Integer pageSize, UUID policyUuid, Boolean result, String search, Integer waitMax, Integer waitMin, final ApiCallback _callback) throws ApiException {
        return policiesDummyListCall(created, executionLogging, lastUpdated, name, ordering, page, pageSize, policyUuid, result, search, waitMax, waitMin, _callback);

    }

    /**
     * 
     * Dummy Viewset
     * @param created  (optional)
     * @param executionLogging  (optional)
     * @param lastUpdated  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param policyUuid  (optional)
     * @param result  (optional)
     * @param search A search term. (optional)
     * @param waitMax  (optional)
     * @param waitMin  (optional)
     * @return PaginatedDummyPolicyList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedDummyPolicyList policiesDummyList(OffsetDateTime created, Boolean executionLogging, OffsetDateTime lastUpdated, String name, String ordering, Integer page, Integer pageSize, UUID policyUuid, Boolean result, String search, Integer waitMax, Integer waitMin) throws ApiException {
        ApiResponse<PaginatedDummyPolicyList> localVarResp = policiesDummyListWithHttpInfo(created, executionLogging, lastUpdated, name, ordering, page, pageSize, policyUuid, result, search, waitMax, waitMin);
        return localVarResp.getData();
    }

    /**
     * 
     * Dummy Viewset
     * @param created  (optional)
     * @param executionLogging  (optional)
     * @param lastUpdated  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param policyUuid  (optional)
     * @param result  (optional)
     * @param search A search term. (optional)
     * @param waitMax  (optional)
     * @param waitMin  (optional)
     * @return ApiResponse&lt;PaginatedDummyPolicyList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedDummyPolicyList> policiesDummyListWithHttpInfo(OffsetDateTime created, Boolean executionLogging, OffsetDateTime lastUpdated, String name, String ordering, Integer page, Integer pageSize, UUID policyUuid, Boolean result, String search, Integer waitMax, Integer waitMin) throws ApiException {
        okhttp3.Call localVarCall = policiesDummyListValidateBeforeCall(created, executionLogging, lastUpdated, name, ordering, page, pageSize, policyUuid, result, search, waitMax, waitMin, null);
        Type localVarReturnType = new TypeToken<PaginatedDummyPolicyList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Dummy Viewset
     * @param created  (optional)
     * @param executionLogging  (optional)
     * @param lastUpdated  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param policyUuid  (optional)
     * @param result  (optional)
     * @param search A search term. (optional)
     * @param waitMax  (optional)
     * @param waitMin  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesDummyListAsync(OffsetDateTime created, Boolean executionLogging, OffsetDateTime lastUpdated, String name, String ordering, Integer page, Integer pageSize, UUID policyUuid, Boolean result, String search, Integer waitMax, Integer waitMin, final ApiCallback<PaginatedDummyPolicyList> _callback) throws ApiException {

        okhttp3.Call localVarCall = policiesDummyListValidateBeforeCall(created, executionLogging, lastUpdated, name, ordering, page, pageSize, policyUuid, result, search, waitMax, waitMin, _callback);
        Type localVarReturnType = new TypeToken<PaginatedDummyPolicyList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policiesDummyPartialUpdate
     * @param policyUuid A UUID string identifying this Dummy Policy. (required)
     * @param patchedDummyPolicyRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesDummyPartialUpdateCall(UUID policyUuid, PatchedDummyPolicyRequest patchedDummyPolicyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchedDummyPolicyRequest;

        // create path and map variables
        String localVarPath = "/policies/dummy/{policy_uuid}/"
            .replace("{" + "policy_uuid" + "}", localVarApiClient.escapeString(policyUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policiesDummyPartialUpdateValidateBeforeCall(UUID policyUuid, PatchedDummyPolicyRequest patchedDummyPolicyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyUuid' is set
        if (policyUuid == null) {
            throw new ApiException("Missing the required parameter 'policyUuid' when calling policiesDummyPartialUpdate(Async)");
        }

        return policiesDummyPartialUpdateCall(policyUuid, patchedDummyPolicyRequest, _callback);

    }

    /**
     * 
     * Dummy Viewset
     * @param policyUuid A UUID string identifying this Dummy Policy. (required)
     * @param patchedDummyPolicyRequest  (optional)
     * @return DummyPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DummyPolicy policiesDummyPartialUpdate(UUID policyUuid, PatchedDummyPolicyRequest patchedDummyPolicyRequest) throws ApiException {
        ApiResponse<DummyPolicy> localVarResp = policiesDummyPartialUpdateWithHttpInfo(policyUuid, patchedDummyPolicyRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Dummy Viewset
     * @param policyUuid A UUID string identifying this Dummy Policy. (required)
     * @param patchedDummyPolicyRequest  (optional)
     * @return ApiResponse&lt;DummyPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DummyPolicy> policiesDummyPartialUpdateWithHttpInfo(UUID policyUuid, PatchedDummyPolicyRequest patchedDummyPolicyRequest) throws ApiException {
        okhttp3.Call localVarCall = policiesDummyPartialUpdateValidateBeforeCall(policyUuid, patchedDummyPolicyRequest, null);
        Type localVarReturnType = new TypeToken<DummyPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Dummy Viewset
     * @param policyUuid A UUID string identifying this Dummy Policy. (required)
     * @param patchedDummyPolicyRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesDummyPartialUpdateAsync(UUID policyUuid, PatchedDummyPolicyRequest patchedDummyPolicyRequest, final ApiCallback<DummyPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = policiesDummyPartialUpdateValidateBeforeCall(policyUuid, patchedDummyPolicyRequest, _callback);
        Type localVarReturnType = new TypeToken<DummyPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policiesDummyRetrieve
     * @param policyUuid A UUID string identifying this Dummy Policy. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesDummyRetrieveCall(UUID policyUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/policies/dummy/{policy_uuid}/"
            .replace("{" + "policy_uuid" + "}", localVarApiClient.escapeString(policyUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policiesDummyRetrieveValidateBeforeCall(UUID policyUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyUuid' is set
        if (policyUuid == null) {
            throw new ApiException("Missing the required parameter 'policyUuid' when calling policiesDummyRetrieve(Async)");
        }

        return policiesDummyRetrieveCall(policyUuid, _callback);

    }

    /**
     * 
     * Dummy Viewset
     * @param policyUuid A UUID string identifying this Dummy Policy. (required)
     * @return DummyPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DummyPolicy policiesDummyRetrieve(UUID policyUuid) throws ApiException {
        ApiResponse<DummyPolicy> localVarResp = policiesDummyRetrieveWithHttpInfo(policyUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Dummy Viewset
     * @param policyUuid A UUID string identifying this Dummy Policy. (required)
     * @return ApiResponse&lt;DummyPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DummyPolicy> policiesDummyRetrieveWithHttpInfo(UUID policyUuid) throws ApiException {
        okhttp3.Call localVarCall = policiesDummyRetrieveValidateBeforeCall(policyUuid, null);
        Type localVarReturnType = new TypeToken<DummyPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Dummy Viewset
     * @param policyUuid A UUID string identifying this Dummy Policy. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesDummyRetrieveAsync(UUID policyUuid, final ApiCallback<DummyPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = policiesDummyRetrieveValidateBeforeCall(policyUuid, _callback);
        Type localVarReturnType = new TypeToken<DummyPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policiesDummyUpdate
     * @param policyUuid A UUID string identifying this Dummy Policy. (required)
     * @param dummyPolicyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesDummyUpdateCall(UUID policyUuid, DummyPolicyRequest dummyPolicyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dummyPolicyRequest;

        // create path and map variables
        String localVarPath = "/policies/dummy/{policy_uuid}/"
            .replace("{" + "policy_uuid" + "}", localVarApiClient.escapeString(policyUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policiesDummyUpdateValidateBeforeCall(UUID policyUuid, DummyPolicyRequest dummyPolicyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyUuid' is set
        if (policyUuid == null) {
            throw new ApiException("Missing the required parameter 'policyUuid' when calling policiesDummyUpdate(Async)");
        }

        // verify the required parameter 'dummyPolicyRequest' is set
        if (dummyPolicyRequest == null) {
            throw new ApiException("Missing the required parameter 'dummyPolicyRequest' when calling policiesDummyUpdate(Async)");
        }

        return policiesDummyUpdateCall(policyUuid, dummyPolicyRequest, _callback);

    }

    /**
     * 
     * Dummy Viewset
     * @param policyUuid A UUID string identifying this Dummy Policy. (required)
     * @param dummyPolicyRequest  (required)
     * @return DummyPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DummyPolicy policiesDummyUpdate(UUID policyUuid, DummyPolicyRequest dummyPolicyRequest) throws ApiException {
        ApiResponse<DummyPolicy> localVarResp = policiesDummyUpdateWithHttpInfo(policyUuid, dummyPolicyRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Dummy Viewset
     * @param policyUuid A UUID string identifying this Dummy Policy. (required)
     * @param dummyPolicyRequest  (required)
     * @return ApiResponse&lt;DummyPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DummyPolicy> policiesDummyUpdateWithHttpInfo(UUID policyUuid, DummyPolicyRequest dummyPolicyRequest) throws ApiException {
        okhttp3.Call localVarCall = policiesDummyUpdateValidateBeforeCall(policyUuid, dummyPolicyRequest, null);
        Type localVarReturnType = new TypeToken<DummyPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Dummy Viewset
     * @param policyUuid A UUID string identifying this Dummy Policy. (required)
     * @param dummyPolicyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesDummyUpdateAsync(UUID policyUuid, DummyPolicyRequest dummyPolicyRequest, final ApiCallback<DummyPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = policiesDummyUpdateValidateBeforeCall(policyUuid, dummyPolicyRequest, _callback);
        Type localVarReturnType = new TypeToken<DummyPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policiesDummyUsedByList
     * @param policyUuid A UUID string identifying this Dummy Policy. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesDummyUsedByListCall(UUID policyUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/policies/dummy/{policy_uuid}/used_by/"
            .replace("{" + "policy_uuid" + "}", localVarApiClient.escapeString(policyUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policiesDummyUsedByListValidateBeforeCall(UUID policyUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyUuid' is set
        if (policyUuid == null) {
            throw new ApiException("Missing the required parameter 'policyUuid' when calling policiesDummyUsedByList(Async)");
        }

        return policiesDummyUsedByListCall(policyUuid, _callback);

    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param policyUuid A UUID string identifying this Dummy Policy. (required)
     * @return List&lt;UsedBy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<UsedBy> policiesDummyUsedByList(UUID policyUuid) throws ApiException {
        ApiResponse<List<UsedBy>> localVarResp = policiesDummyUsedByListWithHttpInfo(policyUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param policyUuid A UUID string identifying this Dummy Policy. (required)
     * @return ApiResponse&lt;List&lt;UsedBy&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UsedBy>> policiesDummyUsedByListWithHttpInfo(UUID policyUuid) throws ApiException {
        okhttp3.Call localVarCall = policiesDummyUsedByListValidateBeforeCall(policyUuid, null);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of all objects that use this object
     * @param policyUuid A UUID string identifying this Dummy Policy. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesDummyUsedByListAsync(UUID policyUuid, final ApiCallback<List<UsedBy>> _callback) throws ApiException {

        okhttp3.Call localVarCall = policiesDummyUsedByListValidateBeforeCall(policyUuid, _callback);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policiesEventMatcherCreate
     * @param eventMatcherPolicyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesEventMatcherCreateCall(EventMatcherPolicyRequest eventMatcherPolicyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = eventMatcherPolicyRequest;

        // create path and map variables
        String localVarPath = "/policies/event_matcher/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policiesEventMatcherCreateValidateBeforeCall(EventMatcherPolicyRequest eventMatcherPolicyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'eventMatcherPolicyRequest' is set
        if (eventMatcherPolicyRequest == null) {
            throw new ApiException("Missing the required parameter 'eventMatcherPolicyRequest' when calling policiesEventMatcherCreate(Async)");
        }

        return policiesEventMatcherCreateCall(eventMatcherPolicyRequest, _callback);

    }

    /**
     * 
     * Event Matcher Policy Viewset
     * @param eventMatcherPolicyRequest  (required)
     * @return EventMatcherPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public EventMatcherPolicy policiesEventMatcherCreate(EventMatcherPolicyRequest eventMatcherPolicyRequest) throws ApiException {
        ApiResponse<EventMatcherPolicy> localVarResp = policiesEventMatcherCreateWithHttpInfo(eventMatcherPolicyRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Event Matcher Policy Viewset
     * @param eventMatcherPolicyRequest  (required)
     * @return ApiResponse&lt;EventMatcherPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventMatcherPolicy> policiesEventMatcherCreateWithHttpInfo(EventMatcherPolicyRequest eventMatcherPolicyRequest) throws ApiException {
        okhttp3.Call localVarCall = policiesEventMatcherCreateValidateBeforeCall(eventMatcherPolicyRequest, null);
        Type localVarReturnType = new TypeToken<EventMatcherPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Event Matcher Policy Viewset
     * @param eventMatcherPolicyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesEventMatcherCreateAsync(EventMatcherPolicyRequest eventMatcherPolicyRequest, final ApiCallback<EventMatcherPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = policiesEventMatcherCreateValidateBeforeCall(eventMatcherPolicyRequest, _callback);
        Type localVarReturnType = new TypeToken<EventMatcherPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policiesEventMatcherDestroy
     * @param policyUuid A UUID string identifying this Event Matcher Policy. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesEventMatcherDestroyCall(UUID policyUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/policies/event_matcher/{policy_uuid}/"
            .replace("{" + "policy_uuid" + "}", localVarApiClient.escapeString(policyUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policiesEventMatcherDestroyValidateBeforeCall(UUID policyUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyUuid' is set
        if (policyUuid == null) {
            throw new ApiException("Missing the required parameter 'policyUuid' when calling policiesEventMatcherDestroy(Async)");
        }

        return policiesEventMatcherDestroyCall(policyUuid, _callback);

    }

    /**
     * 
     * Event Matcher Policy Viewset
     * @param policyUuid A UUID string identifying this Event Matcher Policy. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void policiesEventMatcherDestroy(UUID policyUuid) throws ApiException {
        policiesEventMatcherDestroyWithHttpInfo(policyUuid);
    }

    /**
     * 
     * Event Matcher Policy Viewset
     * @param policyUuid A UUID string identifying this Event Matcher Policy. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> policiesEventMatcherDestroyWithHttpInfo(UUID policyUuid) throws ApiException {
        okhttp3.Call localVarCall = policiesEventMatcherDestroyValidateBeforeCall(policyUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Event Matcher Policy Viewset
     * @param policyUuid A UUID string identifying this Event Matcher Policy. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesEventMatcherDestroyAsync(UUID policyUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = policiesEventMatcherDestroyValidateBeforeCall(policyUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for policiesEventMatcherList
     * @param action Match created events with this action type. When left empty, all action types will be matched.   (optional)
     * @param app  (optional)
     * @param clientIp  (optional)
     * @param created  (optional)
     * @param executionLogging  (optional)
     * @param lastUpdated  (optional)
     * @param model  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param policyUuid  (optional)
     * @param search A search term. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesEventMatcherListCall(String action, String app, String clientIp, OffsetDateTime created, Boolean executionLogging, OffsetDateTime lastUpdated, String model, String name, String ordering, Integer page, Integer pageSize, UUID policyUuid, String search, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/policies/event_matcher/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("action", action));
        }

        if (app != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app", app));
        }

        if (clientIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("client_ip", clientIp));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (executionLogging != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("execution_logging", executionLogging));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (model != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model", model));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (policyUuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("policy_uuid", policyUuid));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policiesEventMatcherListValidateBeforeCall(String action, String app, String clientIp, OffsetDateTime created, Boolean executionLogging, OffsetDateTime lastUpdated, String model, String name, String ordering, Integer page, Integer pageSize, UUID policyUuid, String search, final ApiCallback _callback) throws ApiException {
        return policiesEventMatcherListCall(action, app, clientIp, created, executionLogging, lastUpdated, model, name, ordering, page, pageSize, policyUuid, search, _callback);

    }

    /**
     * 
     * Event Matcher Policy Viewset
     * @param action Match created events with this action type. When left empty, all action types will be matched.   (optional)
     * @param app  (optional)
     * @param clientIp  (optional)
     * @param created  (optional)
     * @param executionLogging  (optional)
     * @param lastUpdated  (optional)
     * @param model  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param policyUuid  (optional)
     * @param search A search term. (optional)
     * @return PaginatedEventMatcherPolicyList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedEventMatcherPolicyList policiesEventMatcherList(String action, String app, String clientIp, OffsetDateTime created, Boolean executionLogging, OffsetDateTime lastUpdated, String model, String name, String ordering, Integer page, Integer pageSize, UUID policyUuid, String search) throws ApiException {
        ApiResponse<PaginatedEventMatcherPolicyList> localVarResp = policiesEventMatcherListWithHttpInfo(action, app, clientIp, created, executionLogging, lastUpdated, model, name, ordering, page, pageSize, policyUuid, search);
        return localVarResp.getData();
    }

    /**
     * 
     * Event Matcher Policy Viewset
     * @param action Match created events with this action type. When left empty, all action types will be matched.   (optional)
     * @param app  (optional)
     * @param clientIp  (optional)
     * @param created  (optional)
     * @param executionLogging  (optional)
     * @param lastUpdated  (optional)
     * @param model  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param policyUuid  (optional)
     * @param search A search term. (optional)
     * @return ApiResponse&lt;PaginatedEventMatcherPolicyList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedEventMatcherPolicyList> policiesEventMatcherListWithHttpInfo(String action, String app, String clientIp, OffsetDateTime created, Boolean executionLogging, OffsetDateTime lastUpdated, String model, String name, String ordering, Integer page, Integer pageSize, UUID policyUuid, String search) throws ApiException {
        okhttp3.Call localVarCall = policiesEventMatcherListValidateBeforeCall(action, app, clientIp, created, executionLogging, lastUpdated, model, name, ordering, page, pageSize, policyUuid, search, null);
        Type localVarReturnType = new TypeToken<PaginatedEventMatcherPolicyList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Event Matcher Policy Viewset
     * @param action Match created events with this action type. When left empty, all action types will be matched.   (optional)
     * @param app  (optional)
     * @param clientIp  (optional)
     * @param created  (optional)
     * @param executionLogging  (optional)
     * @param lastUpdated  (optional)
     * @param model  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param policyUuid  (optional)
     * @param search A search term. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesEventMatcherListAsync(String action, String app, String clientIp, OffsetDateTime created, Boolean executionLogging, OffsetDateTime lastUpdated, String model, String name, String ordering, Integer page, Integer pageSize, UUID policyUuid, String search, final ApiCallback<PaginatedEventMatcherPolicyList> _callback) throws ApiException {

        okhttp3.Call localVarCall = policiesEventMatcherListValidateBeforeCall(action, app, clientIp, created, executionLogging, lastUpdated, model, name, ordering, page, pageSize, policyUuid, search, _callback);
        Type localVarReturnType = new TypeToken<PaginatedEventMatcherPolicyList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policiesEventMatcherPartialUpdate
     * @param policyUuid A UUID string identifying this Event Matcher Policy. (required)
     * @param patchedEventMatcherPolicyRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesEventMatcherPartialUpdateCall(UUID policyUuid, PatchedEventMatcherPolicyRequest patchedEventMatcherPolicyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchedEventMatcherPolicyRequest;

        // create path and map variables
        String localVarPath = "/policies/event_matcher/{policy_uuid}/"
            .replace("{" + "policy_uuid" + "}", localVarApiClient.escapeString(policyUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policiesEventMatcherPartialUpdateValidateBeforeCall(UUID policyUuid, PatchedEventMatcherPolicyRequest patchedEventMatcherPolicyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyUuid' is set
        if (policyUuid == null) {
            throw new ApiException("Missing the required parameter 'policyUuid' when calling policiesEventMatcherPartialUpdate(Async)");
        }

        return policiesEventMatcherPartialUpdateCall(policyUuid, patchedEventMatcherPolicyRequest, _callback);

    }

    /**
     * 
     * Event Matcher Policy Viewset
     * @param policyUuid A UUID string identifying this Event Matcher Policy. (required)
     * @param patchedEventMatcherPolicyRequest  (optional)
     * @return EventMatcherPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public EventMatcherPolicy policiesEventMatcherPartialUpdate(UUID policyUuid, PatchedEventMatcherPolicyRequest patchedEventMatcherPolicyRequest) throws ApiException {
        ApiResponse<EventMatcherPolicy> localVarResp = policiesEventMatcherPartialUpdateWithHttpInfo(policyUuid, patchedEventMatcherPolicyRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Event Matcher Policy Viewset
     * @param policyUuid A UUID string identifying this Event Matcher Policy. (required)
     * @param patchedEventMatcherPolicyRequest  (optional)
     * @return ApiResponse&lt;EventMatcherPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventMatcherPolicy> policiesEventMatcherPartialUpdateWithHttpInfo(UUID policyUuid, PatchedEventMatcherPolicyRequest patchedEventMatcherPolicyRequest) throws ApiException {
        okhttp3.Call localVarCall = policiesEventMatcherPartialUpdateValidateBeforeCall(policyUuid, patchedEventMatcherPolicyRequest, null);
        Type localVarReturnType = new TypeToken<EventMatcherPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Event Matcher Policy Viewset
     * @param policyUuid A UUID string identifying this Event Matcher Policy. (required)
     * @param patchedEventMatcherPolicyRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesEventMatcherPartialUpdateAsync(UUID policyUuid, PatchedEventMatcherPolicyRequest patchedEventMatcherPolicyRequest, final ApiCallback<EventMatcherPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = policiesEventMatcherPartialUpdateValidateBeforeCall(policyUuid, patchedEventMatcherPolicyRequest, _callback);
        Type localVarReturnType = new TypeToken<EventMatcherPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policiesEventMatcherRetrieve
     * @param policyUuid A UUID string identifying this Event Matcher Policy. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesEventMatcherRetrieveCall(UUID policyUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/policies/event_matcher/{policy_uuid}/"
            .replace("{" + "policy_uuid" + "}", localVarApiClient.escapeString(policyUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policiesEventMatcherRetrieveValidateBeforeCall(UUID policyUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyUuid' is set
        if (policyUuid == null) {
            throw new ApiException("Missing the required parameter 'policyUuid' when calling policiesEventMatcherRetrieve(Async)");
        }

        return policiesEventMatcherRetrieveCall(policyUuid, _callback);

    }

    /**
     * 
     * Event Matcher Policy Viewset
     * @param policyUuid A UUID string identifying this Event Matcher Policy. (required)
     * @return EventMatcherPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public EventMatcherPolicy policiesEventMatcherRetrieve(UUID policyUuid) throws ApiException {
        ApiResponse<EventMatcherPolicy> localVarResp = policiesEventMatcherRetrieveWithHttpInfo(policyUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Event Matcher Policy Viewset
     * @param policyUuid A UUID string identifying this Event Matcher Policy. (required)
     * @return ApiResponse&lt;EventMatcherPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventMatcherPolicy> policiesEventMatcherRetrieveWithHttpInfo(UUID policyUuid) throws ApiException {
        okhttp3.Call localVarCall = policiesEventMatcherRetrieveValidateBeforeCall(policyUuid, null);
        Type localVarReturnType = new TypeToken<EventMatcherPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Event Matcher Policy Viewset
     * @param policyUuid A UUID string identifying this Event Matcher Policy. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesEventMatcherRetrieveAsync(UUID policyUuid, final ApiCallback<EventMatcherPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = policiesEventMatcherRetrieveValidateBeforeCall(policyUuid, _callback);
        Type localVarReturnType = new TypeToken<EventMatcherPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policiesEventMatcherUpdate
     * @param policyUuid A UUID string identifying this Event Matcher Policy. (required)
     * @param eventMatcherPolicyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesEventMatcherUpdateCall(UUID policyUuid, EventMatcherPolicyRequest eventMatcherPolicyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = eventMatcherPolicyRequest;

        // create path and map variables
        String localVarPath = "/policies/event_matcher/{policy_uuid}/"
            .replace("{" + "policy_uuid" + "}", localVarApiClient.escapeString(policyUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policiesEventMatcherUpdateValidateBeforeCall(UUID policyUuid, EventMatcherPolicyRequest eventMatcherPolicyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyUuid' is set
        if (policyUuid == null) {
            throw new ApiException("Missing the required parameter 'policyUuid' when calling policiesEventMatcherUpdate(Async)");
        }

        // verify the required parameter 'eventMatcherPolicyRequest' is set
        if (eventMatcherPolicyRequest == null) {
            throw new ApiException("Missing the required parameter 'eventMatcherPolicyRequest' when calling policiesEventMatcherUpdate(Async)");
        }

        return policiesEventMatcherUpdateCall(policyUuid, eventMatcherPolicyRequest, _callback);

    }

    /**
     * 
     * Event Matcher Policy Viewset
     * @param policyUuid A UUID string identifying this Event Matcher Policy. (required)
     * @param eventMatcherPolicyRequest  (required)
     * @return EventMatcherPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public EventMatcherPolicy policiesEventMatcherUpdate(UUID policyUuid, EventMatcherPolicyRequest eventMatcherPolicyRequest) throws ApiException {
        ApiResponse<EventMatcherPolicy> localVarResp = policiesEventMatcherUpdateWithHttpInfo(policyUuid, eventMatcherPolicyRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Event Matcher Policy Viewset
     * @param policyUuid A UUID string identifying this Event Matcher Policy. (required)
     * @param eventMatcherPolicyRequest  (required)
     * @return ApiResponse&lt;EventMatcherPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventMatcherPolicy> policiesEventMatcherUpdateWithHttpInfo(UUID policyUuid, EventMatcherPolicyRequest eventMatcherPolicyRequest) throws ApiException {
        okhttp3.Call localVarCall = policiesEventMatcherUpdateValidateBeforeCall(policyUuid, eventMatcherPolicyRequest, null);
        Type localVarReturnType = new TypeToken<EventMatcherPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Event Matcher Policy Viewset
     * @param policyUuid A UUID string identifying this Event Matcher Policy. (required)
     * @param eventMatcherPolicyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesEventMatcherUpdateAsync(UUID policyUuid, EventMatcherPolicyRequest eventMatcherPolicyRequest, final ApiCallback<EventMatcherPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = policiesEventMatcherUpdateValidateBeforeCall(policyUuid, eventMatcherPolicyRequest, _callback);
        Type localVarReturnType = new TypeToken<EventMatcherPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policiesEventMatcherUsedByList
     * @param policyUuid A UUID string identifying this Event Matcher Policy. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesEventMatcherUsedByListCall(UUID policyUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/policies/event_matcher/{policy_uuid}/used_by/"
            .replace("{" + "policy_uuid" + "}", localVarApiClient.escapeString(policyUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policiesEventMatcherUsedByListValidateBeforeCall(UUID policyUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyUuid' is set
        if (policyUuid == null) {
            throw new ApiException("Missing the required parameter 'policyUuid' when calling policiesEventMatcherUsedByList(Async)");
        }

        return policiesEventMatcherUsedByListCall(policyUuid, _callback);

    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param policyUuid A UUID string identifying this Event Matcher Policy. (required)
     * @return List&lt;UsedBy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<UsedBy> policiesEventMatcherUsedByList(UUID policyUuid) throws ApiException {
        ApiResponse<List<UsedBy>> localVarResp = policiesEventMatcherUsedByListWithHttpInfo(policyUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param policyUuid A UUID string identifying this Event Matcher Policy. (required)
     * @return ApiResponse&lt;List&lt;UsedBy&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UsedBy>> policiesEventMatcherUsedByListWithHttpInfo(UUID policyUuid) throws ApiException {
        okhttp3.Call localVarCall = policiesEventMatcherUsedByListValidateBeforeCall(policyUuid, null);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of all objects that use this object
     * @param policyUuid A UUID string identifying this Event Matcher Policy. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesEventMatcherUsedByListAsync(UUID policyUuid, final ApiCallback<List<UsedBy>> _callback) throws ApiException {

        okhttp3.Call localVarCall = policiesEventMatcherUsedByListValidateBeforeCall(policyUuid, _callback);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policiesExpressionCreate
     * @param expressionPolicyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesExpressionCreateCall(ExpressionPolicyRequest expressionPolicyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = expressionPolicyRequest;

        // create path and map variables
        String localVarPath = "/policies/expression/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policiesExpressionCreateValidateBeforeCall(ExpressionPolicyRequest expressionPolicyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'expressionPolicyRequest' is set
        if (expressionPolicyRequest == null) {
            throw new ApiException("Missing the required parameter 'expressionPolicyRequest' when calling policiesExpressionCreate(Async)");
        }

        return policiesExpressionCreateCall(expressionPolicyRequest, _callback);

    }

    /**
     * 
     * Source Viewset
     * @param expressionPolicyRequest  (required)
     * @return ExpressionPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ExpressionPolicy policiesExpressionCreate(ExpressionPolicyRequest expressionPolicyRequest) throws ApiException {
        ApiResponse<ExpressionPolicy> localVarResp = policiesExpressionCreateWithHttpInfo(expressionPolicyRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Source Viewset
     * @param expressionPolicyRequest  (required)
     * @return ApiResponse&lt;ExpressionPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExpressionPolicy> policiesExpressionCreateWithHttpInfo(ExpressionPolicyRequest expressionPolicyRequest) throws ApiException {
        okhttp3.Call localVarCall = policiesExpressionCreateValidateBeforeCall(expressionPolicyRequest, null);
        Type localVarReturnType = new TypeToken<ExpressionPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Source Viewset
     * @param expressionPolicyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesExpressionCreateAsync(ExpressionPolicyRequest expressionPolicyRequest, final ApiCallback<ExpressionPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = policiesExpressionCreateValidateBeforeCall(expressionPolicyRequest, _callback);
        Type localVarReturnType = new TypeToken<ExpressionPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policiesExpressionDestroy
     * @param policyUuid A UUID string identifying this Expression Policy. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesExpressionDestroyCall(UUID policyUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/policies/expression/{policy_uuid}/"
            .replace("{" + "policy_uuid" + "}", localVarApiClient.escapeString(policyUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policiesExpressionDestroyValidateBeforeCall(UUID policyUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyUuid' is set
        if (policyUuid == null) {
            throw new ApiException("Missing the required parameter 'policyUuid' when calling policiesExpressionDestroy(Async)");
        }

        return policiesExpressionDestroyCall(policyUuid, _callback);

    }

    /**
     * 
     * Source Viewset
     * @param policyUuid A UUID string identifying this Expression Policy. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void policiesExpressionDestroy(UUID policyUuid) throws ApiException {
        policiesExpressionDestroyWithHttpInfo(policyUuid);
    }

    /**
     * 
     * Source Viewset
     * @param policyUuid A UUID string identifying this Expression Policy. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> policiesExpressionDestroyWithHttpInfo(UUID policyUuid) throws ApiException {
        okhttp3.Call localVarCall = policiesExpressionDestroyValidateBeforeCall(policyUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Source Viewset
     * @param policyUuid A UUID string identifying this Expression Policy. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesExpressionDestroyAsync(UUID policyUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = policiesExpressionDestroyValidateBeforeCall(policyUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for policiesExpressionList
     * @param created  (optional)
     * @param executionLogging  (optional)
     * @param expression  (optional)
     * @param lastUpdated  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param policyUuid  (optional)
     * @param search A search term. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesExpressionListCall(OffsetDateTime created, Boolean executionLogging, String expression, OffsetDateTime lastUpdated, String name, String ordering, Integer page, Integer pageSize, UUID policyUuid, String search, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/policies/expression/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (executionLogging != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("execution_logging", executionLogging));
        }

        if (expression != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expression", expression));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (policyUuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("policy_uuid", policyUuid));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policiesExpressionListValidateBeforeCall(OffsetDateTime created, Boolean executionLogging, String expression, OffsetDateTime lastUpdated, String name, String ordering, Integer page, Integer pageSize, UUID policyUuid, String search, final ApiCallback _callback) throws ApiException {
        return policiesExpressionListCall(created, executionLogging, expression, lastUpdated, name, ordering, page, pageSize, policyUuid, search, _callback);

    }

    /**
     * 
     * Source Viewset
     * @param created  (optional)
     * @param executionLogging  (optional)
     * @param expression  (optional)
     * @param lastUpdated  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param policyUuid  (optional)
     * @param search A search term. (optional)
     * @return PaginatedExpressionPolicyList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedExpressionPolicyList policiesExpressionList(OffsetDateTime created, Boolean executionLogging, String expression, OffsetDateTime lastUpdated, String name, String ordering, Integer page, Integer pageSize, UUID policyUuid, String search) throws ApiException {
        ApiResponse<PaginatedExpressionPolicyList> localVarResp = policiesExpressionListWithHttpInfo(created, executionLogging, expression, lastUpdated, name, ordering, page, pageSize, policyUuid, search);
        return localVarResp.getData();
    }

    /**
     * 
     * Source Viewset
     * @param created  (optional)
     * @param executionLogging  (optional)
     * @param expression  (optional)
     * @param lastUpdated  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param policyUuid  (optional)
     * @param search A search term. (optional)
     * @return ApiResponse&lt;PaginatedExpressionPolicyList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedExpressionPolicyList> policiesExpressionListWithHttpInfo(OffsetDateTime created, Boolean executionLogging, String expression, OffsetDateTime lastUpdated, String name, String ordering, Integer page, Integer pageSize, UUID policyUuid, String search) throws ApiException {
        okhttp3.Call localVarCall = policiesExpressionListValidateBeforeCall(created, executionLogging, expression, lastUpdated, name, ordering, page, pageSize, policyUuid, search, null);
        Type localVarReturnType = new TypeToken<PaginatedExpressionPolicyList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Source Viewset
     * @param created  (optional)
     * @param executionLogging  (optional)
     * @param expression  (optional)
     * @param lastUpdated  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param policyUuid  (optional)
     * @param search A search term. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesExpressionListAsync(OffsetDateTime created, Boolean executionLogging, String expression, OffsetDateTime lastUpdated, String name, String ordering, Integer page, Integer pageSize, UUID policyUuid, String search, final ApiCallback<PaginatedExpressionPolicyList> _callback) throws ApiException {

        okhttp3.Call localVarCall = policiesExpressionListValidateBeforeCall(created, executionLogging, expression, lastUpdated, name, ordering, page, pageSize, policyUuid, search, _callback);
        Type localVarReturnType = new TypeToken<PaginatedExpressionPolicyList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policiesExpressionPartialUpdate
     * @param policyUuid A UUID string identifying this Expression Policy. (required)
     * @param patchedExpressionPolicyRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesExpressionPartialUpdateCall(UUID policyUuid, PatchedExpressionPolicyRequest patchedExpressionPolicyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchedExpressionPolicyRequest;

        // create path and map variables
        String localVarPath = "/policies/expression/{policy_uuid}/"
            .replace("{" + "policy_uuid" + "}", localVarApiClient.escapeString(policyUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policiesExpressionPartialUpdateValidateBeforeCall(UUID policyUuid, PatchedExpressionPolicyRequest patchedExpressionPolicyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyUuid' is set
        if (policyUuid == null) {
            throw new ApiException("Missing the required parameter 'policyUuid' when calling policiesExpressionPartialUpdate(Async)");
        }

        return policiesExpressionPartialUpdateCall(policyUuid, patchedExpressionPolicyRequest, _callback);

    }

    /**
     * 
     * Source Viewset
     * @param policyUuid A UUID string identifying this Expression Policy. (required)
     * @param patchedExpressionPolicyRequest  (optional)
     * @return ExpressionPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ExpressionPolicy policiesExpressionPartialUpdate(UUID policyUuid, PatchedExpressionPolicyRequest patchedExpressionPolicyRequest) throws ApiException {
        ApiResponse<ExpressionPolicy> localVarResp = policiesExpressionPartialUpdateWithHttpInfo(policyUuid, patchedExpressionPolicyRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Source Viewset
     * @param policyUuid A UUID string identifying this Expression Policy. (required)
     * @param patchedExpressionPolicyRequest  (optional)
     * @return ApiResponse&lt;ExpressionPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExpressionPolicy> policiesExpressionPartialUpdateWithHttpInfo(UUID policyUuid, PatchedExpressionPolicyRequest patchedExpressionPolicyRequest) throws ApiException {
        okhttp3.Call localVarCall = policiesExpressionPartialUpdateValidateBeforeCall(policyUuid, patchedExpressionPolicyRequest, null);
        Type localVarReturnType = new TypeToken<ExpressionPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Source Viewset
     * @param policyUuid A UUID string identifying this Expression Policy. (required)
     * @param patchedExpressionPolicyRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesExpressionPartialUpdateAsync(UUID policyUuid, PatchedExpressionPolicyRequest patchedExpressionPolicyRequest, final ApiCallback<ExpressionPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = policiesExpressionPartialUpdateValidateBeforeCall(policyUuid, patchedExpressionPolicyRequest, _callback);
        Type localVarReturnType = new TypeToken<ExpressionPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policiesExpressionRetrieve
     * @param policyUuid A UUID string identifying this Expression Policy. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesExpressionRetrieveCall(UUID policyUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/policies/expression/{policy_uuid}/"
            .replace("{" + "policy_uuid" + "}", localVarApiClient.escapeString(policyUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policiesExpressionRetrieveValidateBeforeCall(UUID policyUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyUuid' is set
        if (policyUuid == null) {
            throw new ApiException("Missing the required parameter 'policyUuid' when calling policiesExpressionRetrieve(Async)");
        }

        return policiesExpressionRetrieveCall(policyUuid, _callback);

    }

    /**
     * 
     * Source Viewset
     * @param policyUuid A UUID string identifying this Expression Policy. (required)
     * @return ExpressionPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ExpressionPolicy policiesExpressionRetrieve(UUID policyUuid) throws ApiException {
        ApiResponse<ExpressionPolicy> localVarResp = policiesExpressionRetrieveWithHttpInfo(policyUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Source Viewset
     * @param policyUuid A UUID string identifying this Expression Policy. (required)
     * @return ApiResponse&lt;ExpressionPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExpressionPolicy> policiesExpressionRetrieveWithHttpInfo(UUID policyUuid) throws ApiException {
        okhttp3.Call localVarCall = policiesExpressionRetrieveValidateBeforeCall(policyUuid, null);
        Type localVarReturnType = new TypeToken<ExpressionPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Source Viewset
     * @param policyUuid A UUID string identifying this Expression Policy. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesExpressionRetrieveAsync(UUID policyUuid, final ApiCallback<ExpressionPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = policiesExpressionRetrieveValidateBeforeCall(policyUuid, _callback);
        Type localVarReturnType = new TypeToken<ExpressionPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policiesExpressionUpdate
     * @param policyUuid A UUID string identifying this Expression Policy. (required)
     * @param expressionPolicyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesExpressionUpdateCall(UUID policyUuid, ExpressionPolicyRequest expressionPolicyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = expressionPolicyRequest;

        // create path and map variables
        String localVarPath = "/policies/expression/{policy_uuid}/"
            .replace("{" + "policy_uuid" + "}", localVarApiClient.escapeString(policyUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policiesExpressionUpdateValidateBeforeCall(UUID policyUuid, ExpressionPolicyRequest expressionPolicyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyUuid' is set
        if (policyUuid == null) {
            throw new ApiException("Missing the required parameter 'policyUuid' when calling policiesExpressionUpdate(Async)");
        }

        // verify the required parameter 'expressionPolicyRequest' is set
        if (expressionPolicyRequest == null) {
            throw new ApiException("Missing the required parameter 'expressionPolicyRequest' when calling policiesExpressionUpdate(Async)");
        }

        return policiesExpressionUpdateCall(policyUuid, expressionPolicyRequest, _callback);

    }

    /**
     * 
     * Source Viewset
     * @param policyUuid A UUID string identifying this Expression Policy. (required)
     * @param expressionPolicyRequest  (required)
     * @return ExpressionPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ExpressionPolicy policiesExpressionUpdate(UUID policyUuid, ExpressionPolicyRequest expressionPolicyRequest) throws ApiException {
        ApiResponse<ExpressionPolicy> localVarResp = policiesExpressionUpdateWithHttpInfo(policyUuid, expressionPolicyRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Source Viewset
     * @param policyUuid A UUID string identifying this Expression Policy. (required)
     * @param expressionPolicyRequest  (required)
     * @return ApiResponse&lt;ExpressionPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExpressionPolicy> policiesExpressionUpdateWithHttpInfo(UUID policyUuid, ExpressionPolicyRequest expressionPolicyRequest) throws ApiException {
        okhttp3.Call localVarCall = policiesExpressionUpdateValidateBeforeCall(policyUuid, expressionPolicyRequest, null);
        Type localVarReturnType = new TypeToken<ExpressionPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Source Viewset
     * @param policyUuid A UUID string identifying this Expression Policy. (required)
     * @param expressionPolicyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesExpressionUpdateAsync(UUID policyUuid, ExpressionPolicyRequest expressionPolicyRequest, final ApiCallback<ExpressionPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = policiesExpressionUpdateValidateBeforeCall(policyUuid, expressionPolicyRequest, _callback);
        Type localVarReturnType = new TypeToken<ExpressionPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policiesExpressionUsedByList
     * @param policyUuid A UUID string identifying this Expression Policy. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesExpressionUsedByListCall(UUID policyUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/policies/expression/{policy_uuid}/used_by/"
            .replace("{" + "policy_uuid" + "}", localVarApiClient.escapeString(policyUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policiesExpressionUsedByListValidateBeforeCall(UUID policyUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyUuid' is set
        if (policyUuid == null) {
            throw new ApiException("Missing the required parameter 'policyUuid' when calling policiesExpressionUsedByList(Async)");
        }

        return policiesExpressionUsedByListCall(policyUuid, _callback);

    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param policyUuid A UUID string identifying this Expression Policy. (required)
     * @return List&lt;UsedBy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<UsedBy> policiesExpressionUsedByList(UUID policyUuid) throws ApiException {
        ApiResponse<List<UsedBy>> localVarResp = policiesExpressionUsedByListWithHttpInfo(policyUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param policyUuid A UUID string identifying this Expression Policy. (required)
     * @return ApiResponse&lt;List&lt;UsedBy&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UsedBy>> policiesExpressionUsedByListWithHttpInfo(UUID policyUuid) throws ApiException {
        okhttp3.Call localVarCall = policiesExpressionUsedByListValidateBeforeCall(policyUuid, null);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of all objects that use this object
     * @param policyUuid A UUID string identifying this Expression Policy. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesExpressionUsedByListAsync(UUID policyUuid, final ApiCallback<List<UsedBy>> _callback) throws ApiException {

        okhttp3.Call localVarCall = policiesExpressionUsedByListValidateBeforeCall(policyUuid, _callback);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policiesPasswordCreate
     * @param passwordPolicyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesPasswordCreateCall(PasswordPolicyRequest passwordPolicyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = passwordPolicyRequest;

        // create path and map variables
        String localVarPath = "/policies/password/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policiesPasswordCreateValidateBeforeCall(PasswordPolicyRequest passwordPolicyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'passwordPolicyRequest' is set
        if (passwordPolicyRequest == null) {
            throw new ApiException("Missing the required parameter 'passwordPolicyRequest' when calling policiesPasswordCreate(Async)");
        }

        return policiesPasswordCreateCall(passwordPolicyRequest, _callback);

    }

    /**
     * 
     * Password Policy Viewset
     * @param passwordPolicyRequest  (required)
     * @return PasswordPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PasswordPolicy policiesPasswordCreate(PasswordPolicyRequest passwordPolicyRequest) throws ApiException {
        ApiResponse<PasswordPolicy> localVarResp = policiesPasswordCreateWithHttpInfo(passwordPolicyRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Password Policy Viewset
     * @param passwordPolicyRequest  (required)
     * @return ApiResponse&lt;PasswordPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PasswordPolicy> policiesPasswordCreateWithHttpInfo(PasswordPolicyRequest passwordPolicyRequest) throws ApiException {
        okhttp3.Call localVarCall = policiesPasswordCreateValidateBeforeCall(passwordPolicyRequest, null);
        Type localVarReturnType = new TypeToken<PasswordPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Password Policy Viewset
     * @param passwordPolicyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesPasswordCreateAsync(PasswordPolicyRequest passwordPolicyRequest, final ApiCallback<PasswordPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = policiesPasswordCreateValidateBeforeCall(passwordPolicyRequest, _callback);
        Type localVarReturnType = new TypeToken<PasswordPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policiesPasswordDestroy
     * @param policyUuid A UUID string identifying this Password Policy. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesPasswordDestroyCall(UUID policyUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/policies/password/{policy_uuid}/"
            .replace("{" + "policy_uuid" + "}", localVarApiClient.escapeString(policyUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policiesPasswordDestroyValidateBeforeCall(UUID policyUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyUuid' is set
        if (policyUuid == null) {
            throw new ApiException("Missing the required parameter 'policyUuid' when calling policiesPasswordDestroy(Async)");
        }

        return policiesPasswordDestroyCall(policyUuid, _callback);

    }

    /**
     * 
     * Password Policy Viewset
     * @param policyUuid A UUID string identifying this Password Policy. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void policiesPasswordDestroy(UUID policyUuid) throws ApiException {
        policiesPasswordDestroyWithHttpInfo(policyUuid);
    }

    /**
     * 
     * Password Policy Viewset
     * @param policyUuid A UUID string identifying this Password Policy. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> policiesPasswordDestroyWithHttpInfo(UUID policyUuid) throws ApiException {
        okhttp3.Call localVarCall = policiesPasswordDestroyValidateBeforeCall(policyUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Password Policy Viewset
     * @param policyUuid A UUID string identifying this Password Policy. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesPasswordDestroyAsync(UUID policyUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = policiesPasswordDestroyValidateBeforeCall(policyUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for policiesPasswordExpiryCreate
     * @param passwordExpiryPolicyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesPasswordExpiryCreateCall(PasswordExpiryPolicyRequest passwordExpiryPolicyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = passwordExpiryPolicyRequest;

        // create path and map variables
        String localVarPath = "/policies/password_expiry/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policiesPasswordExpiryCreateValidateBeforeCall(PasswordExpiryPolicyRequest passwordExpiryPolicyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'passwordExpiryPolicyRequest' is set
        if (passwordExpiryPolicyRequest == null) {
            throw new ApiException("Missing the required parameter 'passwordExpiryPolicyRequest' when calling policiesPasswordExpiryCreate(Async)");
        }

        return policiesPasswordExpiryCreateCall(passwordExpiryPolicyRequest, _callback);

    }

    /**
     * 
     * Password Expiry Viewset
     * @param passwordExpiryPolicyRequest  (required)
     * @return PasswordExpiryPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PasswordExpiryPolicy policiesPasswordExpiryCreate(PasswordExpiryPolicyRequest passwordExpiryPolicyRequest) throws ApiException {
        ApiResponse<PasswordExpiryPolicy> localVarResp = policiesPasswordExpiryCreateWithHttpInfo(passwordExpiryPolicyRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Password Expiry Viewset
     * @param passwordExpiryPolicyRequest  (required)
     * @return ApiResponse&lt;PasswordExpiryPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PasswordExpiryPolicy> policiesPasswordExpiryCreateWithHttpInfo(PasswordExpiryPolicyRequest passwordExpiryPolicyRequest) throws ApiException {
        okhttp3.Call localVarCall = policiesPasswordExpiryCreateValidateBeforeCall(passwordExpiryPolicyRequest, null);
        Type localVarReturnType = new TypeToken<PasswordExpiryPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Password Expiry Viewset
     * @param passwordExpiryPolicyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesPasswordExpiryCreateAsync(PasswordExpiryPolicyRequest passwordExpiryPolicyRequest, final ApiCallback<PasswordExpiryPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = policiesPasswordExpiryCreateValidateBeforeCall(passwordExpiryPolicyRequest, _callback);
        Type localVarReturnType = new TypeToken<PasswordExpiryPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policiesPasswordExpiryDestroy
     * @param policyUuid A UUID string identifying this Password Expiry Policy. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesPasswordExpiryDestroyCall(UUID policyUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/policies/password_expiry/{policy_uuid}/"
            .replace("{" + "policy_uuid" + "}", localVarApiClient.escapeString(policyUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policiesPasswordExpiryDestroyValidateBeforeCall(UUID policyUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyUuid' is set
        if (policyUuid == null) {
            throw new ApiException("Missing the required parameter 'policyUuid' when calling policiesPasswordExpiryDestroy(Async)");
        }

        return policiesPasswordExpiryDestroyCall(policyUuid, _callback);

    }

    /**
     * 
     * Password Expiry Viewset
     * @param policyUuid A UUID string identifying this Password Expiry Policy. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void policiesPasswordExpiryDestroy(UUID policyUuid) throws ApiException {
        policiesPasswordExpiryDestroyWithHttpInfo(policyUuid);
    }

    /**
     * 
     * Password Expiry Viewset
     * @param policyUuid A UUID string identifying this Password Expiry Policy. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> policiesPasswordExpiryDestroyWithHttpInfo(UUID policyUuid) throws ApiException {
        okhttp3.Call localVarCall = policiesPasswordExpiryDestroyValidateBeforeCall(policyUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Password Expiry Viewset
     * @param policyUuid A UUID string identifying this Password Expiry Policy. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesPasswordExpiryDestroyAsync(UUID policyUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = policiesPasswordExpiryDestroyValidateBeforeCall(policyUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for policiesPasswordExpiryList
     * @param created  (optional)
     * @param days  (optional)
     * @param denyOnly  (optional)
     * @param executionLogging  (optional)
     * @param lastUpdated  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param policyUuid  (optional)
     * @param search A search term. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesPasswordExpiryListCall(OffsetDateTime created, Integer days, Boolean denyOnly, Boolean executionLogging, OffsetDateTime lastUpdated, String name, String ordering, Integer page, Integer pageSize, UUID policyUuid, String search, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/policies/password_expiry/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (days != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("days", days));
        }

        if (denyOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deny_only", denyOnly));
        }

        if (executionLogging != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("execution_logging", executionLogging));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (policyUuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("policy_uuid", policyUuid));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policiesPasswordExpiryListValidateBeforeCall(OffsetDateTime created, Integer days, Boolean denyOnly, Boolean executionLogging, OffsetDateTime lastUpdated, String name, String ordering, Integer page, Integer pageSize, UUID policyUuid, String search, final ApiCallback _callback) throws ApiException {
        return policiesPasswordExpiryListCall(created, days, denyOnly, executionLogging, lastUpdated, name, ordering, page, pageSize, policyUuid, search, _callback);

    }

    /**
     * 
     * Password Expiry Viewset
     * @param created  (optional)
     * @param days  (optional)
     * @param denyOnly  (optional)
     * @param executionLogging  (optional)
     * @param lastUpdated  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param policyUuid  (optional)
     * @param search A search term. (optional)
     * @return PaginatedPasswordExpiryPolicyList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedPasswordExpiryPolicyList policiesPasswordExpiryList(OffsetDateTime created, Integer days, Boolean denyOnly, Boolean executionLogging, OffsetDateTime lastUpdated, String name, String ordering, Integer page, Integer pageSize, UUID policyUuid, String search) throws ApiException {
        ApiResponse<PaginatedPasswordExpiryPolicyList> localVarResp = policiesPasswordExpiryListWithHttpInfo(created, days, denyOnly, executionLogging, lastUpdated, name, ordering, page, pageSize, policyUuid, search);
        return localVarResp.getData();
    }

    /**
     * 
     * Password Expiry Viewset
     * @param created  (optional)
     * @param days  (optional)
     * @param denyOnly  (optional)
     * @param executionLogging  (optional)
     * @param lastUpdated  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param policyUuid  (optional)
     * @param search A search term. (optional)
     * @return ApiResponse&lt;PaginatedPasswordExpiryPolicyList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedPasswordExpiryPolicyList> policiesPasswordExpiryListWithHttpInfo(OffsetDateTime created, Integer days, Boolean denyOnly, Boolean executionLogging, OffsetDateTime lastUpdated, String name, String ordering, Integer page, Integer pageSize, UUID policyUuid, String search) throws ApiException {
        okhttp3.Call localVarCall = policiesPasswordExpiryListValidateBeforeCall(created, days, denyOnly, executionLogging, lastUpdated, name, ordering, page, pageSize, policyUuid, search, null);
        Type localVarReturnType = new TypeToken<PaginatedPasswordExpiryPolicyList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Password Expiry Viewset
     * @param created  (optional)
     * @param days  (optional)
     * @param denyOnly  (optional)
     * @param executionLogging  (optional)
     * @param lastUpdated  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param policyUuid  (optional)
     * @param search A search term. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesPasswordExpiryListAsync(OffsetDateTime created, Integer days, Boolean denyOnly, Boolean executionLogging, OffsetDateTime lastUpdated, String name, String ordering, Integer page, Integer pageSize, UUID policyUuid, String search, final ApiCallback<PaginatedPasswordExpiryPolicyList> _callback) throws ApiException {

        okhttp3.Call localVarCall = policiesPasswordExpiryListValidateBeforeCall(created, days, denyOnly, executionLogging, lastUpdated, name, ordering, page, pageSize, policyUuid, search, _callback);
        Type localVarReturnType = new TypeToken<PaginatedPasswordExpiryPolicyList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policiesPasswordExpiryPartialUpdate
     * @param policyUuid A UUID string identifying this Password Expiry Policy. (required)
     * @param patchedPasswordExpiryPolicyRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesPasswordExpiryPartialUpdateCall(UUID policyUuid, PatchedPasswordExpiryPolicyRequest patchedPasswordExpiryPolicyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchedPasswordExpiryPolicyRequest;

        // create path and map variables
        String localVarPath = "/policies/password_expiry/{policy_uuid}/"
            .replace("{" + "policy_uuid" + "}", localVarApiClient.escapeString(policyUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policiesPasswordExpiryPartialUpdateValidateBeforeCall(UUID policyUuid, PatchedPasswordExpiryPolicyRequest patchedPasswordExpiryPolicyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyUuid' is set
        if (policyUuid == null) {
            throw new ApiException("Missing the required parameter 'policyUuid' when calling policiesPasswordExpiryPartialUpdate(Async)");
        }

        return policiesPasswordExpiryPartialUpdateCall(policyUuid, patchedPasswordExpiryPolicyRequest, _callback);

    }

    /**
     * 
     * Password Expiry Viewset
     * @param policyUuid A UUID string identifying this Password Expiry Policy. (required)
     * @param patchedPasswordExpiryPolicyRequest  (optional)
     * @return PasswordExpiryPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PasswordExpiryPolicy policiesPasswordExpiryPartialUpdate(UUID policyUuid, PatchedPasswordExpiryPolicyRequest patchedPasswordExpiryPolicyRequest) throws ApiException {
        ApiResponse<PasswordExpiryPolicy> localVarResp = policiesPasswordExpiryPartialUpdateWithHttpInfo(policyUuid, patchedPasswordExpiryPolicyRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Password Expiry Viewset
     * @param policyUuid A UUID string identifying this Password Expiry Policy. (required)
     * @param patchedPasswordExpiryPolicyRequest  (optional)
     * @return ApiResponse&lt;PasswordExpiryPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PasswordExpiryPolicy> policiesPasswordExpiryPartialUpdateWithHttpInfo(UUID policyUuid, PatchedPasswordExpiryPolicyRequest patchedPasswordExpiryPolicyRequest) throws ApiException {
        okhttp3.Call localVarCall = policiesPasswordExpiryPartialUpdateValidateBeforeCall(policyUuid, patchedPasswordExpiryPolicyRequest, null);
        Type localVarReturnType = new TypeToken<PasswordExpiryPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Password Expiry Viewset
     * @param policyUuid A UUID string identifying this Password Expiry Policy. (required)
     * @param patchedPasswordExpiryPolicyRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesPasswordExpiryPartialUpdateAsync(UUID policyUuid, PatchedPasswordExpiryPolicyRequest patchedPasswordExpiryPolicyRequest, final ApiCallback<PasswordExpiryPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = policiesPasswordExpiryPartialUpdateValidateBeforeCall(policyUuid, patchedPasswordExpiryPolicyRequest, _callback);
        Type localVarReturnType = new TypeToken<PasswordExpiryPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policiesPasswordExpiryRetrieve
     * @param policyUuid A UUID string identifying this Password Expiry Policy. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesPasswordExpiryRetrieveCall(UUID policyUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/policies/password_expiry/{policy_uuid}/"
            .replace("{" + "policy_uuid" + "}", localVarApiClient.escapeString(policyUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policiesPasswordExpiryRetrieveValidateBeforeCall(UUID policyUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyUuid' is set
        if (policyUuid == null) {
            throw new ApiException("Missing the required parameter 'policyUuid' when calling policiesPasswordExpiryRetrieve(Async)");
        }

        return policiesPasswordExpiryRetrieveCall(policyUuid, _callback);

    }

    /**
     * 
     * Password Expiry Viewset
     * @param policyUuid A UUID string identifying this Password Expiry Policy. (required)
     * @return PasswordExpiryPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PasswordExpiryPolicy policiesPasswordExpiryRetrieve(UUID policyUuid) throws ApiException {
        ApiResponse<PasswordExpiryPolicy> localVarResp = policiesPasswordExpiryRetrieveWithHttpInfo(policyUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Password Expiry Viewset
     * @param policyUuid A UUID string identifying this Password Expiry Policy. (required)
     * @return ApiResponse&lt;PasswordExpiryPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PasswordExpiryPolicy> policiesPasswordExpiryRetrieveWithHttpInfo(UUID policyUuid) throws ApiException {
        okhttp3.Call localVarCall = policiesPasswordExpiryRetrieveValidateBeforeCall(policyUuid, null);
        Type localVarReturnType = new TypeToken<PasswordExpiryPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Password Expiry Viewset
     * @param policyUuid A UUID string identifying this Password Expiry Policy. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesPasswordExpiryRetrieveAsync(UUID policyUuid, final ApiCallback<PasswordExpiryPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = policiesPasswordExpiryRetrieveValidateBeforeCall(policyUuid, _callback);
        Type localVarReturnType = new TypeToken<PasswordExpiryPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policiesPasswordExpiryUpdate
     * @param policyUuid A UUID string identifying this Password Expiry Policy. (required)
     * @param passwordExpiryPolicyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesPasswordExpiryUpdateCall(UUID policyUuid, PasswordExpiryPolicyRequest passwordExpiryPolicyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = passwordExpiryPolicyRequest;

        // create path and map variables
        String localVarPath = "/policies/password_expiry/{policy_uuid}/"
            .replace("{" + "policy_uuid" + "}", localVarApiClient.escapeString(policyUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policiesPasswordExpiryUpdateValidateBeforeCall(UUID policyUuid, PasswordExpiryPolicyRequest passwordExpiryPolicyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyUuid' is set
        if (policyUuid == null) {
            throw new ApiException("Missing the required parameter 'policyUuid' when calling policiesPasswordExpiryUpdate(Async)");
        }

        // verify the required parameter 'passwordExpiryPolicyRequest' is set
        if (passwordExpiryPolicyRequest == null) {
            throw new ApiException("Missing the required parameter 'passwordExpiryPolicyRequest' when calling policiesPasswordExpiryUpdate(Async)");
        }

        return policiesPasswordExpiryUpdateCall(policyUuid, passwordExpiryPolicyRequest, _callback);

    }

    /**
     * 
     * Password Expiry Viewset
     * @param policyUuid A UUID string identifying this Password Expiry Policy. (required)
     * @param passwordExpiryPolicyRequest  (required)
     * @return PasswordExpiryPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PasswordExpiryPolicy policiesPasswordExpiryUpdate(UUID policyUuid, PasswordExpiryPolicyRequest passwordExpiryPolicyRequest) throws ApiException {
        ApiResponse<PasswordExpiryPolicy> localVarResp = policiesPasswordExpiryUpdateWithHttpInfo(policyUuid, passwordExpiryPolicyRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Password Expiry Viewset
     * @param policyUuid A UUID string identifying this Password Expiry Policy. (required)
     * @param passwordExpiryPolicyRequest  (required)
     * @return ApiResponse&lt;PasswordExpiryPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PasswordExpiryPolicy> policiesPasswordExpiryUpdateWithHttpInfo(UUID policyUuid, PasswordExpiryPolicyRequest passwordExpiryPolicyRequest) throws ApiException {
        okhttp3.Call localVarCall = policiesPasswordExpiryUpdateValidateBeforeCall(policyUuid, passwordExpiryPolicyRequest, null);
        Type localVarReturnType = new TypeToken<PasswordExpiryPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Password Expiry Viewset
     * @param policyUuid A UUID string identifying this Password Expiry Policy. (required)
     * @param passwordExpiryPolicyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesPasswordExpiryUpdateAsync(UUID policyUuid, PasswordExpiryPolicyRequest passwordExpiryPolicyRequest, final ApiCallback<PasswordExpiryPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = policiesPasswordExpiryUpdateValidateBeforeCall(policyUuid, passwordExpiryPolicyRequest, _callback);
        Type localVarReturnType = new TypeToken<PasswordExpiryPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policiesPasswordExpiryUsedByList
     * @param policyUuid A UUID string identifying this Password Expiry Policy. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesPasswordExpiryUsedByListCall(UUID policyUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/policies/password_expiry/{policy_uuid}/used_by/"
            .replace("{" + "policy_uuid" + "}", localVarApiClient.escapeString(policyUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policiesPasswordExpiryUsedByListValidateBeforeCall(UUID policyUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyUuid' is set
        if (policyUuid == null) {
            throw new ApiException("Missing the required parameter 'policyUuid' when calling policiesPasswordExpiryUsedByList(Async)");
        }

        return policiesPasswordExpiryUsedByListCall(policyUuid, _callback);

    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param policyUuid A UUID string identifying this Password Expiry Policy. (required)
     * @return List&lt;UsedBy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<UsedBy> policiesPasswordExpiryUsedByList(UUID policyUuid) throws ApiException {
        ApiResponse<List<UsedBy>> localVarResp = policiesPasswordExpiryUsedByListWithHttpInfo(policyUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param policyUuid A UUID string identifying this Password Expiry Policy. (required)
     * @return ApiResponse&lt;List&lt;UsedBy&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UsedBy>> policiesPasswordExpiryUsedByListWithHttpInfo(UUID policyUuid) throws ApiException {
        okhttp3.Call localVarCall = policiesPasswordExpiryUsedByListValidateBeforeCall(policyUuid, null);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of all objects that use this object
     * @param policyUuid A UUID string identifying this Password Expiry Policy. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesPasswordExpiryUsedByListAsync(UUID policyUuid, final ApiCallback<List<UsedBy>> _callback) throws ApiException {

        okhttp3.Call localVarCall = policiesPasswordExpiryUsedByListValidateBeforeCall(policyUuid, _callback);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policiesPasswordList
     * @param amountDigits  (optional)
     * @param amountLowercase  (optional)
     * @param amountSymbols  (optional)
     * @param amountUppercase  (optional)
     * @param checkHaveIBeenPwned  (optional)
     * @param checkStaticRules  (optional)
     * @param checkZxcvbn  (optional)
     * @param created  (optional)
     * @param errorMessage  (optional)
     * @param executionLogging  (optional)
     * @param hibpAllowedCount  (optional)
     * @param lastUpdated  (optional)
     * @param lengthMin  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param passwordField  (optional)
     * @param policyUuid  (optional)
     * @param search A search term. (optional)
     * @param symbolCharset  (optional)
     * @param zxcvbnScoreThreshold  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesPasswordListCall(Integer amountDigits, Integer amountLowercase, Integer amountSymbols, Integer amountUppercase, Boolean checkHaveIBeenPwned, Boolean checkStaticRules, Boolean checkZxcvbn, OffsetDateTime created, String errorMessage, Boolean executionLogging, Integer hibpAllowedCount, OffsetDateTime lastUpdated, Integer lengthMin, String name, String ordering, Integer page, Integer pageSize, String passwordField, UUID policyUuid, String search, String symbolCharset, Integer zxcvbnScoreThreshold, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/policies/password/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (amountDigits != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("amount_digits", amountDigits));
        }

        if (amountLowercase != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("amount_lowercase", amountLowercase));
        }

        if (amountSymbols != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("amount_symbols", amountSymbols));
        }

        if (amountUppercase != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("amount_uppercase", amountUppercase));
        }

        if (checkHaveIBeenPwned != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("check_have_i_been_pwned", checkHaveIBeenPwned));
        }

        if (checkStaticRules != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("check_static_rules", checkStaticRules));
        }

        if (checkZxcvbn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("check_zxcvbn", checkZxcvbn));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (errorMessage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("error_message", errorMessage));
        }

        if (executionLogging != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("execution_logging", executionLogging));
        }

        if (hibpAllowedCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hibp_allowed_count", hibpAllowedCount));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (lengthMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("length_min", lengthMin));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (passwordField != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("password_field", passwordField));
        }

        if (policyUuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("policy_uuid", policyUuid));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (symbolCharset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("symbol_charset", symbolCharset));
        }

        if (zxcvbnScoreThreshold != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zxcvbn_score_threshold", zxcvbnScoreThreshold));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policiesPasswordListValidateBeforeCall(Integer amountDigits, Integer amountLowercase, Integer amountSymbols, Integer amountUppercase, Boolean checkHaveIBeenPwned, Boolean checkStaticRules, Boolean checkZxcvbn, OffsetDateTime created, String errorMessage, Boolean executionLogging, Integer hibpAllowedCount, OffsetDateTime lastUpdated, Integer lengthMin, String name, String ordering, Integer page, Integer pageSize, String passwordField, UUID policyUuid, String search, String symbolCharset, Integer zxcvbnScoreThreshold, final ApiCallback _callback) throws ApiException {
        return policiesPasswordListCall(amountDigits, amountLowercase, amountSymbols, amountUppercase, checkHaveIBeenPwned, checkStaticRules, checkZxcvbn, created, errorMessage, executionLogging, hibpAllowedCount, lastUpdated, lengthMin, name, ordering, page, pageSize, passwordField, policyUuid, search, symbolCharset, zxcvbnScoreThreshold, _callback);

    }

    /**
     * 
     * Password Policy Viewset
     * @param amountDigits  (optional)
     * @param amountLowercase  (optional)
     * @param amountSymbols  (optional)
     * @param amountUppercase  (optional)
     * @param checkHaveIBeenPwned  (optional)
     * @param checkStaticRules  (optional)
     * @param checkZxcvbn  (optional)
     * @param created  (optional)
     * @param errorMessage  (optional)
     * @param executionLogging  (optional)
     * @param hibpAllowedCount  (optional)
     * @param lastUpdated  (optional)
     * @param lengthMin  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param passwordField  (optional)
     * @param policyUuid  (optional)
     * @param search A search term. (optional)
     * @param symbolCharset  (optional)
     * @param zxcvbnScoreThreshold  (optional)
     * @return PaginatedPasswordPolicyList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedPasswordPolicyList policiesPasswordList(Integer amountDigits, Integer amountLowercase, Integer amountSymbols, Integer amountUppercase, Boolean checkHaveIBeenPwned, Boolean checkStaticRules, Boolean checkZxcvbn, OffsetDateTime created, String errorMessage, Boolean executionLogging, Integer hibpAllowedCount, OffsetDateTime lastUpdated, Integer lengthMin, String name, String ordering, Integer page, Integer pageSize, String passwordField, UUID policyUuid, String search, String symbolCharset, Integer zxcvbnScoreThreshold) throws ApiException {
        ApiResponse<PaginatedPasswordPolicyList> localVarResp = policiesPasswordListWithHttpInfo(amountDigits, amountLowercase, amountSymbols, amountUppercase, checkHaveIBeenPwned, checkStaticRules, checkZxcvbn, created, errorMessage, executionLogging, hibpAllowedCount, lastUpdated, lengthMin, name, ordering, page, pageSize, passwordField, policyUuid, search, symbolCharset, zxcvbnScoreThreshold);
        return localVarResp.getData();
    }

    /**
     * 
     * Password Policy Viewset
     * @param amountDigits  (optional)
     * @param amountLowercase  (optional)
     * @param amountSymbols  (optional)
     * @param amountUppercase  (optional)
     * @param checkHaveIBeenPwned  (optional)
     * @param checkStaticRules  (optional)
     * @param checkZxcvbn  (optional)
     * @param created  (optional)
     * @param errorMessage  (optional)
     * @param executionLogging  (optional)
     * @param hibpAllowedCount  (optional)
     * @param lastUpdated  (optional)
     * @param lengthMin  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param passwordField  (optional)
     * @param policyUuid  (optional)
     * @param search A search term. (optional)
     * @param symbolCharset  (optional)
     * @param zxcvbnScoreThreshold  (optional)
     * @return ApiResponse&lt;PaginatedPasswordPolicyList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedPasswordPolicyList> policiesPasswordListWithHttpInfo(Integer amountDigits, Integer amountLowercase, Integer amountSymbols, Integer amountUppercase, Boolean checkHaveIBeenPwned, Boolean checkStaticRules, Boolean checkZxcvbn, OffsetDateTime created, String errorMessage, Boolean executionLogging, Integer hibpAllowedCount, OffsetDateTime lastUpdated, Integer lengthMin, String name, String ordering, Integer page, Integer pageSize, String passwordField, UUID policyUuid, String search, String symbolCharset, Integer zxcvbnScoreThreshold) throws ApiException {
        okhttp3.Call localVarCall = policiesPasswordListValidateBeforeCall(amountDigits, amountLowercase, amountSymbols, amountUppercase, checkHaveIBeenPwned, checkStaticRules, checkZxcvbn, created, errorMessage, executionLogging, hibpAllowedCount, lastUpdated, lengthMin, name, ordering, page, pageSize, passwordField, policyUuid, search, symbolCharset, zxcvbnScoreThreshold, null);
        Type localVarReturnType = new TypeToken<PaginatedPasswordPolicyList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Password Policy Viewset
     * @param amountDigits  (optional)
     * @param amountLowercase  (optional)
     * @param amountSymbols  (optional)
     * @param amountUppercase  (optional)
     * @param checkHaveIBeenPwned  (optional)
     * @param checkStaticRules  (optional)
     * @param checkZxcvbn  (optional)
     * @param created  (optional)
     * @param errorMessage  (optional)
     * @param executionLogging  (optional)
     * @param hibpAllowedCount  (optional)
     * @param lastUpdated  (optional)
     * @param lengthMin  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param passwordField  (optional)
     * @param policyUuid  (optional)
     * @param search A search term. (optional)
     * @param symbolCharset  (optional)
     * @param zxcvbnScoreThreshold  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesPasswordListAsync(Integer amountDigits, Integer amountLowercase, Integer amountSymbols, Integer amountUppercase, Boolean checkHaveIBeenPwned, Boolean checkStaticRules, Boolean checkZxcvbn, OffsetDateTime created, String errorMessage, Boolean executionLogging, Integer hibpAllowedCount, OffsetDateTime lastUpdated, Integer lengthMin, String name, String ordering, Integer page, Integer pageSize, String passwordField, UUID policyUuid, String search, String symbolCharset, Integer zxcvbnScoreThreshold, final ApiCallback<PaginatedPasswordPolicyList> _callback) throws ApiException {

        okhttp3.Call localVarCall = policiesPasswordListValidateBeforeCall(amountDigits, amountLowercase, amountSymbols, amountUppercase, checkHaveIBeenPwned, checkStaticRules, checkZxcvbn, created, errorMessage, executionLogging, hibpAllowedCount, lastUpdated, lengthMin, name, ordering, page, pageSize, passwordField, policyUuid, search, symbolCharset, zxcvbnScoreThreshold, _callback);
        Type localVarReturnType = new TypeToken<PaginatedPasswordPolicyList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policiesPasswordPartialUpdate
     * @param policyUuid A UUID string identifying this Password Policy. (required)
     * @param patchedPasswordPolicyRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesPasswordPartialUpdateCall(UUID policyUuid, PatchedPasswordPolicyRequest patchedPasswordPolicyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchedPasswordPolicyRequest;

        // create path and map variables
        String localVarPath = "/policies/password/{policy_uuid}/"
            .replace("{" + "policy_uuid" + "}", localVarApiClient.escapeString(policyUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policiesPasswordPartialUpdateValidateBeforeCall(UUID policyUuid, PatchedPasswordPolicyRequest patchedPasswordPolicyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyUuid' is set
        if (policyUuid == null) {
            throw new ApiException("Missing the required parameter 'policyUuid' when calling policiesPasswordPartialUpdate(Async)");
        }

        return policiesPasswordPartialUpdateCall(policyUuid, patchedPasswordPolicyRequest, _callback);

    }

    /**
     * 
     * Password Policy Viewset
     * @param policyUuid A UUID string identifying this Password Policy. (required)
     * @param patchedPasswordPolicyRequest  (optional)
     * @return PasswordPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PasswordPolicy policiesPasswordPartialUpdate(UUID policyUuid, PatchedPasswordPolicyRequest patchedPasswordPolicyRequest) throws ApiException {
        ApiResponse<PasswordPolicy> localVarResp = policiesPasswordPartialUpdateWithHttpInfo(policyUuid, patchedPasswordPolicyRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Password Policy Viewset
     * @param policyUuid A UUID string identifying this Password Policy. (required)
     * @param patchedPasswordPolicyRequest  (optional)
     * @return ApiResponse&lt;PasswordPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PasswordPolicy> policiesPasswordPartialUpdateWithHttpInfo(UUID policyUuid, PatchedPasswordPolicyRequest patchedPasswordPolicyRequest) throws ApiException {
        okhttp3.Call localVarCall = policiesPasswordPartialUpdateValidateBeforeCall(policyUuid, patchedPasswordPolicyRequest, null);
        Type localVarReturnType = new TypeToken<PasswordPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Password Policy Viewset
     * @param policyUuid A UUID string identifying this Password Policy. (required)
     * @param patchedPasswordPolicyRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesPasswordPartialUpdateAsync(UUID policyUuid, PatchedPasswordPolicyRequest patchedPasswordPolicyRequest, final ApiCallback<PasswordPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = policiesPasswordPartialUpdateValidateBeforeCall(policyUuid, patchedPasswordPolicyRequest, _callback);
        Type localVarReturnType = new TypeToken<PasswordPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policiesPasswordRetrieve
     * @param policyUuid A UUID string identifying this Password Policy. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesPasswordRetrieveCall(UUID policyUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/policies/password/{policy_uuid}/"
            .replace("{" + "policy_uuid" + "}", localVarApiClient.escapeString(policyUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policiesPasswordRetrieveValidateBeforeCall(UUID policyUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyUuid' is set
        if (policyUuid == null) {
            throw new ApiException("Missing the required parameter 'policyUuid' when calling policiesPasswordRetrieve(Async)");
        }

        return policiesPasswordRetrieveCall(policyUuid, _callback);

    }

    /**
     * 
     * Password Policy Viewset
     * @param policyUuid A UUID string identifying this Password Policy. (required)
     * @return PasswordPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PasswordPolicy policiesPasswordRetrieve(UUID policyUuid) throws ApiException {
        ApiResponse<PasswordPolicy> localVarResp = policiesPasswordRetrieveWithHttpInfo(policyUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Password Policy Viewset
     * @param policyUuid A UUID string identifying this Password Policy. (required)
     * @return ApiResponse&lt;PasswordPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PasswordPolicy> policiesPasswordRetrieveWithHttpInfo(UUID policyUuid) throws ApiException {
        okhttp3.Call localVarCall = policiesPasswordRetrieveValidateBeforeCall(policyUuid, null);
        Type localVarReturnType = new TypeToken<PasswordPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Password Policy Viewset
     * @param policyUuid A UUID string identifying this Password Policy. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesPasswordRetrieveAsync(UUID policyUuid, final ApiCallback<PasswordPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = policiesPasswordRetrieveValidateBeforeCall(policyUuid, _callback);
        Type localVarReturnType = new TypeToken<PasswordPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policiesPasswordUpdate
     * @param policyUuid A UUID string identifying this Password Policy. (required)
     * @param passwordPolicyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesPasswordUpdateCall(UUID policyUuid, PasswordPolicyRequest passwordPolicyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = passwordPolicyRequest;

        // create path and map variables
        String localVarPath = "/policies/password/{policy_uuid}/"
            .replace("{" + "policy_uuid" + "}", localVarApiClient.escapeString(policyUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policiesPasswordUpdateValidateBeforeCall(UUID policyUuid, PasswordPolicyRequest passwordPolicyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyUuid' is set
        if (policyUuid == null) {
            throw new ApiException("Missing the required parameter 'policyUuid' when calling policiesPasswordUpdate(Async)");
        }

        // verify the required parameter 'passwordPolicyRequest' is set
        if (passwordPolicyRequest == null) {
            throw new ApiException("Missing the required parameter 'passwordPolicyRequest' when calling policiesPasswordUpdate(Async)");
        }

        return policiesPasswordUpdateCall(policyUuid, passwordPolicyRequest, _callback);

    }

    /**
     * 
     * Password Policy Viewset
     * @param policyUuid A UUID string identifying this Password Policy. (required)
     * @param passwordPolicyRequest  (required)
     * @return PasswordPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PasswordPolicy policiesPasswordUpdate(UUID policyUuid, PasswordPolicyRequest passwordPolicyRequest) throws ApiException {
        ApiResponse<PasswordPolicy> localVarResp = policiesPasswordUpdateWithHttpInfo(policyUuid, passwordPolicyRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Password Policy Viewset
     * @param policyUuid A UUID string identifying this Password Policy. (required)
     * @param passwordPolicyRequest  (required)
     * @return ApiResponse&lt;PasswordPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PasswordPolicy> policiesPasswordUpdateWithHttpInfo(UUID policyUuid, PasswordPolicyRequest passwordPolicyRequest) throws ApiException {
        okhttp3.Call localVarCall = policiesPasswordUpdateValidateBeforeCall(policyUuid, passwordPolicyRequest, null);
        Type localVarReturnType = new TypeToken<PasswordPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Password Policy Viewset
     * @param policyUuid A UUID string identifying this Password Policy. (required)
     * @param passwordPolicyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesPasswordUpdateAsync(UUID policyUuid, PasswordPolicyRequest passwordPolicyRequest, final ApiCallback<PasswordPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = policiesPasswordUpdateValidateBeforeCall(policyUuid, passwordPolicyRequest, _callback);
        Type localVarReturnType = new TypeToken<PasswordPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policiesPasswordUsedByList
     * @param policyUuid A UUID string identifying this Password Policy. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesPasswordUsedByListCall(UUID policyUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/policies/password/{policy_uuid}/used_by/"
            .replace("{" + "policy_uuid" + "}", localVarApiClient.escapeString(policyUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policiesPasswordUsedByListValidateBeforeCall(UUID policyUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyUuid' is set
        if (policyUuid == null) {
            throw new ApiException("Missing the required parameter 'policyUuid' when calling policiesPasswordUsedByList(Async)");
        }

        return policiesPasswordUsedByListCall(policyUuid, _callback);

    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param policyUuid A UUID string identifying this Password Policy. (required)
     * @return List&lt;UsedBy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<UsedBy> policiesPasswordUsedByList(UUID policyUuid) throws ApiException {
        ApiResponse<List<UsedBy>> localVarResp = policiesPasswordUsedByListWithHttpInfo(policyUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param policyUuid A UUID string identifying this Password Policy. (required)
     * @return ApiResponse&lt;List&lt;UsedBy&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UsedBy>> policiesPasswordUsedByListWithHttpInfo(UUID policyUuid) throws ApiException {
        okhttp3.Call localVarCall = policiesPasswordUsedByListValidateBeforeCall(policyUuid, null);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of all objects that use this object
     * @param policyUuid A UUID string identifying this Password Policy. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesPasswordUsedByListAsync(UUID policyUuid, final ApiCallback<List<UsedBy>> _callback) throws ApiException {

        okhttp3.Call localVarCall = policiesPasswordUsedByListValidateBeforeCall(policyUuid, _callback);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policiesReputationCreate
     * @param reputationPolicyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesReputationCreateCall(ReputationPolicyRequest reputationPolicyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reputationPolicyRequest;

        // create path and map variables
        String localVarPath = "/policies/reputation/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policiesReputationCreateValidateBeforeCall(ReputationPolicyRequest reputationPolicyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reputationPolicyRequest' is set
        if (reputationPolicyRequest == null) {
            throw new ApiException("Missing the required parameter 'reputationPolicyRequest' when calling policiesReputationCreate(Async)");
        }

        return policiesReputationCreateCall(reputationPolicyRequest, _callback);

    }

    /**
     * 
     * Reputation Policy Viewset
     * @param reputationPolicyRequest  (required)
     * @return ReputationPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ReputationPolicy policiesReputationCreate(ReputationPolicyRequest reputationPolicyRequest) throws ApiException {
        ApiResponse<ReputationPolicy> localVarResp = policiesReputationCreateWithHttpInfo(reputationPolicyRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Reputation Policy Viewset
     * @param reputationPolicyRequest  (required)
     * @return ApiResponse&lt;ReputationPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReputationPolicy> policiesReputationCreateWithHttpInfo(ReputationPolicyRequest reputationPolicyRequest) throws ApiException {
        okhttp3.Call localVarCall = policiesReputationCreateValidateBeforeCall(reputationPolicyRequest, null);
        Type localVarReturnType = new TypeToken<ReputationPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Reputation Policy Viewset
     * @param reputationPolicyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesReputationCreateAsync(ReputationPolicyRequest reputationPolicyRequest, final ApiCallback<ReputationPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = policiesReputationCreateValidateBeforeCall(reputationPolicyRequest, _callback);
        Type localVarReturnType = new TypeToken<ReputationPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policiesReputationDestroy
     * @param policyUuid A UUID string identifying this Reputation Policy. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesReputationDestroyCall(UUID policyUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/policies/reputation/{policy_uuid}/"
            .replace("{" + "policy_uuid" + "}", localVarApiClient.escapeString(policyUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policiesReputationDestroyValidateBeforeCall(UUID policyUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyUuid' is set
        if (policyUuid == null) {
            throw new ApiException("Missing the required parameter 'policyUuid' when calling policiesReputationDestroy(Async)");
        }

        return policiesReputationDestroyCall(policyUuid, _callback);

    }

    /**
     * 
     * Reputation Policy Viewset
     * @param policyUuid A UUID string identifying this Reputation Policy. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void policiesReputationDestroy(UUID policyUuid) throws ApiException {
        policiesReputationDestroyWithHttpInfo(policyUuid);
    }

    /**
     * 
     * Reputation Policy Viewset
     * @param policyUuid A UUID string identifying this Reputation Policy. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> policiesReputationDestroyWithHttpInfo(UUID policyUuid) throws ApiException {
        okhttp3.Call localVarCall = policiesReputationDestroyValidateBeforeCall(policyUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Reputation Policy Viewset
     * @param policyUuid A UUID string identifying this Reputation Policy. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesReputationDestroyAsync(UUID policyUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = policiesReputationDestroyValidateBeforeCall(policyUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for policiesReputationList
     * @param checkIp  (optional)
     * @param checkUsername  (optional)
     * @param created  (optional)
     * @param executionLogging  (optional)
     * @param lastUpdated  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param policyUuid  (optional)
     * @param search A search term. (optional)
     * @param threshold  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesReputationListCall(Boolean checkIp, Boolean checkUsername, OffsetDateTime created, Boolean executionLogging, OffsetDateTime lastUpdated, String name, String ordering, Integer page, Integer pageSize, UUID policyUuid, String search, Integer threshold, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/policies/reputation/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (checkIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("check_ip", checkIp));
        }

        if (checkUsername != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("check_username", checkUsername));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created", created));
        }

        if (executionLogging != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("execution_logging", executionLogging));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_updated", lastUpdated));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (policyUuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("policy_uuid", policyUuid));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (threshold != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("threshold", threshold));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policiesReputationListValidateBeforeCall(Boolean checkIp, Boolean checkUsername, OffsetDateTime created, Boolean executionLogging, OffsetDateTime lastUpdated, String name, String ordering, Integer page, Integer pageSize, UUID policyUuid, String search, Integer threshold, final ApiCallback _callback) throws ApiException {
        return policiesReputationListCall(checkIp, checkUsername, created, executionLogging, lastUpdated, name, ordering, page, pageSize, policyUuid, search, threshold, _callback);

    }

    /**
     * 
     * Reputation Policy Viewset
     * @param checkIp  (optional)
     * @param checkUsername  (optional)
     * @param created  (optional)
     * @param executionLogging  (optional)
     * @param lastUpdated  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param policyUuid  (optional)
     * @param search A search term. (optional)
     * @param threshold  (optional)
     * @return PaginatedReputationPolicyList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedReputationPolicyList policiesReputationList(Boolean checkIp, Boolean checkUsername, OffsetDateTime created, Boolean executionLogging, OffsetDateTime lastUpdated, String name, String ordering, Integer page, Integer pageSize, UUID policyUuid, String search, Integer threshold) throws ApiException {
        ApiResponse<PaginatedReputationPolicyList> localVarResp = policiesReputationListWithHttpInfo(checkIp, checkUsername, created, executionLogging, lastUpdated, name, ordering, page, pageSize, policyUuid, search, threshold);
        return localVarResp.getData();
    }

    /**
     * 
     * Reputation Policy Viewset
     * @param checkIp  (optional)
     * @param checkUsername  (optional)
     * @param created  (optional)
     * @param executionLogging  (optional)
     * @param lastUpdated  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param policyUuid  (optional)
     * @param search A search term. (optional)
     * @param threshold  (optional)
     * @return ApiResponse&lt;PaginatedReputationPolicyList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedReputationPolicyList> policiesReputationListWithHttpInfo(Boolean checkIp, Boolean checkUsername, OffsetDateTime created, Boolean executionLogging, OffsetDateTime lastUpdated, String name, String ordering, Integer page, Integer pageSize, UUID policyUuid, String search, Integer threshold) throws ApiException {
        okhttp3.Call localVarCall = policiesReputationListValidateBeforeCall(checkIp, checkUsername, created, executionLogging, lastUpdated, name, ordering, page, pageSize, policyUuid, search, threshold, null);
        Type localVarReturnType = new TypeToken<PaginatedReputationPolicyList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Reputation Policy Viewset
     * @param checkIp  (optional)
     * @param checkUsername  (optional)
     * @param created  (optional)
     * @param executionLogging  (optional)
     * @param lastUpdated  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param policyUuid  (optional)
     * @param search A search term. (optional)
     * @param threshold  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesReputationListAsync(Boolean checkIp, Boolean checkUsername, OffsetDateTime created, Boolean executionLogging, OffsetDateTime lastUpdated, String name, String ordering, Integer page, Integer pageSize, UUID policyUuid, String search, Integer threshold, final ApiCallback<PaginatedReputationPolicyList> _callback) throws ApiException {

        okhttp3.Call localVarCall = policiesReputationListValidateBeforeCall(checkIp, checkUsername, created, executionLogging, lastUpdated, name, ordering, page, pageSize, policyUuid, search, threshold, _callback);
        Type localVarReturnType = new TypeToken<PaginatedReputationPolicyList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policiesReputationPartialUpdate
     * @param policyUuid A UUID string identifying this Reputation Policy. (required)
     * @param patchedReputationPolicyRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesReputationPartialUpdateCall(UUID policyUuid, PatchedReputationPolicyRequest patchedReputationPolicyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchedReputationPolicyRequest;

        // create path and map variables
        String localVarPath = "/policies/reputation/{policy_uuid}/"
            .replace("{" + "policy_uuid" + "}", localVarApiClient.escapeString(policyUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policiesReputationPartialUpdateValidateBeforeCall(UUID policyUuid, PatchedReputationPolicyRequest patchedReputationPolicyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyUuid' is set
        if (policyUuid == null) {
            throw new ApiException("Missing the required parameter 'policyUuid' when calling policiesReputationPartialUpdate(Async)");
        }

        return policiesReputationPartialUpdateCall(policyUuid, patchedReputationPolicyRequest, _callback);

    }

    /**
     * 
     * Reputation Policy Viewset
     * @param policyUuid A UUID string identifying this Reputation Policy. (required)
     * @param patchedReputationPolicyRequest  (optional)
     * @return ReputationPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ReputationPolicy policiesReputationPartialUpdate(UUID policyUuid, PatchedReputationPolicyRequest patchedReputationPolicyRequest) throws ApiException {
        ApiResponse<ReputationPolicy> localVarResp = policiesReputationPartialUpdateWithHttpInfo(policyUuid, patchedReputationPolicyRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Reputation Policy Viewset
     * @param policyUuid A UUID string identifying this Reputation Policy. (required)
     * @param patchedReputationPolicyRequest  (optional)
     * @return ApiResponse&lt;ReputationPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReputationPolicy> policiesReputationPartialUpdateWithHttpInfo(UUID policyUuid, PatchedReputationPolicyRequest patchedReputationPolicyRequest) throws ApiException {
        okhttp3.Call localVarCall = policiesReputationPartialUpdateValidateBeforeCall(policyUuid, patchedReputationPolicyRequest, null);
        Type localVarReturnType = new TypeToken<ReputationPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Reputation Policy Viewset
     * @param policyUuid A UUID string identifying this Reputation Policy. (required)
     * @param patchedReputationPolicyRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesReputationPartialUpdateAsync(UUID policyUuid, PatchedReputationPolicyRequest patchedReputationPolicyRequest, final ApiCallback<ReputationPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = policiesReputationPartialUpdateValidateBeforeCall(policyUuid, patchedReputationPolicyRequest, _callback);
        Type localVarReturnType = new TypeToken<ReputationPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policiesReputationRetrieve
     * @param policyUuid A UUID string identifying this Reputation Policy. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesReputationRetrieveCall(UUID policyUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/policies/reputation/{policy_uuid}/"
            .replace("{" + "policy_uuid" + "}", localVarApiClient.escapeString(policyUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policiesReputationRetrieveValidateBeforeCall(UUID policyUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyUuid' is set
        if (policyUuid == null) {
            throw new ApiException("Missing the required parameter 'policyUuid' when calling policiesReputationRetrieve(Async)");
        }

        return policiesReputationRetrieveCall(policyUuid, _callback);

    }

    /**
     * 
     * Reputation Policy Viewset
     * @param policyUuid A UUID string identifying this Reputation Policy. (required)
     * @return ReputationPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ReputationPolicy policiesReputationRetrieve(UUID policyUuid) throws ApiException {
        ApiResponse<ReputationPolicy> localVarResp = policiesReputationRetrieveWithHttpInfo(policyUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Reputation Policy Viewset
     * @param policyUuid A UUID string identifying this Reputation Policy. (required)
     * @return ApiResponse&lt;ReputationPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReputationPolicy> policiesReputationRetrieveWithHttpInfo(UUID policyUuid) throws ApiException {
        okhttp3.Call localVarCall = policiesReputationRetrieveValidateBeforeCall(policyUuid, null);
        Type localVarReturnType = new TypeToken<ReputationPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Reputation Policy Viewset
     * @param policyUuid A UUID string identifying this Reputation Policy. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesReputationRetrieveAsync(UUID policyUuid, final ApiCallback<ReputationPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = policiesReputationRetrieveValidateBeforeCall(policyUuid, _callback);
        Type localVarReturnType = new TypeToken<ReputationPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policiesReputationScoresDestroy
     * @param reputationUuid A UUID string identifying this Reputation Score. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesReputationScoresDestroyCall(UUID reputationUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/policies/reputation/scores/{reputation_uuid}/"
            .replace("{" + "reputation_uuid" + "}", localVarApiClient.escapeString(reputationUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policiesReputationScoresDestroyValidateBeforeCall(UUID reputationUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reputationUuid' is set
        if (reputationUuid == null) {
            throw new ApiException("Missing the required parameter 'reputationUuid' when calling policiesReputationScoresDestroy(Async)");
        }

        return policiesReputationScoresDestroyCall(reputationUuid, _callback);

    }

    /**
     * 
     * Reputation Viewset
     * @param reputationUuid A UUID string identifying this Reputation Score. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void policiesReputationScoresDestroy(UUID reputationUuid) throws ApiException {
        policiesReputationScoresDestroyWithHttpInfo(reputationUuid);
    }

    /**
     * 
     * Reputation Viewset
     * @param reputationUuid A UUID string identifying this Reputation Score. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> policiesReputationScoresDestroyWithHttpInfo(UUID reputationUuid) throws ApiException {
        okhttp3.Call localVarCall = policiesReputationScoresDestroyValidateBeforeCall(reputationUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Reputation Viewset
     * @param reputationUuid A UUID string identifying this Reputation Score. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesReputationScoresDestroyAsync(UUID reputationUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = policiesReputationScoresDestroyValidateBeforeCall(reputationUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for policiesReputationScoresList
     * @param identifier  (optional)
     * @param identifierIn Multiple values may be separated by commas. (optional)
     * @param ip  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param score  (optional)
     * @param search A search term. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesReputationScoresListCall(String identifier, List<String> identifierIn, String ip, String ordering, Integer page, Integer pageSize, Integer score, String search, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/policies/reputation/scores/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (identifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("identifier", identifier));
        }

        if (identifierIn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "identifier_in", identifierIn));
        }

        if (ip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ip", ip));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (score != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("score", score));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policiesReputationScoresListValidateBeforeCall(String identifier, List<String> identifierIn, String ip, String ordering, Integer page, Integer pageSize, Integer score, String search, final ApiCallback _callback) throws ApiException {
        return policiesReputationScoresListCall(identifier, identifierIn, ip, ordering, page, pageSize, score, search, _callback);

    }

    /**
     * 
     * Reputation Viewset
     * @param identifier  (optional)
     * @param identifierIn Multiple values may be separated by commas. (optional)
     * @param ip  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param score  (optional)
     * @param search A search term. (optional)
     * @return PaginatedReputationList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedReputationList policiesReputationScoresList(String identifier, List<String> identifierIn, String ip, String ordering, Integer page, Integer pageSize, Integer score, String search) throws ApiException {
        ApiResponse<PaginatedReputationList> localVarResp = policiesReputationScoresListWithHttpInfo(identifier, identifierIn, ip, ordering, page, pageSize, score, search);
        return localVarResp.getData();
    }

    /**
     * 
     * Reputation Viewset
     * @param identifier  (optional)
     * @param identifierIn Multiple values may be separated by commas. (optional)
     * @param ip  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param score  (optional)
     * @param search A search term. (optional)
     * @return ApiResponse&lt;PaginatedReputationList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedReputationList> policiesReputationScoresListWithHttpInfo(String identifier, List<String> identifierIn, String ip, String ordering, Integer page, Integer pageSize, Integer score, String search) throws ApiException {
        okhttp3.Call localVarCall = policiesReputationScoresListValidateBeforeCall(identifier, identifierIn, ip, ordering, page, pageSize, score, search, null);
        Type localVarReturnType = new TypeToken<PaginatedReputationList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Reputation Viewset
     * @param identifier  (optional)
     * @param identifierIn Multiple values may be separated by commas. (optional)
     * @param ip  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param score  (optional)
     * @param search A search term. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesReputationScoresListAsync(String identifier, List<String> identifierIn, String ip, String ordering, Integer page, Integer pageSize, Integer score, String search, final ApiCallback<PaginatedReputationList> _callback) throws ApiException {

        okhttp3.Call localVarCall = policiesReputationScoresListValidateBeforeCall(identifier, identifierIn, ip, ordering, page, pageSize, score, search, _callback);
        Type localVarReturnType = new TypeToken<PaginatedReputationList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policiesReputationScoresRetrieve
     * @param reputationUuid A UUID string identifying this Reputation Score. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesReputationScoresRetrieveCall(UUID reputationUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/policies/reputation/scores/{reputation_uuid}/"
            .replace("{" + "reputation_uuid" + "}", localVarApiClient.escapeString(reputationUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policiesReputationScoresRetrieveValidateBeforeCall(UUID reputationUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reputationUuid' is set
        if (reputationUuid == null) {
            throw new ApiException("Missing the required parameter 'reputationUuid' when calling policiesReputationScoresRetrieve(Async)");
        }

        return policiesReputationScoresRetrieveCall(reputationUuid, _callback);

    }

    /**
     * 
     * Reputation Viewset
     * @param reputationUuid A UUID string identifying this Reputation Score. (required)
     * @return Reputation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Reputation policiesReputationScoresRetrieve(UUID reputationUuid) throws ApiException {
        ApiResponse<Reputation> localVarResp = policiesReputationScoresRetrieveWithHttpInfo(reputationUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Reputation Viewset
     * @param reputationUuid A UUID string identifying this Reputation Score. (required)
     * @return ApiResponse&lt;Reputation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Reputation> policiesReputationScoresRetrieveWithHttpInfo(UUID reputationUuid) throws ApiException {
        okhttp3.Call localVarCall = policiesReputationScoresRetrieveValidateBeforeCall(reputationUuid, null);
        Type localVarReturnType = new TypeToken<Reputation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Reputation Viewset
     * @param reputationUuid A UUID string identifying this Reputation Score. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesReputationScoresRetrieveAsync(UUID reputationUuid, final ApiCallback<Reputation> _callback) throws ApiException {

        okhttp3.Call localVarCall = policiesReputationScoresRetrieveValidateBeforeCall(reputationUuid, _callback);
        Type localVarReturnType = new TypeToken<Reputation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policiesReputationScoresUsedByList
     * @param reputationUuid A UUID string identifying this Reputation Score. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesReputationScoresUsedByListCall(UUID reputationUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/policies/reputation/scores/{reputation_uuid}/used_by/"
            .replace("{" + "reputation_uuid" + "}", localVarApiClient.escapeString(reputationUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policiesReputationScoresUsedByListValidateBeforeCall(UUID reputationUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reputationUuid' is set
        if (reputationUuid == null) {
            throw new ApiException("Missing the required parameter 'reputationUuid' when calling policiesReputationScoresUsedByList(Async)");
        }

        return policiesReputationScoresUsedByListCall(reputationUuid, _callback);

    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param reputationUuid A UUID string identifying this Reputation Score. (required)
     * @return List&lt;UsedBy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<UsedBy> policiesReputationScoresUsedByList(UUID reputationUuid) throws ApiException {
        ApiResponse<List<UsedBy>> localVarResp = policiesReputationScoresUsedByListWithHttpInfo(reputationUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param reputationUuid A UUID string identifying this Reputation Score. (required)
     * @return ApiResponse&lt;List&lt;UsedBy&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UsedBy>> policiesReputationScoresUsedByListWithHttpInfo(UUID reputationUuid) throws ApiException {
        okhttp3.Call localVarCall = policiesReputationScoresUsedByListValidateBeforeCall(reputationUuid, null);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of all objects that use this object
     * @param reputationUuid A UUID string identifying this Reputation Score. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesReputationScoresUsedByListAsync(UUID reputationUuid, final ApiCallback<List<UsedBy>> _callback) throws ApiException {

        okhttp3.Call localVarCall = policiesReputationScoresUsedByListValidateBeforeCall(reputationUuid, _callback);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policiesReputationUpdate
     * @param policyUuid A UUID string identifying this Reputation Policy. (required)
     * @param reputationPolicyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesReputationUpdateCall(UUID policyUuid, ReputationPolicyRequest reputationPolicyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reputationPolicyRequest;

        // create path and map variables
        String localVarPath = "/policies/reputation/{policy_uuid}/"
            .replace("{" + "policy_uuid" + "}", localVarApiClient.escapeString(policyUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policiesReputationUpdateValidateBeforeCall(UUID policyUuid, ReputationPolicyRequest reputationPolicyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyUuid' is set
        if (policyUuid == null) {
            throw new ApiException("Missing the required parameter 'policyUuid' when calling policiesReputationUpdate(Async)");
        }

        // verify the required parameter 'reputationPolicyRequest' is set
        if (reputationPolicyRequest == null) {
            throw new ApiException("Missing the required parameter 'reputationPolicyRequest' when calling policiesReputationUpdate(Async)");
        }

        return policiesReputationUpdateCall(policyUuid, reputationPolicyRequest, _callback);

    }

    /**
     * 
     * Reputation Policy Viewset
     * @param policyUuid A UUID string identifying this Reputation Policy. (required)
     * @param reputationPolicyRequest  (required)
     * @return ReputationPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ReputationPolicy policiesReputationUpdate(UUID policyUuid, ReputationPolicyRequest reputationPolicyRequest) throws ApiException {
        ApiResponse<ReputationPolicy> localVarResp = policiesReputationUpdateWithHttpInfo(policyUuid, reputationPolicyRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Reputation Policy Viewset
     * @param policyUuid A UUID string identifying this Reputation Policy. (required)
     * @param reputationPolicyRequest  (required)
     * @return ApiResponse&lt;ReputationPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReputationPolicy> policiesReputationUpdateWithHttpInfo(UUID policyUuid, ReputationPolicyRequest reputationPolicyRequest) throws ApiException {
        okhttp3.Call localVarCall = policiesReputationUpdateValidateBeforeCall(policyUuid, reputationPolicyRequest, null);
        Type localVarReturnType = new TypeToken<ReputationPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Reputation Policy Viewset
     * @param policyUuid A UUID string identifying this Reputation Policy. (required)
     * @param reputationPolicyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesReputationUpdateAsync(UUID policyUuid, ReputationPolicyRequest reputationPolicyRequest, final ApiCallback<ReputationPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = policiesReputationUpdateValidateBeforeCall(policyUuid, reputationPolicyRequest, _callback);
        Type localVarReturnType = new TypeToken<ReputationPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policiesReputationUsedByList
     * @param policyUuid A UUID string identifying this Reputation Policy. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesReputationUsedByListCall(UUID policyUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/policies/reputation/{policy_uuid}/used_by/"
            .replace("{" + "policy_uuid" + "}", localVarApiClient.escapeString(policyUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policiesReputationUsedByListValidateBeforeCall(UUID policyUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyUuid' is set
        if (policyUuid == null) {
            throw new ApiException("Missing the required parameter 'policyUuid' when calling policiesReputationUsedByList(Async)");
        }

        return policiesReputationUsedByListCall(policyUuid, _callback);

    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param policyUuid A UUID string identifying this Reputation Policy. (required)
     * @return List&lt;UsedBy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<UsedBy> policiesReputationUsedByList(UUID policyUuid) throws ApiException {
        ApiResponse<List<UsedBy>> localVarResp = policiesReputationUsedByListWithHttpInfo(policyUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param policyUuid A UUID string identifying this Reputation Policy. (required)
     * @return ApiResponse&lt;List&lt;UsedBy&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UsedBy>> policiesReputationUsedByListWithHttpInfo(UUID policyUuid) throws ApiException {
        okhttp3.Call localVarCall = policiesReputationUsedByListValidateBeforeCall(policyUuid, null);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of all objects that use this object
     * @param policyUuid A UUID string identifying this Reputation Policy. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policiesReputationUsedByListAsync(UUID policyUuid, final ApiCallback<List<UsedBy>> _callback) throws ApiException {

        okhttp3.Call localVarCall = policiesReputationUsedByListValidateBeforeCall(policyUuid, _callback);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
