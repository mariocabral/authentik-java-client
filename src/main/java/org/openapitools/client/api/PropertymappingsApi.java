/*
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.6.3
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.GenericError;
import org.openapitools.client.model.GoogleWorkspaceProviderMapping;
import org.openapitools.client.model.GoogleWorkspaceProviderMappingRequest;
import org.openapitools.client.model.LDAPPropertyMapping;
import org.openapitools.client.model.LDAPPropertyMappingRequest;
import org.openapitools.client.model.MicrosoftEntraProviderMapping;
import org.openapitools.client.model.MicrosoftEntraProviderMappingRequest;
import org.openapitools.client.model.NotificationWebhookMapping;
import org.openapitools.client.model.NotificationWebhookMappingRequest;
import org.openapitools.client.model.PaginatedGoogleWorkspaceProviderMappingList;
import org.openapitools.client.model.PaginatedLDAPPropertyMappingList;
import org.openapitools.client.model.PaginatedMicrosoftEntraProviderMappingList;
import org.openapitools.client.model.PaginatedNotificationWebhookMappingList;
import org.openapitools.client.model.PaginatedPropertyMappingList;
import org.openapitools.client.model.PaginatedRACPropertyMappingList;
import org.openapitools.client.model.PaginatedSAMLPropertyMappingList;
import org.openapitools.client.model.PaginatedSCIMMappingList;
import org.openapitools.client.model.PaginatedScopeMappingList;
import org.openapitools.client.model.PatchedGoogleWorkspaceProviderMappingRequest;
import org.openapitools.client.model.PatchedLDAPPropertyMappingRequest;
import org.openapitools.client.model.PatchedMicrosoftEntraProviderMappingRequest;
import org.openapitools.client.model.PatchedNotificationWebhookMappingRequest;
import org.openapitools.client.model.PatchedRACPropertyMappingRequest;
import org.openapitools.client.model.PatchedSAMLPropertyMappingRequest;
import org.openapitools.client.model.PatchedSCIMMappingRequest;
import org.openapitools.client.model.PatchedScopeMappingRequest;
import org.openapitools.client.model.PropertyMapping;
import org.openapitools.client.model.PropertyMappingTestRequest;
import org.openapitools.client.model.PropertyMappingTestResult;
import org.openapitools.client.model.RACPropertyMapping;
import org.openapitools.client.model.RACPropertyMappingRequest;
import org.openapitools.client.model.SAMLPropertyMapping;
import org.openapitools.client.model.SAMLPropertyMappingRequest;
import org.openapitools.client.model.SCIMMapping;
import org.openapitools.client.model.SCIMMappingRequest;
import org.openapitools.client.model.ScopeMapping;
import org.openapitools.client.model.ScopeMappingRequest;
import org.openapitools.client.model.TypeCreate;
import java.util.UUID;
import org.openapitools.client.model.UsedBy;
import org.openapitools.client.model.ValidationError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PropertymappingsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PropertymappingsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PropertymappingsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for propertymappingsAllDestroy
     * @param pmUuid A UUID string identifying this Property Mapping. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsAllDestroyCall(UUID pmUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/propertymappings/all/{pm_uuid}/"
            .replace("{" + "pm_uuid" + "}", localVarApiClient.escapeString(pmUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call propertymappingsAllDestroyValidateBeforeCall(UUID pmUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pmUuid' is set
        if (pmUuid == null) {
            throw new ApiException("Missing the required parameter 'pmUuid' when calling propertymappingsAllDestroy(Async)");
        }

        return propertymappingsAllDestroyCall(pmUuid, _callback);

    }

    /**
     * 
     * PropertyMapping Viewset
     * @param pmUuid A UUID string identifying this Property Mapping. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void propertymappingsAllDestroy(UUID pmUuid) throws ApiException {
        propertymappingsAllDestroyWithHttpInfo(pmUuid);
    }

    /**
     * 
     * PropertyMapping Viewset
     * @param pmUuid A UUID string identifying this Property Mapping. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> propertymappingsAllDestroyWithHttpInfo(UUID pmUuid) throws ApiException {
        okhttp3.Call localVarCall = propertymappingsAllDestroyValidateBeforeCall(pmUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * PropertyMapping Viewset
     * @param pmUuid A UUID string identifying this Property Mapping. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsAllDestroyAsync(UUID pmUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = propertymappingsAllDestroyValidateBeforeCall(pmUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for propertymappingsAllList
     * @param managedIsnull  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsAllListCall(Boolean managedIsnull, String ordering, Integer page, Integer pageSize, String search, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/propertymappings/all/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (managedIsnull != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("managed__isnull", managedIsnull));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call propertymappingsAllListValidateBeforeCall(Boolean managedIsnull, String ordering, Integer page, Integer pageSize, String search, final ApiCallback _callback) throws ApiException {
        return propertymappingsAllListCall(managedIsnull, ordering, page, pageSize, search, _callback);

    }

    /**
     * 
     * PropertyMapping Viewset
     * @param managedIsnull  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @return PaginatedPropertyMappingList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedPropertyMappingList propertymappingsAllList(Boolean managedIsnull, String ordering, Integer page, Integer pageSize, String search) throws ApiException {
        ApiResponse<PaginatedPropertyMappingList> localVarResp = propertymappingsAllListWithHttpInfo(managedIsnull, ordering, page, pageSize, search);
        return localVarResp.getData();
    }

    /**
     * 
     * PropertyMapping Viewset
     * @param managedIsnull  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @return ApiResponse&lt;PaginatedPropertyMappingList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedPropertyMappingList> propertymappingsAllListWithHttpInfo(Boolean managedIsnull, String ordering, Integer page, Integer pageSize, String search) throws ApiException {
        okhttp3.Call localVarCall = propertymappingsAllListValidateBeforeCall(managedIsnull, ordering, page, pageSize, search, null);
        Type localVarReturnType = new TypeToken<PaginatedPropertyMappingList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * PropertyMapping Viewset
     * @param managedIsnull  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsAllListAsync(Boolean managedIsnull, String ordering, Integer page, Integer pageSize, String search, final ApiCallback<PaginatedPropertyMappingList> _callback) throws ApiException {

        okhttp3.Call localVarCall = propertymappingsAllListValidateBeforeCall(managedIsnull, ordering, page, pageSize, search, _callback);
        Type localVarReturnType = new TypeToken<PaginatedPropertyMappingList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for propertymappingsAllRetrieve
     * @param pmUuid A UUID string identifying this Property Mapping. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsAllRetrieveCall(UUID pmUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/propertymappings/all/{pm_uuid}/"
            .replace("{" + "pm_uuid" + "}", localVarApiClient.escapeString(pmUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call propertymappingsAllRetrieveValidateBeforeCall(UUID pmUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pmUuid' is set
        if (pmUuid == null) {
            throw new ApiException("Missing the required parameter 'pmUuid' when calling propertymappingsAllRetrieve(Async)");
        }

        return propertymappingsAllRetrieveCall(pmUuid, _callback);

    }

    /**
     * 
     * PropertyMapping Viewset
     * @param pmUuid A UUID string identifying this Property Mapping. (required)
     * @return PropertyMapping
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PropertyMapping propertymappingsAllRetrieve(UUID pmUuid) throws ApiException {
        ApiResponse<PropertyMapping> localVarResp = propertymappingsAllRetrieveWithHttpInfo(pmUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * PropertyMapping Viewset
     * @param pmUuid A UUID string identifying this Property Mapping. (required)
     * @return ApiResponse&lt;PropertyMapping&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PropertyMapping> propertymappingsAllRetrieveWithHttpInfo(UUID pmUuid) throws ApiException {
        okhttp3.Call localVarCall = propertymappingsAllRetrieveValidateBeforeCall(pmUuid, null);
        Type localVarReturnType = new TypeToken<PropertyMapping>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * PropertyMapping Viewset
     * @param pmUuid A UUID string identifying this Property Mapping. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsAllRetrieveAsync(UUID pmUuid, final ApiCallback<PropertyMapping> _callback) throws ApiException {

        okhttp3.Call localVarCall = propertymappingsAllRetrieveValidateBeforeCall(pmUuid, _callback);
        Type localVarReturnType = new TypeToken<PropertyMapping>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for propertymappingsAllTestCreate
     * @param pmUuid A UUID string identifying this Property Mapping. (required)
     * @param formatResult  (optional)
     * @param propertyMappingTestRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameters </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsAllTestCreateCall(UUID pmUuid, Boolean formatResult, PropertyMappingTestRequest propertyMappingTestRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = propertyMappingTestRequest;

        // create path and map variables
        String localVarPath = "/propertymappings/all/{pm_uuid}/test/"
            .replace("{" + "pm_uuid" + "}", localVarApiClient.escapeString(pmUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (formatResult != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format_result", formatResult));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call propertymappingsAllTestCreateValidateBeforeCall(UUID pmUuid, Boolean formatResult, PropertyMappingTestRequest propertyMappingTestRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pmUuid' is set
        if (pmUuid == null) {
            throw new ApiException("Missing the required parameter 'pmUuid' when calling propertymappingsAllTestCreate(Async)");
        }

        return propertymappingsAllTestCreateCall(pmUuid, formatResult, propertyMappingTestRequest, _callback);

    }

    /**
     * 
     * Test Property Mapping
     * @param pmUuid A UUID string identifying this Property Mapping. (required)
     * @param formatResult  (optional)
     * @param propertyMappingTestRequest  (optional)
     * @return PropertyMappingTestResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameters </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PropertyMappingTestResult propertymappingsAllTestCreate(UUID pmUuid, Boolean formatResult, PropertyMappingTestRequest propertyMappingTestRequest) throws ApiException {
        ApiResponse<PropertyMappingTestResult> localVarResp = propertymappingsAllTestCreateWithHttpInfo(pmUuid, formatResult, propertyMappingTestRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Test Property Mapping
     * @param pmUuid A UUID string identifying this Property Mapping. (required)
     * @param formatResult  (optional)
     * @param propertyMappingTestRequest  (optional)
     * @return ApiResponse&lt;PropertyMappingTestResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameters </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PropertyMappingTestResult> propertymappingsAllTestCreateWithHttpInfo(UUID pmUuid, Boolean formatResult, PropertyMappingTestRequest propertyMappingTestRequest) throws ApiException {
        okhttp3.Call localVarCall = propertymappingsAllTestCreateValidateBeforeCall(pmUuid, formatResult, propertyMappingTestRequest, null);
        Type localVarReturnType = new TypeToken<PropertyMappingTestResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Test Property Mapping
     * @param pmUuid A UUID string identifying this Property Mapping. (required)
     * @param formatResult  (optional)
     * @param propertyMappingTestRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameters </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsAllTestCreateAsync(UUID pmUuid, Boolean formatResult, PropertyMappingTestRequest propertyMappingTestRequest, final ApiCallback<PropertyMappingTestResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = propertymappingsAllTestCreateValidateBeforeCall(pmUuid, formatResult, propertyMappingTestRequest, _callback);
        Type localVarReturnType = new TypeToken<PropertyMappingTestResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for propertymappingsAllTypesList
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsAllTypesListCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/propertymappings/all/types/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call propertymappingsAllTypesListValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return propertymappingsAllTypesListCall(_callback);

    }

    /**
     * 
     * Get all creatable types
     * @return List&lt;TypeCreate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<TypeCreate> propertymappingsAllTypesList() throws ApiException {
        ApiResponse<List<TypeCreate>> localVarResp = propertymappingsAllTypesListWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Get all creatable types
     * @return ApiResponse&lt;List&lt;TypeCreate&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TypeCreate>> propertymappingsAllTypesListWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = propertymappingsAllTypesListValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<TypeCreate>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get all creatable types
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsAllTypesListAsync(final ApiCallback<List<TypeCreate>> _callback) throws ApiException {

        okhttp3.Call localVarCall = propertymappingsAllTypesListValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<TypeCreate>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for propertymappingsAllUsedByList
     * @param pmUuid A UUID string identifying this Property Mapping. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsAllUsedByListCall(UUID pmUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/propertymappings/all/{pm_uuid}/used_by/"
            .replace("{" + "pm_uuid" + "}", localVarApiClient.escapeString(pmUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call propertymappingsAllUsedByListValidateBeforeCall(UUID pmUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pmUuid' is set
        if (pmUuid == null) {
            throw new ApiException("Missing the required parameter 'pmUuid' when calling propertymappingsAllUsedByList(Async)");
        }

        return propertymappingsAllUsedByListCall(pmUuid, _callback);

    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param pmUuid A UUID string identifying this Property Mapping. (required)
     * @return List&lt;UsedBy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<UsedBy> propertymappingsAllUsedByList(UUID pmUuid) throws ApiException {
        ApiResponse<List<UsedBy>> localVarResp = propertymappingsAllUsedByListWithHttpInfo(pmUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param pmUuid A UUID string identifying this Property Mapping. (required)
     * @return ApiResponse&lt;List&lt;UsedBy&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UsedBy>> propertymappingsAllUsedByListWithHttpInfo(UUID pmUuid) throws ApiException {
        okhttp3.Call localVarCall = propertymappingsAllUsedByListValidateBeforeCall(pmUuid, null);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of all objects that use this object
     * @param pmUuid A UUID string identifying this Property Mapping. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsAllUsedByListAsync(UUID pmUuid, final ApiCallback<List<UsedBy>> _callback) throws ApiException {

        okhttp3.Call localVarCall = propertymappingsAllUsedByListValidateBeforeCall(pmUuid, _callback);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for propertymappingsLdapCreate
     * @param ldAPPropertyMappingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsLdapCreateCall(LDAPPropertyMappingRequest ldAPPropertyMappingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ldAPPropertyMappingRequest;

        // create path and map variables
        String localVarPath = "/propertymappings/ldap/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call propertymappingsLdapCreateValidateBeforeCall(LDAPPropertyMappingRequest ldAPPropertyMappingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ldAPPropertyMappingRequest' is set
        if (ldAPPropertyMappingRequest == null) {
            throw new ApiException("Missing the required parameter 'ldAPPropertyMappingRequest' when calling propertymappingsLdapCreate(Async)");
        }

        return propertymappingsLdapCreateCall(ldAPPropertyMappingRequest, _callback);

    }

    /**
     * 
     * LDAP PropertyMapping Viewset
     * @param ldAPPropertyMappingRequest  (required)
     * @return LDAPPropertyMapping
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public LDAPPropertyMapping propertymappingsLdapCreate(LDAPPropertyMappingRequest ldAPPropertyMappingRequest) throws ApiException {
        ApiResponse<LDAPPropertyMapping> localVarResp = propertymappingsLdapCreateWithHttpInfo(ldAPPropertyMappingRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * LDAP PropertyMapping Viewset
     * @param ldAPPropertyMappingRequest  (required)
     * @return ApiResponse&lt;LDAPPropertyMapping&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LDAPPropertyMapping> propertymappingsLdapCreateWithHttpInfo(LDAPPropertyMappingRequest ldAPPropertyMappingRequest) throws ApiException {
        okhttp3.Call localVarCall = propertymappingsLdapCreateValidateBeforeCall(ldAPPropertyMappingRequest, null);
        Type localVarReturnType = new TypeToken<LDAPPropertyMapping>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * LDAP PropertyMapping Viewset
     * @param ldAPPropertyMappingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsLdapCreateAsync(LDAPPropertyMappingRequest ldAPPropertyMappingRequest, final ApiCallback<LDAPPropertyMapping> _callback) throws ApiException {

        okhttp3.Call localVarCall = propertymappingsLdapCreateValidateBeforeCall(ldAPPropertyMappingRequest, _callback);
        Type localVarReturnType = new TypeToken<LDAPPropertyMapping>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for propertymappingsLdapDestroy
     * @param pmUuid A UUID string identifying this LDAP Property Mapping. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsLdapDestroyCall(UUID pmUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/propertymappings/ldap/{pm_uuid}/"
            .replace("{" + "pm_uuid" + "}", localVarApiClient.escapeString(pmUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call propertymappingsLdapDestroyValidateBeforeCall(UUID pmUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pmUuid' is set
        if (pmUuid == null) {
            throw new ApiException("Missing the required parameter 'pmUuid' when calling propertymappingsLdapDestroy(Async)");
        }

        return propertymappingsLdapDestroyCall(pmUuid, _callback);

    }

    /**
     * 
     * LDAP PropertyMapping Viewset
     * @param pmUuid A UUID string identifying this LDAP Property Mapping. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void propertymappingsLdapDestroy(UUID pmUuid) throws ApiException {
        propertymappingsLdapDestroyWithHttpInfo(pmUuid);
    }

    /**
     * 
     * LDAP PropertyMapping Viewset
     * @param pmUuid A UUID string identifying this LDAP Property Mapping. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> propertymappingsLdapDestroyWithHttpInfo(UUID pmUuid) throws ApiException {
        okhttp3.Call localVarCall = propertymappingsLdapDestroyValidateBeforeCall(pmUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * LDAP PropertyMapping Viewset
     * @param pmUuid A UUID string identifying this LDAP Property Mapping. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsLdapDestroyAsync(UUID pmUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = propertymappingsLdapDestroyValidateBeforeCall(pmUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for propertymappingsLdapList
     * @param expression  (optional)
     * @param managed  (optional)
     * @param name  (optional)
     * @param objectField  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param pmUuid  (optional)
     * @param search A search term. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsLdapListCall(String expression, List<String> managed, String name, String objectField, String ordering, Integer page, Integer pageSize, UUID pmUuid, String search, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/propertymappings/ldap/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expression != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expression", expression));
        }

        if (managed != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "managed", managed));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (objectField != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("object_field", objectField));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (pmUuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pm_uuid", pmUuid));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call propertymappingsLdapListValidateBeforeCall(String expression, List<String> managed, String name, String objectField, String ordering, Integer page, Integer pageSize, UUID pmUuid, String search, final ApiCallback _callback) throws ApiException {
        return propertymappingsLdapListCall(expression, managed, name, objectField, ordering, page, pageSize, pmUuid, search, _callback);

    }

    /**
     * 
     * LDAP PropertyMapping Viewset
     * @param expression  (optional)
     * @param managed  (optional)
     * @param name  (optional)
     * @param objectField  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param pmUuid  (optional)
     * @param search A search term. (optional)
     * @return PaginatedLDAPPropertyMappingList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedLDAPPropertyMappingList propertymappingsLdapList(String expression, List<String> managed, String name, String objectField, String ordering, Integer page, Integer pageSize, UUID pmUuid, String search) throws ApiException {
        ApiResponse<PaginatedLDAPPropertyMappingList> localVarResp = propertymappingsLdapListWithHttpInfo(expression, managed, name, objectField, ordering, page, pageSize, pmUuid, search);
        return localVarResp.getData();
    }

    /**
     * 
     * LDAP PropertyMapping Viewset
     * @param expression  (optional)
     * @param managed  (optional)
     * @param name  (optional)
     * @param objectField  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param pmUuid  (optional)
     * @param search A search term. (optional)
     * @return ApiResponse&lt;PaginatedLDAPPropertyMappingList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedLDAPPropertyMappingList> propertymappingsLdapListWithHttpInfo(String expression, List<String> managed, String name, String objectField, String ordering, Integer page, Integer pageSize, UUID pmUuid, String search) throws ApiException {
        okhttp3.Call localVarCall = propertymappingsLdapListValidateBeforeCall(expression, managed, name, objectField, ordering, page, pageSize, pmUuid, search, null);
        Type localVarReturnType = new TypeToken<PaginatedLDAPPropertyMappingList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * LDAP PropertyMapping Viewset
     * @param expression  (optional)
     * @param managed  (optional)
     * @param name  (optional)
     * @param objectField  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param pmUuid  (optional)
     * @param search A search term. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsLdapListAsync(String expression, List<String> managed, String name, String objectField, String ordering, Integer page, Integer pageSize, UUID pmUuid, String search, final ApiCallback<PaginatedLDAPPropertyMappingList> _callback) throws ApiException {

        okhttp3.Call localVarCall = propertymappingsLdapListValidateBeforeCall(expression, managed, name, objectField, ordering, page, pageSize, pmUuid, search, _callback);
        Type localVarReturnType = new TypeToken<PaginatedLDAPPropertyMappingList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for propertymappingsLdapPartialUpdate
     * @param pmUuid A UUID string identifying this LDAP Property Mapping. (required)
     * @param patchedLDAPPropertyMappingRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsLdapPartialUpdateCall(UUID pmUuid, PatchedLDAPPropertyMappingRequest patchedLDAPPropertyMappingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchedLDAPPropertyMappingRequest;

        // create path and map variables
        String localVarPath = "/propertymappings/ldap/{pm_uuid}/"
            .replace("{" + "pm_uuid" + "}", localVarApiClient.escapeString(pmUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call propertymappingsLdapPartialUpdateValidateBeforeCall(UUID pmUuid, PatchedLDAPPropertyMappingRequest patchedLDAPPropertyMappingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pmUuid' is set
        if (pmUuid == null) {
            throw new ApiException("Missing the required parameter 'pmUuid' when calling propertymappingsLdapPartialUpdate(Async)");
        }

        return propertymappingsLdapPartialUpdateCall(pmUuid, patchedLDAPPropertyMappingRequest, _callback);

    }

    /**
     * 
     * LDAP PropertyMapping Viewset
     * @param pmUuid A UUID string identifying this LDAP Property Mapping. (required)
     * @param patchedLDAPPropertyMappingRequest  (optional)
     * @return LDAPPropertyMapping
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public LDAPPropertyMapping propertymappingsLdapPartialUpdate(UUID pmUuid, PatchedLDAPPropertyMappingRequest patchedLDAPPropertyMappingRequest) throws ApiException {
        ApiResponse<LDAPPropertyMapping> localVarResp = propertymappingsLdapPartialUpdateWithHttpInfo(pmUuid, patchedLDAPPropertyMappingRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * LDAP PropertyMapping Viewset
     * @param pmUuid A UUID string identifying this LDAP Property Mapping. (required)
     * @param patchedLDAPPropertyMappingRequest  (optional)
     * @return ApiResponse&lt;LDAPPropertyMapping&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LDAPPropertyMapping> propertymappingsLdapPartialUpdateWithHttpInfo(UUID pmUuid, PatchedLDAPPropertyMappingRequest patchedLDAPPropertyMappingRequest) throws ApiException {
        okhttp3.Call localVarCall = propertymappingsLdapPartialUpdateValidateBeforeCall(pmUuid, patchedLDAPPropertyMappingRequest, null);
        Type localVarReturnType = new TypeToken<LDAPPropertyMapping>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * LDAP PropertyMapping Viewset
     * @param pmUuid A UUID string identifying this LDAP Property Mapping. (required)
     * @param patchedLDAPPropertyMappingRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsLdapPartialUpdateAsync(UUID pmUuid, PatchedLDAPPropertyMappingRequest patchedLDAPPropertyMappingRequest, final ApiCallback<LDAPPropertyMapping> _callback) throws ApiException {

        okhttp3.Call localVarCall = propertymappingsLdapPartialUpdateValidateBeforeCall(pmUuid, patchedLDAPPropertyMappingRequest, _callback);
        Type localVarReturnType = new TypeToken<LDAPPropertyMapping>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for propertymappingsLdapRetrieve
     * @param pmUuid A UUID string identifying this LDAP Property Mapping. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsLdapRetrieveCall(UUID pmUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/propertymappings/ldap/{pm_uuid}/"
            .replace("{" + "pm_uuid" + "}", localVarApiClient.escapeString(pmUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call propertymappingsLdapRetrieveValidateBeforeCall(UUID pmUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pmUuid' is set
        if (pmUuid == null) {
            throw new ApiException("Missing the required parameter 'pmUuid' when calling propertymappingsLdapRetrieve(Async)");
        }

        return propertymappingsLdapRetrieveCall(pmUuid, _callback);

    }

    /**
     * 
     * LDAP PropertyMapping Viewset
     * @param pmUuid A UUID string identifying this LDAP Property Mapping. (required)
     * @return LDAPPropertyMapping
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public LDAPPropertyMapping propertymappingsLdapRetrieve(UUID pmUuid) throws ApiException {
        ApiResponse<LDAPPropertyMapping> localVarResp = propertymappingsLdapRetrieveWithHttpInfo(pmUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * LDAP PropertyMapping Viewset
     * @param pmUuid A UUID string identifying this LDAP Property Mapping. (required)
     * @return ApiResponse&lt;LDAPPropertyMapping&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LDAPPropertyMapping> propertymappingsLdapRetrieveWithHttpInfo(UUID pmUuid) throws ApiException {
        okhttp3.Call localVarCall = propertymappingsLdapRetrieveValidateBeforeCall(pmUuid, null);
        Type localVarReturnType = new TypeToken<LDAPPropertyMapping>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * LDAP PropertyMapping Viewset
     * @param pmUuid A UUID string identifying this LDAP Property Mapping. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsLdapRetrieveAsync(UUID pmUuid, final ApiCallback<LDAPPropertyMapping> _callback) throws ApiException {

        okhttp3.Call localVarCall = propertymappingsLdapRetrieveValidateBeforeCall(pmUuid, _callback);
        Type localVarReturnType = new TypeToken<LDAPPropertyMapping>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for propertymappingsLdapUpdate
     * @param pmUuid A UUID string identifying this LDAP Property Mapping. (required)
     * @param ldAPPropertyMappingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsLdapUpdateCall(UUID pmUuid, LDAPPropertyMappingRequest ldAPPropertyMappingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ldAPPropertyMappingRequest;

        // create path and map variables
        String localVarPath = "/propertymappings/ldap/{pm_uuid}/"
            .replace("{" + "pm_uuid" + "}", localVarApiClient.escapeString(pmUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call propertymappingsLdapUpdateValidateBeforeCall(UUID pmUuid, LDAPPropertyMappingRequest ldAPPropertyMappingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pmUuid' is set
        if (pmUuid == null) {
            throw new ApiException("Missing the required parameter 'pmUuid' when calling propertymappingsLdapUpdate(Async)");
        }

        // verify the required parameter 'ldAPPropertyMappingRequest' is set
        if (ldAPPropertyMappingRequest == null) {
            throw new ApiException("Missing the required parameter 'ldAPPropertyMappingRequest' when calling propertymappingsLdapUpdate(Async)");
        }

        return propertymappingsLdapUpdateCall(pmUuid, ldAPPropertyMappingRequest, _callback);

    }

    /**
     * 
     * LDAP PropertyMapping Viewset
     * @param pmUuid A UUID string identifying this LDAP Property Mapping. (required)
     * @param ldAPPropertyMappingRequest  (required)
     * @return LDAPPropertyMapping
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public LDAPPropertyMapping propertymappingsLdapUpdate(UUID pmUuid, LDAPPropertyMappingRequest ldAPPropertyMappingRequest) throws ApiException {
        ApiResponse<LDAPPropertyMapping> localVarResp = propertymappingsLdapUpdateWithHttpInfo(pmUuid, ldAPPropertyMappingRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * LDAP PropertyMapping Viewset
     * @param pmUuid A UUID string identifying this LDAP Property Mapping. (required)
     * @param ldAPPropertyMappingRequest  (required)
     * @return ApiResponse&lt;LDAPPropertyMapping&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LDAPPropertyMapping> propertymappingsLdapUpdateWithHttpInfo(UUID pmUuid, LDAPPropertyMappingRequest ldAPPropertyMappingRequest) throws ApiException {
        okhttp3.Call localVarCall = propertymappingsLdapUpdateValidateBeforeCall(pmUuid, ldAPPropertyMappingRequest, null);
        Type localVarReturnType = new TypeToken<LDAPPropertyMapping>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * LDAP PropertyMapping Viewset
     * @param pmUuid A UUID string identifying this LDAP Property Mapping. (required)
     * @param ldAPPropertyMappingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsLdapUpdateAsync(UUID pmUuid, LDAPPropertyMappingRequest ldAPPropertyMappingRequest, final ApiCallback<LDAPPropertyMapping> _callback) throws ApiException {

        okhttp3.Call localVarCall = propertymappingsLdapUpdateValidateBeforeCall(pmUuid, ldAPPropertyMappingRequest, _callback);
        Type localVarReturnType = new TypeToken<LDAPPropertyMapping>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for propertymappingsLdapUsedByList
     * @param pmUuid A UUID string identifying this LDAP Property Mapping. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsLdapUsedByListCall(UUID pmUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/propertymappings/ldap/{pm_uuid}/used_by/"
            .replace("{" + "pm_uuid" + "}", localVarApiClient.escapeString(pmUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call propertymappingsLdapUsedByListValidateBeforeCall(UUID pmUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pmUuid' is set
        if (pmUuid == null) {
            throw new ApiException("Missing the required parameter 'pmUuid' when calling propertymappingsLdapUsedByList(Async)");
        }

        return propertymappingsLdapUsedByListCall(pmUuid, _callback);

    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param pmUuid A UUID string identifying this LDAP Property Mapping. (required)
     * @return List&lt;UsedBy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<UsedBy> propertymappingsLdapUsedByList(UUID pmUuid) throws ApiException {
        ApiResponse<List<UsedBy>> localVarResp = propertymappingsLdapUsedByListWithHttpInfo(pmUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param pmUuid A UUID string identifying this LDAP Property Mapping. (required)
     * @return ApiResponse&lt;List&lt;UsedBy&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UsedBy>> propertymappingsLdapUsedByListWithHttpInfo(UUID pmUuid) throws ApiException {
        okhttp3.Call localVarCall = propertymappingsLdapUsedByListValidateBeforeCall(pmUuid, null);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of all objects that use this object
     * @param pmUuid A UUID string identifying this LDAP Property Mapping. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsLdapUsedByListAsync(UUID pmUuid, final ApiCallback<List<UsedBy>> _callback) throws ApiException {

        okhttp3.Call localVarCall = propertymappingsLdapUsedByListValidateBeforeCall(pmUuid, _callback);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for propertymappingsNotificationCreate
     * @param notificationWebhookMappingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsNotificationCreateCall(NotificationWebhookMappingRequest notificationWebhookMappingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = notificationWebhookMappingRequest;

        // create path and map variables
        String localVarPath = "/propertymappings/notification/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call propertymappingsNotificationCreateValidateBeforeCall(NotificationWebhookMappingRequest notificationWebhookMappingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'notificationWebhookMappingRequest' is set
        if (notificationWebhookMappingRequest == null) {
            throw new ApiException("Missing the required parameter 'notificationWebhookMappingRequest' when calling propertymappingsNotificationCreate(Async)");
        }

        return propertymappingsNotificationCreateCall(notificationWebhookMappingRequest, _callback);

    }

    /**
     * 
     * NotificationWebhookMapping Viewset
     * @param notificationWebhookMappingRequest  (required)
     * @return NotificationWebhookMapping
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public NotificationWebhookMapping propertymappingsNotificationCreate(NotificationWebhookMappingRequest notificationWebhookMappingRequest) throws ApiException {
        ApiResponse<NotificationWebhookMapping> localVarResp = propertymappingsNotificationCreateWithHttpInfo(notificationWebhookMappingRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * NotificationWebhookMapping Viewset
     * @param notificationWebhookMappingRequest  (required)
     * @return ApiResponse&lt;NotificationWebhookMapping&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NotificationWebhookMapping> propertymappingsNotificationCreateWithHttpInfo(NotificationWebhookMappingRequest notificationWebhookMappingRequest) throws ApiException {
        okhttp3.Call localVarCall = propertymappingsNotificationCreateValidateBeforeCall(notificationWebhookMappingRequest, null);
        Type localVarReturnType = new TypeToken<NotificationWebhookMapping>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * NotificationWebhookMapping Viewset
     * @param notificationWebhookMappingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsNotificationCreateAsync(NotificationWebhookMappingRequest notificationWebhookMappingRequest, final ApiCallback<NotificationWebhookMapping> _callback) throws ApiException {

        okhttp3.Call localVarCall = propertymappingsNotificationCreateValidateBeforeCall(notificationWebhookMappingRequest, _callback);
        Type localVarReturnType = new TypeToken<NotificationWebhookMapping>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for propertymappingsNotificationDestroy
     * @param pmUuid A UUID string identifying this Webhook Mapping. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsNotificationDestroyCall(UUID pmUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/propertymappings/notification/{pm_uuid}/"
            .replace("{" + "pm_uuid" + "}", localVarApiClient.escapeString(pmUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call propertymappingsNotificationDestroyValidateBeforeCall(UUID pmUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pmUuid' is set
        if (pmUuid == null) {
            throw new ApiException("Missing the required parameter 'pmUuid' when calling propertymappingsNotificationDestroy(Async)");
        }

        return propertymappingsNotificationDestroyCall(pmUuid, _callback);

    }

    /**
     * 
     * NotificationWebhookMapping Viewset
     * @param pmUuid A UUID string identifying this Webhook Mapping. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void propertymappingsNotificationDestroy(UUID pmUuid) throws ApiException {
        propertymappingsNotificationDestroyWithHttpInfo(pmUuid);
    }

    /**
     * 
     * NotificationWebhookMapping Viewset
     * @param pmUuid A UUID string identifying this Webhook Mapping. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> propertymappingsNotificationDestroyWithHttpInfo(UUID pmUuid) throws ApiException {
        okhttp3.Call localVarCall = propertymappingsNotificationDestroyValidateBeforeCall(pmUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * NotificationWebhookMapping Viewset
     * @param pmUuid A UUID string identifying this Webhook Mapping. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsNotificationDestroyAsync(UUID pmUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = propertymappingsNotificationDestroyValidateBeforeCall(pmUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for propertymappingsNotificationList
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsNotificationListCall(String name, String ordering, Integer page, Integer pageSize, String search, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/propertymappings/notification/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call propertymappingsNotificationListValidateBeforeCall(String name, String ordering, Integer page, Integer pageSize, String search, final ApiCallback _callback) throws ApiException {
        return propertymappingsNotificationListCall(name, ordering, page, pageSize, search, _callback);

    }

    /**
     * 
     * NotificationWebhookMapping Viewset
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @return PaginatedNotificationWebhookMappingList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedNotificationWebhookMappingList propertymappingsNotificationList(String name, String ordering, Integer page, Integer pageSize, String search) throws ApiException {
        ApiResponse<PaginatedNotificationWebhookMappingList> localVarResp = propertymappingsNotificationListWithHttpInfo(name, ordering, page, pageSize, search);
        return localVarResp.getData();
    }

    /**
     * 
     * NotificationWebhookMapping Viewset
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @return ApiResponse&lt;PaginatedNotificationWebhookMappingList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedNotificationWebhookMappingList> propertymappingsNotificationListWithHttpInfo(String name, String ordering, Integer page, Integer pageSize, String search) throws ApiException {
        okhttp3.Call localVarCall = propertymappingsNotificationListValidateBeforeCall(name, ordering, page, pageSize, search, null);
        Type localVarReturnType = new TypeToken<PaginatedNotificationWebhookMappingList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * NotificationWebhookMapping Viewset
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsNotificationListAsync(String name, String ordering, Integer page, Integer pageSize, String search, final ApiCallback<PaginatedNotificationWebhookMappingList> _callback) throws ApiException {

        okhttp3.Call localVarCall = propertymappingsNotificationListValidateBeforeCall(name, ordering, page, pageSize, search, _callback);
        Type localVarReturnType = new TypeToken<PaginatedNotificationWebhookMappingList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for propertymappingsNotificationPartialUpdate
     * @param pmUuid A UUID string identifying this Webhook Mapping. (required)
     * @param patchedNotificationWebhookMappingRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsNotificationPartialUpdateCall(UUID pmUuid, PatchedNotificationWebhookMappingRequest patchedNotificationWebhookMappingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchedNotificationWebhookMappingRequest;

        // create path and map variables
        String localVarPath = "/propertymappings/notification/{pm_uuid}/"
            .replace("{" + "pm_uuid" + "}", localVarApiClient.escapeString(pmUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call propertymappingsNotificationPartialUpdateValidateBeforeCall(UUID pmUuid, PatchedNotificationWebhookMappingRequest patchedNotificationWebhookMappingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pmUuid' is set
        if (pmUuid == null) {
            throw new ApiException("Missing the required parameter 'pmUuid' when calling propertymappingsNotificationPartialUpdate(Async)");
        }

        return propertymappingsNotificationPartialUpdateCall(pmUuid, patchedNotificationWebhookMappingRequest, _callback);

    }

    /**
     * 
     * NotificationWebhookMapping Viewset
     * @param pmUuid A UUID string identifying this Webhook Mapping. (required)
     * @param patchedNotificationWebhookMappingRequest  (optional)
     * @return NotificationWebhookMapping
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public NotificationWebhookMapping propertymappingsNotificationPartialUpdate(UUID pmUuid, PatchedNotificationWebhookMappingRequest patchedNotificationWebhookMappingRequest) throws ApiException {
        ApiResponse<NotificationWebhookMapping> localVarResp = propertymappingsNotificationPartialUpdateWithHttpInfo(pmUuid, patchedNotificationWebhookMappingRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * NotificationWebhookMapping Viewset
     * @param pmUuid A UUID string identifying this Webhook Mapping. (required)
     * @param patchedNotificationWebhookMappingRequest  (optional)
     * @return ApiResponse&lt;NotificationWebhookMapping&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NotificationWebhookMapping> propertymappingsNotificationPartialUpdateWithHttpInfo(UUID pmUuid, PatchedNotificationWebhookMappingRequest patchedNotificationWebhookMappingRequest) throws ApiException {
        okhttp3.Call localVarCall = propertymappingsNotificationPartialUpdateValidateBeforeCall(pmUuid, patchedNotificationWebhookMappingRequest, null);
        Type localVarReturnType = new TypeToken<NotificationWebhookMapping>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * NotificationWebhookMapping Viewset
     * @param pmUuid A UUID string identifying this Webhook Mapping. (required)
     * @param patchedNotificationWebhookMappingRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsNotificationPartialUpdateAsync(UUID pmUuid, PatchedNotificationWebhookMappingRequest patchedNotificationWebhookMappingRequest, final ApiCallback<NotificationWebhookMapping> _callback) throws ApiException {

        okhttp3.Call localVarCall = propertymappingsNotificationPartialUpdateValidateBeforeCall(pmUuid, patchedNotificationWebhookMappingRequest, _callback);
        Type localVarReturnType = new TypeToken<NotificationWebhookMapping>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for propertymappingsNotificationRetrieve
     * @param pmUuid A UUID string identifying this Webhook Mapping. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsNotificationRetrieveCall(UUID pmUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/propertymappings/notification/{pm_uuid}/"
            .replace("{" + "pm_uuid" + "}", localVarApiClient.escapeString(pmUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call propertymappingsNotificationRetrieveValidateBeforeCall(UUID pmUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pmUuid' is set
        if (pmUuid == null) {
            throw new ApiException("Missing the required parameter 'pmUuid' when calling propertymappingsNotificationRetrieve(Async)");
        }

        return propertymappingsNotificationRetrieveCall(pmUuid, _callback);

    }

    /**
     * 
     * NotificationWebhookMapping Viewset
     * @param pmUuid A UUID string identifying this Webhook Mapping. (required)
     * @return NotificationWebhookMapping
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public NotificationWebhookMapping propertymappingsNotificationRetrieve(UUID pmUuid) throws ApiException {
        ApiResponse<NotificationWebhookMapping> localVarResp = propertymappingsNotificationRetrieveWithHttpInfo(pmUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * NotificationWebhookMapping Viewset
     * @param pmUuid A UUID string identifying this Webhook Mapping. (required)
     * @return ApiResponse&lt;NotificationWebhookMapping&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NotificationWebhookMapping> propertymappingsNotificationRetrieveWithHttpInfo(UUID pmUuid) throws ApiException {
        okhttp3.Call localVarCall = propertymappingsNotificationRetrieveValidateBeforeCall(pmUuid, null);
        Type localVarReturnType = new TypeToken<NotificationWebhookMapping>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * NotificationWebhookMapping Viewset
     * @param pmUuid A UUID string identifying this Webhook Mapping. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsNotificationRetrieveAsync(UUID pmUuid, final ApiCallback<NotificationWebhookMapping> _callback) throws ApiException {

        okhttp3.Call localVarCall = propertymappingsNotificationRetrieveValidateBeforeCall(pmUuid, _callback);
        Type localVarReturnType = new TypeToken<NotificationWebhookMapping>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for propertymappingsNotificationUpdate
     * @param pmUuid A UUID string identifying this Webhook Mapping. (required)
     * @param notificationWebhookMappingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsNotificationUpdateCall(UUID pmUuid, NotificationWebhookMappingRequest notificationWebhookMappingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = notificationWebhookMappingRequest;

        // create path and map variables
        String localVarPath = "/propertymappings/notification/{pm_uuid}/"
            .replace("{" + "pm_uuid" + "}", localVarApiClient.escapeString(pmUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call propertymappingsNotificationUpdateValidateBeforeCall(UUID pmUuid, NotificationWebhookMappingRequest notificationWebhookMappingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pmUuid' is set
        if (pmUuid == null) {
            throw new ApiException("Missing the required parameter 'pmUuid' when calling propertymappingsNotificationUpdate(Async)");
        }

        // verify the required parameter 'notificationWebhookMappingRequest' is set
        if (notificationWebhookMappingRequest == null) {
            throw new ApiException("Missing the required parameter 'notificationWebhookMappingRequest' when calling propertymappingsNotificationUpdate(Async)");
        }

        return propertymappingsNotificationUpdateCall(pmUuid, notificationWebhookMappingRequest, _callback);

    }

    /**
     * 
     * NotificationWebhookMapping Viewset
     * @param pmUuid A UUID string identifying this Webhook Mapping. (required)
     * @param notificationWebhookMappingRequest  (required)
     * @return NotificationWebhookMapping
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public NotificationWebhookMapping propertymappingsNotificationUpdate(UUID pmUuid, NotificationWebhookMappingRequest notificationWebhookMappingRequest) throws ApiException {
        ApiResponse<NotificationWebhookMapping> localVarResp = propertymappingsNotificationUpdateWithHttpInfo(pmUuid, notificationWebhookMappingRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * NotificationWebhookMapping Viewset
     * @param pmUuid A UUID string identifying this Webhook Mapping. (required)
     * @param notificationWebhookMappingRequest  (required)
     * @return ApiResponse&lt;NotificationWebhookMapping&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NotificationWebhookMapping> propertymappingsNotificationUpdateWithHttpInfo(UUID pmUuid, NotificationWebhookMappingRequest notificationWebhookMappingRequest) throws ApiException {
        okhttp3.Call localVarCall = propertymappingsNotificationUpdateValidateBeforeCall(pmUuid, notificationWebhookMappingRequest, null);
        Type localVarReturnType = new TypeToken<NotificationWebhookMapping>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * NotificationWebhookMapping Viewset
     * @param pmUuid A UUID string identifying this Webhook Mapping. (required)
     * @param notificationWebhookMappingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsNotificationUpdateAsync(UUID pmUuid, NotificationWebhookMappingRequest notificationWebhookMappingRequest, final ApiCallback<NotificationWebhookMapping> _callback) throws ApiException {

        okhttp3.Call localVarCall = propertymappingsNotificationUpdateValidateBeforeCall(pmUuid, notificationWebhookMappingRequest, _callback);
        Type localVarReturnType = new TypeToken<NotificationWebhookMapping>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for propertymappingsNotificationUsedByList
     * @param pmUuid A UUID string identifying this Webhook Mapping. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsNotificationUsedByListCall(UUID pmUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/propertymappings/notification/{pm_uuid}/used_by/"
            .replace("{" + "pm_uuid" + "}", localVarApiClient.escapeString(pmUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call propertymappingsNotificationUsedByListValidateBeforeCall(UUID pmUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pmUuid' is set
        if (pmUuid == null) {
            throw new ApiException("Missing the required parameter 'pmUuid' when calling propertymappingsNotificationUsedByList(Async)");
        }

        return propertymappingsNotificationUsedByListCall(pmUuid, _callback);

    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param pmUuid A UUID string identifying this Webhook Mapping. (required)
     * @return List&lt;UsedBy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<UsedBy> propertymappingsNotificationUsedByList(UUID pmUuid) throws ApiException {
        ApiResponse<List<UsedBy>> localVarResp = propertymappingsNotificationUsedByListWithHttpInfo(pmUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param pmUuid A UUID string identifying this Webhook Mapping. (required)
     * @return ApiResponse&lt;List&lt;UsedBy&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UsedBy>> propertymappingsNotificationUsedByListWithHttpInfo(UUID pmUuid) throws ApiException {
        okhttp3.Call localVarCall = propertymappingsNotificationUsedByListValidateBeforeCall(pmUuid, null);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of all objects that use this object
     * @param pmUuid A UUID string identifying this Webhook Mapping. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsNotificationUsedByListAsync(UUID pmUuid, final ApiCallback<List<UsedBy>> _callback) throws ApiException {

        okhttp3.Call localVarCall = propertymappingsNotificationUsedByListValidateBeforeCall(pmUuid, _callback);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for propertymappingsProviderGoogleWorkspaceCreate
     * @param googleWorkspaceProviderMappingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsProviderGoogleWorkspaceCreateCall(GoogleWorkspaceProviderMappingRequest googleWorkspaceProviderMappingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = googleWorkspaceProviderMappingRequest;

        // create path and map variables
        String localVarPath = "/propertymappings/provider/google_workspace/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call propertymappingsProviderGoogleWorkspaceCreateValidateBeforeCall(GoogleWorkspaceProviderMappingRequest googleWorkspaceProviderMappingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'googleWorkspaceProviderMappingRequest' is set
        if (googleWorkspaceProviderMappingRequest == null) {
            throw new ApiException("Missing the required parameter 'googleWorkspaceProviderMappingRequest' when calling propertymappingsProviderGoogleWorkspaceCreate(Async)");
        }

        return propertymappingsProviderGoogleWorkspaceCreateCall(googleWorkspaceProviderMappingRequest, _callback);

    }

    /**
     * 
     * GoogleWorkspaceProviderMapping Viewset
     * @param googleWorkspaceProviderMappingRequest  (required)
     * @return GoogleWorkspaceProviderMapping
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GoogleWorkspaceProviderMapping propertymappingsProviderGoogleWorkspaceCreate(GoogleWorkspaceProviderMappingRequest googleWorkspaceProviderMappingRequest) throws ApiException {
        ApiResponse<GoogleWorkspaceProviderMapping> localVarResp = propertymappingsProviderGoogleWorkspaceCreateWithHttpInfo(googleWorkspaceProviderMappingRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * GoogleWorkspaceProviderMapping Viewset
     * @param googleWorkspaceProviderMappingRequest  (required)
     * @return ApiResponse&lt;GoogleWorkspaceProviderMapping&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GoogleWorkspaceProviderMapping> propertymappingsProviderGoogleWorkspaceCreateWithHttpInfo(GoogleWorkspaceProviderMappingRequest googleWorkspaceProviderMappingRequest) throws ApiException {
        okhttp3.Call localVarCall = propertymappingsProviderGoogleWorkspaceCreateValidateBeforeCall(googleWorkspaceProviderMappingRequest, null);
        Type localVarReturnType = new TypeToken<GoogleWorkspaceProviderMapping>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * GoogleWorkspaceProviderMapping Viewset
     * @param googleWorkspaceProviderMappingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsProviderGoogleWorkspaceCreateAsync(GoogleWorkspaceProviderMappingRequest googleWorkspaceProviderMappingRequest, final ApiCallback<GoogleWorkspaceProviderMapping> _callback) throws ApiException {

        okhttp3.Call localVarCall = propertymappingsProviderGoogleWorkspaceCreateValidateBeforeCall(googleWorkspaceProviderMappingRequest, _callback);
        Type localVarReturnType = new TypeToken<GoogleWorkspaceProviderMapping>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for propertymappingsProviderGoogleWorkspaceDestroy
     * @param pmUuid A UUID string identifying this Google Workspace Provider Mapping. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsProviderGoogleWorkspaceDestroyCall(UUID pmUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/propertymappings/provider/google_workspace/{pm_uuid}/"
            .replace("{" + "pm_uuid" + "}", localVarApiClient.escapeString(pmUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call propertymappingsProviderGoogleWorkspaceDestroyValidateBeforeCall(UUID pmUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pmUuid' is set
        if (pmUuid == null) {
            throw new ApiException("Missing the required parameter 'pmUuid' when calling propertymappingsProviderGoogleWorkspaceDestroy(Async)");
        }

        return propertymappingsProviderGoogleWorkspaceDestroyCall(pmUuid, _callback);

    }

    /**
     * 
     * GoogleWorkspaceProviderMapping Viewset
     * @param pmUuid A UUID string identifying this Google Workspace Provider Mapping. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void propertymappingsProviderGoogleWorkspaceDestroy(UUID pmUuid) throws ApiException {
        propertymappingsProviderGoogleWorkspaceDestroyWithHttpInfo(pmUuid);
    }

    /**
     * 
     * GoogleWorkspaceProviderMapping Viewset
     * @param pmUuid A UUID string identifying this Google Workspace Provider Mapping. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> propertymappingsProviderGoogleWorkspaceDestroyWithHttpInfo(UUID pmUuid) throws ApiException {
        okhttp3.Call localVarCall = propertymappingsProviderGoogleWorkspaceDestroyValidateBeforeCall(pmUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * GoogleWorkspaceProviderMapping Viewset
     * @param pmUuid A UUID string identifying this Google Workspace Provider Mapping. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsProviderGoogleWorkspaceDestroyAsync(UUID pmUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = propertymappingsProviderGoogleWorkspaceDestroyValidateBeforeCall(pmUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for propertymappingsProviderGoogleWorkspaceList
     * @param expression  (optional)
     * @param managed  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param pmUuid  (optional)
     * @param search A search term. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsProviderGoogleWorkspaceListCall(String expression, List<String> managed, String name, String ordering, Integer page, Integer pageSize, UUID pmUuid, String search, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/propertymappings/provider/google_workspace/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expression != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expression", expression));
        }

        if (managed != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "managed", managed));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (pmUuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pm_uuid", pmUuid));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call propertymappingsProviderGoogleWorkspaceListValidateBeforeCall(String expression, List<String> managed, String name, String ordering, Integer page, Integer pageSize, UUID pmUuid, String search, final ApiCallback _callback) throws ApiException {
        return propertymappingsProviderGoogleWorkspaceListCall(expression, managed, name, ordering, page, pageSize, pmUuid, search, _callback);

    }

    /**
     * 
     * GoogleWorkspaceProviderMapping Viewset
     * @param expression  (optional)
     * @param managed  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param pmUuid  (optional)
     * @param search A search term. (optional)
     * @return PaginatedGoogleWorkspaceProviderMappingList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedGoogleWorkspaceProviderMappingList propertymappingsProviderGoogleWorkspaceList(String expression, List<String> managed, String name, String ordering, Integer page, Integer pageSize, UUID pmUuid, String search) throws ApiException {
        ApiResponse<PaginatedGoogleWorkspaceProviderMappingList> localVarResp = propertymappingsProviderGoogleWorkspaceListWithHttpInfo(expression, managed, name, ordering, page, pageSize, pmUuid, search);
        return localVarResp.getData();
    }

    /**
     * 
     * GoogleWorkspaceProviderMapping Viewset
     * @param expression  (optional)
     * @param managed  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param pmUuid  (optional)
     * @param search A search term. (optional)
     * @return ApiResponse&lt;PaginatedGoogleWorkspaceProviderMappingList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedGoogleWorkspaceProviderMappingList> propertymappingsProviderGoogleWorkspaceListWithHttpInfo(String expression, List<String> managed, String name, String ordering, Integer page, Integer pageSize, UUID pmUuid, String search) throws ApiException {
        okhttp3.Call localVarCall = propertymappingsProviderGoogleWorkspaceListValidateBeforeCall(expression, managed, name, ordering, page, pageSize, pmUuid, search, null);
        Type localVarReturnType = new TypeToken<PaginatedGoogleWorkspaceProviderMappingList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * GoogleWorkspaceProviderMapping Viewset
     * @param expression  (optional)
     * @param managed  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param pmUuid  (optional)
     * @param search A search term. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsProviderGoogleWorkspaceListAsync(String expression, List<String> managed, String name, String ordering, Integer page, Integer pageSize, UUID pmUuid, String search, final ApiCallback<PaginatedGoogleWorkspaceProviderMappingList> _callback) throws ApiException {

        okhttp3.Call localVarCall = propertymappingsProviderGoogleWorkspaceListValidateBeforeCall(expression, managed, name, ordering, page, pageSize, pmUuid, search, _callback);
        Type localVarReturnType = new TypeToken<PaginatedGoogleWorkspaceProviderMappingList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for propertymappingsProviderGoogleWorkspacePartialUpdate
     * @param pmUuid A UUID string identifying this Google Workspace Provider Mapping. (required)
     * @param patchedGoogleWorkspaceProviderMappingRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsProviderGoogleWorkspacePartialUpdateCall(UUID pmUuid, PatchedGoogleWorkspaceProviderMappingRequest patchedGoogleWorkspaceProviderMappingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchedGoogleWorkspaceProviderMappingRequest;

        // create path and map variables
        String localVarPath = "/propertymappings/provider/google_workspace/{pm_uuid}/"
            .replace("{" + "pm_uuid" + "}", localVarApiClient.escapeString(pmUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call propertymappingsProviderGoogleWorkspacePartialUpdateValidateBeforeCall(UUID pmUuid, PatchedGoogleWorkspaceProviderMappingRequest patchedGoogleWorkspaceProviderMappingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pmUuid' is set
        if (pmUuid == null) {
            throw new ApiException("Missing the required parameter 'pmUuid' when calling propertymappingsProviderGoogleWorkspacePartialUpdate(Async)");
        }

        return propertymappingsProviderGoogleWorkspacePartialUpdateCall(pmUuid, patchedGoogleWorkspaceProviderMappingRequest, _callback);

    }

    /**
     * 
     * GoogleWorkspaceProviderMapping Viewset
     * @param pmUuid A UUID string identifying this Google Workspace Provider Mapping. (required)
     * @param patchedGoogleWorkspaceProviderMappingRequest  (optional)
     * @return GoogleWorkspaceProviderMapping
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GoogleWorkspaceProviderMapping propertymappingsProviderGoogleWorkspacePartialUpdate(UUID pmUuid, PatchedGoogleWorkspaceProviderMappingRequest patchedGoogleWorkspaceProviderMappingRequest) throws ApiException {
        ApiResponse<GoogleWorkspaceProviderMapping> localVarResp = propertymappingsProviderGoogleWorkspacePartialUpdateWithHttpInfo(pmUuid, patchedGoogleWorkspaceProviderMappingRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * GoogleWorkspaceProviderMapping Viewset
     * @param pmUuid A UUID string identifying this Google Workspace Provider Mapping. (required)
     * @param patchedGoogleWorkspaceProviderMappingRequest  (optional)
     * @return ApiResponse&lt;GoogleWorkspaceProviderMapping&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GoogleWorkspaceProviderMapping> propertymappingsProviderGoogleWorkspacePartialUpdateWithHttpInfo(UUID pmUuid, PatchedGoogleWorkspaceProviderMappingRequest patchedGoogleWorkspaceProviderMappingRequest) throws ApiException {
        okhttp3.Call localVarCall = propertymappingsProviderGoogleWorkspacePartialUpdateValidateBeforeCall(pmUuid, patchedGoogleWorkspaceProviderMappingRequest, null);
        Type localVarReturnType = new TypeToken<GoogleWorkspaceProviderMapping>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * GoogleWorkspaceProviderMapping Viewset
     * @param pmUuid A UUID string identifying this Google Workspace Provider Mapping. (required)
     * @param patchedGoogleWorkspaceProviderMappingRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsProviderGoogleWorkspacePartialUpdateAsync(UUID pmUuid, PatchedGoogleWorkspaceProviderMappingRequest patchedGoogleWorkspaceProviderMappingRequest, final ApiCallback<GoogleWorkspaceProviderMapping> _callback) throws ApiException {

        okhttp3.Call localVarCall = propertymappingsProviderGoogleWorkspacePartialUpdateValidateBeforeCall(pmUuid, patchedGoogleWorkspaceProviderMappingRequest, _callback);
        Type localVarReturnType = new TypeToken<GoogleWorkspaceProviderMapping>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for propertymappingsProviderGoogleWorkspaceRetrieve
     * @param pmUuid A UUID string identifying this Google Workspace Provider Mapping. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsProviderGoogleWorkspaceRetrieveCall(UUID pmUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/propertymappings/provider/google_workspace/{pm_uuid}/"
            .replace("{" + "pm_uuid" + "}", localVarApiClient.escapeString(pmUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call propertymappingsProviderGoogleWorkspaceRetrieveValidateBeforeCall(UUID pmUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pmUuid' is set
        if (pmUuid == null) {
            throw new ApiException("Missing the required parameter 'pmUuid' when calling propertymappingsProviderGoogleWorkspaceRetrieve(Async)");
        }

        return propertymappingsProviderGoogleWorkspaceRetrieveCall(pmUuid, _callback);

    }

    /**
     * 
     * GoogleWorkspaceProviderMapping Viewset
     * @param pmUuid A UUID string identifying this Google Workspace Provider Mapping. (required)
     * @return GoogleWorkspaceProviderMapping
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GoogleWorkspaceProviderMapping propertymappingsProviderGoogleWorkspaceRetrieve(UUID pmUuid) throws ApiException {
        ApiResponse<GoogleWorkspaceProviderMapping> localVarResp = propertymappingsProviderGoogleWorkspaceRetrieveWithHttpInfo(pmUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * GoogleWorkspaceProviderMapping Viewset
     * @param pmUuid A UUID string identifying this Google Workspace Provider Mapping. (required)
     * @return ApiResponse&lt;GoogleWorkspaceProviderMapping&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GoogleWorkspaceProviderMapping> propertymappingsProviderGoogleWorkspaceRetrieveWithHttpInfo(UUID pmUuid) throws ApiException {
        okhttp3.Call localVarCall = propertymappingsProviderGoogleWorkspaceRetrieveValidateBeforeCall(pmUuid, null);
        Type localVarReturnType = new TypeToken<GoogleWorkspaceProviderMapping>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * GoogleWorkspaceProviderMapping Viewset
     * @param pmUuid A UUID string identifying this Google Workspace Provider Mapping. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsProviderGoogleWorkspaceRetrieveAsync(UUID pmUuid, final ApiCallback<GoogleWorkspaceProviderMapping> _callback) throws ApiException {

        okhttp3.Call localVarCall = propertymappingsProviderGoogleWorkspaceRetrieveValidateBeforeCall(pmUuid, _callback);
        Type localVarReturnType = new TypeToken<GoogleWorkspaceProviderMapping>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for propertymappingsProviderGoogleWorkspaceUpdate
     * @param pmUuid A UUID string identifying this Google Workspace Provider Mapping. (required)
     * @param googleWorkspaceProviderMappingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsProviderGoogleWorkspaceUpdateCall(UUID pmUuid, GoogleWorkspaceProviderMappingRequest googleWorkspaceProviderMappingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = googleWorkspaceProviderMappingRequest;

        // create path and map variables
        String localVarPath = "/propertymappings/provider/google_workspace/{pm_uuid}/"
            .replace("{" + "pm_uuid" + "}", localVarApiClient.escapeString(pmUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call propertymappingsProviderGoogleWorkspaceUpdateValidateBeforeCall(UUID pmUuid, GoogleWorkspaceProviderMappingRequest googleWorkspaceProviderMappingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pmUuid' is set
        if (pmUuid == null) {
            throw new ApiException("Missing the required parameter 'pmUuid' when calling propertymappingsProviderGoogleWorkspaceUpdate(Async)");
        }

        // verify the required parameter 'googleWorkspaceProviderMappingRequest' is set
        if (googleWorkspaceProviderMappingRequest == null) {
            throw new ApiException("Missing the required parameter 'googleWorkspaceProviderMappingRequest' when calling propertymappingsProviderGoogleWorkspaceUpdate(Async)");
        }

        return propertymappingsProviderGoogleWorkspaceUpdateCall(pmUuid, googleWorkspaceProviderMappingRequest, _callback);

    }

    /**
     * 
     * GoogleWorkspaceProviderMapping Viewset
     * @param pmUuid A UUID string identifying this Google Workspace Provider Mapping. (required)
     * @param googleWorkspaceProviderMappingRequest  (required)
     * @return GoogleWorkspaceProviderMapping
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GoogleWorkspaceProviderMapping propertymappingsProviderGoogleWorkspaceUpdate(UUID pmUuid, GoogleWorkspaceProviderMappingRequest googleWorkspaceProviderMappingRequest) throws ApiException {
        ApiResponse<GoogleWorkspaceProviderMapping> localVarResp = propertymappingsProviderGoogleWorkspaceUpdateWithHttpInfo(pmUuid, googleWorkspaceProviderMappingRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * GoogleWorkspaceProviderMapping Viewset
     * @param pmUuid A UUID string identifying this Google Workspace Provider Mapping. (required)
     * @param googleWorkspaceProviderMappingRequest  (required)
     * @return ApiResponse&lt;GoogleWorkspaceProviderMapping&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GoogleWorkspaceProviderMapping> propertymappingsProviderGoogleWorkspaceUpdateWithHttpInfo(UUID pmUuid, GoogleWorkspaceProviderMappingRequest googleWorkspaceProviderMappingRequest) throws ApiException {
        okhttp3.Call localVarCall = propertymappingsProviderGoogleWorkspaceUpdateValidateBeforeCall(pmUuid, googleWorkspaceProviderMappingRequest, null);
        Type localVarReturnType = new TypeToken<GoogleWorkspaceProviderMapping>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * GoogleWorkspaceProviderMapping Viewset
     * @param pmUuid A UUID string identifying this Google Workspace Provider Mapping. (required)
     * @param googleWorkspaceProviderMappingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsProviderGoogleWorkspaceUpdateAsync(UUID pmUuid, GoogleWorkspaceProviderMappingRequest googleWorkspaceProviderMappingRequest, final ApiCallback<GoogleWorkspaceProviderMapping> _callback) throws ApiException {

        okhttp3.Call localVarCall = propertymappingsProviderGoogleWorkspaceUpdateValidateBeforeCall(pmUuid, googleWorkspaceProviderMappingRequest, _callback);
        Type localVarReturnType = new TypeToken<GoogleWorkspaceProviderMapping>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for propertymappingsProviderGoogleWorkspaceUsedByList
     * @param pmUuid A UUID string identifying this Google Workspace Provider Mapping. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsProviderGoogleWorkspaceUsedByListCall(UUID pmUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/propertymappings/provider/google_workspace/{pm_uuid}/used_by/"
            .replace("{" + "pm_uuid" + "}", localVarApiClient.escapeString(pmUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call propertymappingsProviderGoogleWorkspaceUsedByListValidateBeforeCall(UUID pmUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pmUuid' is set
        if (pmUuid == null) {
            throw new ApiException("Missing the required parameter 'pmUuid' when calling propertymappingsProviderGoogleWorkspaceUsedByList(Async)");
        }

        return propertymappingsProviderGoogleWorkspaceUsedByListCall(pmUuid, _callback);

    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param pmUuid A UUID string identifying this Google Workspace Provider Mapping. (required)
     * @return List&lt;UsedBy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<UsedBy> propertymappingsProviderGoogleWorkspaceUsedByList(UUID pmUuid) throws ApiException {
        ApiResponse<List<UsedBy>> localVarResp = propertymappingsProviderGoogleWorkspaceUsedByListWithHttpInfo(pmUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param pmUuid A UUID string identifying this Google Workspace Provider Mapping. (required)
     * @return ApiResponse&lt;List&lt;UsedBy&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UsedBy>> propertymappingsProviderGoogleWorkspaceUsedByListWithHttpInfo(UUID pmUuid) throws ApiException {
        okhttp3.Call localVarCall = propertymappingsProviderGoogleWorkspaceUsedByListValidateBeforeCall(pmUuid, null);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of all objects that use this object
     * @param pmUuid A UUID string identifying this Google Workspace Provider Mapping. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsProviderGoogleWorkspaceUsedByListAsync(UUID pmUuid, final ApiCallback<List<UsedBy>> _callback) throws ApiException {

        okhttp3.Call localVarCall = propertymappingsProviderGoogleWorkspaceUsedByListValidateBeforeCall(pmUuid, _callback);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for propertymappingsProviderMicrosoftEntraCreate
     * @param microsoftEntraProviderMappingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsProviderMicrosoftEntraCreateCall(MicrosoftEntraProviderMappingRequest microsoftEntraProviderMappingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = microsoftEntraProviderMappingRequest;

        // create path and map variables
        String localVarPath = "/propertymappings/provider/microsoft_entra/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call propertymappingsProviderMicrosoftEntraCreateValidateBeforeCall(MicrosoftEntraProviderMappingRequest microsoftEntraProviderMappingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'microsoftEntraProviderMappingRequest' is set
        if (microsoftEntraProviderMappingRequest == null) {
            throw new ApiException("Missing the required parameter 'microsoftEntraProviderMappingRequest' when calling propertymappingsProviderMicrosoftEntraCreate(Async)");
        }

        return propertymappingsProviderMicrosoftEntraCreateCall(microsoftEntraProviderMappingRequest, _callback);

    }

    /**
     * 
     * MicrosoftEntraProviderMapping Viewset
     * @param microsoftEntraProviderMappingRequest  (required)
     * @return MicrosoftEntraProviderMapping
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public MicrosoftEntraProviderMapping propertymappingsProviderMicrosoftEntraCreate(MicrosoftEntraProviderMappingRequest microsoftEntraProviderMappingRequest) throws ApiException {
        ApiResponse<MicrosoftEntraProviderMapping> localVarResp = propertymappingsProviderMicrosoftEntraCreateWithHttpInfo(microsoftEntraProviderMappingRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * MicrosoftEntraProviderMapping Viewset
     * @param microsoftEntraProviderMappingRequest  (required)
     * @return ApiResponse&lt;MicrosoftEntraProviderMapping&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MicrosoftEntraProviderMapping> propertymappingsProviderMicrosoftEntraCreateWithHttpInfo(MicrosoftEntraProviderMappingRequest microsoftEntraProviderMappingRequest) throws ApiException {
        okhttp3.Call localVarCall = propertymappingsProviderMicrosoftEntraCreateValidateBeforeCall(microsoftEntraProviderMappingRequest, null);
        Type localVarReturnType = new TypeToken<MicrosoftEntraProviderMapping>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * MicrosoftEntraProviderMapping Viewset
     * @param microsoftEntraProviderMappingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsProviderMicrosoftEntraCreateAsync(MicrosoftEntraProviderMappingRequest microsoftEntraProviderMappingRequest, final ApiCallback<MicrosoftEntraProviderMapping> _callback) throws ApiException {

        okhttp3.Call localVarCall = propertymappingsProviderMicrosoftEntraCreateValidateBeforeCall(microsoftEntraProviderMappingRequest, _callback);
        Type localVarReturnType = new TypeToken<MicrosoftEntraProviderMapping>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for propertymappingsProviderMicrosoftEntraDestroy
     * @param pmUuid A UUID string identifying this Microsoft Entra Provider Mapping. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsProviderMicrosoftEntraDestroyCall(UUID pmUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/propertymappings/provider/microsoft_entra/{pm_uuid}/"
            .replace("{" + "pm_uuid" + "}", localVarApiClient.escapeString(pmUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call propertymappingsProviderMicrosoftEntraDestroyValidateBeforeCall(UUID pmUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pmUuid' is set
        if (pmUuid == null) {
            throw new ApiException("Missing the required parameter 'pmUuid' when calling propertymappingsProviderMicrosoftEntraDestroy(Async)");
        }

        return propertymappingsProviderMicrosoftEntraDestroyCall(pmUuid, _callback);

    }

    /**
     * 
     * MicrosoftEntraProviderMapping Viewset
     * @param pmUuid A UUID string identifying this Microsoft Entra Provider Mapping. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void propertymappingsProviderMicrosoftEntraDestroy(UUID pmUuid) throws ApiException {
        propertymappingsProviderMicrosoftEntraDestroyWithHttpInfo(pmUuid);
    }

    /**
     * 
     * MicrosoftEntraProviderMapping Viewset
     * @param pmUuid A UUID string identifying this Microsoft Entra Provider Mapping. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> propertymappingsProviderMicrosoftEntraDestroyWithHttpInfo(UUID pmUuid) throws ApiException {
        okhttp3.Call localVarCall = propertymappingsProviderMicrosoftEntraDestroyValidateBeforeCall(pmUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * MicrosoftEntraProviderMapping Viewset
     * @param pmUuid A UUID string identifying this Microsoft Entra Provider Mapping. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsProviderMicrosoftEntraDestroyAsync(UUID pmUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = propertymappingsProviderMicrosoftEntraDestroyValidateBeforeCall(pmUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for propertymappingsProviderMicrosoftEntraList
     * @param expression  (optional)
     * @param managed  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param pmUuid  (optional)
     * @param search A search term. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsProviderMicrosoftEntraListCall(String expression, List<String> managed, String name, String ordering, Integer page, Integer pageSize, UUID pmUuid, String search, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/propertymappings/provider/microsoft_entra/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expression != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expression", expression));
        }

        if (managed != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "managed", managed));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (pmUuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pm_uuid", pmUuid));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call propertymappingsProviderMicrosoftEntraListValidateBeforeCall(String expression, List<String> managed, String name, String ordering, Integer page, Integer pageSize, UUID pmUuid, String search, final ApiCallback _callback) throws ApiException {
        return propertymappingsProviderMicrosoftEntraListCall(expression, managed, name, ordering, page, pageSize, pmUuid, search, _callback);

    }

    /**
     * 
     * MicrosoftEntraProviderMapping Viewset
     * @param expression  (optional)
     * @param managed  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param pmUuid  (optional)
     * @param search A search term. (optional)
     * @return PaginatedMicrosoftEntraProviderMappingList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedMicrosoftEntraProviderMappingList propertymappingsProviderMicrosoftEntraList(String expression, List<String> managed, String name, String ordering, Integer page, Integer pageSize, UUID pmUuid, String search) throws ApiException {
        ApiResponse<PaginatedMicrosoftEntraProviderMappingList> localVarResp = propertymappingsProviderMicrosoftEntraListWithHttpInfo(expression, managed, name, ordering, page, pageSize, pmUuid, search);
        return localVarResp.getData();
    }

    /**
     * 
     * MicrosoftEntraProviderMapping Viewset
     * @param expression  (optional)
     * @param managed  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param pmUuid  (optional)
     * @param search A search term. (optional)
     * @return ApiResponse&lt;PaginatedMicrosoftEntraProviderMappingList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedMicrosoftEntraProviderMappingList> propertymappingsProviderMicrosoftEntraListWithHttpInfo(String expression, List<String> managed, String name, String ordering, Integer page, Integer pageSize, UUID pmUuid, String search) throws ApiException {
        okhttp3.Call localVarCall = propertymappingsProviderMicrosoftEntraListValidateBeforeCall(expression, managed, name, ordering, page, pageSize, pmUuid, search, null);
        Type localVarReturnType = new TypeToken<PaginatedMicrosoftEntraProviderMappingList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * MicrosoftEntraProviderMapping Viewset
     * @param expression  (optional)
     * @param managed  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param pmUuid  (optional)
     * @param search A search term. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsProviderMicrosoftEntraListAsync(String expression, List<String> managed, String name, String ordering, Integer page, Integer pageSize, UUID pmUuid, String search, final ApiCallback<PaginatedMicrosoftEntraProviderMappingList> _callback) throws ApiException {

        okhttp3.Call localVarCall = propertymappingsProviderMicrosoftEntraListValidateBeforeCall(expression, managed, name, ordering, page, pageSize, pmUuid, search, _callback);
        Type localVarReturnType = new TypeToken<PaginatedMicrosoftEntraProviderMappingList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for propertymappingsProviderMicrosoftEntraPartialUpdate
     * @param pmUuid A UUID string identifying this Microsoft Entra Provider Mapping. (required)
     * @param patchedMicrosoftEntraProviderMappingRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsProviderMicrosoftEntraPartialUpdateCall(UUID pmUuid, PatchedMicrosoftEntraProviderMappingRequest patchedMicrosoftEntraProviderMappingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchedMicrosoftEntraProviderMappingRequest;

        // create path and map variables
        String localVarPath = "/propertymappings/provider/microsoft_entra/{pm_uuid}/"
            .replace("{" + "pm_uuid" + "}", localVarApiClient.escapeString(pmUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call propertymappingsProviderMicrosoftEntraPartialUpdateValidateBeforeCall(UUID pmUuid, PatchedMicrosoftEntraProviderMappingRequest patchedMicrosoftEntraProviderMappingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pmUuid' is set
        if (pmUuid == null) {
            throw new ApiException("Missing the required parameter 'pmUuid' when calling propertymappingsProviderMicrosoftEntraPartialUpdate(Async)");
        }

        return propertymappingsProviderMicrosoftEntraPartialUpdateCall(pmUuid, patchedMicrosoftEntraProviderMappingRequest, _callback);

    }

    /**
     * 
     * MicrosoftEntraProviderMapping Viewset
     * @param pmUuid A UUID string identifying this Microsoft Entra Provider Mapping. (required)
     * @param patchedMicrosoftEntraProviderMappingRequest  (optional)
     * @return MicrosoftEntraProviderMapping
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public MicrosoftEntraProviderMapping propertymappingsProviderMicrosoftEntraPartialUpdate(UUID pmUuid, PatchedMicrosoftEntraProviderMappingRequest patchedMicrosoftEntraProviderMappingRequest) throws ApiException {
        ApiResponse<MicrosoftEntraProviderMapping> localVarResp = propertymappingsProviderMicrosoftEntraPartialUpdateWithHttpInfo(pmUuid, patchedMicrosoftEntraProviderMappingRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * MicrosoftEntraProviderMapping Viewset
     * @param pmUuid A UUID string identifying this Microsoft Entra Provider Mapping. (required)
     * @param patchedMicrosoftEntraProviderMappingRequest  (optional)
     * @return ApiResponse&lt;MicrosoftEntraProviderMapping&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MicrosoftEntraProviderMapping> propertymappingsProviderMicrosoftEntraPartialUpdateWithHttpInfo(UUID pmUuid, PatchedMicrosoftEntraProviderMappingRequest patchedMicrosoftEntraProviderMappingRequest) throws ApiException {
        okhttp3.Call localVarCall = propertymappingsProviderMicrosoftEntraPartialUpdateValidateBeforeCall(pmUuid, patchedMicrosoftEntraProviderMappingRequest, null);
        Type localVarReturnType = new TypeToken<MicrosoftEntraProviderMapping>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * MicrosoftEntraProviderMapping Viewset
     * @param pmUuid A UUID string identifying this Microsoft Entra Provider Mapping. (required)
     * @param patchedMicrosoftEntraProviderMappingRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsProviderMicrosoftEntraPartialUpdateAsync(UUID pmUuid, PatchedMicrosoftEntraProviderMappingRequest patchedMicrosoftEntraProviderMappingRequest, final ApiCallback<MicrosoftEntraProviderMapping> _callback) throws ApiException {

        okhttp3.Call localVarCall = propertymappingsProviderMicrosoftEntraPartialUpdateValidateBeforeCall(pmUuid, patchedMicrosoftEntraProviderMappingRequest, _callback);
        Type localVarReturnType = new TypeToken<MicrosoftEntraProviderMapping>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for propertymappingsProviderMicrosoftEntraRetrieve
     * @param pmUuid A UUID string identifying this Microsoft Entra Provider Mapping. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsProviderMicrosoftEntraRetrieveCall(UUID pmUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/propertymappings/provider/microsoft_entra/{pm_uuid}/"
            .replace("{" + "pm_uuid" + "}", localVarApiClient.escapeString(pmUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call propertymappingsProviderMicrosoftEntraRetrieveValidateBeforeCall(UUID pmUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pmUuid' is set
        if (pmUuid == null) {
            throw new ApiException("Missing the required parameter 'pmUuid' when calling propertymappingsProviderMicrosoftEntraRetrieve(Async)");
        }

        return propertymappingsProviderMicrosoftEntraRetrieveCall(pmUuid, _callback);

    }

    /**
     * 
     * MicrosoftEntraProviderMapping Viewset
     * @param pmUuid A UUID string identifying this Microsoft Entra Provider Mapping. (required)
     * @return MicrosoftEntraProviderMapping
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public MicrosoftEntraProviderMapping propertymappingsProviderMicrosoftEntraRetrieve(UUID pmUuid) throws ApiException {
        ApiResponse<MicrosoftEntraProviderMapping> localVarResp = propertymappingsProviderMicrosoftEntraRetrieveWithHttpInfo(pmUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * MicrosoftEntraProviderMapping Viewset
     * @param pmUuid A UUID string identifying this Microsoft Entra Provider Mapping. (required)
     * @return ApiResponse&lt;MicrosoftEntraProviderMapping&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MicrosoftEntraProviderMapping> propertymappingsProviderMicrosoftEntraRetrieveWithHttpInfo(UUID pmUuid) throws ApiException {
        okhttp3.Call localVarCall = propertymappingsProviderMicrosoftEntraRetrieveValidateBeforeCall(pmUuid, null);
        Type localVarReturnType = new TypeToken<MicrosoftEntraProviderMapping>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * MicrosoftEntraProviderMapping Viewset
     * @param pmUuid A UUID string identifying this Microsoft Entra Provider Mapping. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsProviderMicrosoftEntraRetrieveAsync(UUID pmUuid, final ApiCallback<MicrosoftEntraProviderMapping> _callback) throws ApiException {

        okhttp3.Call localVarCall = propertymappingsProviderMicrosoftEntraRetrieveValidateBeforeCall(pmUuid, _callback);
        Type localVarReturnType = new TypeToken<MicrosoftEntraProviderMapping>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for propertymappingsProviderMicrosoftEntraUpdate
     * @param pmUuid A UUID string identifying this Microsoft Entra Provider Mapping. (required)
     * @param microsoftEntraProviderMappingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsProviderMicrosoftEntraUpdateCall(UUID pmUuid, MicrosoftEntraProviderMappingRequest microsoftEntraProviderMappingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = microsoftEntraProviderMappingRequest;

        // create path and map variables
        String localVarPath = "/propertymappings/provider/microsoft_entra/{pm_uuid}/"
            .replace("{" + "pm_uuid" + "}", localVarApiClient.escapeString(pmUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call propertymappingsProviderMicrosoftEntraUpdateValidateBeforeCall(UUID pmUuid, MicrosoftEntraProviderMappingRequest microsoftEntraProviderMappingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pmUuid' is set
        if (pmUuid == null) {
            throw new ApiException("Missing the required parameter 'pmUuid' when calling propertymappingsProviderMicrosoftEntraUpdate(Async)");
        }

        // verify the required parameter 'microsoftEntraProviderMappingRequest' is set
        if (microsoftEntraProviderMappingRequest == null) {
            throw new ApiException("Missing the required parameter 'microsoftEntraProviderMappingRequest' when calling propertymappingsProviderMicrosoftEntraUpdate(Async)");
        }

        return propertymappingsProviderMicrosoftEntraUpdateCall(pmUuid, microsoftEntraProviderMappingRequest, _callback);

    }

    /**
     * 
     * MicrosoftEntraProviderMapping Viewset
     * @param pmUuid A UUID string identifying this Microsoft Entra Provider Mapping. (required)
     * @param microsoftEntraProviderMappingRequest  (required)
     * @return MicrosoftEntraProviderMapping
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public MicrosoftEntraProviderMapping propertymappingsProviderMicrosoftEntraUpdate(UUID pmUuid, MicrosoftEntraProviderMappingRequest microsoftEntraProviderMappingRequest) throws ApiException {
        ApiResponse<MicrosoftEntraProviderMapping> localVarResp = propertymappingsProviderMicrosoftEntraUpdateWithHttpInfo(pmUuid, microsoftEntraProviderMappingRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * MicrosoftEntraProviderMapping Viewset
     * @param pmUuid A UUID string identifying this Microsoft Entra Provider Mapping. (required)
     * @param microsoftEntraProviderMappingRequest  (required)
     * @return ApiResponse&lt;MicrosoftEntraProviderMapping&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MicrosoftEntraProviderMapping> propertymappingsProviderMicrosoftEntraUpdateWithHttpInfo(UUID pmUuid, MicrosoftEntraProviderMappingRequest microsoftEntraProviderMappingRequest) throws ApiException {
        okhttp3.Call localVarCall = propertymappingsProviderMicrosoftEntraUpdateValidateBeforeCall(pmUuid, microsoftEntraProviderMappingRequest, null);
        Type localVarReturnType = new TypeToken<MicrosoftEntraProviderMapping>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * MicrosoftEntraProviderMapping Viewset
     * @param pmUuid A UUID string identifying this Microsoft Entra Provider Mapping. (required)
     * @param microsoftEntraProviderMappingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsProviderMicrosoftEntraUpdateAsync(UUID pmUuid, MicrosoftEntraProviderMappingRequest microsoftEntraProviderMappingRequest, final ApiCallback<MicrosoftEntraProviderMapping> _callback) throws ApiException {

        okhttp3.Call localVarCall = propertymappingsProviderMicrosoftEntraUpdateValidateBeforeCall(pmUuid, microsoftEntraProviderMappingRequest, _callback);
        Type localVarReturnType = new TypeToken<MicrosoftEntraProviderMapping>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for propertymappingsProviderMicrosoftEntraUsedByList
     * @param pmUuid A UUID string identifying this Microsoft Entra Provider Mapping. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsProviderMicrosoftEntraUsedByListCall(UUID pmUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/propertymappings/provider/microsoft_entra/{pm_uuid}/used_by/"
            .replace("{" + "pm_uuid" + "}", localVarApiClient.escapeString(pmUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call propertymappingsProviderMicrosoftEntraUsedByListValidateBeforeCall(UUID pmUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pmUuid' is set
        if (pmUuid == null) {
            throw new ApiException("Missing the required parameter 'pmUuid' when calling propertymappingsProviderMicrosoftEntraUsedByList(Async)");
        }

        return propertymappingsProviderMicrosoftEntraUsedByListCall(pmUuid, _callback);

    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param pmUuid A UUID string identifying this Microsoft Entra Provider Mapping. (required)
     * @return List&lt;UsedBy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<UsedBy> propertymappingsProviderMicrosoftEntraUsedByList(UUID pmUuid) throws ApiException {
        ApiResponse<List<UsedBy>> localVarResp = propertymappingsProviderMicrosoftEntraUsedByListWithHttpInfo(pmUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param pmUuid A UUID string identifying this Microsoft Entra Provider Mapping. (required)
     * @return ApiResponse&lt;List&lt;UsedBy&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UsedBy>> propertymappingsProviderMicrosoftEntraUsedByListWithHttpInfo(UUID pmUuid) throws ApiException {
        okhttp3.Call localVarCall = propertymappingsProviderMicrosoftEntraUsedByListValidateBeforeCall(pmUuid, null);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of all objects that use this object
     * @param pmUuid A UUID string identifying this Microsoft Entra Provider Mapping. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsProviderMicrosoftEntraUsedByListAsync(UUID pmUuid, final ApiCallback<List<UsedBy>> _callback) throws ApiException {

        okhttp3.Call localVarCall = propertymappingsProviderMicrosoftEntraUsedByListValidateBeforeCall(pmUuid, _callback);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for propertymappingsRacCreate
     * @param raCPropertyMappingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsRacCreateCall(RACPropertyMappingRequest raCPropertyMappingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = raCPropertyMappingRequest;

        // create path and map variables
        String localVarPath = "/propertymappings/rac/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call propertymappingsRacCreateValidateBeforeCall(RACPropertyMappingRequest raCPropertyMappingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'raCPropertyMappingRequest' is set
        if (raCPropertyMappingRequest == null) {
            throw new ApiException("Missing the required parameter 'raCPropertyMappingRequest' when calling propertymappingsRacCreate(Async)");
        }

        return propertymappingsRacCreateCall(raCPropertyMappingRequest, _callback);

    }

    /**
     * 
     * RACPropertyMapping Viewset
     * @param raCPropertyMappingRequest  (required)
     * @return RACPropertyMapping
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RACPropertyMapping propertymappingsRacCreate(RACPropertyMappingRequest raCPropertyMappingRequest) throws ApiException {
        ApiResponse<RACPropertyMapping> localVarResp = propertymappingsRacCreateWithHttpInfo(raCPropertyMappingRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * RACPropertyMapping Viewset
     * @param raCPropertyMappingRequest  (required)
     * @return ApiResponse&lt;RACPropertyMapping&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RACPropertyMapping> propertymappingsRacCreateWithHttpInfo(RACPropertyMappingRequest raCPropertyMappingRequest) throws ApiException {
        okhttp3.Call localVarCall = propertymappingsRacCreateValidateBeforeCall(raCPropertyMappingRequest, null);
        Type localVarReturnType = new TypeToken<RACPropertyMapping>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * RACPropertyMapping Viewset
     * @param raCPropertyMappingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsRacCreateAsync(RACPropertyMappingRequest raCPropertyMappingRequest, final ApiCallback<RACPropertyMapping> _callback) throws ApiException {

        okhttp3.Call localVarCall = propertymappingsRacCreateValidateBeforeCall(raCPropertyMappingRequest, _callback);
        Type localVarReturnType = new TypeToken<RACPropertyMapping>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for propertymappingsRacDestroy
     * @param pmUuid A UUID string identifying this RAC Property Mapping. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsRacDestroyCall(UUID pmUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/propertymappings/rac/{pm_uuid}/"
            .replace("{" + "pm_uuid" + "}", localVarApiClient.escapeString(pmUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call propertymappingsRacDestroyValidateBeforeCall(UUID pmUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pmUuid' is set
        if (pmUuid == null) {
            throw new ApiException("Missing the required parameter 'pmUuid' when calling propertymappingsRacDestroy(Async)");
        }

        return propertymappingsRacDestroyCall(pmUuid, _callback);

    }

    /**
     * 
     * RACPropertyMapping Viewset
     * @param pmUuid A UUID string identifying this RAC Property Mapping. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void propertymappingsRacDestroy(UUID pmUuid) throws ApiException {
        propertymappingsRacDestroyWithHttpInfo(pmUuid);
    }

    /**
     * 
     * RACPropertyMapping Viewset
     * @param pmUuid A UUID string identifying this RAC Property Mapping. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> propertymappingsRacDestroyWithHttpInfo(UUID pmUuid) throws ApiException {
        okhttp3.Call localVarCall = propertymappingsRacDestroyValidateBeforeCall(pmUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * RACPropertyMapping Viewset
     * @param pmUuid A UUID string identifying this RAC Property Mapping. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsRacDestroyAsync(UUID pmUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = propertymappingsRacDestroyValidateBeforeCall(pmUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for propertymappingsRacList
     * @param managed  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsRacListCall(List<String> managed, String name, String ordering, Integer page, Integer pageSize, String search, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/propertymappings/rac/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (managed != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "managed", managed));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call propertymappingsRacListValidateBeforeCall(List<String> managed, String name, String ordering, Integer page, Integer pageSize, String search, final ApiCallback _callback) throws ApiException {
        return propertymappingsRacListCall(managed, name, ordering, page, pageSize, search, _callback);

    }

    /**
     * 
     * RACPropertyMapping Viewset
     * @param managed  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @return PaginatedRACPropertyMappingList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedRACPropertyMappingList propertymappingsRacList(List<String> managed, String name, String ordering, Integer page, Integer pageSize, String search) throws ApiException {
        ApiResponse<PaginatedRACPropertyMappingList> localVarResp = propertymappingsRacListWithHttpInfo(managed, name, ordering, page, pageSize, search);
        return localVarResp.getData();
    }

    /**
     * 
     * RACPropertyMapping Viewset
     * @param managed  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @return ApiResponse&lt;PaginatedRACPropertyMappingList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedRACPropertyMappingList> propertymappingsRacListWithHttpInfo(List<String> managed, String name, String ordering, Integer page, Integer pageSize, String search) throws ApiException {
        okhttp3.Call localVarCall = propertymappingsRacListValidateBeforeCall(managed, name, ordering, page, pageSize, search, null);
        Type localVarReturnType = new TypeToken<PaginatedRACPropertyMappingList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * RACPropertyMapping Viewset
     * @param managed  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search A search term. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsRacListAsync(List<String> managed, String name, String ordering, Integer page, Integer pageSize, String search, final ApiCallback<PaginatedRACPropertyMappingList> _callback) throws ApiException {

        okhttp3.Call localVarCall = propertymappingsRacListValidateBeforeCall(managed, name, ordering, page, pageSize, search, _callback);
        Type localVarReturnType = new TypeToken<PaginatedRACPropertyMappingList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for propertymappingsRacPartialUpdate
     * @param pmUuid A UUID string identifying this RAC Property Mapping. (required)
     * @param patchedRACPropertyMappingRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsRacPartialUpdateCall(UUID pmUuid, PatchedRACPropertyMappingRequest patchedRACPropertyMappingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchedRACPropertyMappingRequest;

        // create path and map variables
        String localVarPath = "/propertymappings/rac/{pm_uuid}/"
            .replace("{" + "pm_uuid" + "}", localVarApiClient.escapeString(pmUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call propertymappingsRacPartialUpdateValidateBeforeCall(UUID pmUuid, PatchedRACPropertyMappingRequest patchedRACPropertyMappingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pmUuid' is set
        if (pmUuid == null) {
            throw new ApiException("Missing the required parameter 'pmUuid' when calling propertymappingsRacPartialUpdate(Async)");
        }

        return propertymappingsRacPartialUpdateCall(pmUuid, patchedRACPropertyMappingRequest, _callback);

    }

    /**
     * 
     * RACPropertyMapping Viewset
     * @param pmUuid A UUID string identifying this RAC Property Mapping. (required)
     * @param patchedRACPropertyMappingRequest  (optional)
     * @return RACPropertyMapping
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RACPropertyMapping propertymappingsRacPartialUpdate(UUID pmUuid, PatchedRACPropertyMappingRequest patchedRACPropertyMappingRequest) throws ApiException {
        ApiResponse<RACPropertyMapping> localVarResp = propertymappingsRacPartialUpdateWithHttpInfo(pmUuid, patchedRACPropertyMappingRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * RACPropertyMapping Viewset
     * @param pmUuid A UUID string identifying this RAC Property Mapping. (required)
     * @param patchedRACPropertyMappingRequest  (optional)
     * @return ApiResponse&lt;RACPropertyMapping&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RACPropertyMapping> propertymappingsRacPartialUpdateWithHttpInfo(UUID pmUuid, PatchedRACPropertyMappingRequest patchedRACPropertyMappingRequest) throws ApiException {
        okhttp3.Call localVarCall = propertymappingsRacPartialUpdateValidateBeforeCall(pmUuid, patchedRACPropertyMappingRequest, null);
        Type localVarReturnType = new TypeToken<RACPropertyMapping>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * RACPropertyMapping Viewset
     * @param pmUuid A UUID string identifying this RAC Property Mapping. (required)
     * @param patchedRACPropertyMappingRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsRacPartialUpdateAsync(UUID pmUuid, PatchedRACPropertyMappingRequest patchedRACPropertyMappingRequest, final ApiCallback<RACPropertyMapping> _callback) throws ApiException {

        okhttp3.Call localVarCall = propertymappingsRacPartialUpdateValidateBeforeCall(pmUuid, patchedRACPropertyMappingRequest, _callback);
        Type localVarReturnType = new TypeToken<RACPropertyMapping>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for propertymappingsRacRetrieve
     * @param pmUuid A UUID string identifying this RAC Property Mapping. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsRacRetrieveCall(UUID pmUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/propertymappings/rac/{pm_uuid}/"
            .replace("{" + "pm_uuid" + "}", localVarApiClient.escapeString(pmUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call propertymappingsRacRetrieveValidateBeforeCall(UUID pmUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pmUuid' is set
        if (pmUuid == null) {
            throw new ApiException("Missing the required parameter 'pmUuid' when calling propertymappingsRacRetrieve(Async)");
        }

        return propertymappingsRacRetrieveCall(pmUuid, _callback);

    }

    /**
     * 
     * RACPropertyMapping Viewset
     * @param pmUuid A UUID string identifying this RAC Property Mapping. (required)
     * @return RACPropertyMapping
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RACPropertyMapping propertymappingsRacRetrieve(UUID pmUuid) throws ApiException {
        ApiResponse<RACPropertyMapping> localVarResp = propertymappingsRacRetrieveWithHttpInfo(pmUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * RACPropertyMapping Viewset
     * @param pmUuid A UUID string identifying this RAC Property Mapping. (required)
     * @return ApiResponse&lt;RACPropertyMapping&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RACPropertyMapping> propertymappingsRacRetrieveWithHttpInfo(UUID pmUuid) throws ApiException {
        okhttp3.Call localVarCall = propertymappingsRacRetrieveValidateBeforeCall(pmUuid, null);
        Type localVarReturnType = new TypeToken<RACPropertyMapping>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * RACPropertyMapping Viewset
     * @param pmUuid A UUID string identifying this RAC Property Mapping. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsRacRetrieveAsync(UUID pmUuid, final ApiCallback<RACPropertyMapping> _callback) throws ApiException {

        okhttp3.Call localVarCall = propertymappingsRacRetrieveValidateBeforeCall(pmUuid, _callback);
        Type localVarReturnType = new TypeToken<RACPropertyMapping>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for propertymappingsRacUpdate
     * @param pmUuid A UUID string identifying this RAC Property Mapping. (required)
     * @param raCPropertyMappingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsRacUpdateCall(UUID pmUuid, RACPropertyMappingRequest raCPropertyMappingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = raCPropertyMappingRequest;

        // create path and map variables
        String localVarPath = "/propertymappings/rac/{pm_uuid}/"
            .replace("{" + "pm_uuid" + "}", localVarApiClient.escapeString(pmUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call propertymappingsRacUpdateValidateBeforeCall(UUID pmUuid, RACPropertyMappingRequest raCPropertyMappingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pmUuid' is set
        if (pmUuid == null) {
            throw new ApiException("Missing the required parameter 'pmUuid' when calling propertymappingsRacUpdate(Async)");
        }

        // verify the required parameter 'raCPropertyMappingRequest' is set
        if (raCPropertyMappingRequest == null) {
            throw new ApiException("Missing the required parameter 'raCPropertyMappingRequest' when calling propertymappingsRacUpdate(Async)");
        }

        return propertymappingsRacUpdateCall(pmUuid, raCPropertyMappingRequest, _callback);

    }

    /**
     * 
     * RACPropertyMapping Viewset
     * @param pmUuid A UUID string identifying this RAC Property Mapping. (required)
     * @param raCPropertyMappingRequest  (required)
     * @return RACPropertyMapping
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RACPropertyMapping propertymappingsRacUpdate(UUID pmUuid, RACPropertyMappingRequest raCPropertyMappingRequest) throws ApiException {
        ApiResponse<RACPropertyMapping> localVarResp = propertymappingsRacUpdateWithHttpInfo(pmUuid, raCPropertyMappingRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * RACPropertyMapping Viewset
     * @param pmUuid A UUID string identifying this RAC Property Mapping. (required)
     * @param raCPropertyMappingRequest  (required)
     * @return ApiResponse&lt;RACPropertyMapping&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RACPropertyMapping> propertymappingsRacUpdateWithHttpInfo(UUID pmUuid, RACPropertyMappingRequest raCPropertyMappingRequest) throws ApiException {
        okhttp3.Call localVarCall = propertymappingsRacUpdateValidateBeforeCall(pmUuid, raCPropertyMappingRequest, null);
        Type localVarReturnType = new TypeToken<RACPropertyMapping>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * RACPropertyMapping Viewset
     * @param pmUuid A UUID string identifying this RAC Property Mapping. (required)
     * @param raCPropertyMappingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsRacUpdateAsync(UUID pmUuid, RACPropertyMappingRequest raCPropertyMappingRequest, final ApiCallback<RACPropertyMapping> _callback) throws ApiException {

        okhttp3.Call localVarCall = propertymappingsRacUpdateValidateBeforeCall(pmUuid, raCPropertyMappingRequest, _callback);
        Type localVarReturnType = new TypeToken<RACPropertyMapping>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for propertymappingsRacUsedByList
     * @param pmUuid A UUID string identifying this RAC Property Mapping. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsRacUsedByListCall(UUID pmUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/propertymappings/rac/{pm_uuid}/used_by/"
            .replace("{" + "pm_uuid" + "}", localVarApiClient.escapeString(pmUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call propertymappingsRacUsedByListValidateBeforeCall(UUID pmUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pmUuid' is set
        if (pmUuid == null) {
            throw new ApiException("Missing the required parameter 'pmUuid' when calling propertymappingsRacUsedByList(Async)");
        }

        return propertymappingsRacUsedByListCall(pmUuid, _callback);

    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param pmUuid A UUID string identifying this RAC Property Mapping. (required)
     * @return List&lt;UsedBy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<UsedBy> propertymappingsRacUsedByList(UUID pmUuid) throws ApiException {
        ApiResponse<List<UsedBy>> localVarResp = propertymappingsRacUsedByListWithHttpInfo(pmUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param pmUuid A UUID string identifying this RAC Property Mapping. (required)
     * @return ApiResponse&lt;List&lt;UsedBy&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UsedBy>> propertymappingsRacUsedByListWithHttpInfo(UUID pmUuid) throws ApiException {
        okhttp3.Call localVarCall = propertymappingsRacUsedByListValidateBeforeCall(pmUuid, null);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of all objects that use this object
     * @param pmUuid A UUID string identifying this RAC Property Mapping. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsRacUsedByListAsync(UUID pmUuid, final ApiCallback<List<UsedBy>> _callback) throws ApiException {

        okhttp3.Call localVarCall = propertymappingsRacUsedByListValidateBeforeCall(pmUuid, _callback);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for propertymappingsSamlCreate
     * @param saMLPropertyMappingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsSamlCreateCall(SAMLPropertyMappingRequest saMLPropertyMappingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = saMLPropertyMappingRequest;

        // create path and map variables
        String localVarPath = "/propertymappings/saml/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call propertymappingsSamlCreateValidateBeforeCall(SAMLPropertyMappingRequest saMLPropertyMappingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'saMLPropertyMappingRequest' is set
        if (saMLPropertyMappingRequest == null) {
            throw new ApiException("Missing the required parameter 'saMLPropertyMappingRequest' when calling propertymappingsSamlCreate(Async)");
        }

        return propertymappingsSamlCreateCall(saMLPropertyMappingRequest, _callback);

    }

    /**
     * 
     * SAMLPropertyMapping Viewset
     * @param saMLPropertyMappingRequest  (required)
     * @return SAMLPropertyMapping
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public SAMLPropertyMapping propertymappingsSamlCreate(SAMLPropertyMappingRequest saMLPropertyMappingRequest) throws ApiException {
        ApiResponse<SAMLPropertyMapping> localVarResp = propertymappingsSamlCreateWithHttpInfo(saMLPropertyMappingRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * SAMLPropertyMapping Viewset
     * @param saMLPropertyMappingRequest  (required)
     * @return ApiResponse&lt;SAMLPropertyMapping&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SAMLPropertyMapping> propertymappingsSamlCreateWithHttpInfo(SAMLPropertyMappingRequest saMLPropertyMappingRequest) throws ApiException {
        okhttp3.Call localVarCall = propertymappingsSamlCreateValidateBeforeCall(saMLPropertyMappingRequest, null);
        Type localVarReturnType = new TypeToken<SAMLPropertyMapping>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * SAMLPropertyMapping Viewset
     * @param saMLPropertyMappingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsSamlCreateAsync(SAMLPropertyMappingRequest saMLPropertyMappingRequest, final ApiCallback<SAMLPropertyMapping> _callback) throws ApiException {

        okhttp3.Call localVarCall = propertymappingsSamlCreateValidateBeforeCall(saMLPropertyMappingRequest, _callback);
        Type localVarReturnType = new TypeToken<SAMLPropertyMapping>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for propertymappingsSamlDestroy
     * @param pmUuid A UUID string identifying this SAML Property Mapping. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsSamlDestroyCall(UUID pmUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/propertymappings/saml/{pm_uuid}/"
            .replace("{" + "pm_uuid" + "}", localVarApiClient.escapeString(pmUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call propertymappingsSamlDestroyValidateBeforeCall(UUID pmUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pmUuid' is set
        if (pmUuid == null) {
            throw new ApiException("Missing the required parameter 'pmUuid' when calling propertymappingsSamlDestroy(Async)");
        }

        return propertymappingsSamlDestroyCall(pmUuid, _callback);

    }

    /**
     * 
     * SAMLPropertyMapping Viewset
     * @param pmUuid A UUID string identifying this SAML Property Mapping. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void propertymappingsSamlDestroy(UUID pmUuid) throws ApiException {
        propertymappingsSamlDestroyWithHttpInfo(pmUuid);
    }

    /**
     * 
     * SAMLPropertyMapping Viewset
     * @param pmUuid A UUID string identifying this SAML Property Mapping. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> propertymappingsSamlDestroyWithHttpInfo(UUID pmUuid) throws ApiException {
        okhttp3.Call localVarCall = propertymappingsSamlDestroyValidateBeforeCall(pmUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * SAMLPropertyMapping Viewset
     * @param pmUuid A UUID string identifying this SAML Property Mapping. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsSamlDestroyAsync(UUID pmUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = propertymappingsSamlDestroyValidateBeforeCall(pmUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for propertymappingsSamlList
     * @param expression  (optional)
     * @param friendlyName  (optional)
     * @param managed  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param pmUuid  (optional)
     * @param samlName  (optional)
     * @param search A search term. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsSamlListCall(String expression, String friendlyName, List<String> managed, String name, String ordering, Integer page, Integer pageSize, UUID pmUuid, String samlName, String search, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/propertymappings/saml/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expression != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expression", expression));
        }

        if (friendlyName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("friendly_name", friendlyName));
        }

        if (managed != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "managed", managed));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (pmUuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pm_uuid", pmUuid));
        }

        if (samlName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("saml_name", samlName));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call propertymappingsSamlListValidateBeforeCall(String expression, String friendlyName, List<String> managed, String name, String ordering, Integer page, Integer pageSize, UUID pmUuid, String samlName, String search, final ApiCallback _callback) throws ApiException {
        return propertymappingsSamlListCall(expression, friendlyName, managed, name, ordering, page, pageSize, pmUuid, samlName, search, _callback);

    }

    /**
     * 
     * SAMLPropertyMapping Viewset
     * @param expression  (optional)
     * @param friendlyName  (optional)
     * @param managed  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param pmUuid  (optional)
     * @param samlName  (optional)
     * @param search A search term. (optional)
     * @return PaginatedSAMLPropertyMappingList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedSAMLPropertyMappingList propertymappingsSamlList(String expression, String friendlyName, List<String> managed, String name, String ordering, Integer page, Integer pageSize, UUID pmUuid, String samlName, String search) throws ApiException {
        ApiResponse<PaginatedSAMLPropertyMappingList> localVarResp = propertymappingsSamlListWithHttpInfo(expression, friendlyName, managed, name, ordering, page, pageSize, pmUuid, samlName, search);
        return localVarResp.getData();
    }

    /**
     * 
     * SAMLPropertyMapping Viewset
     * @param expression  (optional)
     * @param friendlyName  (optional)
     * @param managed  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param pmUuid  (optional)
     * @param samlName  (optional)
     * @param search A search term. (optional)
     * @return ApiResponse&lt;PaginatedSAMLPropertyMappingList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedSAMLPropertyMappingList> propertymappingsSamlListWithHttpInfo(String expression, String friendlyName, List<String> managed, String name, String ordering, Integer page, Integer pageSize, UUID pmUuid, String samlName, String search) throws ApiException {
        okhttp3.Call localVarCall = propertymappingsSamlListValidateBeforeCall(expression, friendlyName, managed, name, ordering, page, pageSize, pmUuid, samlName, search, null);
        Type localVarReturnType = new TypeToken<PaginatedSAMLPropertyMappingList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * SAMLPropertyMapping Viewset
     * @param expression  (optional)
     * @param friendlyName  (optional)
     * @param managed  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param pmUuid  (optional)
     * @param samlName  (optional)
     * @param search A search term. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsSamlListAsync(String expression, String friendlyName, List<String> managed, String name, String ordering, Integer page, Integer pageSize, UUID pmUuid, String samlName, String search, final ApiCallback<PaginatedSAMLPropertyMappingList> _callback) throws ApiException {

        okhttp3.Call localVarCall = propertymappingsSamlListValidateBeforeCall(expression, friendlyName, managed, name, ordering, page, pageSize, pmUuid, samlName, search, _callback);
        Type localVarReturnType = new TypeToken<PaginatedSAMLPropertyMappingList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for propertymappingsSamlPartialUpdate
     * @param pmUuid A UUID string identifying this SAML Property Mapping. (required)
     * @param patchedSAMLPropertyMappingRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsSamlPartialUpdateCall(UUID pmUuid, PatchedSAMLPropertyMappingRequest patchedSAMLPropertyMappingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchedSAMLPropertyMappingRequest;

        // create path and map variables
        String localVarPath = "/propertymappings/saml/{pm_uuid}/"
            .replace("{" + "pm_uuid" + "}", localVarApiClient.escapeString(pmUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call propertymappingsSamlPartialUpdateValidateBeforeCall(UUID pmUuid, PatchedSAMLPropertyMappingRequest patchedSAMLPropertyMappingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pmUuid' is set
        if (pmUuid == null) {
            throw new ApiException("Missing the required parameter 'pmUuid' when calling propertymappingsSamlPartialUpdate(Async)");
        }

        return propertymappingsSamlPartialUpdateCall(pmUuid, patchedSAMLPropertyMappingRequest, _callback);

    }

    /**
     * 
     * SAMLPropertyMapping Viewset
     * @param pmUuid A UUID string identifying this SAML Property Mapping. (required)
     * @param patchedSAMLPropertyMappingRequest  (optional)
     * @return SAMLPropertyMapping
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public SAMLPropertyMapping propertymappingsSamlPartialUpdate(UUID pmUuid, PatchedSAMLPropertyMappingRequest patchedSAMLPropertyMappingRequest) throws ApiException {
        ApiResponse<SAMLPropertyMapping> localVarResp = propertymappingsSamlPartialUpdateWithHttpInfo(pmUuid, patchedSAMLPropertyMappingRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * SAMLPropertyMapping Viewset
     * @param pmUuid A UUID string identifying this SAML Property Mapping. (required)
     * @param patchedSAMLPropertyMappingRequest  (optional)
     * @return ApiResponse&lt;SAMLPropertyMapping&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SAMLPropertyMapping> propertymappingsSamlPartialUpdateWithHttpInfo(UUID pmUuid, PatchedSAMLPropertyMappingRequest patchedSAMLPropertyMappingRequest) throws ApiException {
        okhttp3.Call localVarCall = propertymappingsSamlPartialUpdateValidateBeforeCall(pmUuid, patchedSAMLPropertyMappingRequest, null);
        Type localVarReturnType = new TypeToken<SAMLPropertyMapping>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * SAMLPropertyMapping Viewset
     * @param pmUuid A UUID string identifying this SAML Property Mapping. (required)
     * @param patchedSAMLPropertyMappingRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsSamlPartialUpdateAsync(UUID pmUuid, PatchedSAMLPropertyMappingRequest patchedSAMLPropertyMappingRequest, final ApiCallback<SAMLPropertyMapping> _callback) throws ApiException {

        okhttp3.Call localVarCall = propertymappingsSamlPartialUpdateValidateBeforeCall(pmUuid, patchedSAMLPropertyMappingRequest, _callback);
        Type localVarReturnType = new TypeToken<SAMLPropertyMapping>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for propertymappingsSamlRetrieve
     * @param pmUuid A UUID string identifying this SAML Property Mapping. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsSamlRetrieveCall(UUID pmUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/propertymappings/saml/{pm_uuid}/"
            .replace("{" + "pm_uuid" + "}", localVarApiClient.escapeString(pmUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call propertymappingsSamlRetrieveValidateBeforeCall(UUID pmUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pmUuid' is set
        if (pmUuid == null) {
            throw new ApiException("Missing the required parameter 'pmUuid' when calling propertymappingsSamlRetrieve(Async)");
        }

        return propertymappingsSamlRetrieveCall(pmUuid, _callback);

    }

    /**
     * 
     * SAMLPropertyMapping Viewset
     * @param pmUuid A UUID string identifying this SAML Property Mapping. (required)
     * @return SAMLPropertyMapping
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public SAMLPropertyMapping propertymappingsSamlRetrieve(UUID pmUuid) throws ApiException {
        ApiResponse<SAMLPropertyMapping> localVarResp = propertymappingsSamlRetrieveWithHttpInfo(pmUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * SAMLPropertyMapping Viewset
     * @param pmUuid A UUID string identifying this SAML Property Mapping. (required)
     * @return ApiResponse&lt;SAMLPropertyMapping&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SAMLPropertyMapping> propertymappingsSamlRetrieveWithHttpInfo(UUID pmUuid) throws ApiException {
        okhttp3.Call localVarCall = propertymappingsSamlRetrieveValidateBeforeCall(pmUuid, null);
        Type localVarReturnType = new TypeToken<SAMLPropertyMapping>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * SAMLPropertyMapping Viewset
     * @param pmUuid A UUID string identifying this SAML Property Mapping. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsSamlRetrieveAsync(UUID pmUuid, final ApiCallback<SAMLPropertyMapping> _callback) throws ApiException {

        okhttp3.Call localVarCall = propertymappingsSamlRetrieveValidateBeforeCall(pmUuid, _callback);
        Type localVarReturnType = new TypeToken<SAMLPropertyMapping>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for propertymappingsSamlUpdate
     * @param pmUuid A UUID string identifying this SAML Property Mapping. (required)
     * @param saMLPropertyMappingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsSamlUpdateCall(UUID pmUuid, SAMLPropertyMappingRequest saMLPropertyMappingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = saMLPropertyMappingRequest;

        // create path and map variables
        String localVarPath = "/propertymappings/saml/{pm_uuid}/"
            .replace("{" + "pm_uuid" + "}", localVarApiClient.escapeString(pmUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call propertymappingsSamlUpdateValidateBeforeCall(UUID pmUuid, SAMLPropertyMappingRequest saMLPropertyMappingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pmUuid' is set
        if (pmUuid == null) {
            throw new ApiException("Missing the required parameter 'pmUuid' when calling propertymappingsSamlUpdate(Async)");
        }

        // verify the required parameter 'saMLPropertyMappingRequest' is set
        if (saMLPropertyMappingRequest == null) {
            throw new ApiException("Missing the required parameter 'saMLPropertyMappingRequest' when calling propertymappingsSamlUpdate(Async)");
        }

        return propertymappingsSamlUpdateCall(pmUuid, saMLPropertyMappingRequest, _callback);

    }

    /**
     * 
     * SAMLPropertyMapping Viewset
     * @param pmUuid A UUID string identifying this SAML Property Mapping. (required)
     * @param saMLPropertyMappingRequest  (required)
     * @return SAMLPropertyMapping
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public SAMLPropertyMapping propertymappingsSamlUpdate(UUID pmUuid, SAMLPropertyMappingRequest saMLPropertyMappingRequest) throws ApiException {
        ApiResponse<SAMLPropertyMapping> localVarResp = propertymappingsSamlUpdateWithHttpInfo(pmUuid, saMLPropertyMappingRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * SAMLPropertyMapping Viewset
     * @param pmUuid A UUID string identifying this SAML Property Mapping. (required)
     * @param saMLPropertyMappingRequest  (required)
     * @return ApiResponse&lt;SAMLPropertyMapping&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SAMLPropertyMapping> propertymappingsSamlUpdateWithHttpInfo(UUID pmUuid, SAMLPropertyMappingRequest saMLPropertyMappingRequest) throws ApiException {
        okhttp3.Call localVarCall = propertymappingsSamlUpdateValidateBeforeCall(pmUuid, saMLPropertyMappingRequest, null);
        Type localVarReturnType = new TypeToken<SAMLPropertyMapping>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * SAMLPropertyMapping Viewset
     * @param pmUuid A UUID string identifying this SAML Property Mapping. (required)
     * @param saMLPropertyMappingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsSamlUpdateAsync(UUID pmUuid, SAMLPropertyMappingRequest saMLPropertyMappingRequest, final ApiCallback<SAMLPropertyMapping> _callback) throws ApiException {

        okhttp3.Call localVarCall = propertymappingsSamlUpdateValidateBeforeCall(pmUuid, saMLPropertyMappingRequest, _callback);
        Type localVarReturnType = new TypeToken<SAMLPropertyMapping>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for propertymappingsSamlUsedByList
     * @param pmUuid A UUID string identifying this SAML Property Mapping. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsSamlUsedByListCall(UUID pmUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/propertymappings/saml/{pm_uuid}/used_by/"
            .replace("{" + "pm_uuid" + "}", localVarApiClient.escapeString(pmUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call propertymappingsSamlUsedByListValidateBeforeCall(UUID pmUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pmUuid' is set
        if (pmUuid == null) {
            throw new ApiException("Missing the required parameter 'pmUuid' when calling propertymappingsSamlUsedByList(Async)");
        }

        return propertymappingsSamlUsedByListCall(pmUuid, _callback);

    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param pmUuid A UUID string identifying this SAML Property Mapping. (required)
     * @return List&lt;UsedBy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<UsedBy> propertymappingsSamlUsedByList(UUID pmUuid) throws ApiException {
        ApiResponse<List<UsedBy>> localVarResp = propertymappingsSamlUsedByListWithHttpInfo(pmUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param pmUuid A UUID string identifying this SAML Property Mapping. (required)
     * @return ApiResponse&lt;List&lt;UsedBy&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UsedBy>> propertymappingsSamlUsedByListWithHttpInfo(UUID pmUuid) throws ApiException {
        okhttp3.Call localVarCall = propertymappingsSamlUsedByListValidateBeforeCall(pmUuid, null);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of all objects that use this object
     * @param pmUuid A UUID string identifying this SAML Property Mapping. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsSamlUsedByListAsync(UUID pmUuid, final ApiCallback<List<UsedBy>> _callback) throws ApiException {

        okhttp3.Call localVarCall = propertymappingsSamlUsedByListValidateBeforeCall(pmUuid, _callback);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for propertymappingsScimCreate
     * @param scIMMappingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsScimCreateCall(SCIMMappingRequest scIMMappingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = scIMMappingRequest;

        // create path and map variables
        String localVarPath = "/propertymappings/scim/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call propertymappingsScimCreateValidateBeforeCall(SCIMMappingRequest scIMMappingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scIMMappingRequest' is set
        if (scIMMappingRequest == null) {
            throw new ApiException("Missing the required parameter 'scIMMappingRequest' when calling propertymappingsScimCreate(Async)");
        }

        return propertymappingsScimCreateCall(scIMMappingRequest, _callback);

    }

    /**
     * 
     * SCIMMapping Viewset
     * @param scIMMappingRequest  (required)
     * @return SCIMMapping
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public SCIMMapping propertymappingsScimCreate(SCIMMappingRequest scIMMappingRequest) throws ApiException {
        ApiResponse<SCIMMapping> localVarResp = propertymappingsScimCreateWithHttpInfo(scIMMappingRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * SCIMMapping Viewset
     * @param scIMMappingRequest  (required)
     * @return ApiResponse&lt;SCIMMapping&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SCIMMapping> propertymappingsScimCreateWithHttpInfo(SCIMMappingRequest scIMMappingRequest) throws ApiException {
        okhttp3.Call localVarCall = propertymappingsScimCreateValidateBeforeCall(scIMMappingRequest, null);
        Type localVarReturnType = new TypeToken<SCIMMapping>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * SCIMMapping Viewset
     * @param scIMMappingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsScimCreateAsync(SCIMMappingRequest scIMMappingRequest, final ApiCallback<SCIMMapping> _callback) throws ApiException {

        okhttp3.Call localVarCall = propertymappingsScimCreateValidateBeforeCall(scIMMappingRequest, _callback);
        Type localVarReturnType = new TypeToken<SCIMMapping>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for propertymappingsScimDestroy
     * @param pmUuid A UUID string identifying this SCIM Mapping. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsScimDestroyCall(UUID pmUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/propertymappings/scim/{pm_uuid}/"
            .replace("{" + "pm_uuid" + "}", localVarApiClient.escapeString(pmUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call propertymappingsScimDestroyValidateBeforeCall(UUID pmUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pmUuid' is set
        if (pmUuid == null) {
            throw new ApiException("Missing the required parameter 'pmUuid' when calling propertymappingsScimDestroy(Async)");
        }

        return propertymappingsScimDestroyCall(pmUuid, _callback);

    }

    /**
     * 
     * SCIMMapping Viewset
     * @param pmUuid A UUID string identifying this SCIM Mapping. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void propertymappingsScimDestroy(UUID pmUuid) throws ApiException {
        propertymappingsScimDestroyWithHttpInfo(pmUuid);
    }

    /**
     * 
     * SCIMMapping Viewset
     * @param pmUuid A UUID string identifying this SCIM Mapping. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> propertymappingsScimDestroyWithHttpInfo(UUID pmUuid) throws ApiException {
        okhttp3.Call localVarCall = propertymappingsScimDestroyValidateBeforeCall(pmUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * SCIMMapping Viewset
     * @param pmUuid A UUID string identifying this SCIM Mapping. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsScimDestroyAsync(UUID pmUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = propertymappingsScimDestroyValidateBeforeCall(pmUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for propertymappingsScimList
     * @param expression  (optional)
     * @param managed  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param pmUuid  (optional)
     * @param search A search term. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsScimListCall(String expression, List<String> managed, String name, String ordering, Integer page, Integer pageSize, UUID pmUuid, String search, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/propertymappings/scim/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expression != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expression", expression));
        }

        if (managed != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "managed", managed));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (pmUuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pm_uuid", pmUuid));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call propertymappingsScimListValidateBeforeCall(String expression, List<String> managed, String name, String ordering, Integer page, Integer pageSize, UUID pmUuid, String search, final ApiCallback _callback) throws ApiException {
        return propertymappingsScimListCall(expression, managed, name, ordering, page, pageSize, pmUuid, search, _callback);

    }

    /**
     * 
     * SCIMMapping Viewset
     * @param expression  (optional)
     * @param managed  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param pmUuid  (optional)
     * @param search A search term. (optional)
     * @return PaginatedSCIMMappingList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedSCIMMappingList propertymappingsScimList(String expression, List<String> managed, String name, String ordering, Integer page, Integer pageSize, UUID pmUuid, String search) throws ApiException {
        ApiResponse<PaginatedSCIMMappingList> localVarResp = propertymappingsScimListWithHttpInfo(expression, managed, name, ordering, page, pageSize, pmUuid, search);
        return localVarResp.getData();
    }

    /**
     * 
     * SCIMMapping Viewset
     * @param expression  (optional)
     * @param managed  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param pmUuid  (optional)
     * @param search A search term. (optional)
     * @return ApiResponse&lt;PaginatedSCIMMappingList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedSCIMMappingList> propertymappingsScimListWithHttpInfo(String expression, List<String> managed, String name, String ordering, Integer page, Integer pageSize, UUID pmUuid, String search) throws ApiException {
        okhttp3.Call localVarCall = propertymappingsScimListValidateBeforeCall(expression, managed, name, ordering, page, pageSize, pmUuid, search, null);
        Type localVarReturnType = new TypeToken<PaginatedSCIMMappingList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * SCIMMapping Viewset
     * @param expression  (optional)
     * @param managed  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param pmUuid  (optional)
     * @param search A search term. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsScimListAsync(String expression, List<String> managed, String name, String ordering, Integer page, Integer pageSize, UUID pmUuid, String search, final ApiCallback<PaginatedSCIMMappingList> _callback) throws ApiException {

        okhttp3.Call localVarCall = propertymappingsScimListValidateBeforeCall(expression, managed, name, ordering, page, pageSize, pmUuid, search, _callback);
        Type localVarReturnType = new TypeToken<PaginatedSCIMMappingList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for propertymappingsScimPartialUpdate
     * @param pmUuid A UUID string identifying this SCIM Mapping. (required)
     * @param patchedSCIMMappingRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsScimPartialUpdateCall(UUID pmUuid, PatchedSCIMMappingRequest patchedSCIMMappingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchedSCIMMappingRequest;

        // create path and map variables
        String localVarPath = "/propertymappings/scim/{pm_uuid}/"
            .replace("{" + "pm_uuid" + "}", localVarApiClient.escapeString(pmUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call propertymappingsScimPartialUpdateValidateBeforeCall(UUID pmUuid, PatchedSCIMMappingRequest patchedSCIMMappingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pmUuid' is set
        if (pmUuid == null) {
            throw new ApiException("Missing the required parameter 'pmUuid' when calling propertymappingsScimPartialUpdate(Async)");
        }

        return propertymappingsScimPartialUpdateCall(pmUuid, patchedSCIMMappingRequest, _callback);

    }

    /**
     * 
     * SCIMMapping Viewset
     * @param pmUuid A UUID string identifying this SCIM Mapping. (required)
     * @param patchedSCIMMappingRequest  (optional)
     * @return SCIMMapping
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public SCIMMapping propertymappingsScimPartialUpdate(UUID pmUuid, PatchedSCIMMappingRequest patchedSCIMMappingRequest) throws ApiException {
        ApiResponse<SCIMMapping> localVarResp = propertymappingsScimPartialUpdateWithHttpInfo(pmUuid, patchedSCIMMappingRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * SCIMMapping Viewset
     * @param pmUuid A UUID string identifying this SCIM Mapping. (required)
     * @param patchedSCIMMappingRequest  (optional)
     * @return ApiResponse&lt;SCIMMapping&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SCIMMapping> propertymappingsScimPartialUpdateWithHttpInfo(UUID pmUuid, PatchedSCIMMappingRequest patchedSCIMMappingRequest) throws ApiException {
        okhttp3.Call localVarCall = propertymappingsScimPartialUpdateValidateBeforeCall(pmUuid, patchedSCIMMappingRequest, null);
        Type localVarReturnType = new TypeToken<SCIMMapping>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * SCIMMapping Viewset
     * @param pmUuid A UUID string identifying this SCIM Mapping. (required)
     * @param patchedSCIMMappingRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsScimPartialUpdateAsync(UUID pmUuid, PatchedSCIMMappingRequest patchedSCIMMappingRequest, final ApiCallback<SCIMMapping> _callback) throws ApiException {

        okhttp3.Call localVarCall = propertymappingsScimPartialUpdateValidateBeforeCall(pmUuid, patchedSCIMMappingRequest, _callback);
        Type localVarReturnType = new TypeToken<SCIMMapping>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for propertymappingsScimRetrieve
     * @param pmUuid A UUID string identifying this SCIM Mapping. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsScimRetrieveCall(UUID pmUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/propertymappings/scim/{pm_uuid}/"
            .replace("{" + "pm_uuid" + "}", localVarApiClient.escapeString(pmUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call propertymappingsScimRetrieveValidateBeforeCall(UUID pmUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pmUuid' is set
        if (pmUuid == null) {
            throw new ApiException("Missing the required parameter 'pmUuid' when calling propertymappingsScimRetrieve(Async)");
        }

        return propertymappingsScimRetrieveCall(pmUuid, _callback);

    }

    /**
     * 
     * SCIMMapping Viewset
     * @param pmUuid A UUID string identifying this SCIM Mapping. (required)
     * @return SCIMMapping
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public SCIMMapping propertymappingsScimRetrieve(UUID pmUuid) throws ApiException {
        ApiResponse<SCIMMapping> localVarResp = propertymappingsScimRetrieveWithHttpInfo(pmUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * SCIMMapping Viewset
     * @param pmUuid A UUID string identifying this SCIM Mapping. (required)
     * @return ApiResponse&lt;SCIMMapping&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SCIMMapping> propertymappingsScimRetrieveWithHttpInfo(UUID pmUuid) throws ApiException {
        okhttp3.Call localVarCall = propertymappingsScimRetrieveValidateBeforeCall(pmUuid, null);
        Type localVarReturnType = new TypeToken<SCIMMapping>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * SCIMMapping Viewset
     * @param pmUuid A UUID string identifying this SCIM Mapping. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsScimRetrieveAsync(UUID pmUuid, final ApiCallback<SCIMMapping> _callback) throws ApiException {

        okhttp3.Call localVarCall = propertymappingsScimRetrieveValidateBeforeCall(pmUuid, _callback);
        Type localVarReturnType = new TypeToken<SCIMMapping>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for propertymappingsScimUpdate
     * @param pmUuid A UUID string identifying this SCIM Mapping. (required)
     * @param scIMMappingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsScimUpdateCall(UUID pmUuid, SCIMMappingRequest scIMMappingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = scIMMappingRequest;

        // create path and map variables
        String localVarPath = "/propertymappings/scim/{pm_uuid}/"
            .replace("{" + "pm_uuid" + "}", localVarApiClient.escapeString(pmUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call propertymappingsScimUpdateValidateBeforeCall(UUID pmUuid, SCIMMappingRequest scIMMappingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pmUuid' is set
        if (pmUuid == null) {
            throw new ApiException("Missing the required parameter 'pmUuid' when calling propertymappingsScimUpdate(Async)");
        }

        // verify the required parameter 'scIMMappingRequest' is set
        if (scIMMappingRequest == null) {
            throw new ApiException("Missing the required parameter 'scIMMappingRequest' when calling propertymappingsScimUpdate(Async)");
        }

        return propertymappingsScimUpdateCall(pmUuid, scIMMappingRequest, _callback);

    }

    /**
     * 
     * SCIMMapping Viewset
     * @param pmUuid A UUID string identifying this SCIM Mapping. (required)
     * @param scIMMappingRequest  (required)
     * @return SCIMMapping
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public SCIMMapping propertymappingsScimUpdate(UUID pmUuid, SCIMMappingRequest scIMMappingRequest) throws ApiException {
        ApiResponse<SCIMMapping> localVarResp = propertymappingsScimUpdateWithHttpInfo(pmUuid, scIMMappingRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * SCIMMapping Viewset
     * @param pmUuid A UUID string identifying this SCIM Mapping. (required)
     * @param scIMMappingRequest  (required)
     * @return ApiResponse&lt;SCIMMapping&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SCIMMapping> propertymappingsScimUpdateWithHttpInfo(UUID pmUuid, SCIMMappingRequest scIMMappingRequest) throws ApiException {
        okhttp3.Call localVarCall = propertymappingsScimUpdateValidateBeforeCall(pmUuid, scIMMappingRequest, null);
        Type localVarReturnType = new TypeToken<SCIMMapping>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * SCIMMapping Viewset
     * @param pmUuid A UUID string identifying this SCIM Mapping. (required)
     * @param scIMMappingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsScimUpdateAsync(UUID pmUuid, SCIMMappingRequest scIMMappingRequest, final ApiCallback<SCIMMapping> _callback) throws ApiException {

        okhttp3.Call localVarCall = propertymappingsScimUpdateValidateBeforeCall(pmUuid, scIMMappingRequest, _callback);
        Type localVarReturnType = new TypeToken<SCIMMapping>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for propertymappingsScimUsedByList
     * @param pmUuid A UUID string identifying this SCIM Mapping. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsScimUsedByListCall(UUID pmUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/propertymappings/scim/{pm_uuid}/used_by/"
            .replace("{" + "pm_uuid" + "}", localVarApiClient.escapeString(pmUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call propertymappingsScimUsedByListValidateBeforeCall(UUID pmUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pmUuid' is set
        if (pmUuid == null) {
            throw new ApiException("Missing the required parameter 'pmUuid' when calling propertymappingsScimUsedByList(Async)");
        }

        return propertymappingsScimUsedByListCall(pmUuid, _callback);

    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param pmUuid A UUID string identifying this SCIM Mapping. (required)
     * @return List&lt;UsedBy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<UsedBy> propertymappingsScimUsedByList(UUID pmUuid) throws ApiException {
        ApiResponse<List<UsedBy>> localVarResp = propertymappingsScimUsedByListWithHttpInfo(pmUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param pmUuid A UUID string identifying this SCIM Mapping. (required)
     * @return ApiResponse&lt;List&lt;UsedBy&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UsedBy>> propertymappingsScimUsedByListWithHttpInfo(UUID pmUuid) throws ApiException {
        okhttp3.Call localVarCall = propertymappingsScimUsedByListValidateBeforeCall(pmUuid, null);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of all objects that use this object
     * @param pmUuid A UUID string identifying this SCIM Mapping. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsScimUsedByListAsync(UUID pmUuid, final ApiCallback<List<UsedBy>> _callback) throws ApiException {

        okhttp3.Call localVarCall = propertymappingsScimUsedByListValidateBeforeCall(pmUuid, _callback);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for propertymappingsScopeCreate
     * @param scopeMappingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsScopeCreateCall(ScopeMappingRequest scopeMappingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = scopeMappingRequest;

        // create path and map variables
        String localVarPath = "/propertymappings/scope/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call propertymappingsScopeCreateValidateBeforeCall(ScopeMappingRequest scopeMappingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scopeMappingRequest' is set
        if (scopeMappingRequest == null) {
            throw new ApiException("Missing the required parameter 'scopeMappingRequest' when calling propertymappingsScopeCreate(Async)");
        }

        return propertymappingsScopeCreateCall(scopeMappingRequest, _callback);

    }

    /**
     * 
     * ScopeMapping Viewset
     * @param scopeMappingRequest  (required)
     * @return ScopeMapping
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ScopeMapping propertymappingsScopeCreate(ScopeMappingRequest scopeMappingRequest) throws ApiException {
        ApiResponse<ScopeMapping> localVarResp = propertymappingsScopeCreateWithHttpInfo(scopeMappingRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * ScopeMapping Viewset
     * @param scopeMappingRequest  (required)
     * @return ApiResponse&lt;ScopeMapping&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScopeMapping> propertymappingsScopeCreateWithHttpInfo(ScopeMappingRequest scopeMappingRequest) throws ApiException {
        okhttp3.Call localVarCall = propertymappingsScopeCreateValidateBeforeCall(scopeMappingRequest, null);
        Type localVarReturnType = new TypeToken<ScopeMapping>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ScopeMapping Viewset
     * @param scopeMappingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsScopeCreateAsync(ScopeMappingRequest scopeMappingRequest, final ApiCallback<ScopeMapping> _callback) throws ApiException {

        okhttp3.Call localVarCall = propertymappingsScopeCreateValidateBeforeCall(scopeMappingRequest, _callback);
        Type localVarReturnType = new TypeToken<ScopeMapping>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for propertymappingsScopeDestroy
     * @param pmUuid A UUID string identifying this Scope Mapping. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsScopeDestroyCall(UUID pmUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/propertymappings/scope/{pm_uuid}/"
            .replace("{" + "pm_uuid" + "}", localVarApiClient.escapeString(pmUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call propertymappingsScopeDestroyValidateBeforeCall(UUID pmUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pmUuid' is set
        if (pmUuid == null) {
            throw new ApiException("Missing the required parameter 'pmUuid' when calling propertymappingsScopeDestroy(Async)");
        }

        return propertymappingsScopeDestroyCall(pmUuid, _callback);

    }

    /**
     * 
     * ScopeMapping Viewset
     * @param pmUuid A UUID string identifying this Scope Mapping. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void propertymappingsScopeDestroy(UUID pmUuid) throws ApiException {
        propertymappingsScopeDestroyWithHttpInfo(pmUuid);
    }

    /**
     * 
     * ScopeMapping Viewset
     * @param pmUuid A UUID string identifying this Scope Mapping. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> propertymappingsScopeDestroyWithHttpInfo(UUID pmUuid) throws ApiException {
        okhttp3.Call localVarCall = propertymappingsScopeDestroyValidateBeforeCall(pmUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * ScopeMapping Viewset
     * @param pmUuid A UUID string identifying this Scope Mapping. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsScopeDestroyAsync(UUID pmUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = propertymappingsScopeDestroyValidateBeforeCall(pmUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for propertymappingsScopeList
     * @param managed  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param scopeName  (optional)
     * @param search A search term. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsScopeListCall(List<String> managed, String name, String ordering, Integer page, Integer pageSize, String scopeName, String search, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/propertymappings/scope/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (managed != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "managed", managed));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (scopeName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope_name", scopeName));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call propertymappingsScopeListValidateBeforeCall(List<String> managed, String name, String ordering, Integer page, Integer pageSize, String scopeName, String search, final ApiCallback _callback) throws ApiException {
        return propertymappingsScopeListCall(managed, name, ordering, page, pageSize, scopeName, search, _callback);

    }

    /**
     * 
     * ScopeMapping Viewset
     * @param managed  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param scopeName  (optional)
     * @param search A search term. (optional)
     * @return PaginatedScopeMappingList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedScopeMappingList propertymappingsScopeList(List<String> managed, String name, String ordering, Integer page, Integer pageSize, String scopeName, String search) throws ApiException {
        ApiResponse<PaginatedScopeMappingList> localVarResp = propertymappingsScopeListWithHttpInfo(managed, name, ordering, page, pageSize, scopeName, search);
        return localVarResp.getData();
    }

    /**
     * 
     * ScopeMapping Viewset
     * @param managed  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param scopeName  (optional)
     * @param search A search term. (optional)
     * @return ApiResponse&lt;PaginatedScopeMappingList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedScopeMappingList> propertymappingsScopeListWithHttpInfo(List<String> managed, String name, String ordering, Integer page, Integer pageSize, String scopeName, String search) throws ApiException {
        okhttp3.Call localVarCall = propertymappingsScopeListValidateBeforeCall(managed, name, ordering, page, pageSize, scopeName, search, null);
        Type localVarReturnType = new TypeToken<PaginatedScopeMappingList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ScopeMapping Viewset
     * @param managed  (optional)
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param scopeName  (optional)
     * @param search A search term. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsScopeListAsync(List<String> managed, String name, String ordering, Integer page, Integer pageSize, String scopeName, String search, final ApiCallback<PaginatedScopeMappingList> _callback) throws ApiException {

        okhttp3.Call localVarCall = propertymappingsScopeListValidateBeforeCall(managed, name, ordering, page, pageSize, scopeName, search, _callback);
        Type localVarReturnType = new TypeToken<PaginatedScopeMappingList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for propertymappingsScopePartialUpdate
     * @param pmUuid A UUID string identifying this Scope Mapping. (required)
     * @param patchedScopeMappingRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsScopePartialUpdateCall(UUID pmUuid, PatchedScopeMappingRequest patchedScopeMappingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchedScopeMappingRequest;

        // create path and map variables
        String localVarPath = "/propertymappings/scope/{pm_uuid}/"
            .replace("{" + "pm_uuid" + "}", localVarApiClient.escapeString(pmUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call propertymappingsScopePartialUpdateValidateBeforeCall(UUID pmUuid, PatchedScopeMappingRequest patchedScopeMappingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pmUuid' is set
        if (pmUuid == null) {
            throw new ApiException("Missing the required parameter 'pmUuid' when calling propertymappingsScopePartialUpdate(Async)");
        }

        return propertymappingsScopePartialUpdateCall(pmUuid, patchedScopeMappingRequest, _callback);

    }

    /**
     * 
     * ScopeMapping Viewset
     * @param pmUuid A UUID string identifying this Scope Mapping. (required)
     * @param patchedScopeMappingRequest  (optional)
     * @return ScopeMapping
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ScopeMapping propertymappingsScopePartialUpdate(UUID pmUuid, PatchedScopeMappingRequest patchedScopeMappingRequest) throws ApiException {
        ApiResponse<ScopeMapping> localVarResp = propertymappingsScopePartialUpdateWithHttpInfo(pmUuid, patchedScopeMappingRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * ScopeMapping Viewset
     * @param pmUuid A UUID string identifying this Scope Mapping. (required)
     * @param patchedScopeMappingRequest  (optional)
     * @return ApiResponse&lt;ScopeMapping&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScopeMapping> propertymappingsScopePartialUpdateWithHttpInfo(UUID pmUuid, PatchedScopeMappingRequest patchedScopeMappingRequest) throws ApiException {
        okhttp3.Call localVarCall = propertymappingsScopePartialUpdateValidateBeforeCall(pmUuid, patchedScopeMappingRequest, null);
        Type localVarReturnType = new TypeToken<ScopeMapping>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ScopeMapping Viewset
     * @param pmUuid A UUID string identifying this Scope Mapping. (required)
     * @param patchedScopeMappingRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsScopePartialUpdateAsync(UUID pmUuid, PatchedScopeMappingRequest patchedScopeMappingRequest, final ApiCallback<ScopeMapping> _callback) throws ApiException {

        okhttp3.Call localVarCall = propertymappingsScopePartialUpdateValidateBeforeCall(pmUuid, patchedScopeMappingRequest, _callback);
        Type localVarReturnType = new TypeToken<ScopeMapping>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for propertymappingsScopeRetrieve
     * @param pmUuid A UUID string identifying this Scope Mapping. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsScopeRetrieveCall(UUID pmUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/propertymappings/scope/{pm_uuid}/"
            .replace("{" + "pm_uuid" + "}", localVarApiClient.escapeString(pmUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call propertymappingsScopeRetrieveValidateBeforeCall(UUID pmUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pmUuid' is set
        if (pmUuid == null) {
            throw new ApiException("Missing the required parameter 'pmUuid' when calling propertymappingsScopeRetrieve(Async)");
        }

        return propertymappingsScopeRetrieveCall(pmUuid, _callback);

    }

    /**
     * 
     * ScopeMapping Viewset
     * @param pmUuid A UUID string identifying this Scope Mapping. (required)
     * @return ScopeMapping
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ScopeMapping propertymappingsScopeRetrieve(UUID pmUuid) throws ApiException {
        ApiResponse<ScopeMapping> localVarResp = propertymappingsScopeRetrieveWithHttpInfo(pmUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * ScopeMapping Viewset
     * @param pmUuid A UUID string identifying this Scope Mapping. (required)
     * @return ApiResponse&lt;ScopeMapping&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScopeMapping> propertymappingsScopeRetrieveWithHttpInfo(UUID pmUuid) throws ApiException {
        okhttp3.Call localVarCall = propertymappingsScopeRetrieveValidateBeforeCall(pmUuid, null);
        Type localVarReturnType = new TypeToken<ScopeMapping>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ScopeMapping Viewset
     * @param pmUuid A UUID string identifying this Scope Mapping. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsScopeRetrieveAsync(UUID pmUuid, final ApiCallback<ScopeMapping> _callback) throws ApiException {

        okhttp3.Call localVarCall = propertymappingsScopeRetrieveValidateBeforeCall(pmUuid, _callback);
        Type localVarReturnType = new TypeToken<ScopeMapping>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for propertymappingsScopeUpdate
     * @param pmUuid A UUID string identifying this Scope Mapping. (required)
     * @param scopeMappingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsScopeUpdateCall(UUID pmUuid, ScopeMappingRequest scopeMappingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = scopeMappingRequest;

        // create path and map variables
        String localVarPath = "/propertymappings/scope/{pm_uuid}/"
            .replace("{" + "pm_uuid" + "}", localVarApiClient.escapeString(pmUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call propertymappingsScopeUpdateValidateBeforeCall(UUID pmUuid, ScopeMappingRequest scopeMappingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pmUuid' is set
        if (pmUuid == null) {
            throw new ApiException("Missing the required parameter 'pmUuid' when calling propertymappingsScopeUpdate(Async)");
        }

        // verify the required parameter 'scopeMappingRequest' is set
        if (scopeMappingRequest == null) {
            throw new ApiException("Missing the required parameter 'scopeMappingRequest' when calling propertymappingsScopeUpdate(Async)");
        }

        return propertymappingsScopeUpdateCall(pmUuid, scopeMappingRequest, _callback);

    }

    /**
     * 
     * ScopeMapping Viewset
     * @param pmUuid A UUID string identifying this Scope Mapping. (required)
     * @param scopeMappingRequest  (required)
     * @return ScopeMapping
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ScopeMapping propertymappingsScopeUpdate(UUID pmUuid, ScopeMappingRequest scopeMappingRequest) throws ApiException {
        ApiResponse<ScopeMapping> localVarResp = propertymappingsScopeUpdateWithHttpInfo(pmUuid, scopeMappingRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * ScopeMapping Viewset
     * @param pmUuid A UUID string identifying this Scope Mapping. (required)
     * @param scopeMappingRequest  (required)
     * @return ApiResponse&lt;ScopeMapping&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScopeMapping> propertymappingsScopeUpdateWithHttpInfo(UUID pmUuid, ScopeMappingRequest scopeMappingRequest) throws ApiException {
        okhttp3.Call localVarCall = propertymappingsScopeUpdateValidateBeforeCall(pmUuid, scopeMappingRequest, null);
        Type localVarReturnType = new TypeToken<ScopeMapping>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ScopeMapping Viewset
     * @param pmUuid A UUID string identifying this Scope Mapping. (required)
     * @param scopeMappingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsScopeUpdateAsync(UUID pmUuid, ScopeMappingRequest scopeMappingRequest, final ApiCallback<ScopeMapping> _callback) throws ApiException {

        okhttp3.Call localVarCall = propertymappingsScopeUpdateValidateBeforeCall(pmUuid, scopeMappingRequest, _callback);
        Type localVarReturnType = new TypeToken<ScopeMapping>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for propertymappingsScopeUsedByList
     * @param pmUuid A UUID string identifying this Scope Mapping. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsScopeUsedByListCall(UUID pmUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/propertymappings/scope/{pm_uuid}/used_by/"
            .replace("{" + "pm_uuid" + "}", localVarApiClient.escapeString(pmUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call propertymappingsScopeUsedByListValidateBeforeCall(UUID pmUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pmUuid' is set
        if (pmUuid == null) {
            throw new ApiException("Missing the required parameter 'pmUuid' when calling propertymappingsScopeUsedByList(Async)");
        }

        return propertymappingsScopeUsedByListCall(pmUuid, _callback);

    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param pmUuid A UUID string identifying this Scope Mapping. (required)
     * @return List&lt;UsedBy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<UsedBy> propertymappingsScopeUsedByList(UUID pmUuid) throws ApiException {
        ApiResponse<List<UsedBy>> localVarResp = propertymappingsScopeUsedByListWithHttpInfo(pmUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param pmUuid A UUID string identifying this Scope Mapping. (required)
     * @return ApiResponse&lt;List&lt;UsedBy&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UsedBy>> propertymappingsScopeUsedByListWithHttpInfo(UUID pmUuid) throws ApiException {
        okhttp3.Call localVarCall = propertymappingsScopeUsedByListValidateBeforeCall(pmUuid, null);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of all objects that use this object
     * @param pmUuid A UUID string identifying this Scope Mapping. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call propertymappingsScopeUsedByListAsync(UUID pmUuid, final ApiCallback<List<UsedBy>> _callback) throws ApiException {

        okhttp3.Call localVarCall = propertymappingsScopeUsedByListValidateBeforeCall(pmUuid, _callback);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
