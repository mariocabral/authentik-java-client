/*
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.6.3
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BlueprintFile;
import org.openapitools.client.model.BlueprintInstance;
import org.openapitools.client.model.BlueprintInstanceRequest;
import org.openapitools.client.model.GenericError;
import org.openapitools.client.model.PaginatedBlueprintInstanceList;
import org.openapitools.client.model.PatchedBlueprintInstanceRequest;
import java.util.UUID;
import org.openapitools.client.model.UsedBy;
import org.openapitools.client.model.ValidationError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ManagedApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ManagedApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ManagedApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for managedBlueprintsApplyCreate
     * @param instanceUuid A UUID string identifying this Blueprint Instance. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managedBlueprintsApplyCreateCall(UUID instanceUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/managed/blueprints/{instance_uuid}/apply/"
            .replace("{" + "instance_uuid" + "}", localVarApiClient.escapeString(instanceUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call managedBlueprintsApplyCreateValidateBeforeCall(UUID instanceUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceUuid' is set
        if (instanceUuid == null) {
            throw new ApiException("Missing the required parameter 'instanceUuid' when calling managedBlueprintsApplyCreate(Async)");
        }

        return managedBlueprintsApplyCreateCall(instanceUuid, _callback);

    }

    /**
     * 
     * Apply a blueprint
     * @param instanceUuid A UUID string identifying this Blueprint Instance. (required)
     * @return BlueprintInstance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public BlueprintInstance managedBlueprintsApplyCreate(UUID instanceUuid) throws ApiException {
        ApiResponse<BlueprintInstance> localVarResp = managedBlueprintsApplyCreateWithHttpInfo(instanceUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Apply a blueprint
     * @param instanceUuid A UUID string identifying this Blueprint Instance. (required)
     * @return ApiResponse&lt;BlueprintInstance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BlueprintInstance> managedBlueprintsApplyCreateWithHttpInfo(UUID instanceUuid) throws ApiException {
        okhttp3.Call localVarCall = managedBlueprintsApplyCreateValidateBeforeCall(instanceUuid, null);
        Type localVarReturnType = new TypeToken<BlueprintInstance>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Apply a blueprint
     * @param instanceUuid A UUID string identifying this Blueprint Instance. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managedBlueprintsApplyCreateAsync(UUID instanceUuid, final ApiCallback<BlueprintInstance> _callback) throws ApiException {

        okhttp3.Call localVarCall = managedBlueprintsApplyCreateValidateBeforeCall(instanceUuid, _callback);
        Type localVarReturnType = new TypeToken<BlueprintInstance>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for managedBlueprintsAvailableList
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managedBlueprintsAvailableListCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/managed/blueprints/available/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call managedBlueprintsAvailableListValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return managedBlueprintsAvailableListCall(_callback);

    }

    /**
     * 
     * Get blueprints
     * @return List&lt;BlueprintFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<BlueprintFile> managedBlueprintsAvailableList() throws ApiException {
        ApiResponse<List<BlueprintFile>> localVarResp = managedBlueprintsAvailableListWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Get blueprints
     * @return ApiResponse&lt;List&lt;BlueprintFile&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<BlueprintFile>> managedBlueprintsAvailableListWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = managedBlueprintsAvailableListValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<BlueprintFile>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get blueprints
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managedBlueprintsAvailableListAsync(final ApiCallback<List<BlueprintFile>> _callback) throws ApiException {

        okhttp3.Call localVarCall = managedBlueprintsAvailableListValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<BlueprintFile>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for managedBlueprintsCreate
     * @param blueprintInstanceRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managedBlueprintsCreateCall(BlueprintInstanceRequest blueprintInstanceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = blueprintInstanceRequest;

        // create path and map variables
        String localVarPath = "/managed/blueprints/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call managedBlueprintsCreateValidateBeforeCall(BlueprintInstanceRequest blueprintInstanceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'blueprintInstanceRequest' is set
        if (blueprintInstanceRequest == null) {
            throw new ApiException("Missing the required parameter 'blueprintInstanceRequest' when calling managedBlueprintsCreate(Async)");
        }

        return managedBlueprintsCreateCall(blueprintInstanceRequest, _callback);

    }

    /**
     * 
     * Blueprint instances
     * @param blueprintInstanceRequest  (required)
     * @return BlueprintInstance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public BlueprintInstance managedBlueprintsCreate(BlueprintInstanceRequest blueprintInstanceRequest) throws ApiException {
        ApiResponse<BlueprintInstance> localVarResp = managedBlueprintsCreateWithHttpInfo(blueprintInstanceRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Blueprint instances
     * @param blueprintInstanceRequest  (required)
     * @return ApiResponse&lt;BlueprintInstance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BlueprintInstance> managedBlueprintsCreateWithHttpInfo(BlueprintInstanceRequest blueprintInstanceRequest) throws ApiException {
        okhttp3.Call localVarCall = managedBlueprintsCreateValidateBeforeCall(blueprintInstanceRequest, null);
        Type localVarReturnType = new TypeToken<BlueprintInstance>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Blueprint instances
     * @param blueprintInstanceRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managedBlueprintsCreateAsync(BlueprintInstanceRequest blueprintInstanceRequest, final ApiCallback<BlueprintInstance> _callback) throws ApiException {

        okhttp3.Call localVarCall = managedBlueprintsCreateValidateBeforeCall(blueprintInstanceRequest, _callback);
        Type localVarReturnType = new TypeToken<BlueprintInstance>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for managedBlueprintsDestroy
     * @param instanceUuid A UUID string identifying this Blueprint Instance. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managedBlueprintsDestroyCall(UUID instanceUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/managed/blueprints/{instance_uuid}/"
            .replace("{" + "instance_uuid" + "}", localVarApiClient.escapeString(instanceUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call managedBlueprintsDestroyValidateBeforeCall(UUID instanceUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceUuid' is set
        if (instanceUuid == null) {
            throw new ApiException("Missing the required parameter 'instanceUuid' when calling managedBlueprintsDestroy(Async)");
        }

        return managedBlueprintsDestroyCall(instanceUuid, _callback);

    }

    /**
     * 
     * Blueprint instances
     * @param instanceUuid A UUID string identifying this Blueprint Instance. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void managedBlueprintsDestroy(UUID instanceUuid) throws ApiException {
        managedBlueprintsDestroyWithHttpInfo(instanceUuid);
    }

    /**
     * 
     * Blueprint instances
     * @param instanceUuid A UUID string identifying this Blueprint Instance. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> managedBlueprintsDestroyWithHttpInfo(UUID instanceUuid) throws ApiException {
        okhttp3.Call localVarCall = managedBlueprintsDestroyValidateBeforeCall(instanceUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Blueprint instances
     * @param instanceUuid A UUID string identifying this Blueprint Instance. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managedBlueprintsDestroyAsync(UUID instanceUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = managedBlueprintsDestroyValidateBeforeCall(instanceUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for managedBlueprintsList
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param path  (optional)
     * @param search A search term. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managedBlueprintsListCall(String name, String ordering, Integer page, Integer pageSize, String path, String search, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/managed/blueprints/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (path != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("path", path));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call managedBlueprintsListValidateBeforeCall(String name, String ordering, Integer page, Integer pageSize, String path, String search, final ApiCallback _callback) throws ApiException {
        return managedBlueprintsListCall(name, ordering, page, pageSize, path, search, _callback);

    }

    /**
     * 
     * Blueprint instances
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param path  (optional)
     * @param search A search term. (optional)
     * @return PaginatedBlueprintInstanceList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedBlueprintInstanceList managedBlueprintsList(String name, String ordering, Integer page, Integer pageSize, String path, String search) throws ApiException {
        ApiResponse<PaginatedBlueprintInstanceList> localVarResp = managedBlueprintsListWithHttpInfo(name, ordering, page, pageSize, path, search);
        return localVarResp.getData();
    }

    /**
     * 
     * Blueprint instances
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param path  (optional)
     * @param search A search term. (optional)
     * @return ApiResponse&lt;PaginatedBlueprintInstanceList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedBlueprintInstanceList> managedBlueprintsListWithHttpInfo(String name, String ordering, Integer page, Integer pageSize, String path, String search) throws ApiException {
        okhttp3.Call localVarCall = managedBlueprintsListValidateBeforeCall(name, ordering, page, pageSize, path, search, null);
        Type localVarReturnType = new TypeToken<PaginatedBlueprintInstanceList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Blueprint instances
     * @param name  (optional)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param path  (optional)
     * @param search A search term. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managedBlueprintsListAsync(String name, String ordering, Integer page, Integer pageSize, String path, String search, final ApiCallback<PaginatedBlueprintInstanceList> _callback) throws ApiException {

        okhttp3.Call localVarCall = managedBlueprintsListValidateBeforeCall(name, ordering, page, pageSize, path, search, _callback);
        Type localVarReturnType = new TypeToken<PaginatedBlueprintInstanceList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for managedBlueprintsPartialUpdate
     * @param instanceUuid A UUID string identifying this Blueprint Instance. (required)
     * @param patchedBlueprintInstanceRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managedBlueprintsPartialUpdateCall(UUID instanceUuid, PatchedBlueprintInstanceRequest patchedBlueprintInstanceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchedBlueprintInstanceRequest;

        // create path and map variables
        String localVarPath = "/managed/blueprints/{instance_uuid}/"
            .replace("{" + "instance_uuid" + "}", localVarApiClient.escapeString(instanceUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call managedBlueprintsPartialUpdateValidateBeforeCall(UUID instanceUuid, PatchedBlueprintInstanceRequest patchedBlueprintInstanceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceUuid' is set
        if (instanceUuid == null) {
            throw new ApiException("Missing the required parameter 'instanceUuid' when calling managedBlueprintsPartialUpdate(Async)");
        }

        return managedBlueprintsPartialUpdateCall(instanceUuid, patchedBlueprintInstanceRequest, _callback);

    }

    /**
     * 
     * Blueprint instances
     * @param instanceUuid A UUID string identifying this Blueprint Instance. (required)
     * @param patchedBlueprintInstanceRequest  (optional)
     * @return BlueprintInstance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public BlueprintInstance managedBlueprintsPartialUpdate(UUID instanceUuid, PatchedBlueprintInstanceRequest patchedBlueprintInstanceRequest) throws ApiException {
        ApiResponse<BlueprintInstance> localVarResp = managedBlueprintsPartialUpdateWithHttpInfo(instanceUuid, patchedBlueprintInstanceRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Blueprint instances
     * @param instanceUuid A UUID string identifying this Blueprint Instance. (required)
     * @param patchedBlueprintInstanceRequest  (optional)
     * @return ApiResponse&lt;BlueprintInstance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BlueprintInstance> managedBlueprintsPartialUpdateWithHttpInfo(UUID instanceUuid, PatchedBlueprintInstanceRequest patchedBlueprintInstanceRequest) throws ApiException {
        okhttp3.Call localVarCall = managedBlueprintsPartialUpdateValidateBeforeCall(instanceUuid, patchedBlueprintInstanceRequest, null);
        Type localVarReturnType = new TypeToken<BlueprintInstance>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Blueprint instances
     * @param instanceUuid A UUID string identifying this Blueprint Instance. (required)
     * @param patchedBlueprintInstanceRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managedBlueprintsPartialUpdateAsync(UUID instanceUuid, PatchedBlueprintInstanceRequest patchedBlueprintInstanceRequest, final ApiCallback<BlueprintInstance> _callback) throws ApiException {

        okhttp3.Call localVarCall = managedBlueprintsPartialUpdateValidateBeforeCall(instanceUuid, patchedBlueprintInstanceRequest, _callback);
        Type localVarReturnType = new TypeToken<BlueprintInstance>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for managedBlueprintsRetrieve
     * @param instanceUuid A UUID string identifying this Blueprint Instance. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managedBlueprintsRetrieveCall(UUID instanceUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/managed/blueprints/{instance_uuid}/"
            .replace("{" + "instance_uuid" + "}", localVarApiClient.escapeString(instanceUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call managedBlueprintsRetrieveValidateBeforeCall(UUID instanceUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceUuid' is set
        if (instanceUuid == null) {
            throw new ApiException("Missing the required parameter 'instanceUuid' when calling managedBlueprintsRetrieve(Async)");
        }

        return managedBlueprintsRetrieveCall(instanceUuid, _callback);

    }

    /**
     * 
     * Blueprint instances
     * @param instanceUuid A UUID string identifying this Blueprint Instance. (required)
     * @return BlueprintInstance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public BlueprintInstance managedBlueprintsRetrieve(UUID instanceUuid) throws ApiException {
        ApiResponse<BlueprintInstance> localVarResp = managedBlueprintsRetrieveWithHttpInfo(instanceUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Blueprint instances
     * @param instanceUuid A UUID string identifying this Blueprint Instance. (required)
     * @return ApiResponse&lt;BlueprintInstance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BlueprintInstance> managedBlueprintsRetrieveWithHttpInfo(UUID instanceUuid) throws ApiException {
        okhttp3.Call localVarCall = managedBlueprintsRetrieveValidateBeforeCall(instanceUuid, null);
        Type localVarReturnType = new TypeToken<BlueprintInstance>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Blueprint instances
     * @param instanceUuid A UUID string identifying this Blueprint Instance. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managedBlueprintsRetrieveAsync(UUID instanceUuid, final ApiCallback<BlueprintInstance> _callback) throws ApiException {

        okhttp3.Call localVarCall = managedBlueprintsRetrieveValidateBeforeCall(instanceUuid, _callback);
        Type localVarReturnType = new TypeToken<BlueprintInstance>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for managedBlueprintsUpdate
     * @param instanceUuid A UUID string identifying this Blueprint Instance. (required)
     * @param blueprintInstanceRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managedBlueprintsUpdateCall(UUID instanceUuid, BlueprintInstanceRequest blueprintInstanceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = blueprintInstanceRequest;

        // create path and map variables
        String localVarPath = "/managed/blueprints/{instance_uuid}/"
            .replace("{" + "instance_uuid" + "}", localVarApiClient.escapeString(instanceUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call managedBlueprintsUpdateValidateBeforeCall(UUID instanceUuid, BlueprintInstanceRequest blueprintInstanceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceUuid' is set
        if (instanceUuid == null) {
            throw new ApiException("Missing the required parameter 'instanceUuid' when calling managedBlueprintsUpdate(Async)");
        }

        // verify the required parameter 'blueprintInstanceRequest' is set
        if (blueprintInstanceRequest == null) {
            throw new ApiException("Missing the required parameter 'blueprintInstanceRequest' when calling managedBlueprintsUpdate(Async)");
        }

        return managedBlueprintsUpdateCall(instanceUuid, blueprintInstanceRequest, _callback);

    }

    /**
     * 
     * Blueprint instances
     * @param instanceUuid A UUID string identifying this Blueprint Instance. (required)
     * @param blueprintInstanceRequest  (required)
     * @return BlueprintInstance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public BlueprintInstance managedBlueprintsUpdate(UUID instanceUuid, BlueprintInstanceRequest blueprintInstanceRequest) throws ApiException {
        ApiResponse<BlueprintInstance> localVarResp = managedBlueprintsUpdateWithHttpInfo(instanceUuid, blueprintInstanceRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Blueprint instances
     * @param instanceUuid A UUID string identifying this Blueprint Instance. (required)
     * @param blueprintInstanceRequest  (required)
     * @return ApiResponse&lt;BlueprintInstance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BlueprintInstance> managedBlueprintsUpdateWithHttpInfo(UUID instanceUuid, BlueprintInstanceRequest blueprintInstanceRequest) throws ApiException {
        okhttp3.Call localVarCall = managedBlueprintsUpdateValidateBeforeCall(instanceUuid, blueprintInstanceRequest, null);
        Type localVarReturnType = new TypeToken<BlueprintInstance>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Blueprint instances
     * @param instanceUuid A UUID string identifying this Blueprint Instance. (required)
     * @param blueprintInstanceRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managedBlueprintsUpdateAsync(UUID instanceUuid, BlueprintInstanceRequest blueprintInstanceRequest, final ApiCallback<BlueprintInstance> _callback) throws ApiException {

        okhttp3.Call localVarCall = managedBlueprintsUpdateValidateBeforeCall(instanceUuid, blueprintInstanceRequest, _callback);
        Type localVarReturnType = new TypeToken<BlueprintInstance>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for managedBlueprintsUsedByList
     * @param instanceUuid A UUID string identifying this Blueprint Instance. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managedBlueprintsUsedByListCall(UUID instanceUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/managed/blueprints/{instance_uuid}/used_by/"
            .replace("{" + "instance_uuid" + "}", localVarApiClient.escapeString(instanceUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "authentik" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call managedBlueprintsUsedByListValidateBeforeCall(UUID instanceUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceUuid' is set
        if (instanceUuid == null) {
            throw new ApiException("Missing the required parameter 'instanceUuid' when calling managedBlueprintsUsedByList(Async)");
        }

        return managedBlueprintsUsedByListCall(instanceUuid, _callback);

    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param instanceUuid A UUID string identifying this Blueprint Instance. (required)
     * @return List&lt;UsedBy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<UsedBy> managedBlueprintsUsedByList(UUID instanceUuid) throws ApiException {
        ApiResponse<List<UsedBy>> localVarResp = managedBlueprintsUsedByListWithHttpInfo(instanceUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of all objects that use this object
     * @param instanceUuid A UUID string identifying this Blueprint Instance. (required)
     * @return ApiResponse&lt;List&lt;UsedBy&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UsedBy>> managedBlueprintsUsedByListWithHttpInfo(UUID instanceUuid) throws ApiException {
        okhttp3.Call localVarCall = managedBlueprintsUsedByListValidateBeforeCall(instanceUuid, null);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of all objects that use this object
     * @param instanceUuid A UUID string identifying this Blueprint Instance. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managedBlueprintsUsedByListAsync(UUID instanceUuid, final ApiCallback<List<UsedBy>> _callback) throws ApiException {

        okhttp3.Call localVarCall = managedBlueprintsUsedByListValidateBeforeCall(instanceUuid, _callback);
        Type localVarReturnType = new TypeToken<List<UsedBy>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
