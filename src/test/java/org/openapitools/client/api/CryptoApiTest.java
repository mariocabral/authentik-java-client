/*
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.6.3
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CertificateData;
import org.openapitools.client.model.CertificateGenerationRequest;
import org.openapitools.client.model.CertificateKeyPair;
import org.openapitools.client.model.CertificateKeyPairRequest;
import org.openapitools.client.model.GenericError;
import org.openapitools.client.model.PaginatedCertificateKeyPairList;
import org.openapitools.client.model.PatchedCertificateKeyPairRequest;
import java.util.UUID;
import org.openapitools.client.model.UsedBy;
import org.openapitools.client.model.ValidationError;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CryptoApi
 */
@Disabled
public class CryptoApiTest {

    private final CryptoApi api = new CryptoApi();

    /**
     * CertificateKeyPair Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cryptoCertificatekeypairsCreateTest() throws ApiException {
        CertificateKeyPairRequest certificateKeyPairRequest = null;
        CertificateKeyPair response = api.cryptoCertificatekeypairsCreate(certificateKeyPairRequest);
        // TODO: test validations
    }

    /**
     * CertificateKeyPair Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cryptoCertificatekeypairsDestroyTest() throws ApiException {
        UUID kpUuid = null;
        api.cryptoCertificatekeypairsDestroy(kpUuid);
        // TODO: test validations
    }

    /**
     * Generate a new, self-signed certificate-key pair
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cryptoCertificatekeypairsGenerateCreateTest() throws ApiException {
        CertificateGenerationRequest certificateGenerationRequest = null;
        CertificateKeyPair response = api.cryptoCertificatekeypairsGenerateCreate(certificateGenerationRequest);
        // TODO: test validations
    }

    /**
     * CertificateKeyPair Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cryptoCertificatekeypairsListTest() throws ApiException {
        Boolean hasKey = null;
        Boolean includeDetails = null;
        String managed = null;
        String name = null;
        String ordering = null;
        Integer page = null;
        Integer pageSize = null;
        String search = null;
        PaginatedCertificateKeyPairList response = api.cryptoCertificatekeypairsList(hasKey, includeDetails, managed, name, ordering, page, pageSize, search);
        // TODO: test validations
    }

    /**
     * CertificateKeyPair Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cryptoCertificatekeypairsPartialUpdateTest() throws ApiException {
        UUID kpUuid = null;
        PatchedCertificateKeyPairRequest patchedCertificateKeyPairRequest = null;
        CertificateKeyPair response = api.cryptoCertificatekeypairsPartialUpdate(kpUuid, patchedCertificateKeyPairRequest);
        // TODO: test validations
    }

    /**
     * CertificateKeyPair Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cryptoCertificatekeypairsRetrieveTest() throws ApiException {
        UUID kpUuid = null;
        CertificateKeyPair response = api.cryptoCertificatekeypairsRetrieve(kpUuid);
        // TODO: test validations
    }

    /**
     * CertificateKeyPair Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cryptoCertificatekeypairsUpdateTest() throws ApiException {
        UUID kpUuid = null;
        CertificateKeyPairRequest certificateKeyPairRequest = null;
        CertificateKeyPair response = api.cryptoCertificatekeypairsUpdate(kpUuid, certificateKeyPairRequest);
        // TODO: test validations
    }

    /**
     * Get a list of all objects that use this object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cryptoCertificatekeypairsUsedByListTest() throws ApiException {
        UUID kpUuid = null;
        List<UsedBy> response = api.cryptoCertificatekeypairsUsedByList(kpUuid);
        // TODO: test validations
    }

    /**
     * Return certificate-key pairs certificate and log access
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cryptoCertificatekeypairsViewCertificateRetrieveTest() throws ApiException {
        UUID kpUuid = null;
        Boolean download = null;
        CertificateData response = api.cryptoCertificatekeypairsViewCertificateRetrieve(kpUuid, download);
        // TODO: test validations
    }

    /**
     * Return certificate-key pairs private key and log access
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cryptoCertificatekeypairsViewPrivateKeyRetrieveTest() throws ApiException {
        UUID kpUuid = null;
        Boolean download = null;
        CertificateData response = api.cryptoCertificatekeypairsViewPrivateKeyRetrieve(kpUuid, download);
        // TODO: test validations
    }

}
