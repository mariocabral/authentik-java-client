/*
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.6.3
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ExpiringBaseGrantModel;
import org.openapitools.client.model.GenericError;
import org.openapitools.client.model.PaginatedExpiringBaseGrantModelList;
import org.openapitools.client.model.PaginatedTokenModelList;
import org.openapitools.client.model.TokenModel;
import org.openapitools.client.model.UsedBy;
import org.openapitools.client.model.ValidationError;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for Oauth2Api
 */
@Disabled
public class Oauth2ApiTest {

    private final Oauth2Api api = new Oauth2Api();

    /**
     * AccessToken Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void oauth2AccessTokensDestroyTest() throws ApiException {
        Integer id = null;
        api.oauth2AccessTokensDestroy(id);
        // TODO: test validations
    }

    /**
     * AccessToken Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void oauth2AccessTokensListTest() throws ApiException {
        String ordering = null;
        Integer page = null;
        Integer pageSize = null;
        Integer provider = null;
        String search = null;
        Integer user = null;
        PaginatedTokenModelList response = api.oauth2AccessTokensList(ordering, page, pageSize, provider, search, user);
        // TODO: test validations
    }

    /**
     * AccessToken Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void oauth2AccessTokensRetrieveTest() throws ApiException {
        Integer id = null;
        TokenModel response = api.oauth2AccessTokensRetrieve(id);
        // TODO: test validations
    }

    /**
     * Get a list of all objects that use this object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void oauth2AccessTokensUsedByListTest() throws ApiException {
        Integer id = null;
        List<UsedBy> response = api.oauth2AccessTokensUsedByList(id);
        // TODO: test validations
    }

    /**
     * AuthorizationCode Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void oauth2AuthorizationCodesDestroyTest() throws ApiException {
        Integer id = null;
        api.oauth2AuthorizationCodesDestroy(id);
        // TODO: test validations
    }

    /**
     * AuthorizationCode Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void oauth2AuthorizationCodesListTest() throws ApiException {
        String ordering = null;
        Integer page = null;
        Integer pageSize = null;
        Integer provider = null;
        String search = null;
        Integer user = null;
        PaginatedExpiringBaseGrantModelList response = api.oauth2AuthorizationCodesList(ordering, page, pageSize, provider, search, user);
        // TODO: test validations
    }

    /**
     * AuthorizationCode Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void oauth2AuthorizationCodesRetrieveTest() throws ApiException {
        Integer id = null;
        ExpiringBaseGrantModel response = api.oauth2AuthorizationCodesRetrieve(id);
        // TODO: test validations
    }

    /**
     * Get a list of all objects that use this object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void oauth2AuthorizationCodesUsedByListTest() throws ApiException {
        Integer id = null;
        List<UsedBy> response = api.oauth2AuthorizationCodesUsedByList(id);
        // TODO: test validations
    }

    /**
     * RefreshToken Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void oauth2RefreshTokensDestroyTest() throws ApiException {
        Integer id = null;
        api.oauth2RefreshTokensDestroy(id);
        // TODO: test validations
    }

    /**
     * RefreshToken Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void oauth2RefreshTokensListTest() throws ApiException {
        String ordering = null;
        Integer page = null;
        Integer pageSize = null;
        Integer provider = null;
        String search = null;
        Integer user = null;
        PaginatedTokenModelList response = api.oauth2RefreshTokensList(ordering, page, pageSize, provider, search, user);
        // TODO: test validations
    }

    /**
     * RefreshToken Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void oauth2RefreshTokensRetrieveTest() throws ApiException {
        Integer id = null;
        TokenModel response = api.oauth2RefreshTokensRetrieve(id);
        // TODO: test validations
    }

    /**
     * Get a list of all objects that use this object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void oauth2RefreshTokensUsedByListTest() throws ApiException {
        Integer id = null;
        List<UsedBy> response = api.oauth2RefreshTokensUsedByList(id);
        // TODO: test validations
    }

}
