/*
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.6.3
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.GenericError;
import org.openapitools.client.model.InstallID;
import org.openapitools.client.model.License;
import org.openapitools.client.model.LicenseForecast;
import org.openapitools.client.model.LicenseRequest;
import org.openapitools.client.model.LicenseSummary;
import org.openapitools.client.model.PaginatedLicenseList;
import org.openapitools.client.model.PatchedLicenseRequest;
import java.util.UUID;
import org.openapitools.client.model.UsedBy;
import org.openapitools.client.model.ValidationError;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EnterpriseApi
 */
@Disabled
public class EnterpriseApiTest {

    private final EnterpriseApi api = new EnterpriseApi();

    /**
     * License Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enterpriseLicenseCreateTest() throws ApiException {
        LicenseRequest licenseRequest = null;
        License response = api.enterpriseLicenseCreate(licenseRequest);
        // TODO: test validations
    }

    /**
     * License Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enterpriseLicenseDestroyTest() throws ApiException {
        UUID licenseUuid = null;
        api.enterpriseLicenseDestroy(licenseUuid);
        // TODO: test validations
    }

    /**
     * Forecast how many users will be required in a year
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enterpriseLicenseForecastRetrieveTest() throws ApiException {
        LicenseForecast response = api.enterpriseLicenseForecastRetrieve();
        // TODO: test validations
    }

    /**
     * Get install_id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enterpriseLicenseGetInstallIdRetrieveTest() throws ApiException {
        InstallID response = api.enterpriseLicenseGetInstallIdRetrieve();
        // TODO: test validations
    }

    /**
     * License Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enterpriseLicenseListTest() throws ApiException {
        String name = null;
        String ordering = null;
        Integer page = null;
        Integer pageSize = null;
        String search = null;
        PaginatedLicenseList response = api.enterpriseLicenseList(name, ordering, page, pageSize, search);
        // TODO: test validations
    }

    /**
     * License Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enterpriseLicensePartialUpdateTest() throws ApiException {
        UUID licenseUuid = null;
        PatchedLicenseRequest patchedLicenseRequest = null;
        License response = api.enterpriseLicensePartialUpdate(licenseUuid, patchedLicenseRequest);
        // TODO: test validations
    }

    /**
     * License Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enterpriseLicenseRetrieveTest() throws ApiException {
        UUID licenseUuid = null;
        License response = api.enterpriseLicenseRetrieve(licenseUuid);
        // TODO: test validations
    }

    /**
     * Get the total license status
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enterpriseLicenseSummaryRetrieveTest() throws ApiException {
        LicenseSummary response = api.enterpriseLicenseSummaryRetrieve();
        // TODO: test validations
    }

    /**
     * License Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enterpriseLicenseUpdateTest() throws ApiException {
        UUID licenseUuid = null;
        LicenseRequest licenseRequest = null;
        License response = api.enterpriseLicenseUpdate(licenseUuid, licenseRequest);
        // TODO: test validations
    }

    /**
     * Get a list of all objects that use this object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enterpriseLicenseUsedByListTest() throws ApiException {
        UUID licenseUuid = null;
        List<UsedBy> response = api.enterpriseLicenseUsedByList(licenseUuid);
        // TODO: test validations
    }

}
