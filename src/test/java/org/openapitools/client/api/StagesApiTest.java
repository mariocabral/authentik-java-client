/*
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.6.3
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AuthenticatorDuoStage;
import org.openapitools.client.model.AuthenticatorDuoStageDeviceImportResponse;
import org.openapitools.client.model.AuthenticatorDuoStageManualDeviceImportRequest;
import org.openapitools.client.model.AuthenticatorDuoStageRequest;
import org.openapitools.client.model.AuthenticatorSMSStage;
import org.openapitools.client.model.AuthenticatorSMSStageRequest;
import org.openapitools.client.model.AuthenticatorStaticStage;
import org.openapitools.client.model.AuthenticatorStaticStageRequest;
import org.openapitools.client.model.AuthenticatorTOTPStage;
import org.openapitools.client.model.AuthenticatorTOTPStageRequest;
import org.openapitools.client.model.AuthenticatorValidateStage;
import org.openapitools.client.model.AuthenticatorValidateStageRequest;
import org.openapitools.client.model.AuthenticatorWebAuthnStage;
import org.openapitools.client.model.AuthenticatorWebAuthnStageRequest;
import org.openapitools.client.model.CaptchaStage;
import org.openapitools.client.model.CaptchaStageRequest;
import org.openapitools.client.model.ConsentStage;
import org.openapitools.client.model.ConsentStageRequest;
import org.openapitools.client.model.DenyStage;
import org.openapitools.client.model.DenyStageRequest;
import org.openapitools.client.model.DummyStage;
import org.openapitools.client.model.DummyStageRequest;
import org.openapitools.client.model.DuoDeviceEnrollmentStatus;
import org.openapitools.client.model.EmailStage;
import org.openapitools.client.model.EmailStageRequest;
import org.openapitools.client.model.GenericError;
import org.openapitools.client.model.IdentificationStage;
import org.openapitools.client.model.IdentificationStageRequest;
import org.openapitools.client.model.Invitation;
import org.openapitools.client.model.InvitationRequest;
import org.openapitools.client.model.InvitationStage;
import org.openapitools.client.model.InvitationStageRequest;
import java.time.OffsetDateTime;
import org.openapitools.client.model.PaginatedAuthenticatorDuoStageList;
import org.openapitools.client.model.PaginatedAuthenticatorSMSStageList;
import org.openapitools.client.model.PaginatedAuthenticatorStaticStageList;
import org.openapitools.client.model.PaginatedAuthenticatorTOTPStageList;
import org.openapitools.client.model.PaginatedAuthenticatorValidateStageList;
import org.openapitools.client.model.PaginatedAuthenticatorWebAuthnStageList;
import org.openapitools.client.model.PaginatedCaptchaStageList;
import org.openapitools.client.model.PaginatedConsentStageList;
import org.openapitools.client.model.PaginatedDenyStageList;
import org.openapitools.client.model.PaginatedDummyStageList;
import org.openapitools.client.model.PaginatedEmailStageList;
import org.openapitools.client.model.PaginatedIdentificationStageList;
import org.openapitools.client.model.PaginatedInvitationList;
import org.openapitools.client.model.PaginatedInvitationStageList;
import org.openapitools.client.model.PaginatedPasswordStageList;
import org.openapitools.client.model.PaginatedPromptList;
import org.openapitools.client.model.PaginatedPromptStageList;
import org.openapitools.client.model.PaginatedSourceStageList;
import org.openapitools.client.model.PaginatedStageList;
import org.openapitools.client.model.PaginatedUserDeleteStageList;
import org.openapitools.client.model.PaginatedUserLoginStageList;
import org.openapitools.client.model.PaginatedUserLogoutStageList;
import org.openapitools.client.model.PaginatedUserWriteStageList;
import org.openapitools.client.model.PaginatedWebAuthnDeviceTypeList;
import org.openapitools.client.model.PasswordStage;
import org.openapitools.client.model.PasswordStageRequest;
import org.openapitools.client.model.PatchedAuthenticatorDuoStageRequest;
import org.openapitools.client.model.PatchedAuthenticatorSMSStageRequest;
import org.openapitools.client.model.PatchedAuthenticatorStaticStageRequest;
import org.openapitools.client.model.PatchedAuthenticatorTOTPStageRequest;
import org.openapitools.client.model.PatchedAuthenticatorValidateStageRequest;
import org.openapitools.client.model.PatchedAuthenticatorWebAuthnStageRequest;
import org.openapitools.client.model.PatchedCaptchaStageRequest;
import org.openapitools.client.model.PatchedConsentStageRequest;
import org.openapitools.client.model.PatchedDenyStageRequest;
import org.openapitools.client.model.PatchedDummyStageRequest;
import org.openapitools.client.model.PatchedEmailStageRequest;
import org.openapitools.client.model.PatchedIdentificationStageRequest;
import org.openapitools.client.model.PatchedInvitationRequest;
import org.openapitools.client.model.PatchedInvitationStageRequest;
import org.openapitools.client.model.PatchedPasswordStageRequest;
import org.openapitools.client.model.PatchedPromptRequest;
import org.openapitools.client.model.PatchedPromptStageRequest;
import org.openapitools.client.model.PatchedSourceStageRequest;
import org.openapitools.client.model.PatchedUserDeleteStageRequest;
import org.openapitools.client.model.PatchedUserLoginStageRequest;
import org.openapitools.client.model.PatchedUserLogoutStageRequest;
import org.openapitools.client.model.PatchedUserWriteStageRequest;
import org.openapitools.client.model.Prompt;
import org.openapitools.client.model.PromptChallenge;
import org.openapitools.client.model.PromptRequest;
import org.openapitools.client.model.PromptStage;
import org.openapitools.client.model.PromptStageRequest;
import org.openapitools.client.model.SourceStage;
import org.openapitools.client.model.SourceStageRequest;
import org.openapitools.client.model.Stage;
import org.openapitools.client.model.TypeCreate;
import java.util.UUID;
import org.openapitools.client.model.UsedBy;
import org.openapitools.client.model.UserDeleteStage;
import org.openapitools.client.model.UserDeleteStageRequest;
import org.openapitools.client.model.UserLoginStage;
import org.openapitools.client.model.UserLoginStageRequest;
import org.openapitools.client.model.UserLogoutStage;
import org.openapitools.client.model.UserLogoutStageRequest;
import org.openapitools.client.model.UserSetting;
import org.openapitools.client.model.UserWriteStage;
import org.openapitools.client.model.UserWriteStageRequest;
import org.openapitools.client.model.ValidationError;
import org.openapitools.client.model.WebAuthnDeviceType;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for StagesApi
 */
@Disabled
public class StagesApiTest {

    private final StagesApi api = new StagesApi();

    /**
     * Stage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesAllDestroyTest() throws ApiException {
        UUID stageUuid = null;
        api.stagesAllDestroy(stageUuid);
        // TODO: test validations
    }

    /**
     * Stage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesAllListTest() throws ApiException {
        String name = null;
        String ordering = null;
        Integer page = null;
        Integer pageSize = null;
        String search = null;
        PaginatedStageList response = api.stagesAllList(name, ordering, page, pageSize, search);
        // TODO: test validations
    }

    /**
     * Stage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesAllRetrieveTest() throws ApiException {
        UUID stageUuid = null;
        Stage response = api.stagesAllRetrieve(stageUuid);
        // TODO: test validations
    }

    /**
     * Get all creatable types
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesAllTypesListTest() throws ApiException {
        List<TypeCreate> response = api.stagesAllTypesList();
        // TODO: test validations
    }

    /**
     * Get a list of all objects that use this object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesAllUsedByListTest() throws ApiException {
        UUID stageUuid = null;
        List<UsedBy> response = api.stagesAllUsedByList(stageUuid);
        // TODO: test validations
    }

    /**
     * Get all stages the user can configure
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesAllUserSettingsListTest() throws ApiException {
        List<UserSetting> response = api.stagesAllUserSettingsList();
        // TODO: test validations
    }

    /**
     * AuthenticatorDuoStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesAuthenticatorDuoCreateTest() throws ApiException {
        AuthenticatorDuoStageRequest authenticatorDuoStageRequest = null;
        AuthenticatorDuoStage response = api.stagesAuthenticatorDuoCreate(authenticatorDuoStageRequest);
        // TODO: test validations
    }

    /**
     * AuthenticatorDuoStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesAuthenticatorDuoDestroyTest() throws ApiException {
        UUID stageUuid = null;
        api.stagesAuthenticatorDuoDestroy(stageUuid);
        // TODO: test validations
    }

    /**
     * Check enrollment status of user details in current session
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesAuthenticatorDuoEnrollmentStatusCreateTest() throws ApiException {
        UUID stageUuid = null;
        DuoDeviceEnrollmentStatus response = api.stagesAuthenticatorDuoEnrollmentStatusCreate(stageUuid);
        // TODO: test validations
    }

    /**
     * Import duo devices into authentik
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesAuthenticatorDuoImportDeviceManualCreateTest() throws ApiException {
        UUID stageUuid = null;
        AuthenticatorDuoStageManualDeviceImportRequest authenticatorDuoStageManualDeviceImportRequest = null;
        api.stagesAuthenticatorDuoImportDeviceManualCreate(stageUuid, authenticatorDuoStageManualDeviceImportRequest);
        // TODO: test validations
    }

    /**
     * Import duo devices into authentik
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesAuthenticatorDuoImportDevicesAutomaticCreateTest() throws ApiException {
        UUID stageUuid = null;
        AuthenticatorDuoStageDeviceImportResponse response = api.stagesAuthenticatorDuoImportDevicesAutomaticCreate(stageUuid);
        // TODO: test validations
    }

    /**
     * AuthenticatorDuoStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesAuthenticatorDuoListTest() throws ApiException {
        String apiHostname = null;
        String clientId = null;
        UUID configureFlow = null;
        String name = null;
        String ordering = null;
        Integer page = null;
        Integer pageSize = null;
        String search = null;
        PaginatedAuthenticatorDuoStageList response = api.stagesAuthenticatorDuoList(apiHostname, clientId, configureFlow, name, ordering, page, pageSize, search);
        // TODO: test validations
    }

    /**
     * AuthenticatorDuoStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesAuthenticatorDuoPartialUpdateTest() throws ApiException {
        UUID stageUuid = null;
        PatchedAuthenticatorDuoStageRequest patchedAuthenticatorDuoStageRequest = null;
        AuthenticatorDuoStage response = api.stagesAuthenticatorDuoPartialUpdate(stageUuid, patchedAuthenticatorDuoStageRequest);
        // TODO: test validations
    }

    /**
     * AuthenticatorDuoStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesAuthenticatorDuoRetrieveTest() throws ApiException {
        UUID stageUuid = null;
        AuthenticatorDuoStage response = api.stagesAuthenticatorDuoRetrieve(stageUuid);
        // TODO: test validations
    }

    /**
     * AuthenticatorDuoStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesAuthenticatorDuoUpdateTest() throws ApiException {
        UUID stageUuid = null;
        AuthenticatorDuoStageRequest authenticatorDuoStageRequest = null;
        AuthenticatorDuoStage response = api.stagesAuthenticatorDuoUpdate(stageUuid, authenticatorDuoStageRequest);
        // TODO: test validations
    }

    /**
     * Get a list of all objects that use this object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesAuthenticatorDuoUsedByListTest() throws ApiException {
        UUID stageUuid = null;
        List<UsedBy> response = api.stagesAuthenticatorDuoUsedByList(stageUuid);
        // TODO: test validations
    }

    /**
     * AuthenticatorSMSStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesAuthenticatorSmsCreateTest() throws ApiException {
        AuthenticatorSMSStageRequest authenticatorSMSStageRequest = null;
        AuthenticatorSMSStage response = api.stagesAuthenticatorSmsCreate(authenticatorSMSStageRequest);
        // TODO: test validations
    }

    /**
     * AuthenticatorSMSStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesAuthenticatorSmsDestroyTest() throws ApiException {
        UUID stageUuid = null;
        api.stagesAuthenticatorSmsDestroy(stageUuid);
        // TODO: test validations
    }

    /**
     * AuthenticatorSMSStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesAuthenticatorSmsListTest() throws ApiException {
        String accountSid = null;
        String auth = null;
        String authPassword = null;
        String authType = null;
        UUID configureFlow = null;
        String friendlyName = null;
        String fromNumber = null;
        UUID mapping = null;
        String name = null;
        String ordering = null;
        Integer page = null;
        Integer pageSize = null;
        String provider = null;
        String search = null;
        UUID stageUuid = null;
        Boolean verifyOnly = null;
        PaginatedAuthenticatorSMSStageList response = api.stagesAuthenticatorSmsList(accountSid, auth, authPassword, authType, configureFlow, friendlyName, fromNumber, mapping, name, ordering, page, pageSize, provider, search, stageUuid, verifyOnly);
        // TODO: test validations
    }

    /**
     * AuthenticatorSMSStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesAuthenticatorSmsPartialUpdateTest() throws ApiException {
        UUID stageUuid = null;
        PatchedAuthenticatorSMSStageRequest patchedAuthenticatorSMSStageRequest = null;
        AuthenticatorSMSStage response = api.stagesAuthenticatorSmsPartialUpdate(stageUuid, patchedAuthenticatorSMSStageRequest);
        // TODO: test validations
    }

    /**
     * AuthenticatorSMSStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesAuthenticatorSmsRetrieveTest() throws ApiException {
        UUID stageUuid = null;
        AuthenticatorSMSStage response = api.stagesAuthenticatorSmsRetrieve(stageUuid);
        // TODO: test validations
    }

    /**
     * AuthenticatorSMSStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesAuthenticatorSmsUpdateTest() throws ApiException {
        UUID stageUuid = null;
        AuthenticatorSMSStageRequest authenticatorSMSStageRequest = null;
        AuthenticatorSMSStage response = api.stagesAuthenticatorSmsUpdate(stageUuid, authenticatorSMSStageRequest);
        // TODO: test validations
    }

    /**
     * Get a list of all objects that use this object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesAuthenticatorSmsUsedByListTest() throws ApiException {
        UUID stageUuid = null;
        List<UsedBy> response = api.stagesAuthenticatorSmsUsedByList(stageUuid);
        // TODO: test validations
    }

    /**
     * AuthenticatorStaticStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesAuthenticatorStaticCreateTest() throws ApiException {
        AuthenticatorStaticStageRequest authenticatorStaticStageRequest = null;
        AuthenticatorStaticStage response = api.stagesAuthenticatorStaticCreate(authenticatorStaticStageRequest);
        // TODO: test validations
    }

    /**
     * AuthenticatorStaticStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesAuthenticatorStaticDestroyTest() throws ApiException {
        UUID stageUuid = null;
        api.stagesAuthenticatorStaticDestroy(stageUuid);
        // TODO: test validations
    }

    /**
     * AuthenticatorStaticStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesAuthenticatorStaticListTest() throws ApiException {
        UUID configureFlow = null;
        String friendlyName = null;
        String name = null;
        String ordering = null;
        Integer page = null;
        Integer pageSize = null;
        String search = null;
        UUID stageUuid = null;
        Integer tokenCount = null;
        Integer tokenLength = null;
        PaginatedAuthenticatorStaticStageList response = api.stagesAuthenticatorStaticList(configureFlow, friendlyName, name, ordering, page, pageSize, search, stageUuid, tokenCount, tokenLength);
        // TODO: test validations
    }

    /**
     * AuthenticatorStaticStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesAuthenticatorStaticPartialUpdateTest() throws ApiException {
        UUID stageUuid = null;
        PatchedAuthenticatorStaticStageRequest patchedAuthenticatorStaticStageRequest = null;
        AuthenticatorStaticStage response = api.stagesAuthenticatorStaticPartialUpdate(stageUuid, patchedAuthenticatorStaticStageRequest);
        // TODO: test validations
    }

    /**
     * AuthenticatorStaticStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesAuthenticatorStaticRetrieveTest() throws ApiException {
        UUID stageUuid = null;
        AuthenticatorStaticStage response = api.stagesAuthenticatorStaticRetrieve(stageUuid);
        // TODO: test validations
    }

    /**
     * AuthenticatorStaticStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesAuthenticatorStaticUpdateTest() throws ApiException {
        UUID stageUuid = null;
        AuthenticatorStaticStageRequest authenticatorStaticStageRequest = null;
        AuthenticatorStaticStage response = api.stagesAuthenticatorStaticUpdate(stageUuid, authenticatorStaticStageRequest);
        // TODO: test validations
    }

    /**
     * Get a list of all objects that use this object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesAuthenticatorStaticUsedByListTest() throws ApiException {
        UUID stageUuid = null;
        List<UsedBy> response = api.stagesAuthenticatorStaticUsedByList(stageUuid);
        // TODO: test validations
    }

    /**
     * AuthenticatorTOTPStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesAuthenticatorTotpCreateTest() throws ApiException {
        AuthenticatorTOTPStageRequest authenticatorTOTPStageRequest = null;
        AuthenticatorTOTPStage response = api.stagesAuthenticatorTotpCreate(authenticatorTOTPStageRequest);
        // TODO: test validations
    }

    /**
     * AuthenticatorTOTPStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesAuthenticatorTotpDestroyTest() throws ApiException {
        UUID stageUuid = null;
        api.stagesAuthenticatorTotpDestroy(stageUuid);
        // TODO: test validations
    }

    /**
     * AuthenticatorTOTPStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesAuthenticatorTotpListTest() throws ApiException {
        UUID configureFlow = null;
        String digits = null;
        String friendlyName = null;
        String name = null;
        String ordering = null;
        Integer page = null;
        Integer pageSize = null;
        String search = null;
        UUID stageUuid = null;
        PaginatedAuthenticatorTOTPStageList response = api.stagesAuthenticatorTotpList(configureFlow, digits, friendlyName, name, ordering, page, pageSize, search, stageUuid);
        // TODO: test validations
    }

    /**
     * AuthenticatorTOTPStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesAuthenticatorTotpPartialUpdateTest() throws ApiException {
        UUID stageUuid = null;
        PatchedAuthenticatorTOTPStageRequest patchedAuthenticatorTOTPStageRequest = null;
        AuthenticatorTOTPStage response = api.stagesAuthenticatorTotpPartialUpdate(stageUuid, patchedAuthenticatorTOTPStageRequest);
        // TODO: test validations
    }

    /**
     * AuthenticatorTOTPStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesAuthenticatorTotpRetrieveTest() throws ApiException {
        UUID stageUuid = null;
        AuthenticatorTOTPStage response = api.stagesAuthenticatorTotpRetrieve(stageUuid);
        // TODO: test validations
    }

    /**
     * AuthenticatorTOTPStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesAuthenticatorTotpUpdateTest() throws ApiException {
        UUID stageUuid = null;
        AuthenticatorTOTPStageRequest authenticatorTOTPStageRequest = null;
        AuthenticatorTOTPStage response = api.stagesAuthenticatorTotpUpdate(stageUuid, authenticatorTOTPStageRequest);
        // TODO: test validations
    }

    /**
     * Get a list of all objects that use this object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesAuthenticatorTotpUsedByListTest() throws ApiException {
        UUID stageUuid = null;
        List<UsedBy> response = api.stagesAuthenticatorTotpUsedByList(stageUuid);
        // TODO: test validations
    }

    /**
     * AuthenticatorValidateStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesAuthenticatorValidateCreateTest() throws ApiException {
        AuthenticatorValidateStageRequest authenticatorValidateStageRequest = null;
        AuthenticatorValidateStage response = api.stagesAuthenticatorValidateCreate(authenticatorValidateStageRequest);
        // TODO: test validations
    }

    /**
     * AuthenticatorValidateStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesAuthenticatorValidateDestroyTest() throws ApiException {
        UUID stageUuid = null;
        api.stagesAuthenticatorValidateDestroy(stageUuid);
        // TODO: test validations
    }

    /**
     * AuthenticatorValidateStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesAuthenticatorValidateListTest() throws ApiException {
        List<UUID> configurationStages = null;
        String name = null;
        String notConfiguredAction = null;
        String ordering = null;
        Integer page = null;
        Integer pageSize = null;
        String search = null;
        PaginatedAuthenticatorValidateStageList response = api.stagesAuthenticatorValidateList(configurationStages, name, notConfiguredAction, ordering, page, pageSize, search);
        // TODO: test validations
    }

    /**
     * AuthenticatorValidateStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesAuthenticatorValidatePartialUpdateTest() throws ApiException {
        UUID stageUuid = null;
        PatchedAuthenticatorValidateStageRequest patchedAuthenticatorValidateStageRequest = null;
        AuthenticatorValidateStage response = api.stagesAuthenticatorValidatePartialUpdate(stageUuid, patchedAuthenticatorValidateStageRequest);
        // TODO: test validations
    }

    /**
     * AuthenticatorValidateStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesAuthenticatorValidateRetrieveTest() throws ApiException {
        UUID stageUuid = null;
        AuthenticatorValidateStage response = api.stagesAuthenticatorValidateRetrieve(stageUuid);
        // TODO: test validations
    }

    /**
     * AuthenticatorValidateStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesAuthenticatorValidateUpdateTest() throws ApiException {
        UUID stageUuid = null;
        AuthenticatorValidateStageRequest authenticatorValidateStageRequest = null;
        AuthenticatorValidateStage response = api.stagesAuthenticatorValidateUpdate(stageUuid, authenticatorValidateStageRequest);
        // TODO: test validations
    }

    /**
     * Get a list of all objects that use this object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesAuthenticatorValidateUsedByListTest() throws ApiException {
        UUID stageUuid = null;
        List<UsedBy> response = api.stagesAuthenticatorValidateUsedByList(stageUuid);
        // TODO: test validations
    }

    /**
     * AuthenticatorWebAuthnStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesAuthenticatorWebauthnCreateTest() throws ApiException {
        AuthenticatorWebAuthnStageRequest authenticatorWebAuthnStageRequest = null;
        AuthenticatorWebAuthnStage response = api.stagesAuthenticatorWebauthnCreate(authenticatorWebAuthnStageRequest);
        // TODO: test validations
    }

    /**
     * AuthenticatorWebAuthnStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesAuthenticatorWebauthnDestroyTest() throws ApiException {
        UUID stageUuid = null;
        api.stagesAuthenticatorWebauthnDestroy(stageUuid);
        // TODO: test validations
    }

    /**
     * WebAuthnDeviceType Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesAuthenticatorWebauthnDeviceTypesListTest() throws ApiException {
        UUID aaguid = null;
        String description = null;
        String icon = null;
        String ordering = null;
        Integer page = null;
        Integer pageSize = null;
        String search = null;
        PaginatedWebAuthnDeviceTypeList response = api.stagesAuthenticatorWebauthnDeviceTypesList(aaguid, description, icon, ordering, page, pageSize, search);
        // TODO: test validations
    }

    /**
     * WebAuthnDeviceType Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesAuthenticatorWebauthnDeviceTypesRetrieveTest() throws ApiException {
        UUID aaguid = null;
        WebAuthnDeviceType response = api.stagesAuthenticatorWebauthnDeviceTypesRetrieve(aaguid);
        // TODO: test validations
    }

    /**
     * AuthenticatorWebAuthnStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesAuthenticatorWebauthnListTest() throws ApiException {
        String authenticatorAttachment = null;
        UUID configureFlow = null;
        List<UUID> deviceTypeRestrictions = null;
        String friendlyName = null;
        String name = null;
        String ordering = null;
        Integer page = null;
        Integer pageSize = null;
        String residentKeyRequirement = null;
        String search = null;
        UUID stageUuid = null;
        String userVerification = null;
        PaginatedAuthenticatorWebAuthnStageList response = api.stagesAuthenticatorWebauthnList(authenticatorAttachment, configureFlow, deviceTypeRestrictions, friendlyName, name, ordering, page, pageSize, residentKeyRequirement, search, stageUuid, userVerification);
        // TODO: test validations
    }

    /**
     * AuthenticatorWebAuthnStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesAuthenticatorWebauthnPartialUpdateTest() throws ApiException {
        UUID stageUuid = null;
        PatchedAuthenticatorWebAuthnStageRequest patchedAuthenticatorWebAuthnStageRequest = null;
        AuthenticatorWebAuthnStage response = api.stagesAuthenticatorWebauthnPartialUpdate(stageUuid, patchedAuthenticatorWebAuthnStageRequest);
        // TODO: test validations
    }

    /**
     * AuthenticatorWebAuthnStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesAuthenticatorWebauthnRetrieveTest() throws ApiException {
        UUID stageUuid = null;
        AuthenticatorWebAuthnStage response = api.stagesAuthenticatorWebauthnRetrieve(stageUuid);
        // TODO: test validations
    }

    /**
     * AuthenticatorWebAuthnStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesAuthenticatorWebauthnUpdateTest() throws ApiException {
        UUID stageUuid = null;
        AuthenticatorWebAuthnStageRequest authenticatorWebAuthnStageRequest = null;
        AuthenticatorWebAuthnStage response = api.stagesAuthenticatorWebauthnUpdate(stageUuid, authenticatorWebAuthnStageRequest);
        // TODO: test validations
    }

    /**
     * Get a list of all objects that use this object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesAuthenticatorWebauthnUsedByListTest() throws ApiException {
        UUID stageUuid = null;
        List<UsedBy> response = api.stagesAuthenticatorWebauthnUsedByList(stageUuid);
        // TODO: test validations
    }

    /**
     * CaptchaStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesCaptchaCreateTest() throws ApiException {
        CaptchaStageRequest captchaStageRequest = null;
        CaptchaStage response = api.stagesCaptchaCreate(captchaStageRequest);
        // TODO: test validations
    }

    /**
     * CaptchaStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesCaptchaDestroyTest() throws ApiException {
        UUID stageUuid = null;
        api.stagesCaptchaDestroy(stageUuid);
        // TODO: test validations
    }

    /**
     * CaptchaStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesCaptchaListTest() throws ApiException {
        String name = null;
        String ordering = null;
        Integer page = null;
        Integer pageSize = null;
        String publicKey = null;
        String search = null;
        PaginatedCaptchaStageList response = api.stagesCaptchaList(name, ordering, page, pageSize, publicKey, search);
        // TODO: test validations
    }

    /**
     * CaptchaStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesCaptchaPartialUpdateTest() throws ApiException {
        UUID stageUuid = null;
        PatchedCaptchaStageRequest patchedCaptchaStageRequest = null;
        CaptchaStage response = api.stagesCaptchaPartialUpdate(stageUuid, patchedCaptchaStageRequest);
        // TODO: test validations
    }

    /**
     * CaptchaStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesCaptchaRetrieveTest() throws ApiException {
        UUID stageUuid = null;
        CaptchaStage response = api.stagesCaptchaRetrieve(stageUuid);
        // TODO: test validations
    }

    /**
     * CaptchaStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesCaptchaUpdateTest() throws ApiException {
        UUID stageUuid = null;
        CaptchaStageRequest captchaStageRequest = null;
        CaptchaStage response = api.stagesCaptchaUpdate(stageUuid, captchaStageRequest);
        // TODO: test validations
    }

    /**
     * Get a list of all objects that use this object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesCaptchaUsedByListTest() throws ApiException {
        UUID stageUuid = null;
        List<UsedBy> response = api.stagesCaptchaUsedByList(stageUuid);
        // TODO: test validations
    }

    /**
     * ConsentStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesConsentCreateTest() throws ApiException {
        ConsentStageRequest consentStageRequest = null;
        ConsentStage response = api.stagesConsentCreate(consentStageRequest);
        // TODO: test validations
    }

    /**
     * ConsentStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesConsentDestroyTest() throws ApiException {
        UUID stageUuid = null;
        api.stagesConsentDestroy(stageUuid);
        // TODO: test validations
    }

    /**
     * ConsentStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesConsentListTest() throws ApiException {
        String consentExpireIn = null;
        String mode = null;
        String name = null;
        String ordering = null;
        Integer page = null;
        Integer pageSize = null;
        String search = null;
        UUID stageUuid = null;
        PaginatedConsentStageList response = api.stagesConsentList(consentExpireIn, mode, name, ordering, page, pageSize, search, stageUuid);
        // TODO: test validations
    }

    /**
     * ConsentStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesConsentPartialUpdateTest() throws ApiException {
        UUID stageUuid = null;
        PatchedConsentStageRequest patchedConsentStageRequest = null;
        ConsentStage response = api.stagesConsentPartialUpdate(stageUuid, patchedConsentStageRequest);
        // TODO: test validations
    }

    /**
     * ConsentStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesConsentRetrieveTest() throws ApiException {
        UUID stageUuid = null;
        ConsentStage response = api.stagesConsentRetrieve(stageUuid);
        // TODO: test validations
    }

    /**
     * ConsentStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesConsentUpdateTest() throws ApiException {
        UUID stageUuid = null;
        ConsentStageRequest consentStageRequest = null;
        ConsentStage response = api.stagesConsentUpdate(stageUuid, consentStageRequest);
        // TODO: test validations
    }

    /**
     * Get a list of all objects that use this object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesConsentUsedByListTest() throws ApiException {
        UUID stageUuid = null;
        List<UsedBy> response = api.stagesConsentUsedByList(stageUuid);
        // TODO: test validations
    }

    /**
     * DenyStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesDenyCreateTest() throws ApiException {
        DenyStageRequest denyStageRequest = null;
        DenyStage response = api.stagesDenyCreate(denyStageRequest);
        // TODO: test validations
    }

    /**
     * DenyStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesDenyDestroyTest() throws ApiException {
        UUID stageUuid = null;
        api.stagesDenyDestroy(stageUuid);
        // TODO: test validations
    }

    /**
     * DenyStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesDenyListTest() throws ApiException {
        String denyMessage = null;
        String name = null;
        String ordering = null;
        Integer page = null;
        Integer pageSize = null;
        String search = null;
        UUID stageUuid = null;
        PaginatedDenyStageList response = api.stagesDenyList(denyMessage, name, ordering, page, pageSize, search, stageUuid);
        // TODO: test validations
    }

    /**
     * DenyStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesDenyPartialUpdateTest() throws ApiException {
        UUID stageUuid = null;
        PatchedDenyStageRequest patchedDenyStageRequest = null;
        DenyStage response = api.stagesDenyPartialUpdate(stageUuid, patchedDenyStageRequest);
        // TODO: test validations
    }

    /**
     * DenyStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesDenyRetrieveTest() throws ApiException {
        UUID stageUuid = null;
        DenyStage response = api.stagesDenyRetrieve(stageUuid);
        // TODO: test validations
    }

    /**
     * DenyStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesDenyUpdateTest() throws ApiException {
        UUID stageUuid = null;
        DenyStageRequest denyStageRequest = null;
        DenyStage response = api.stagesDenyUpdate(stageUuid, denyStageRequest);
        // TODO: test validations
    }

    /**
     * Get a list of all objects that use this object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesDenyUsedByListTest() throws ApiException {
        UUID stageUuid = null;
        List<UsedBy> response = api.stagesDenyUsedByList(stageUuid);
        // TODO: test validations
    }

    /**
     * DummyStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesDummyCreateTest() throws ApiException {
        DummyStageRequest dummyStageRequest = null;
        DummyStage response = api.stagesDummyCreate(dummyStageRequest);
        // TODO: test validations
    }

    /**
     * DummyStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesDummyDestroyTest() throws ApiException {
        UUID stageUuid = null;
        api.stagesDummyDestroy(stageUuid);
        // TODO: test validations
    }

    /**
     * DummyStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesDummyListTest() throws ApiException {
        String name = null;
        String ordering = null;
        Integer page = null;
        Integer pageSize = null;
        String search = null;
        UUID stageUuid = null;
        Boolean throwError = null;
        PaginatedDummyStageList response = api.stagesDummyList(name, ordering, page, pageSize, search, stageUuid, throwError);
        // TODO: test validations
    }

    /**
     * DummyStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesDummyPartialUpdateTest() throws ApiException {
        UUID stageUuid = null;
        PatchedDummyStageRequest patchedDummyStageRequest = null;
        DummyStage response = api.stagesDummyPartialUpdate(stageUuid, patchedDummyStageRequest);
        // TODO: test validations
    }

    /**
     * DummyStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesDummyRetrieveTest() throws ApiException {
        UUID stageUuid = null;
        DummyStage response = api.stagesDummyRetrieve(stageUuid);
        // TODO: test validations
    }

    /**
     * DummyStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesDummyUpdateTest() throws ApiException {
        UUID stageUuid = null;
        DummyStageRequest dummyStageRequest = null;
        DummyStage response = api.stagesDummyUpdate(stageUuid, dummyStageRequest);
        // TODO: test validations
    }

    /**
     * Get a list of all objects that use this object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesDummyUsedByListTest() throws ApiException {
        UUID stageUuid = null;
        List<UsedBy> response = api.stagesDummyUsedByList(stageUuid);
        // TODO: test validations
    }

    /**
     * EmailStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesEmailCreateTest() throws ApiException {
        EmailStageRequest emailStageRequest = null;
        EmailStage response = api.stagesEmailCreate(emailStageRequest);
        // TODO: test validations
    }

    /**
     * EmailStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesEmailDestroyTest() throws ApiException {
        UUID stageUuid = null;
        api.stagesEmailDestroy(stageUuid);
        // TODO: test validations
    }

    /**
     * EmailStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesEmailListTest() throws ApiException {
        Boolean activateUserOnSuccess = null;
        String fromAddress = null;
        String host = null;
        String name = null;
        String ordering = null;
        Integer page = null;
        Integer pageSize = null;
        Integer port = null;
        String search = null;
        String subject = null;
        String template = null;
        Integer timeout = null;
        Integer tokenExpiry = null;
        Boolean useGlobalSettings = null;
        Boolean useSsl = null;
        Boolean useTls = null;
        String username = null;
        PaginatedEmailStageList response = api.stagesEmailList(activateUserOnSuccess, fromAddress, host, name, ordering, page, pageSize, port, search, subject, template, timeout, tokenExpiry, useGlobalSettings, useSsl, useTls, username);
        // TODO: test validations
    }

    /**
     * EmailStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesEmailPartialUpdateTest() throws ApiException {
        UUID stageUuid = null;
        PatchedEmailStageRequest patchedEmailStageRequest = null;
        EmailStage response = api.stagesEmailPartialUpdate(stageUuid, patchedEmailStageRequest);
        // TODO: test validations
    }

    /**
     * EmailStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesEmailRetrieveTest() throws ApiException {
        UUID stageUuid = null;
        EmailStage response = api.stagesEmailRetrieve(stageUuid);
        // TODO: test validations
    }

    /**
     * Get all available templates, including custom templates
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesEmailTemplatesListTest() throws ApiException {
        List<TypeCreate> response = api.stagesEmailTemplatesList();
        // TODO: test validations
    }

    /**
     * EmailStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesEmailUpdateTest() throws ApiException {
        UUID stageUuid = null;
        EmailStageRequest emailStageRequest = null;
        EmailStage response = api.stagesEmailUpdate(stageUuid, emailStageRequest);
        // TODO: test validations
    }

    /**
     * Get a list of all objects that use this object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesEmailUsedByListTest() throws ApiException {
        UUID stageUuid = null;
        List<UsedBy> response = api.stagesEmailUsedByList(stageUuid);
        // TODO: test validations
    }

    /**
     * IdentificationStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesIdentificationCreateTest() throws ApiException {
        IdentificationStageRequest identificationStageRequest = null;
        IdentificationStage response = api.stagesIdentificationCreate(identificationStageRequest);
        // TODO: test validations
    }

    /**
     * IdentificationStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesIdentificationDestroyTest() throws ApiException {
        UUID stageUuid = null;
        api.stagesIdentificationDestroy(stageUuid);
        // TODO: test validations
    }

    /**
     * IdentificationStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesIdentificationListTest() throws ApiException {
        Boolean caseInsensitiveMatching = null;
        UUID enrollmentFlow = null;
        String name = null;
        String ordering = null;
        Integer page = null;
        Integer pageSize = null;
        UUID passwordStage = null;
        UUID passwordlessFlow = null;
        UUID recoveryFlow = null;
        String search = null;
        Boolean showMatchedUser = null;
        Boolean showSourceLabels = null;
        PaginatedIdentificationStageList response = api.stagesIdentificationList(caseInsensitiveMatching, enrollmentFlow, name, ordering, page, pageSize, passwordStage, passwordlessFlow, recoveryFlow, search, showMatchedUser, showSourceLabels);
        // TODO: test validations
    }

    /**
     * IdentificationStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesIdentificationPartialUpdateTest() throws ApiException {
        UUID stageUuid = null;
        PatchedIdentificationStageRequest patchedIdentificationStageRequest = null;
        IdentificationStage response = api.stagesIdentificationPartialUpdate(stageUuid, patchedIdentificationStageRequest);
        // TODO: test validations
    }

    /**
     * IdentificationStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesIdentificationRetrieveTest() throws ApiException {
        UUID stageUuid = null;
        IdentificationStage response = api.stagesIdentificationRetrieve(stageUuid);
        // TODO: test validations
    }

    /**
     * IdentificationStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesIdentificationUpdateTest() throws ApiException {
        UUID stageUuid = null;
        IdentificationStageRequest identificationStageRequest = null;
        IdentificationStage response = api.stagesIdentificationUpdate(stageUuid, identificationStageRequest);
        // TODO: test validations
    }

    /**
     * Get a list of all objects that use this object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesIdentificationUsedByListTest() throws ApiException {
        UUID stageUuid = null;
        List<UsedBy> response = api.stagesIdentificationUsedByList(stageUuid);
        // TODO: test validations
    }

    /**
     * Invitation Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesInvitationInvitationsCreateTest() throws ApiException {
        InvitationRequest invitationRequest = null;
        Invitation response = api.stagesInvitationInvitationsCreate(invitationRequest);
        // TODO: test validations
    }

    /**
     * Invitation Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesInvitationInvitationsDestroyTest() throws ApiException {
        UUID inviteUuid = null;
        api.stagesInvitationInvitationsDestroy(inviteUuid);
        // TODO: test validations
    }

    /**
     * Invitation Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesInvitationInvitationsListTest() throws ApiException {
        String createdByUsername = null;
        OffsetDateTime expires = null;
        String flowSlug = null;
        String name = null;
        String ordering = null;
        Integer page = null;
        Integer pageSize = null;
        String search = null;
        PaginatedInvitationList response = api.stagesInvitationInvitationsList(createdByUsername, expires, flowSlug, name, ordering, page, pageSize, search);
        // TODO: test validations
    }

    /**
     * Invitation Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesInvitationInvitationsPartialUpdateTest() throws ApiException {
        UUID inviteUuid = null;
        PatchedInvitationRequest patchedInvitationRequest = null;
        Invitation response = api.stagesInvitationInvitationsPartialUpdate(inviteUuid, patchedInvitationRequest);
        // TODO: test validations
    }

    /**
     * Invitation Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesInvitationInvitationsRetrieveTest() throws ApiException {
        UUID inviteUuid = null;
        Invitation response = api.stagesInvitationInvitationsRetrieve(inviteUuid);
        // TODO: test validations
    }

    /**
     * Invitation Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesInvitationInvitationsUpdateTest() throws ApiException {
        UUID inviteUuid = null;
        InvitationRequest invitationRequest = null;
        Invitation response = api.stagesInvitationInvitationsUpdate(inviteUuid, invitationRequest);
        // TODO: test validations
    }

    /**
     * Get a list of all objects that use this object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesInvitationInvitationsUsedByListTest() throws ApiException {
        UUID inviteUuid = null;
        List<UsedBy> response = api.stagesInvitationInvitationsUsedByList(inviteUuid);
        // TODO: test validations
    }

    /**
     * InvitationStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesInvitationStagesCreateTest() throws ApiException {
        InvitationStageRequest invitationStageRequest = null;
        InvitationStage response = api.stagesInvitationStagesCreate(invitationStageRequest);
        // TODO: test validations
    }

    /**
     * InvitationStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesInvitationStagesDestroyTest() throws ApiException {
        UUID stageUuid = null;
        api.stagesInvitationStagesDestroy(stageUuid);
        // TODO: test validations
    }

    /**
     * InvitationStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesInvitationStagesListTest() throws ApiException {
        Boolean continueFlowWithoutInvitation = null;
        String name = null;
        Boolean noFlows = null;
        String ordering = null;
        Integer page = null;
        Integer pageSize = null;
        String search = null;
        UUID stageUuid = null;
        PaginatedInvitationStageList response = api.stagesInvitationStagesList(continueFlowWithoutInvitation, name, noFlows, ordering, page, pageSize, search, stageUuid);
        // TODO: test validations
    }

    /**
     * InvitationStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesInvitationStagesPartialUpdateTest() throws ApiException {
        UUID stageUuid = null;
        PatchedInvitationStageRequest patchedInvitationStageRequest = null;
        InvitationStage response = api.stagesInvitationStagesPartialUpdate(stageUuid, patchedInvitationStageRequest);
        // TODO: test validations
    }

    /**
     * InvitationStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesInvitationStagesRetrieveTest() throws ApiException {
        UUID stageUuid = null;
        InvitationStage response = api.stagesInvitationStagesRetrieve(stageUuid);
        // TODO: test validations
    }

    /**
     * InvitationStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesInvitationStagesUpdateTest() throws ApiException {
        UUID stageUuid = null;
        InvitationStageRequest invitationStageRequest = null;
        InvitationStage response = api.stagesInvitationStagesUpdate(stageUuid, invitationStageRequest);
        // TODO: test validations
    }

    /**
     * Get a list of all objects that use this object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesInvitationStagesUsedByListTest() throws ApiException {
        UUID stageUuid = null;
        List<UsedBy> response = api.stagesInvitationStagesUsedByList(stageUuid);
        // TODO: test validations
    }

    /**
     * PasswordStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesPasswordCreateTest() throws ApiException {
        PasswordStageRequest passwordStageRequest = null;
        PasswordStage response = api.stagesPasswordCreate(passwordStageRequest);
        // TODO: test validations
    }

    /**
     * PasswordStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesPasswordDestroyTest() throws ApiException {
        UUID stageUuid = null;
        api.stagesPasswordDestroy(stageUuid);
        // TODO: test validations
    }

    /**
     * PasswordStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesPasswordListTest() throws ApiException {
        UUID configureFlow = null;
        Integer failedAttemptsBeforeCancel = null;
        String name = null;
        String ordering = null;
        Integer page = null;
        Integer pageSize = null;
        String search = null;
        PaginatedPasswordStageList response = api.stagesPasswordList(configureFlow, failedAttemptsBeforeCancel, name, ordering, page, pageSize, search);
        // TODO: test validations
    }

    /**
     * PasswordStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesPasswordPartialUpdateTest() throws ApiException {
        UUID stageUuid = null;
        PatchedPasswordStageRequest patchedPasswordStageRequest = null;
        PasswordStage response = api.stagesPasswordPartialUpdate(stageUuid, patchedPasswordStageRequest);
        // TODO: test validations
    }

    /**
     * PasswordStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesPasswordRetrieveTest() throws ApiException {
        UUID stageUuid = null;
        PasswordStage response = api.stagesPasswordRetrieve(stageUuid);
        // TODO: test validations
    }

    /**
     * PasswordStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesPasswordUpdateTest() throws ApiException {
        UUID stageUuid = null;
        PasswordStageRequest passwordStageRequest = null;
        PasswordStage response = api.stagesPasswordUpdate(stageUuid, passwordStageRequest);
        // TODO: test validations
    }

    /**
     * Get a list of all objects that use this object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesPasswordUsedByListTest() throws ApiException {
        UUID stageUuid = null;
        List<UsedBy> response = api.stagesPasswordUsedByList(stageUuid);
        // TODO: test validations
    }

    /**
     * Prompt Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesPromptPromptsCreateTest() throws ApiException {
        PromptRequest promptRequest = null;
        Prompt response = api.stagesPromptPromptsCreate(promptRequest);
        // TODO: test validations
    }

    /**
     * Prompt Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesPromptPromptsDestroyTest() throws ApiException {
        UUID promptUuid = null;
        api.stagesPromptPromptsDestroy(promptUuid);
        // TODO: test validations
    }

    /**
     * Prompt Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesPromptPromptsListTest() throws ApiException {
        String fieldKey = null;
        String label = null;
        String name = null;
        String ordering = null;
        Integer page = null;
        Integer pageSize = null;
        String placeholder = null;
        String search = null;
        String type = null;
        PaginatedPromptList response = api.stagesPromptPromptsList(fieldKey, label, name, ordering, page, pageSize, placeholder, search, type);
        // TODO: test validations
    }

    /**
     * Prompt Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesPromptPromptsPartialUpdateTest() throws ApiException {
        UUID promptUuid = null;
        PatchedPromptRequest patchedPromptRequest = null;
        Prompt response = api.stagesPromptPromptsPartialUpdate(promptUuid, patchedPromptRequest);
        // TODO: test validations
    }

    /**
     * Preview a prompt as a challenge, just like a flow would receive
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesPromptPromptsPreviewCreateTest() throws ApiException {
        PromptRequest promptRequest = null;
        PromptChallenge response = api.stagesPromptPromptsPreviewCreate(promptRequest);
        // TODO: test validations
    }

    /**
     * Prompt Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesPromptPromptsRetrieveTest() throws ApiException {
        UUID promptUuid = null;
        Prompt response = api.stagesPromptPromptsRetrieve(promptUuid);
        // TODO: test validations
    }

    /**
     * Prompt Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesPromptPromptsUpdateTest() throws ApiException {
        UUID promptUuid = null;
        PromptRequest promptRequest = null;
        Prompt response = api.stagesPromptPromptsUpdate(promptUuid, promptRequest);
        // TODO: test validations
    }

    /**
     * Get a list of all objects that use this object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesPromptPromptsUsedByListTest() throws ApiException {
        UUID promptUuid = null;
        List<UsedBy> response = api.stagesPromptPromptsUsedByList(promptUuid);
        // TODO: test validations
    }

    /**
     * PromptStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesPromptStagesCreateTest() throws ApiException {
        PromptStageRequest promptStageRequest = null;
        PromptStage response = api.stagesPromptStagesCreate(promptStageRequest);
        // TODO: test validations
    }

    /**
     * PromptStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesPromptStagesDestroyTest() throws ApiException {
        UUID stageUuid = null;
        api.stagesPromptStagesDestroy(stageUuid);
        // TODO: test validations
    }

    /**
     * PromptStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesPromptStagesListTest() throws ApiException {
        List<UUID> fields = null;
        String name = null;
        String ordering = null;
        Integer page = null;
        Integer pageSize = null;
        String search = null;
        UUID stageUuid = null;
        List<UUID> validationPolicies = null;
        PaginatedPromptStageList response = api.stagesPromptStagesList(fields, name, ordering, page, pageSize, search, stageUuid, validationPolicies);
        // TODO: test validations
    }

    /**
     * PromptStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesPromptStagesPartialUpdateTest() throws ApiException {
        UUID stageUuid = null;
        PatchedPromptStageRequest patchedPromptStageRequest = null;
        PromptStage response = api.stagesPromptStagesPartialUpdate(stageUuid, patchedPromptStageRequest);
        // TODO: test validations
    }

    /**
     * PromptStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesPromptStagesRetrieveTest() throws ApiException {
        UUID stageUuid = null;
        PromptStage response = api.stagesPromptStagesRetrieve(stageUuid);
        // TODO: test validations
    }

    /**
     * PromptStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesPromptStagesUpdateTest() throws ApiException {
        UUID stageUuid = null;
        PromptStageRequest promptStageRequest = null;
        PromptStage response = api.stagesPromptStagesUpdate(stageUuid, promptStageRequest);
        // TODO: test validations
    }

    /**
     * Get a list of all objects that use this object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesPromptStagesUsedByListTest() throws ApiException {
        UUID stageUuid = null;
        List<UsedBy> response = api.stagesPromptStagesUsedByList(stageUuid);
        // TODO: test validations
    }

    /**
     * SourceStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesSourceCreateTest() throws ApiException {
        SourceStageRequest sourceStageRequest = null;
        SourceStage response = api.stagesSourceCreate(sourceStageRequest);
        // TODO: test validations
    }

    /**
     * SourceStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesSourceDestroyTest() throws ApiException {
        UUID stageUuid = null;
        api.stagesSourceDestroy(stageUuid);
        // TODO: test validations
    }

    /**
     * SourceStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesSourceListTest() throws ApiException {
        String name = null;
        String ordering = null;
        Integer page = null;
        Integer pageSize = null;
        String resumeTimeout = null;
        String search = null;
        UUID source = null;
        UUID stageUuid = null;
        PaginatedSourceStageList response = api.stagesSourceList(name, ordering, page, pageSize, resumeTimeout, search, source, stageUuid);
        // TODO: test validations
    }

    /**
     * SourceStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesSourcePartialUpdateTest() throws ApiException {
        UUID stageUuid = null;
        PatchedSourceStageRequest patchedSourceStageRequest = null;
        SourceStage response = api.stagesSourcePartialUpdate(stageUuid, patchedSourceStageRequest);
        // TODO: test validations
    }

    /**
     * SourceStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesSourceRetrieveTest() throws ApiException {
        UUID stageUuid = null;
        SourceStage response = api.stagesSourceRetrieve(stageUuid);
        // TODO: test validations
    }

    /**
     * SourceStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesSourceUpdateTest() throws ApiException {
        UUID stageUuid = null;
        SourceStageRequest sourceStageRequest = null;
        SourceStage response = api.stagesSourceUpdate(stageUuid, sourceStageRequest);
        // TODO: test validations
    }

    /**
     * Get a list of all objects that use this object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesSourceUsedByListTest() throws ApiException {
        UUID stageUuid = null;
        List<UsedBy> response = api.stagesSourceUsedByList(stageUuid);
        // TODO: test validations
    }

    /**
     * UserDeleteStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesUserDeleteCreateTest() throws ApiException {
        UserDeleteStageRequest userDeleteStageRequest = null;
        UserDeleteStage response = api.stagesUserDeleteCreate(userDeleteStageRequest);
        // TODO: test validations
    }

    /**
     * UserDeleteStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesUserDeleteDestroyTest() throws ApiException {
        UUID stageUuid = null;
        api.stagesUserDeleteDestroy(stageUuid);
        // TODO: test validations
    }

    /**
     * UserDeleteStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesUserDeleteListTest() throws ApiException {
        String name = null;
        String ordering = null;
        Integer page = null;
        Integer pageSize = null;
        String search = null;
        UUID stageUuid = null;
        PaginatedUserDeleteStageList response = api.stagesUserDeleteList(name, ordering, page, pageSize, search, stageUuid);
        // TODO: test validations
    }

    /**
     * UserDeleteStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesUserDeletePartialUpdateTest() throws ApiException {
        UUID stageUuid = null;
        PatchedUserDeleteStageRequest patchedUserDeleteStageRequest = null;
        UserDeleteStage response = api.stagesUserDeletePartialUpdate(stageUuid, patchedUserDeleteStageRequest);
        // TODO: test validations
    }

    /**
     * UserDeleteStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesUserDeleteRetrieveTest() throws ApiException {
        UUID stageUuid = null;
        UserDeleteStage response = api.stagesUserDeleteRetrieve(stageUuid);
        // TODO: test validations
    }

    /**
     * UserDeleteStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesUserDeleteUpdateTest() throws ApiException {
        UUID stageUuid = null;
        UserDeleteStageRequest userDeleteStageRequest = null;
        UserDeleteStage response = api.stagesUserDeleteUpdate(stageUuid, userDeleteStageRequest);
        // TODO: test validations
    }

    /**
     * Get a list of all objects that use this object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesUserDeleteUsedByListTest() throws ApiException {
        UUID stageUuid = null;
        List<UsedBy> response = api.stagesUserDeleteUsedByList(stageUuid);
        // TODO: test validations
    }

    /**
     * UserLoginStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesUserLoginCreateTest() throws ApiException {
        UserLoginStageRequest userLoginStageRequest = null;
        UserLoginStage response = api.stagesUserLoginCreate(userLoginStageRequest);
        // TODO: test validations
    }

    /**
     * UserLoginStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesUserLoginDestroyTest() throws ApiException {
        UUID stageUuid = null;
        api.stagesUserLoginDestroy(stageUuid);
        // TODO: test validations
    }

    /**
     * UserLoginStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesUserLoginListTest() throws ApiException {
        String geoipBinding = null;
        String name = null;
        String networkBinding = null;
        String ordering = null;
        Integer page = null;
        Integer pageSize = null;
        String rememberMeOffset = null;
        String search = null;
        String sessionDuration = null;
        UUID stageUuid = null;
        Boolean terminateOtherSessions = null;
        PaginatedUserLoginStageList response = api.stagesUserLoginList(geoipBinding, name, networkBinding, ordering, page, pageSize, rememberMeOffset, search, sessionDuration, stageUuid, terminateOtherSessions);
        // TODO: test validations
    }

    /**
     * UserLoginStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesUserLoginPartialUpdateTest() throws ApiException {
        UUID stageUuid = null;
        PatchedUserLoginStageRequest patchedUserLoginStageRequest = null;
        UserLoginStage response = api.stagesUserLoginPartialUpdate(stageUuid, patchedUserLoginStageRequest);
        // TODO: test validations
    }

    /**
     * UserLoginStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesUserLoginRetrieveTest() throws ApiException {
        UUID stageUuid = null;
        UserLoginStage response = api.stagesUserLoginRetrieve(stageUuid);
        // TODO: test validations
    }

    /**
     * UserLoginStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesUserLoginUpdateTest() throws ApiException {
        UUID stageUuid = null;
        UserLoginStageRequest userLoginStageRequest = null;
        UserLoginStage response = api.stagesUserLoginUpdate(stageUuid, userLoginStageRequest);
        // TODO: test validations
    }

    /**
     * Get a list of all objects that use this object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesUserLoginUsedByListTest() throws ApiException {
        UUID stageUuid = null;
        List<UsedBy> response = api.stagesUserLoginUsedByList(stageUuid);
        // TODO: test validations
    }

    /**
     * UserLogoutStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesUserLogoutCreateTest() throws ApiException {
        UserLogoutStageRequest userLogoutStageRequest = null;
        UserLogoutStage response = api.stagesUserLogoutCreate(userLogoutStageRequest);
        // TODO: test validations
    }

    /**
     * UserLogoutStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesUserLogoutDestroyTest() throws ApiException {
        UUID stageUuid = null;
        api.stagesUserLogoutDestroy(stageUuid);
        // TODO: test validations
    }

    /**
     * UserLogoutStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesUserLogoutListTest() throws ApiException {
        String name = null;
        String ordering = null;
        Integer page = null;
        Integer pageSize = null;
        String search = null;
        UUID stageUuid = null;
        PaginatedUserLogoutStageList response = api.stagesUserLogoutList(name, ordering, page, pageSize, search, stageUuid);
        // TODO: test validations
    }

    /**
     * UserLogoutStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesUserLogoutPartialUpdateTest() throws ApiException {
        UUID stageUuid = null;
        PatchedUserLogoutStageRequest patchedUserLogoutStageRequest = null;
        UserLogoutStage response = api.stagesUserLogoutPartialUpdate(stageUuid, patchedUserLogoutStageRequest);
        // TODO: test validations
    }

    /**
     * UserLogoutStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesUserLogoutRetrieveTest() throws ApiException {
        UUID stageUuid = null;
        UserLogoutStage response = api.stagesUserLogoutRetrieve(stageUuid);
        // TODO: test validations
    }

    /**
     * UserLogoutStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesUserLogoutUpdateTest() throws ApiException {
        UUID stageUuid = null;
        UserLogoutStageRequest userLogoutStageRequest = null;
        UserLogoutStage response = api.stagesUserLogoutUpdate(stageUuid, userLogoutStageRequest);
        // TODO: test validations
    }

    /**
     * Get a list of all objects that use this object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesUserLogoutUsedByListTest() throws ApiException {
        UUID stageUuid = null;
        List<UsedBy> response = api.stagesUserLogoutUsedByList(stageUuid);
        // TODO: test validations
    }

    /**
     * UserWriteStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesUserWriteCreateTest() throws ApiException {
        UserWriteStageRequest userWriteStageRequest = null;
        UserWriteStage response = api.stagesUserWriteCreate(userWriteStageRequest);
        // TODO: test validations
    }

    /**
     * UserWriteStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesUserWriteDestroyTest() throws ApiException {
        UUID stageUuid = null;
        api.stagesUserWriteDestroy(stageUuid);
        // TODO: test validations
    }

    /**
     * UserWriteStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesUserWriteListTest() throws ApiException {
        Boolean createUsersAsInactive = null;
        UUID createUsersGroup = null;
        String name = null;
        String ordering = null;
        Integer page = null;
        Integer pageSize = null;
        String search = null;
        UUID stageUuid = null;
        String userCreationMode = null;
        String userPathTemplate = null;
        String userType = null;
        PaginatedUserWriteStageList response = api.stagesUserWriteList(createUsersAsInactive, createUsersGroup, name, ordering, page, pageSize, search, stageUuid, userCreationMode, userPathTemplate, userType);
        // TODO: test validations
    }

    /**
     * UserWriteStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesUserWritePartialUpdateTest() throws ApiException {
        UUID stageUuid = null;
        PatchedUserWriteStageRequest patchedUserWriteStageRequest = null;
        UserWriteStage response = api.stagesUserWritePartialUpdate(stageUuid, patchedUserWriteStageRequest);
        // TODO: test validations
    }

    /**
     * UserWriteStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesUserWriteRetrieveTest() throws ApiException {
        UUID stageUuid = null;
        UserWriteStage response = api.stagesUserWriteRetrieve(stageUuid);
        // TODO: test validations
    }

    /**
     * UserWriteStage Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesUserWriteUpdateTest() throws ApiException {
        UUID stageUuid = null;
        UserWriteStageRequest userWriteStageRequest = null;
        UserWriteStage response = api.stagesUserWriteUpdate(stageUuid, userWriteStageRequest);
        // TODO: test validations
    }

    /**
     * Get a list of all objects that use this object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stagesUserWriteUsedByListTest() throws ApiException {
        UUID stageUuid = null;
        List<UsedBy> response = api.stagesUserWriteUsedByList(stageUuid);
        // TODO: test validations
    }

}
