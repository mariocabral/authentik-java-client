/*
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.6.3
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Coordinate;
import org.openapitools.client.model.Event;
import org.openapitools.client.model.EventRequest;
import org.openapitools.client.model.EventTopPerUser;
import org.openapitools.client.model.GenericError;
import org.openapitools.client.model.Notification;
import org.openapitools.client.model.NotificationRequest;
import org.openapitools.client.model.NotificationRule;
import org.openapitools.client.model.NotificationRuleRequest;
import org.openapitools.client.model.NotificationTransport;
import org.openapitools.client.model.NotificationTransportRequest;
import org.openapitools.client.model.NotificationTransportTest;
import java.time.OffsetDateTime;
import org.openapitools.client.model.PaginatedEventList;
import org.openapitools.client.model.PaginatedNotificationList;
import org.openapitools.client.model.PaginatedNotificationRuleList;
import org.openapitools.client.model.PaginatedNotificationTransportList;
import org.openapitools.client.model.PaginatedSystemTaskList;
import org.openapitools.client.model.PatchedEventRequest;
import org.openapitools.client.model.PatchedNotificationRequest;
import org.openapitools.client.model.PatchedNotificationRuleRequest;
import org.openapitools.client.model.PatchedNotificationTransportRequest;
import org.openapitools.client.model.SystemTask;
import org.openapitools.client.model.TypeCreate;
import java.util.UUID;
import org.openapitools.client.model.UsedBy;
import org.openapitools.client.model.ValidationError;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EventsApi
 */
@Disabled
public class EventsApiTest {

    private final EventsApi api = new EventsApi();

    /**
     * Get all actions
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventsEventsActionsListTest() throws ApiException {
        List<TypeCreate> response = api.eventsEventsActionsList();
        // TODO: test validations
    }

    /**
     * Event Read-Only Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventsEventsCreateTest() throws ApiException {
        EventRequest eventRequest = null;
        Event response = api.eventsEventsCreate(eventRequest);
        // TODO: test validations
    }

    /**
     * Event Read-Only Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventsEventsDestroyTest() throws ApiException {
        UUID eventUuid = null;
        api.eventsEventsDestroy(eventUuid);
        // TODO: test validations
    }

    /**
     * Event Read-Only Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventsEventsListTest() throws ApiException {
        String action = null;
        String brandName = null;
        String clientIp = null;
        String contextAuthorizedApp = null;
        String contextModelApp = null;
        String contextModelName = null;
        String contextModelPk = null;
        String ordering = null;
        Integer page = null;
        Integer pageSize = null;
        String search = null;
        String username = null;
        PaginatedEventList response = api.eventsEventsList(action, brandName, clientIp, contextAuthorizedApp, contextModelApp, contextModelName, contextModelPk, ordering, page, pageSize, search, username);
        // TODO: test validations
    }

    /**
     * Event Read-Only Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventsEventsPartialUpdateTest() throws ApiException {
        UUID eventUuid = null;
        PatchedEventRequest patchedEventRequest = null;
        Event response = api.eventsEventsPartialUpdate(eventUuid, patchedEventRequest);
        // TODO: test validations
    }

    /**
     * Get the count of events per month
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventsEventsPerMonthListTest() throws ApiException {
        String action = null;
        String query = null;
        List<Coordinate> response = api.eventsEventsPerMonthList(action, query);
        // TODO: test validations
    }

    /**
     * Event Read-Only Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventsEventsRetrieveTest() throws ApiException {
        UUID eventUuid = null;
        Event response = api.eventsEventsRetrieve(eventUuid);
        // TODO: test validations
    }

    /**
     * Get the top_n events grouped by user count
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventsEventsTopPerUserListTest() throws ApiException {
        String action = null;
        Integer topN = null;
        List<EventTopPerUser> response = api.eventsEventsTopPerUserList(action, topN);
        // TODO: test validations
    }

    /**
     * Event Read-Only Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventsEventsUpdateTest() throws ApiException {
        UUID eventUuid = null;
        EventRequest eventRequest = null;
        Event response = api.eventsEventsUpdate(eventUuid, eventRequest);
        // TODO: test validations
    }

    /**
     * Get event volume for specified filters and timeframe
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventsEventsVolumeListTest() throws ApiException {
        String action = null;
        String brandName = null;
        String clientIp = null;
        String contextAuthorizedApp = null;
        String contextModelApp = null;
        String contextModelName = null;
        String contextModelPk = null;
        String ordering = null;
        String search = null;
        String username = null;
        List<Coordinate> response = api.eventsEventsVolumeList(action, brandName, clientIp, contextAuthorizedApp, contextModelApp, contextModelName, contextModelPk, ordering, search, username);
        // TODO: test validations
    }

    /**
     * Notification Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventsNotificationsDestroyTest() throws ApiException {
        UUID uuid = null;
        api.eventsNotificationsDestroy(uuid);
        // TODO: test validations
    }

    /**
     * Notification Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventsNotificationsListTest() throws ApiException {
        String body = null;
        OffsetDateTime created = null;
        UUID event = null;
        String ordering = null;
        Integer page = null;
        Integer pageSize = null;
        String search = null;
        Boolean seen = null;
        String severity = null;
        Integer user = null;
        PaginatedNotificationList response = api.eventsNotificationsList(body, created, event, ordering, page, pageSize, search, seen, severity, user);
        // TODO: test validations
    }

    /**
     * Mark all the user&#39;s notifications as seen
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventsNotificationsMarkAllSeenCreateTest() throws ApiException {
        api.eventsNotificationsMarkAllSeenCreate();
        // TODO: test validations
    }

    /**
     * Notification Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventsNotificationsPartialUpdateTest() throws ApiException {
        UUID uuid = null;
        PatchedNotificationRequest patchedNotificationRequest = null;
        Notification response = api.eventsNotificationsPartialUpdate(uuid, patchedNotificationRequest);
        // TODO: test validations
    }

    /**
     * Notification Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventsNotificationsRetrieveTest() throws ApiException {
        UUID uuid = null;
        Notification response = api.eventsNotificationsRetrieve(uuid);
        // TODO: test validations
    }

    /**
     * Notification Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventsNotificationsUpdateTest() throws ApiException {
        UUID uuid = null;
        NotificationRequest notificationRequest = null;
        Notification response = api.eventsNotificationsUpdate(uuid, notificationRequest);
        // TODO: test validations
    }

    /**
     * Get a list of all objects that use this object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventsNotificationsUsedByListTest() throws ApiException {
        UUID uuid = null;
        List<UsedBy> response = api.eventsNotificationsUsedByList(uuid);
        // TODO: test validations
    }

    /**
     * NotificationRule Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventsRulesCreateTest() throws ApiException {
        NotificationRuleRequest notificationRuleRequest = null;
        NotificationRule response = api.eventsRulesCreate(notificationRuleRequest);
        // TODO: test validations
    }

    /**
     * NotificationRule Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventsRulesDestroyTest() throws ApiException {
        UUID pbmUuid = null;
        api.eventsRulesDestroy(pbmUuid);
        // TODO: test validations
    }

    /**
     * NotificationRule Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventsRulesListTest() throws ApiException {
        String groupName = null;
        String name = null;
        String ordering = null;
        Integer page = null;
        Integer pageSize = null;
        String search = null;
        String severity = null;
        PaginatedNotificationRuleList response = api.eventsRulesList(groupName, name, ordering, page, pageSize, search, severity);
        // TODO: test validations
    }

    /**
     * NotificationRule Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventsRulesPartialUpdateTest() throws ApiException {
        UUID pbmUuid = null;
        PatchedNotificationRuleRequest patchedNotificationRuleRequest = null;
        NotificationRule response = api.eventsRulesPartialUpdate(pbmUuid, patchedNotificationRuleRequest);
        // TODO: test validations
    }

    /**
     * NotificationRule Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventsRulesRetrieveTest() throws ApiException {
        UUID pbmUuid = null;
        NotificationRule response = api.eventsRulesRetrieve(pbmUuid);
        // TODO: test validations
    }

    /**
     * NotificationRule Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventsRulesUpdateTest() throws ApiException {
        UUID pbmUuid = null;
        NotificationRuleRequest notificationRuleRequest = null;
        NotificationRule response = api.eventsRulesUpdate(pbmUuid, notificationRuleRequest);
        // TODO: test validations
    }

    /**
     * Get a list of all objects that use this object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventsRulesUsedByListTest() throws ApiException {
        UUID pbmUuid = null;
        List<UsedBy> response = api.eventsRulesUsedByList(pbmUuid);
        // TODO: test validations
    }

    /**
     * Read-only view set that returns all background tasks
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventsSystemTasksListTest() throws ApiException {
        String name = null;
        String ordering = null;
        Integer page = null;
        Integer pageSize = null;
        String search = null;
        String status = null;
        String uid = null;
        PaginatedSystemTaskList response = api.eventsSystemTasksList(name, ordering, page, pageSize, search, status, uid);
        // TODO: test validations
    }

    /**
     * Read-only view set that returns all background tasks
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventsSystemTasksRetrieveTest() throws ApiException {
        UUID uuid = null;
        SystemTask response = api.eventsSystemTasksRetrieve(uuid);
        // TODO: test validations
    }

    /**
     * Run task
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventsSystemTasksRunCreateTest() throws ApiException {
        UUID uuid = null;
        api.eventsSystemTasksRunCreate(uuid);
        // TODO: test validations
    }

    /**
     * NotificationTransport Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventsTransportsCreateTest() throws ApiException {
        NotificationTransportRequest notificationTransportRequest = null;
        NotificationTransport response = api.eventsTransportsCreate(notificationTransportRequest);
        // TODO: test validations
    }

    /**
     * NotificationTransport Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventsTransportsDestroyTest() throws ApiException {
        UUID uuid = null;
        api.eventsTransportsDestroy(uuid);
        // TODO: test validations
    }

    /**
     * NotificationTransport Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventsTransportsListTest() throws ApiException {
        String mode = null;
        String name = null;
        String ordering = null;
        Integer page = null;
        Integer pageSize = null;
        String search = null;
        Boolean sendOnce = null;
        String webhookUrl = null;
        PaginatedNotificationTransportList response = api.eventsTransportsList(mode, name, ordering, page, pageSize, search, sendOnce, webhookUrl);
        // TODO: test validations
    }

    /**
     * NotificationTransport Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventsTransportsPartialUpdateTest() throws ApiException {
        UUID uuid = null;
        PatchedNotificationTransportRequest patchedNotificationTransportRequest = null;
        NotificationTransport response = api.eventsTransportsPartialUpdate(uuid, patchedNotificationTransportRequest);
        // TODO: test validations
    }

    /**
     * NotificationTransport Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventsTransportsRetrieveTest() throws ApiException {
        UUID uuid = null;
        NotificationTransport response = api.eventsTransportsRetrieve(uuid);
        // TODO: test validations
    }

    /**
     * Send example notification using selected transport. Requires Modify permissions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventsTransportsTestCreateTest() throws ApiException {
        UUID uuid = null;
        NotificationTransportTest response = api.eventsTransportsTestCreate(uuid);
        // TODO: test validations
    }

    /**
     * NotificationTransport Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventsTransportsUpdateTest() throws ApiException {
        UUID uuid = null;
        NotificationTransportRequest notificationTransportRequest = null;
        NotificationTransport response = api.eventsTransportsUpdate(uuid, notificationTransportRequest);
        // TODO: test validations
    }

    /**
     * Get a list of all objects that use this object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventsTransportsUsedByListTest() throws ApiException {
        UUID uuid = null;
        List<UsedBy> response = api.eventsTransportsUsedByList(uuid);
        // TODO: test validations
    }

}
