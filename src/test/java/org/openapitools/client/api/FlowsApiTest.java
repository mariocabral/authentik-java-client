/*
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.6.3
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Cache;
import org.openapitools.client.model.ChallengeTypes;
import java.io.File;
import org.openapitools.client.model.FilePathRequest;
import org.openapitools.client.model.Flow;
import org.openapitools.client.model.FlowChallengeResponseRequest;
import org.openapitools.client.model.FlowDiagram;
import org.openapitools.client.model.FlowImportResult;
import org.openapitools.client.model.FlowInspection;
import org.openapitools.client.model.FlowRequest;
import org.openapitools.client.model.FlowStageBinding;
import org.openapitools.client.model.FlowStageBindingRequest;
import org.openapitools.client.model.GenericError;
import org.openapitools.client.model.Link;
import org.openapitools.client.model.PaginatedFlowList;
import org.openapitools.client.model.PaginatedFlowStageBindingList;
import org.openapitools.client.model.PatchedFlowRequest;
import org.openapitools.client.model.PatchedFlowStageBindingRequest;
import java.util.UUID;
import org.openapitools.client.model.UsedBy;
import org.openapitools.client.model.ValidationError;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for FlowsApi
 */
@Disabled
public class FlowsApiTest {

    private final FlowsApi api = new FlowsApi();

    /**
     * FlowStageBinding Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void flowsBindingsCreateTest() throws ApiException {
        FlowStageBindingRequest flowStageBindingRequest = null;
        FlowStageBinding response = api.flowsBindingsCreate(flowStageBindingRequest);
        // TODO: test validations
    }

    /**
     * FlowStageBinding Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void flowsBindingsDestroyTest() throws ApiException {
        UUID fsbUuid = null;
        api.flowsBindingsDestroy(fsbUuid);
        // TODO: test validations
    }

    /**
     * FlowStageBinding Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void flowsBindingsListTest() throws ApiException {
        Boolean evaluateOnPlan = null;
        UUID fsbUuid = null;
        String invalidResponseAction = null;
        Integer order = null;
        String ordering = null;
        Integer page = null;
        Integer pageSize = null;
        UUID pbmUuid = null;
        List<UUID> policies = null;
        String policyEngineMode = null;
        Boolean reEvaluatePolicies = null;
        String search = null;
        UUID stage = null;
        UUID target = null;
        PaginatedFlowStageBindingList response = api.flowsBindingsList(evaluateOnPlan, fsbUuid, invalidResponseAction, order, ordering, page, pageSize, pbmUuid, policies, policyEngineMode, reEvaluatePolicies, search, stage, target);
        // TODO: test validations
    }

    /**
     * FlowStageBinding Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void flowsBindingsPartialUpdateTest() throws ApiException {
        UUID fsbUuid = null;
        PatchedFlowStageBindingRequest patchedFlowStageBindingRequest = null;
        FlowStageBinding response = api.flowsBindingsPartialUpdate(fsbUuid, patchedFlowStageBindingRequest);
        // TODO: test validations
    }

    /**
     * FlowStageBinding Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void flowsBindingsRetrieveTest() throws ApiException {
        UUID fsbUuid = null;
        FlowStageBinding response = api.flowsBindingsRetrieve(fsbUuid);
        // TODO: test validations
    }

    /**
     * FlowStageBinding Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void flowsBindingsUpdateTest() throws ApiException {
        UUID fsbUuid = null;
        FlowStageBindingRequest flowStageBindingRequest = null;
        FlowStageBinding response = api.flowsBindingsUpdate(fsbUuid, flowStageBindingRequest);
        // TODO: test validations
    }

    /**
     * Get a list of all objects that use this object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void flowsBindingsUsedByListTest() throws ApiException {
        UUID fsbUuid = null;
        List<UsedBy> response = api.flowsBindingsUsedByList(fsbUuid);
        // TODO: test validations
    }

    /**
     * Get the next pending challenge from the currently active flow.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void flowsExecutorGetTest() throws ApiException {
        String flowSlug = null;
        String query = null;
        ChallengeTypes response = api.flowsExecutorGet(flowSlug, query);
        // TODO: test validations
    }

    /**
     * Solve the previously retrieved challenge and advanced to the next stage.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void flowsExecutorSolveTest() throws ApiException {
        String flowSlug = null;
        String query = null;
        FlowChallengeResponseRequest flowChallengeResponseRequest = null;
        ChallengeTypes response = api.flowsExecutorSolve(flowSlug, query, flowChallengeResponseRequest);
        // TODO: test validations
    }

    /**
     * Get current flow state and record it
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void flowsInspectorGetTest() throws ApiException {
        String flowSlug = null;
        FlowInspection response = api.flowsInspectorGet(flowSlug);
        // TODO: test validations
    }

    /**
     * Clear flow cache
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void flowsInstancesCacheClearCreateTest() throws ApiException {
        api.flowsInstancesCacheClearCreate();
        // TODO: test validations
    }

    /**
     * Info about cached flows
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void flowsInstancesCacheInfoRetrieveTest() throws ApiException {
        Cache response = api.flowsInstancesCacheInfoRetrieve();
        // TODO: test validations
    }

    /**
     * Flow Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void flowsInstancesCreateTest() throws ApiException {
        FlowRequest flowRequest = null;
        Flow response = api.flowsInstancesCreate(flowRequest);
        // TODO: test validations
    }

    /**
     * Flow Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void flowsInstancesDestroyTest() throws ApiException {
        String slug = null;
        api.flowsInstancesDestroy(slug);
        // TODO: test validations
    }

    /**
     * Return diagram for flow with slug &#x60;slug&#x60;, in the format used by flowchart.js
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void flowsInstancesDiagramRetrieveTest() throws ApiException {
        String slug = null;
        FlowDiagram response = api.flowsInstancesDiagramRetrieve(slug);
        // TODO: test validations
    }

    /**
     * Execute flow for current user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void flowsInstancesExecuteRetrieveTest() throws ApiException {
        String slug = null;
        Link response = api.flowsInstancesExecuteRetrieve(slug);
        // TODO: test validations
    }

    /**
     * Export flow to .yaml file
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void flowsInstancesExportRetrieveTest() throws ApiException {
        String slug = null;
        File response = api.flowsInstancesExportRetrieve(slug);
        // TODO: test validations
    }

    /**
     * Import flow from .yaml file
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void flowsInstancesImportCreateTest() throws ApiException {
        File _file = null;
        Boolean clear = null;
        FlowImportResult response = api.flowsInstancesImportCreate(_file, clear);
        // TODO: test validations
    }

    /**
     * Flow Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void flowsInstancesListTest() throws ApiException {
        String deniedAction = null;
        String designation = null;
        UUID flowUuid = null;
        String name = null;
        String ordering = null;
        Integer page = null;
        Integer pageSize = null;
        String search = null;
        String slug = null;
        PaginatedFlowList response = api.flowsInstancesList(deniedAction, designation, flowUuid, name, ordering, page, pageSize, search, slug);
        // TODO: test validations
    }

    /**
     * Flow Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void flowsInstancesPartialUpdateTest() throws ApiException {
        String slug = null;
        PatchedFlowRequest patchedFlowRequest = null;
        Flow response = api.flowsInstancesPartialUpdate(slug, patchedFlowRequest);
        // TODO: test validations
    }

    /**
     * Flow Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void flowsInstancesRetrieveTest() throws ApiException {
        String slug = null;
        Flow response = api.flowsInstancesRetrieve(slug);
        // TODO: test validations
    }

    /**
     * Set Flow background
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void flowsInstancesSetBackgroundCreateTest() throws ApiException {
        String slug = null;
        File _file = null;
        Boolean clear = null;
        api.flowsInstancesSetBackgroundCreate(slug, _file, clear);
        // TODO: test validations
    }

    /**
     * Set Flow background (as URL)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void flowsInstancesSetBackgroundUrlCreateTest() throws ApiException {
        String slug = null;
        FilePathRequest filePathRequest = null;
        api.flowsInstancesSetBackgroundUrlCreate(slug, filePathRequest);
        // TODO: test validations
    }

    /**
     * Flow Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void flowsInstancesUpdateTest() throws ApiException {
        String slug = null;
        FlowRequest flowRequest = null;
        Flow response = api.flowsInstancesUpdate(slug, flowRequest);
        // TODO: test validations
    }

    /**
     * Get a list of all objects that use this object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void flowsInstancesUsedByListTest() throws ApiException {
        String slug = null;
        List<UsedBy> response = api.flowsInstancesUsedByList(slug);
        // TODO: test validations
    }

}
