/*
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.6.3
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.io.File;
import org.openapitools.client.model.FilePathRequest;
import org.openapitools.client.model.GenericError;
import org.openapitools.client.model.LDAPDebug;
import org.openapitools.client.model.LDAPSource;
import org.openapitools.client.model.LDAPSourceRequest;
import org.openapitools.client.model.OAuthSource;
import org.openapitools.client.model.OAuthSourceRequest;
import org.openapitools.client.model.PaginatedLDAPSourceList;
import org.openapitools.client.model.PaginatedOAuthSourceList;
import org.openapitools.client.model.PaginatedPlexSourceConnectionList;
import org.openapitools.client.model.PaginatedPlexSourceList;
import org.openapitools.client.model.PaginatedSAMLSourceList;
import org.openapitools.client.model.PaginatedSCIMSourceGroupList;
import org.openapitools.client.model.PaginatedSCIMSourceList;
import org.openapitools.client.model.PaginatedSCIMSourceUserList;
import org.openapitools.client.model.PaginatedSourceList;
import org.openapitools.client.model.PaginatedUserOAuthSourceConnectionList;
import org.openapitools.client.model.PaginatedUserSAMLSourceConnectionList;
import org.openapitools.client.model.PaginatedUserSourceConnectionList;
import org.openapitools.client.model.PatchedLDAPSourceRequest;
import org.openapitools.client.model.PatchedOAuthSourceRequest;
import org.openapitools.client.model.PatchedPlexSourceConnectionRequest;
import org.openapitools.client.model.PatchedPlexSourceRequest;
import org.openapitools.client.model.PatchedSAMLSourceRequest;
import org.openapitools.client.model.PatchedSCIMSourceGroupRequest;
import org.openapitools.client.model.PatchedSCIMSourceRequest;
import org.openapitools.client.model.PatchedSCIMSourceUserRequest;
import org.openapitools.client.model.PatchedUserOAuthSourceConnectionRequest;
import org.openapitools.client.model.PatchedUserSAMLSourceConnectionRequest;
import org.openapitools.client.model.PlexSource;
import org.openapitools.client.model.PlexSourceConnection;
import org.openapitools.client.model.PlexSourceConnectionRequest;
import org.openapitools.client.model.PlexSourceRequest;
import org.openapitools.client.model.PlexTokenRedeemRequest;
import org.openapitools.client.model.RedirectChallenge;
import org.openapitools.client.model.SAMLMetadata;
import org.openapitools.client.model.SAMLSource;
import org.openapitools.client.model.SAMLSourceRequest;
import org.openapitools.client.model.SCIMSource;
import org.openapitools.client.model.SCIMSourceGroup;
import org.openapitools.client.model.SCIMSourceGroupRequest;
import org.openapitools.client.model.SCIMSourceRequest;
import org.openapitools.client.model.SCIMSourceUser;
import org.openapitools.client.model.SCIMSourceUserRequest;
import org.openapitools.client.model.Source;
import org.openapitools.client.model.SourceType;
import org.openapitools.client.model.SyncStatus;
import org.openapitools.client.model.TypeCreate;
import java.util.UUID;
import org.openapitools.client.model.UsedBy;
import org.openapitools.client.model.UserOAuthSourceConnection;
import org.openapitools.client.model.UserOAuthSourceConnectionRequest;
import org.openapitools.client.model.UserSAMLSourceConnection;
import org.openapitools.client.model.UserSAMLSourceConnectionRequest;
import org.openapitools.client.model.UserSetting;
import org.openapitools.client.model.UserSourceConnection;
import org.openapitools.client.model.ValidationError;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SourcesApi
 */
@Disabled
public class SourcesApiTest {

    private final SourcesApi api = new SourcesApi();

    /**
     * Source Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesAllDestroyTest() throws ApiException {
        String slug = null;
        api.sourcesAllDestroy(slug);
        // TODO: test validations
    }

    /**
     * Source Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesAllListTest() throws ApiException {
        String managed = null;
        String name = null;
        String ordering = null;
        Integer page = null;
        Integer pageSize = null;
        String search = null;
        String slug = null;
        PaginatedSourceList response = api.sourcesAllList(managed, name, ordering, page, pageSize, search, slug);
        // TODO: test validations
    }

    /**
     * Source Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesAllRetrieveTest() throws ApiException {
        String slug = null;
        Source response = api.sourcesAllRetrieve(slug);
        // TODO: test validations
    }

    /**
     * Set source icon
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesAllSetIconCreateTest() throws ApiException {
        String slug = null;
        File _file = null;
        Boolean clear = null;
        api.sourcesAllSetIconCreate(slug, _file, clear);
        // TODO: test validations
    }

    /**
     * Set source icon (as URL)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesAllSetIconUrlCreateTest() throws ApiException {
        String slug = null;
        FilePathRequest filePathRequest = null;
        api.sourcesAllSetIconUrlCreate(slug, filePathRequest);
        // TODO: test validations
    }

    /**
     * Get all creatable types
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesAllTypesListTest() throws ApiException {
        List<TypeCreate> response = api.sourcesAllTypesList();
        // TODO: test validations
    }

    /**
     * Get a list of all objects that use this object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesAllUsedByListTest() throws ApiException {
        String slug = null;
        List<UsedBy> response = api.sourcesAllUsedByList(slug);
        // TODO: test validations
    }

    /**
     * Get all sources the user can configure
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesAllUserSettingsListTest() throws ApiException {
        List<UserSetting> response = api.sourcesAllUserSettingsList();
        // TODO: test validations
    }

    /**
     * LDAP Source Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesLdapCreateTest() throws ApiException {
        LDAPSourceRequest ldAPSourceRequest = null;
        LDAPSource response = api.sourcesLdapCreate(ldAPSourceRequest);
        // TODO: test validations
    }

    /**
     * Get raw LDAP data to debug
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesLdapDebugRetrieveTest() throws ApiException {
        String slug = null;
        LDAPDebug response = api.sourcesLdapDebugRetrieve(slug);
        // TODO: test validations
    }

    /**
     * LDAP Source Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesLdapDestroyTest() throws ApiException {
        String slug = null;
        api.sourcesLdapDestroy(slug);
        // TODO: test validations
    }

    /**
     * LDAP Source Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesLdapListTest() throws ApiException {
        String additionalGroupDn = null;
        String additionalUserDn = null;
        String baseDn = null;
        String bindCn = null;
        UUID clientCertificate = null;
        Boolean enabled = null;
        String groupMembershipField = null;
        String groupObjectFilter = null;
        String name = null;
        String objectUniquenessField = null;
        String ordering = null;
        Integer page = null;
        Integer pageSize = null;
        Boolean passwordLoginUpdateInternalPassword = null;
        UUID peerCertificate = null;
        List<UUID> propertyMappings = null;
        List<UUID> propertyMappingsGroup = null;
        String search = null;
        String serverUri = null;
        String slug = null;
        Boolean sni = null;
        Boolean startTls = null;
        Boolean syncGroups = null;
        UUID syncParentGroup = null;
        Boolean syncUsers = null;
        Boolean syncUsersPassword = null;
        String userObjectFilter = null;
        PaginatedLDAPSourceList response = api.sourcesLdapList(additionalGroupDn, additionalUserDn, baseDn, bindCn, clientCertificate, enabled, groupMembershipField, groupObjectFilter, name, objectUniquenessField, ordering, page, pageSize, passwordLoginUpdateInternalPassword, peerCertificate, propertyMappings, propertyMappingsGroup, search, serverUri, slug, sni, startTls, syncGroups, syncParentGroup, syncUsers, syncUsersPassword, userObjectFilter);
        // TODO: test validations
    }

    /**
     * LDAP Source Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesLdapPartialUpdateTest() throws ApiException {
        String slug = null;
        PatchedLDAPSourceRequest patchedLDAPSourceRequest = null;
        LDAPSource response = api.sourcesLdapPartialUpdate(slug, patchedLDAPSourceRequest);
        // TODO: test validations
    }

    /**
     * LDAP Source Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesLdapRetrieveTest() throws ApiException {
        String slug = null;
        LDAPSource response = api.sourcesLdapRetrieve(slug);
        // TODO: test validations
    }

    /**
     * Get source&#39;s sync status
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesLdapSyncStatusRetrieveTest() throws ApiException {
        String slug = null;
        SyncStatus response = api.sourcesLdapSyncStatusRetrieve(slug);
        // TODO: test validations
    }

    /**
     * LDAP Source Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesLdapUpdateTest() throws ApiException {
        String slug = null;
        LDAPSourceRequest ldAPSourceRequest = null;
        LDAPSource response = api.sourcesLdapUpdate(slug, ldAPSourceRequest);
        // TODO: test validations
    }

    /**
     * Get a list of all objects that use this object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesLdapUsedByListTest() throws ApiException {
        String slug = null;
        List<UsedBy> response = api.sourcesLdapUsedByList(slug);
        // TODO: test validations
    }

    /**
     * Source Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesOauthCreateTest() throws ApiException {
        OAuthSourceRequest oauthSourceRequest = null;
        OAuthSource response = api.sourcesOauthCreate(oauthSourceRequest);
        // TODO: test validations
    }

    /**
     * Source Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesOauthDestroyTest() throws ApiException {
        String slug = null;
        api.sourcesOauthDestroy(slug);
        // TODO: test validations
    }

    /**
     * Source Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesOauthListTest() throws ApiException {
        String accessTokenUrl = null;
        String additionalScopes = null;
        UUID authenticationFlow = null;
        String authorizationUrl = null;
        String consumerKey = null;
        Boolean enabled = null;
        UUID enrollmentFlow = null;
        Boolean hasJwks = null;
        String name = null;
        String ordering = null;
        Integer page = null;
        Integer pageSize = null;
        String policyEngineMode = null;
        String profileUrl = null;
        String providerType = null;
        String requestTokenUrl = null;
        String search = null;
        String slug = null;
        String userMatchingMode = null;
        PaginatedOAuthSourceList response = api.sourcesOauthList(accessTokenUrl, additionalScopes, authenticationFlow, authorizationUrl, consumerKey, enabled, enrollmentFlow, hasJwks, name, ordering, page, pageSize, policyEngineMode, profileUrl, providerType, requestTokenUrl, search, slug, userMatchingMode);
        // TODO: test validations
    }

    /**
     * Source Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesOauthPartialUpdateTest() throws ApiException {
        String slug = null;
        PatchedOAuthSourceRequest patchedOAuthSourceRequest = null;
        OAuthSource response = api.sourcesOauthPartialUpdate(slug, patchedOAuthSourceRequest);
        // TODO: test validations
    }

    /**
     * Source Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesOauthRetrieveTest() throws ApiException {
        String slug = null;
        OAuthSource response = api.sourcesOauthRetrieve(slug);
        // TODO: test validations
    }

    /**
     * Get all creatable source types. If ?name is set, only returns the type for &lt;name&gt;. If &lt;name&gt; isn&#39;t found, returns the default type.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesOauthSourceTypesListTest() throws ApiException {
        String name = null;
        List<SourceType> response = api.sourcesOauthSourceTypesList(name);
        // TODO: test validations
    }

    /**
     * Source Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesOauthUpdateTest() throws ApiException {
        String slug = null;
        OAuthSourceRequest oauthSourceRequest = null;
        OAuthSource response = api.sourcesOauthUpdate(slug, oauthSourceRequest);
        // TODO: test validations
    }

    /**
     * Get a list of all objects that use this object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesOauthUsedByListTest() throws ApiException {
        String slug = null;
        List<UsedBy> response = api.sourcesOauthUsedByList(slug);
        // TODO: test validations
    }

    /**
     * Plex source Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesPlexCreateTest() throws ApiException {
        PlexSourceRequest plexSourceRequest = null;
        PlexSource response = api.sourcesPlexCreate(plexSourceRequest);
        // TODO: test validations
    }

    /**
     * Plex source Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesPlexDestroyTest() throws ApiException {
        String slug = null;
        api.sourcesPlexDestroy(slug);
        // TODO: test validations
    }

    /**
     * Plex source Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesPlexListTest() throws ApiException {
        Boolean allowFriends = null;
        UUID authenticationFlow = null;
        String clientId = null;
        Boolean enabled = null;
        UUID enrollmentFlow = null;
        String name = null;
        String ordering = null;
        Integer page = null;
        Integer pageSize = null;
        String policyEngineMode = null;
        String search = null;
        String slug = null;
        String userMatchingMode = null;
        PaginatedPlexSourceList response = api.sourcesPlexList(allowFriends, authenticationFlow, clientId, enabled, enrollmentFlow, name, ordering, page, pageSize, policyEngineMode, search, slug, userMatchingMode);
        // TODO: test validations
    }

    /**
     * Plex source Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesPlexPartialUpdateTest() throws ApiException {
        String slug = null;
        PatchedPlexSourceRequest patchedPlexSourceRequest = null;
        PlexSource response = api.sourcesPlexPartialUpdate(slug, patchedPlexSourceRequest);
        // TODO: test validations
    }

    /**
     * Redeem a plex token for an authenticated user, creating a connection
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesPlexRedeemTokenAuthenticatedCreateTest() throws ApiException {
        PlexTokenRedeemRequest plexTokenRedeemRequest = null;
        String slug = null;
        api.sourcesPlexRedeemTokenAuthenticatedCreate(plexTokenRedeemRequest, slug);
        // TODO: test validations
    }

    /**
     * Redeem a plex token, check it&#39;s access to resources against what&#39;s allowed for the source, and redirect to an authentication/enrollment flow.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesPlexRedeemTokenCreateTest() throws ApiException {
        PlexTokenRedeemRequest plexTokenRedeemRequest = null;
        String slug = null;
        RedirectChallenge response = api.sourcesPlexRedeemTokenCreate(plexTokenRedeemRequest, slug);
        // TODO: test validations
    }

    /**
     * Plex source Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesPlexRetrieveTest() throws ApiException {
        String slug = null;
        PlexSource response = api.sourcesPlexRetrieve(slug);
        // TODO: test validations
    }

    /**
     * Plex source Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesPlexUpdateTest() throws ApiException {
        String slug = null;
        PlexSourceRequest plexSourceRequest = null;
        PlexSource response = api.sourcesPlexUpdate(slug, plexSourceRequest);
        // TODO: test validations
    }

    /**
     * Get a list of all objects that use this object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesPlexUsedByListTest() throws ApiException {
        String slug = null;
        List<UsedBy> response = api.sourcesPlexUsedByList(slug);
        // TODO: test validations
    }

    /**
     * SAMLSource Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesSamlCreateTest() throws ApiException {
        SAMLSourceRequest saMLSourceRequest = null;
        SAMLSource response = api.sourcesSamlCreate(saMLSourceRequest);
        // TODO: test validations
    }

    /**
     * SAMLSource Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesSamlDestroyTest() throws ApiException {
        String slug = null;
        api.sourcesSamlDestroy(slug);
        // TODO: test validations
    }

    /**
     * SAMLSource Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesSamlListTest() throws ApiException {
        Boolean allowIdpInitiated = null;
        UUID authenticationFlow = null;
        String bindingType = null;
        String digestAlgorithm = null;
        Boolean enabled = null;
        UUID enrollmentFlow = null;
        String issuer = null;
        String managed = null;
        String name = null;
        String nameIdPolicy = null;
        String ordering = null;
        Integer page = null;
        Integer pageSize = null;
        String policyEngineMode = null;
        UUID preAuthenticationFlow = null;
        String search = null;
        String signatureAlgorithm = null;
        UUID signingKp = null;
        String sloUrl = null;
        String slug = null;
        String ssoUrl = null;
        String temporaryUserDeleteAfter = null;
        String userMatchingMode = null;
        UUID verificationKp = null;
        PaginatedSAMLSourceList response = api.sourcesSamlList(allowIdpInitiated, authenticationFlow, bindingType, digestAlgorithm, enabled, enrollmentFlow, issuer, managed, name, nameIdPolicy, ordering, page, pageSize, policyEngineMode, preAuthenticationFlow, search, signatureAlgorithm, signingKp, sloUrl, slug, ssoUrl, temporaryUserDeleteAfter, userMatchingMode, verificationKp);
        // TODO: test validations
    }

    /**
     * Return metadata as XML string
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesSamlMetadataRetrieveTest() throws ApiException {
        String slug = null;
        SAMLMetadata response = api.sourcesSamlMetadataRetrieve(slug);
        // TODO: test validations
    }

    /**
     * SAMLSource Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesSamlPartialUpdateTest() throws ApiException {
        String slug = null;
        PatchedSAMLSourceRequest patchedSAMLSourceRequest = null;
        SAMLSource response = api.sourcesSamlPartialUpdate(slug, patchedSAMLSourceRequest);
        // TODO: test validations
    }

    /**
     * SAMLSource Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesSamlRetrieveTest() throws ApiException {
        String slug = null;
        SAMLSource response = api.sourcesSamlRetrieve(slug);
        // TODO: test validations
    }

    /**
     * SAMLSource Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesSamlUpdateTest() throws ApiException {
        String slug = null;
        SAMLSourceRequest saMLSourceRequest = null;
        SAMLSource response = api.sourcesSamlUpdate(slug, saMLSourceRequest);
        // TODO: test validations
    }

    /**
     * Get a list of all objects that use this object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesSamlUsedByListTest() throws ApiException {
        String slug = null;
        List<UsedBy> response = api.sourcesSamlUsedByList(slug);
        // TODO: test validations
    }

    /**
     * SCIMSource Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesScimCreateTest() throws ApiException {
        SCIMSourceRequest scIMSourceRequest = null;
        SCIMSource response = api.sourcesScimCreate(scIMSourceRequest);
        // TODO: test validations
    }

    /**
     * SCIMSource Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesScimDestroyTest() throws ApiException {
        String slug = null;
        api.sourcesScimDestroy(slug);
        // TODO: test validations
    }

    /**
     * SCIMSourceGroup Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesScimGroupsCreateTest() throws ApiException {
        SCIMSourceGroupRequest scIMSourceGroupRequest = null;
        SCIMSourceGroup response = api.sourcesScimGroupsCreate(scIMSourceGroupRequest);
        // TODO: test validations
    }

    /**
     * SCIMSourceGroup Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesScimGroupsDestroyTest() throws ApiException {
        String id = null;
        api.sourcesScimGroupsDestroy(id);
        // TODO: test validations
    }

    /**
     * SCIMSourceGroup Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesScimGroupsListTest() throws ApiException {
        UUID groupGroupUuid = null;
        String groupName = null;
        String ordering = null;
        Integer page = null;
        Integer pageSize = null;
        String search = null;
        String sourceSlug = null;
        PaginatedSCIMSourceGroupList response = api.sourcesScimGroupsList(groupGroupUuid, groupName, ordering, page, pageSize, search, sourceSlug);
        // TODO: test validations
    }

    /**
     * SCIMSourceGroup Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesScimGroupsPartialUpdateTest() throws ApiException {
        String id = null;
        PatchedSCIMSourceGroupRequest patchedSCIMSourceGroupRequest = null;
        SCIMSourceGroup response = api.sourcesScimGroupsPartialUpdate(id, patchedSCIMSourceGroupRequest);
        // TODO: test validations
    }

    /**
     * SCIMSourceGroup Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesScimGroupsRetrieveTest() throws ApiException {
        String id = null;
        SCIMSourceGroup response = api.sourcesScimGroupsRetrieve(id);
        // TODO: test validations
    }

    /**
     * SCIMSourceGroup Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesScimGroupsUpdateTest() throws ApiException {
        String id = null;
        SCIMSourceGroupRequest scIMSourceGroupRequest = null;
        SCIMSourceGroup response = api.sourcesScimGroupsUpdate(id, scIMSourceGroupRequest);
        // TODO: test validations
    }

    /**
     * Get a list of all objects that use this object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesScimGroupsUsedByListTest() throws ApiException {
        String id = null;
        List<UsedBy> response = api.sourcesScimGroupsUsedByList(id);
        // TODO: test validations
    }

    /**
     * SCIMSource Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesScimListTest() throws ApiException {
        String name = null;
        String ordering = null;
        Integer page = null;
        Integer pageSize = null;
        String search = null;
        String slug = null;
        PaginatedSCIMSourceList response = api.sourcesScimList(name, ordering, page, pageSize, search, slug);
        // TODO: test validations
    }

    /**
     * SCIMSource Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesScimPartialUpdateTest() throws ApiException {
        String slug = null;
        PatchedSCIMSourceRequest patchedSCIMSourceRequest = null;
        SCIMSource response = api.sourcesScimPartialUpdate(slug, patchedSCIMSourceRequest);
        // TODO: test validations
    }

    /**
     * SCIMSource Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesScimRetrieveTest() throws ApiException {
        String slug = null;
        SCIMSource response = api.sourcesScimRetrieve(slug);
        // TODO: test validations
    }

    /**
     * SCIMSource Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesScimUpdateTest() throws ApiException {
        String slug = null;
        SCIMSourceRequest scIMSourceRequest = null;
        SCIMSource response = api.sourcesScimUpdate(slug, scIMSourceRequest);
        // TODO: test validations
    }

    /**
     * Get a list of all objects that use this object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesScimUsedByListTest() throws ApiException {
        String slug = null;
        List<UsedBy> response = api.sourcesScimUsedByList(slug);
        // TODO: test validations
    }

    /**
     * SCIMSourceUser Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesScimUsersCreateTest() throws ApiException {
        SCIMSourceUserRequest scIMSourceUserRequest = null;
        SCIMSourceUser response = api.sourcesScimUsersCreate(scIMSourceUserRequest);
        // TODO: test validations
    }

    /**
     * SCIMSourceUser Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesScimUsersDestroyTest() throws ApiException {
        String id = null;
        api.sourcesScimUsersDestroy(id);
        // TODO: test validations
    }

    /**
     * SCIMSourceUser Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesScimUsersListTest() throws ApiException {
        String ordering = null;
        Integer page = null;
        Integer pageSize = null;
        String search = null;
        String sourceSlug = null;
        Integer userId = null;
        String userUsername = null;
        PaginatedSCIMSourceUserList response = api.sourcesScimUsersList(ordering, page, pageSize, search, sourceSlug, userId, userUsername);
        // TODO: test validations
    }

    /**
     * SCIMSourceUser Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesScimUsersPartialUpdateTest() throws ApiException {
        String id = null;
        PatchedSCIMSourceUserRequest patchedSCIMSourceUserRequest = null;
        SCIMSourceUser response = api.sourcesScimUsersPartialUpdate(id, patchedSCIMSourceUserRequest);
        // TODO: test validations
    }

    /**
     * SCIMSourceUser Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesScimUsersRetrieveTest() throws ApiException {
        String id = null;
        SCIMSourceUser response = api.sourcesScimUsersRetrieve(id);
        // TODO: test validations
    }

    /**
     * SCIMSourceUser Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesScimUsersUpdateTest() throws ApiException {
        String id = null;
        SCIMSourceUserRequest scIMSourceUserRequest = null;
        SCIMSourceUser response = api.sourcesScimUsersUpdate(id, scIMSourceUserRequest);
        // TODO: test validations
    }

    /**
     * Get a list of all objects that use this object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesScimUsersUsedByListTest() throws ApiException {
        String id = null;
        List<UsedBy> response = api.sourcesScimUsersUsedByList(id);
        // TODO: test validations
    }

    /**
     * User-source connection Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesUserConnectionsAllDestroyTest() throws ApiException {
        Integer id = null;
        api.sourcesUserConnectionsAllDestroy(id);
        // TODO: test validations
    }

    /**
     * User-source connection Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesUserConnectionsAllListTest() throws ApiException {
        String ordering = null;
        Integer page = null;
        Integer pageSize = null;
        String search = null;
        Integer user = null;
        PaginatedUserSourceConnectionList response = api.sourcesUserConnectionsAllList(ordering, page, pageSize, search, user);
        // TODO: test validations
    }

    /**
     * User-source connection Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesUserConnectionsAllPartialUpdateTest() throws ApiException {
        Integer id = null;
        UserSourceConnection response = api.sourcesUserConnectionsAllPartialUpdate(id);
        // TODO: test validations
    }

    /**
     * User-source connection Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesUserConnectionsAllRetrieveTest() throws ApiException {
        Integer id = null;
        UserSourceConnection response = api.sourcesUserConnectionsAllRetrieve(id);
        // TODO: test validations
    }

    /**
     * User-source connection Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesUserConnectionsAllUpdateTest() throws ApiException {
        Integer id = null;
        UserSourceConnection response = api.sourcesUserConnectionsAllUpdate(id);
        // TODO: test validations
    }

    /**
     * Get a list of all objects that use this object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesUserConnectionsAllUsedByListTest() throws ApiException {
        Integer id = null;
        List<UsedBy> response = api.sourcesUserConnectionsAllUsedByList(id);
        // TODO: test validations
    }

    /**
     * Source Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesUserConnectionsOauthCreateTest() throws ApiException {
        UserOAuthSourceConnectionRequest userOAuthSourceConnectionRequest = null;
        UserOAuthSourceConnection response = api.sourcesUserConnectionsOauthCreate(userOAuthSourceConnectionRequest);
        // TODO: test validations
    }

    /**
     * Source Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesUserConnectionsOauthDestroyTest() throws ApiException {
        Integer id = null;
        api.sourcesUserConnectionsOauthDestroy(id);
        // TODO: test validations
    }

    /**
     * Source Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesUserConnectionsOauthListTest() throws ApiException {
        String ordering = null;
        Integer page = null;
        Integer pageSize = null;
        String search = null;
        String sourceSlug = null;
        PaginatedUserOAuthSourceConnectionList response = api.sourcesUserConnectionsOauthList(ordering, page, pageSize, search, sourceSlug);
        // TODO: test validations
    }

    /**
     * Source Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesUserConnectionsOauthPartialUpdateTest() throws ApiException {
        Integer id = null;
        PatchedUserOAuthSourceConnectionRequest patchedUserOAuthSourceConnectionRequest = null;
        UserOAuthSourceConnection response = api.sourcesUserConnectionsOauthPartialUpdate(id, patchedUserOAuthSourceConnectionRequest);
        // TODO: test validations
    }

    /**
     * Source Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesUserConnectionsOauthRetrieveTest() throws ApiException {
        Integer id = null;
        UserOAuthSourceConnection response = api.sourcesUserConnectionsOauthRetrieve(id);
        // TODO: test validations
    }

    /**
     * Source Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesUserConnectionsOauthUpdateTest() throws ApiException {
        Integer id = null;
        UserOAuthSourceConnectionRequest userOAuthSourceConnectionRequest = null;
        UserOAuthSourceConnection response = api.sourcesUserConnectionsOauthUpdate(id, userOAuthSourceConnectionRequest);
        // TODO: test validations
    }

    /**
     * Get a list of all objects that use this object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesUserConnectionsOauthUsedByListTest() throws ApiException {
        Integer id = null;
        List<UsedBy> response = api.sourcesUserConnectionsOauthUsedByList(id);
        // TODO: test validations
    }

    /**
     * Plex Source connection Serializer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesUserConnectionsPlexCreateTest() throws ApiException {
        PlexSourceConnectionRequest plexSourceConnectionRequest = null;
        PlexSourceConnection response = api.sourcesUserConnectionsPlexCreate(plexSourceConnectionRequest);
        // TODO: test validations
    }

    /**
     * Plex Source connection Serializer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesUserConnectionsPlexDestroyTest() throws ApiException {
        Integer id = null;
        api.sourcesUserConnectionsPlexDestroy(id);
        // TODO: test validations
    }

    /**
     * Plex Source connection Serializer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesUserConnectionsPlexListTest() throws ApiException {
        String ordering = null;
        Integer page = null;
        Integer pageSize = null;
        String search = null;
        String sourceSlug = null;
        PaginatedPlexSourceConnectionList response = api.sourcesUserConnectionsPlexList(ordering, page, pageSize, search, sourceSlug);
        // TODO: test validations
    }

    /**
     * Plex Source connection Serializer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesUserConnectionsPlexPartialUpdateTest() throws ApiException {
        Integer id = null;
        PatchedPlexSourceConnectionRequest patchedPlexSourceConnectionRequest = null;
        PlexSourceConnection response = api.sourcesUserConnectionsPlexPartialUpdate(id, patchedPlexSourceConnectionRequest);
        // TODO: test validations
    }

    /**
     * Plex Source connection Serializer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesUserConnectionsPlexRetrieveTest() throws ApiException {
        Integer id = null;
        PlexSourceConnection response = api.sourcesUserConnectionsPlexRetrieve(id);
        // TODO: test validations
    }

    /**
     * Plex Source connection Serializer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesUserConnectionsPlexUpdateTest() throws ApiException {
        Integer id = null;
        PlexSourceConnectionRequest plexSourceConnectionRequest = null;
        PlexSourceConnection response = api.sourcesUserConnectionsPlexUpdate(id, plexSourceConnectionRequest);
        // TODO: test validations
    }

    /**
     * Get a list of all objects that use this object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesUserConnectionsPlexUsedByListTest() throws ApiException {
        Integer id = null;
        List<UsedBy> response = api.sourcesUserConnectionsPlexUsedByList(id);
        // TODO: test validations
    }

    /**
     * Source Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesUserConnectionsSamlCreateTest() throws ApiException {
        UserSAMLSourceConnectionRequest userSAMLSourceConnectionRequest = null;
        UserSAMLSourceConnection response = api.sourcesUserConnectionsSamlCreate(userSAMLSourceConnectionRequest);
        // TODO: test validations
    }

    /**
     * Source Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesUserConnectionsSamlDestroyTest() throws ApiException {
        Integer id = null;
        api.sourcesUserConnectionsSamlDestroy(id);
        // TODO: test validations
    }

    /**
     * Source Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesUserConnectionsSamlListTest() throws ApiException {
        String ordering = null;
        Integer page = null;
        Integer pageSize = null;
        String search = null;
        String sourceSlug = null;
        PaginatedUserSAMLSourceConnectionList response = api.sourcesUserConnectionsSamlList(ordering, page, pageSize, search, sourceSlug);
        // TODO: test validations
    }

    /**
     * Source Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesUserConnectionsSamlPartialUpdateTest() throws ApiException {
        Integer id = null;
        PatchedUserSAMLSourceConnectionRequest patchedUserSAMLSourceConnectionRequest = null;
        UserSAMLSourceConnection response = api.sourcesUserConnectionsSamlPartialUpdate(id, patchedUserSAMLSourceConnectionRequest);
        // TODO: test validations
    }

    /**
     * Source Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesUserConnectionsSamlRetrieveTest() throws ApiException {
        Integer id = null;
        UserSAMLSourceConnection response = api.sourcesUserConnectionsSamlRetrieve(id);
        // TODO: test validations
    }

    /**
     * Source Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesUserConnectionsSamlUpdateTest() throws ApiException {
        Integer id = null;
        UserSAMLSourceConnectionRequest userSAMLSourceConnectionRequest = null;
        UserSAMLSourceConnection response = api.sourcesUserConnectionsSamlUpdate(id, userSAMLSourceConnectionRequest);
        // TODO: test validations
    }

    /**
     * Get a list of all objects that use this object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesUserConnectionsSamlUsedByListTest() throws ApiException {
        Integer id = null;
        List<UsedBy> response = api.sourcesUserConnectionsSamlUsedByList(id);
        // TODO: test validations
    }

}
