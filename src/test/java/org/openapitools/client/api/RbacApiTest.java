/*
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.6.3
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.GenericError;
import org.openapitools.client.model.PaginatedExtraRoleObjectPermissionList;
import org.openapitools.client.model.PaginatedExtraUserObjectPermissionList;
import org.openapitools.client.model.PaginatedPermissionList;
import org.openapitools.client.model.PaginatedRoleAssignedObjectPermissionList;
import org.openapitools.client.model.PaginatedRoleList;
import org.openapitools.client.model.PaginatedUserAssignedObjectPermissionList;
import org.openapitools.client.model.PatchedPermissionAssignRequest;
import org.openapitools.client.model.PatchedRoleRequest;
import org.openapitools.client.model.Permission;
import org.openapitools.client.model.PermissionAssignRequest;
import org.openapitools.client.model.Role;
import org.openapitools.client.model.RoleRequest;
import java.util.UUID;
import org.openapitools.client.model.UsedBy;
import org.openapitools.client.model.ValidationError;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RbacApi
 */
@Disabled
public class RbacApiTest {

    private final RbacApi api = new RbacApi();

    /**
     * Assign permission(s) to role. When &#x60;object_pk&#x60; is set, the permissions are only assigned to the specific object, otherwise they are assigned globally.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rbacPermissionsAssignedByRolesAssignCreateTest() throws ApiException {
        UUID uuid = null;
        PermissionAssignRequest permissionAssignRequest = null;
        api.rbacPermissionsAssignedByRolesAssignCreate(uuid, permissionAssignRequest);
        // TODO: test validations
    }

    /**
     * Get assigned object permissions for a single object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rbacPermissionsAssignedByRolesListTest() throws ApiException {
        String model = null;
        String objectPk = null;
        String ordering = null;
        Integer page = null;
        Integer pageSize = null;
        String search = null;
        PaginatedRoleAssignedObjectPermissionList response = api.rbacPermissionsAssignedByRolesList(model, objectPk, ordering, page, pageSize, search);
        // TODO: test validations
    }

    /**
     * Unassign permission(s) to role. When &#x60;object_pk&#x60; is set, the permissions are only assigned to the specific object, otherwise they are assigned globally.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rbacPermissionsAssignedByRolesUnassignPartialUpdateTest() throws ApiException {
        UUID uuid = null;
        PatchedPermissionAssignRequest patchedPermissionAssignRequest = null;
        api.rbacPermissionsAssignedByRolesUnassignPartialUpdate(uuid, patchedPermissionAssignRequest);
        // TODO: test validations
    }

    /**
     * Assign permission(s) to user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rbacPermissionsAssignedByUsersAssignCreateTest() throws ApiException {
        Integer id = null;
        PermissionAssignRequest permissionAssignRequest = null;
        api.rbacPermissionsAssignedByUsersAssignCreate(id, permissionAssignRequest);
        // TODO: test validations
    }

    /**
     * Get assigned object permissions for a single object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rbacPermissionsAssignedByUsersListTest() throws ApiException {
        String model = null;
        String objectPk = null;
        String ordering = null;
        Integer page = null;
        Integer pageSize = null;
        String search = null;
        PaginatedUserAssignedObjectPermissionList response = api.rbacPermissionsAssignedByUsersList(model, objectPk, ordering, page, pageSize, search);
        // TODO: test validations
    }

    /**
     * Unassign permission(s) to user. When &#x60;object_pk&#x60; is set, the permissions are only assigned to the specific object, otherwise they are assigned globally.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rbacPermissionsAssignedByUsersUnassignPartialUpdateTest() throws ApiException {
        Integer id = null;
        PatchedPermissionAssignRequest patchedPermissionAssignRequest = null;
        api.rbacPermissionsAssignedByUsersUnassignPartialUpdate(id, patchedPermissionAssignRequest);
        // TODO: test validations
    }

    /**
     * Read-only list of all permissions, filterable by model and app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rbacPermissionsListTest() throws ApiException {
        String codename = null;
        String contentTypeAppLabel = null;
        String contentTypeModel = null;
        String ordering = null;
        Integer page = null;
        Integer pageSize = null;
        String role = null;
        String search = null;
        Integer user = null;
        PaginatedPermissionList response = api.rbacPermissionsList(codename, contentTypeAppLabel, contentTypeModel, ordering, page, pageSize, role, search, user);
        // TODO: test validations
    }

    /**
     * Read-only list of all permissions, filterable by model and app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rbacPermissionsRetrieveTest() throws ApiException {
        Integer id = null;
        Permission response = api.rbacPermissionsRetrieve(id);
        // TODO: test validations
    }

    /**
     * Get a role&#39;s assigned object permissions
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rbacPermissionsRolesListTest() throws ApiException {
        UUID uuid = null;
        String ordering = null;
        Integer page = null;
        Integer pageSize = null;
        String search = null;
        PaginatedExtraRoleObjectPermissionList response = api.rbacPermissionsRolesList(uuid, ordering, page, pageSize, search);
        // TODO: test validations
    }

    /**
     * Get a users&#39;s assigned object permissions
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rbacPermissionsUsersListTest() throws ApiException {
        Integer userId = null;
        String ordering = null;
        Integer page = null;
        Integer pageSize = null;
        String search = null;
        PaginatedExtraUserObjectPermissionList response = api.rbacPermissionsUsersList(userId, ordering, page, pageSize, search);
        // TODO: test validations
    }

    /**
     * Role viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rbacRolesCreateTest() throws ApiException {
        RoleRequest roleRequest = null;
        Role response = api.rbacRolesCreate(roleRequest);
        // TODO: test validations
    }

    /**
     * Role viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rbacRolesDestroyTest() throws ApiException {
        UUID uuid = null;
        api.rbacRolesDestroy(uuid);
        // TODO: test validations
    }

    /**
     * Role viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rbacRolesListTest() throws ApiException {
        String groupName = null;
        String ordering = null;
        Integer page = null;
        Integer pageSize = null;
        String search = null;
        PaginatedRoleList response = api.rbacRolesList(groupName, ordering, page, pageSize, search);
        // TODO: test validations
    }

    /**
     * Role viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rbacRolesPartialUpdateTest() throws ApiException {
        UUID uuid = null;
        PatchedRoleRequest patchedRoleRequest = null;
        Role response = api.rbacRolesPartialUpdate(uuid, patchedRoleRequest);
        // TODO: test validations
    }

    /**
     * Role viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rbacRolesRetrieveTest() throws ApiException {
        UUID uuid = null;
        Role response = api.rbacRolesRetrieve(uuid);
        // TODO: test validations
    }

    /**
     * Role viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rbacRolesUpdateTest() throws ApiException {
        UUID uuid = null;
        RoleRequest roleRequest = null;
        Role response = api.rbacRolesUpdate(uuid, roleRequest);
        // TODO: test validations
    }

    /**
     * Get a list of all objects that use this object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rbacRolesUsedByListTest() throws ApiException {
        UUID uuid = null;
        List<UsedBy> response = api.rbacRolesUsedByList(uuid);
        // TODO: test validations
    }

}
