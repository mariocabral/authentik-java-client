/*
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.6.3
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Application;
import org.openapitools.client.model.ApplicationRequest;
import org.openapitools.client.model.AuthenticatedSession;
import org.openapitools.client.model.Brand;
import org.openapitools.client.model.BrandRequest;
import org.openapitools.client.model.Coordinate;
import org.openapitools.client.model.CurrentBrand;
import java.io.File;
import org.openapitools.client.model.FilePathRequest;
import org.openapitools.client.model.GenericError;
import org.openapitools.client.model.Group;
import org.openapitools.client.model.GroupRequest;
import org.openapitools.client.model.Link;
import java.time.OffsetDateTime;
import org.openapitools.client.model.PaginatedApplicationList;
import org.openapitools.client.model.PaginatedAuthenticatedSessionList;
import org.openapitools.client.model.PaginatedBrandList;
import org.openapitools.client.model.PaginatedGroupList;
import org.openapitools.client.model.PaginatedTokenList;
import org.openapitools.client.model.PaginatedUserConsentList;
import org.openapitools.client.model.PaginatedUserList;
import org.openapitools.client.model.PatchedApplicationRequest;
import org.openapitools.client.model.PatchedBrandRequest;
import org.openapitools.client.model.PatchedGroupRequest;
import org.openapitools.client.model.PatchedTokenRequest;
import org.openapitools.client.model.PatchedUserRequest;
import org.openapitools.client.model.PolicyTestResult;
import org.openapitools.client.model.SessionUser;
import org.openapitools.client.model.Token;
import org.openapitools.client.model.TokenRequest;
import org.openapitools.client.model.TokenSetKeyRequest;
import org.openapitools.client.model.TokenView;
import org.openapitools.client.model.TransactionApplicationRequest;
import org.openapitools.client.model.TransactionApplicationResponse;
import java.util.UUID;
import org.openapitools.client.model.UsedBy;
import org.openapitools.client.model.User;
import org.openapitools.client.model.UserAccountRequest;
import org.openapitools.client.model.UserConsent;
import org.openapitools.client.model.UserMetrics;
import org.openapitools.client.model.UserPasswordSetRequest;
import org.openapitools.client.model.UserPath;
import org.openapitools.client.model.UserRequest;
import org.openapitools.client.model.UserServiceAccountRequest;
import org.openapitools.client.model.UserServiceAccountResponse;
import org.openapitools.client.model.ValidationError;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CoreApi
 */
@Disabled
public class CoreApiTest {

    private final CoreApi api = new CoreApi();

    /**
     * Check access to a single application by slug
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreApplicationsCheckAccessRetrieveTest() throws ApiException {
        String slug = null;
        Integer forUser = null;
        PolicyTestResult response = api.coreApplicationsCheckAccessRetrieve(slug, forUser);
        // TODO: test validations
    }

    /**
     * Application Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreApplicationsCreateTest() throws ApiException {
        ApplicationRequest applicationRequest = null;
        Application response = api.coreApplicationsCreate(applicationRequest);
        // TODO: test validations
    }

    /**
     * Application Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreApplicationsDestroyTest() throws ApiException {
        String slug = null;
        api.coreApplicationsDestroy(slug);
        // TODO: test validations
    }

    /**
     * Custom list method that checks Policy based access instead of guardian
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreApplicationsListTest() throws ApiException {
        Integer forUser = null;
        String group = null;
        String metaDescription = null;
        String metaLaunchUrl = null;
        String metaPublisher = null;
        String name = null;
        String ordering = null;
        Integer page = null;
        Integer pageSize = null;
        String search = null;
        String slug = null;
        Boolean superuserFullList = null;
        PaginatedApplicationList response = api.coreApplicationsList(forUser, group, metaDescription, metaLaunchUrl, metaPublisher, name, ordering, page, pageSize, search, slug, superuserFullList);
        // TODO: test validations
    }

    /**
     * Metrics for application logins
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreApplicationsMetricsListTest() throws ApiException {
        String slug = null;
        List<Coordinate> response = api.coreApplicationsMetricsList(slug);
        // TODO: test validations
    }

    /**
     * Application Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreApplicationsPartialUpdateTest() throws ApiException {
        String slug = null;
        PatchedApplicationRequest patchedApplicationRequest = null;
        Application response = api.coreApplicationsPartialUpdate(slug, patchedApplicationRequest);
        // TODO: test validations
    }

    /**
     * Application Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreApplicationsRetrieveTest() throws ApiException {
        String slug = null;
        Application response = api.coreApplicationsRetrieve(slug);
        // TODO: test validations
    }

    /**
     * Set application icon
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreApplicationsSetIconCreateTest() throws ApiException {
        String slug = null;
        File _file = null;
        Boolean clear = null;
        api.coreApplicationsSetIconCreate(slug, _file, clear);
        // TODO: test validations
    }

    /**
     * Set application icon (as URL)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreApplicationsSetIconUrlCreateTest() throws ApiException {
        String slug = null;
        FilePathRequest filePathRequest = null;
        api.coreApplicationsSetIconUrlCreate(slug, filePathRequest);
        // TODO: test validations
    }

    /**
     * Application Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreApplicationsUpdateTest() throws ApiException {
        String slug = null;
        ApplicationRequest applicationRequest = null;
        Application response = api.coreApplicationsUpdate(slug, applicationRequest);
        // TODO: test validations
    }

    /**
     * Get a list of all objects that use this object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreApplicationsUsedByListTest() throws ApiException {
        String slug = null;
        List<UsedBy> response = api.coreApplicationsUsedByList(slug);
        // TODO: test validations
    }

    /**
     * AuthenticatedSession Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreAuthenticatedSessionsDestroyTest() throws ApiException {
        UUID uuid = null;
        api.coreAuthenticatedSessionsDestroy(uuid);
        // TODO: test validations
    }

    /**
     * AuthenticatedSession Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreAuthenticatedSessionsListTest() throws ApiException {
        String lastIp = null;
        String lastUserAgent = null;
        String ordering = null;
        Integer page = null;
        Integer pageSize = null;
        String search = null;
        String userUsername = null;
        PaginatedAuthenticatedSessionList response = api.coreAuthenticatedSessionsList(lastIp, lastUserAgent, ordering, page, pageSize, search, userUsername);
        // TODO: test validations
    }

    /**
     * AuthenticatedSession Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreAuthenticatedSessionsRetrieveTest() throws ApiException {
        UUID uuid = null;
        AuthenticatedSession response = api.coreAuthenticatedSessionsRetrieve(uuid);
        // TODO: test validations
    }

    /**
     * Get a list of all objects that use this object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreAuthenticatedSessionsUsedByListTest() throws ApiException {
        UUID uuid = null;
        List<UsedBy> response = api.coreAuthenticatedSessionsUsedByList(uuid);
        // TODO: test validations
    }

    /**
     * Brand Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreBrandsCreateTest() throws ApiException {
        BrandRequest brandRequest = null;
        Brand response = api.coreBrandsCreate(brandRequest);
        // TODO: test validations
    }

    /**
     * Get current brand
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreBrandsCurrentRetrieveTest() throws ApiException {
        CurrentBrand response = api.coreBrandsCurrentRetrieve();
        // TODO: test validations
    }

    /**
     * Brand Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreBrandsDestroyTest() throws ApiException {
        UUID brandUuid = null;
        api.coreBrandsDestroy(brandUuid);
        // TODO: test validations
    }

    /**
     * Brand Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreBrandsListTest() throws ApiException {
        UUID brandUuid = null;
        String brandingFavicon = null;
        String brandingLogo = null;
        String brandingTitle = null;
        Boolean _default = null;
        String domain = null;
        UUID flowAuthentication = null;
        UUID flowDeviceCode = null;
        UUID flowInvalidation = null;
        UUID flowRecovery = null;
        UUID flowUnenrollment = null;
        UUID flowUserSettings = null;
        String ordering = null;
        Integer page = null;
        Integer pageSize = null;
        String search = null;
        UUID webCertificate = null;
        PaginatedBrandList response = api.coreBrandsList(brandUuid, brandingFavicon, brandingLogo, brandingTitle, _default, domain, flowAuthentication, flowDeviceCode, flowInvalidation, flowRecovery, flowUnenrollment, flowUserSettings, ordering, page, pageSize, search, webCertificate);
        // TODO: test validations
    }

    /**
     * Brand Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreBrandsPartialUpdateTest() throws ApiException {
        UUID brandUuid = null;
        PatchedBrandRequest patchedBrandRequest = null;
        Brand response = api.coreBrandsPartialUpdate(brandUuid, patchedBrandRequest);
        // TODO: test validations
    }

    /**
     * Brand Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreBrandsRetrieveTest() throws ApiException {
        UUID brandUuid = null;
        Brand response = api.coreBrandsRetrieve(brandUuid);
        // TODO: test validations
    }

    /**
     * Brand Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreBrandsUpdateTest() throws ApiException {
        UUID brandUuid = null;
        BrandRequest brandRequest = null;
        Brand response = api.coreBrandsUpdate(brandUuid, brandRequest);
        // TODO: test validations
    }

    /**
     * Get a list of all objects that use this object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreBrandsUsedByListTest() throws ApiException {
        UUID brandUuid = null;
        List<UsedBy> response = api.coreBrandsUsedByList(brandUuid);
        // TODO: test validations
    }

    /**
     * Add user to group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreGroupsAddUserCreateTest() throws ApiException {
        UUID groupUuid = null;
        UserAccountRequest userAccountRequest = null;
        api.coreGroupsAddUserCreate(groupUuid, userAccountRequest);
        // TODO: test validations
    }

    /**
     * Group Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreGroupsCreateTest() throws ApiException {
        GroupRequest groupRequest = null;
        Group response = api.coreGroupsCreate(groupRequest);
        // TODO: test validations
    }

    /**
     * Group Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreGroupsDestroyTest() throws ApiException {
        UUID groupUuid = null;
        api.coreGroupsDestroy(groupUuid);
        // TODO: test validations
    }

    /**
     * Group Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreGroupsListTest() throws ApiException {
        String attributes = null;
        Boolean includeUsers = null;
        Boolean isSuperuser = null;
        List<Integer> membersByPk = null;
        List<String> membersByUsername = null;
        String name = null;
        String ordering = null;
        Integer page = null;
        Integer pageSize = null;
        String search = null;
        PaginatedGroupList response = api.coreGroupsList(attributes, includeUsers, isSuperuser, membersByPk, membersByUsername, name, ordering, page, pageSize, search);
        // TODO: test validations
    }

    /**
     * Group Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreGroupsPartialUpdateTest() throws ApiException {
        UUID groupUuid = null;
        PatchedGroupRequest patchedGroupRequest = null;
        Group response = api.coreGroupsPartialUpdate(groupUuid, patchedGroupRequest);
        // TODO: test validations
    }

    /**
     * Add user to group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreGroupsRemoveUserCreateTest() throws ApiException {
        UUID groupUuid = null;
        UserAccountRequest userAccountRequest = null;
        api.coreGroupsRemoveUserCreate(groupUuid, userAccountRequest);
        // TODO: test validations
    }

    /**
     * Group Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreGroupsRetrieveTest() throws ApiException {
        UUID groupUuid = null;
        Boolean includeUsers = null;
        Group response = api.coreGroupsRetrieve(groupUuid, includeUsers);
        // TODO: test validations
    }

    /**
     * Group Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreGroupsUpdateTest() throws ApiException {
        UUID groupUuid = null;
        GroupRequest groupRequest = null;
        Group response = api.coreGroupsUpdate(groupUuid, groupRequest);
        // TODO: test validations
    }

    /**
     * Get a list of all objects that use this object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreGroupsUsedByListTest() throws ApiException {
        UUID groupUuid = null;
        List<UsedBy> response = api.coreGroupsUsedByList(groupUuid);
        // TODO: test validations
    }

    /**
     * Token Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreTokensCreateTest() throws ApiException {
        TokenRequest tokenRequest = null;
        Token response = api.coreTokensCreate(tokenRequest);
        // TODO: test validations
    }

    /**
     * Token Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreTokensDestroyTest() throws ApiException {
        String identifier = null;
        api.coreTokensDestroy(identifier);
        // TODO: test validations
    }

    /**
     * Token Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreTokensListTest() throws ApiException {
        String description = null;
        OffsetDateTime expires = null;
        Boolean expiring = null;
        String identifier = null;
        String intent = null;
        String managed = null;
        String ordering = null;
        Integer page = null;
        Integer pageSize = null;
        String search = null;
        String userUsername = null;
        PaginatedTokenList response = api.coreTokensList(description, expires, expiring, identifier, intent, managed, ordering, page, pageSize, search, userUsername);
        // TODO: test validations
    }

    /**
     * Token Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreTokensPartialUpdateTest() throws ApiException {
        String identifier = null;
        PatchedTokenRequest patchedTokenRequest = null;
        Token response = api.coreTokensPartialUpdate(identifier, patchedTokenRequest);
        // TODO: test validations
    }

    /**
     * Token Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreTokensRetrieveTest() throws ApiException {
        String identifier = null;
        Token response = api.coreTokensRetrieve(identifier);
        // TODO: test validations
    }

    /**
     * Set token key. Action is logged as event. &#x60;authentik_core.set_token_key&#x60; permission is required.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreTokensSetKeyCreateTest() throws ApiException {
        String identifier = null;
        TokenSetKeyRequest tokenSetKeyRequest = null;
        api.coreTokensSetKeyCreate(identifier, tokenSetKeyRequest);
        // TODO: test validations
    }

    /**
     * Token Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreTokensUpdateTest() throws ApiException {
        String identifier = null;
        TokenRequest tokenRequest = null;
        Token response = api.coreTokensUpdate(identifier, tokenRequest);
        // TODO: test validations
    }

    /**
     * Get a list of all objects that use this object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreTokensUsedByListTest() throws ApiException {
        String identifier = null;
        List<UsedBy> response = api.coreTokensUsedByList(identifier);
        // TODO: test validations
    }

    /**
     * Return token key and log access
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreTokensViewKeyRetrieveTest() throws ApiException {
        String identifier = null;
        TokenView response = api.coreTokensViewKeyRetrieve(identifier);
        // TODO: test validations
    }

    /**
     * Convert data into a blueprint, validate it and apply it
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreTransactionalApplicationsUpdateTest() throws ApiException {
        TransactionApplicationRequest transactionApplicationRequest = null;
        TransactionApplicationResponse response = api.coreTransactionalApplicationsUpdate(transactionApplicationRequest);
        // TODO: test validations
    }

    /**
     * UserConsent Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreUserConsentDestroyTest() throws ApiException {
        Integer id = null;
        api.coreUserConsentDestroy(id);
        // TODO: test validations
    }

    /**
     * UserConsent Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreUserConsentListTest() throws ApiException {
        UUID application = null;
        String ordering = null;
        Integer page = null;
        Integer pageSize = null;
        String search = null;
        Integer user = null;
        PaginatedUserConsentList response = api.coreUserConsentList(application, ordering, page, pageSize, search, user);
        // TODO: test validations
    }

    /**
     * UserConsent Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreUserConsentRetrieveTest() throws ApiException {
        Integer id = null;
        UserConsent response = api.coreUserConsentRetrieve(id);
        // TODO: test validations
    }

    /**
     * Get a list of all objects that use this object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreUserConsentUsedByListTest() throws ApiException {
        Integer id = null;
        List<UsedBy> response = api.coreUserConsentUsedByList(id);
        // TODO: test validations
    }

    /**
     * User Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreUsersCreateTest() throws ApiException {
        UserRequest userRequest = null;
        User response = api.coreUsersCreate(userRequest);
        // TODO: test validations
    }

    /**
     * User Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreUsersDestroyTest() throws ApiException {
        Integer id = null;
        api.coreUsersDestroy(id);
        // TODO: test validations
    }

    /**
     * Impersonate a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreUsersImpersonateCreateTest() throws ApiException {
        Integer id = null;
        api.coreUsersImpersonateCreate(id);
        // TODO: test validations
    }

    /**
     * End Impersonation a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreUsersImpersonateEndRetrieveTest() throws ApiException {
        api.coreUsersImpersonateEndRetrieve();
        // TODO: test validations
    }

    /**
     * User Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreUsersListTest() throws ApiException {
        String attributes = null;
        String email = null;
        List<String> groupsByName = null;
        List<UUID> groupsByPk = null;
        Boolean includeGroups = null;
        Boolean isActive = null;
        Boolean isSuperuser = null;
        String name = null;
        String ordering = null;
        Integer page = null;
        Integer pageSize = null;
        String path = null;
        String pathStartswith = null;
        String search = null;
        List<String> type = null;
        String username = null;
        UUID uuid = null;
        PaginatedUserList response = api.coreUsersList(attributes, email, groupsByName, groupsByPk, includeGroups, isActive, isSuperuser, name, ordering, page, pageSize, path, pathStartswith, search, type, username, uuid);
        // TODO: test validations
    }

    /**
     * Get information about current user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreUsersMeRetrieveTest() throws ApiException {
        SessionUser response = api.coreUsersMeRetrieve();
        // TODO: test validations
    }

    /**
     * User metrics per 1h
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreUsersMetricsRetrieveTest() throws ApiException {
        Integer id = null;
        UserMetrics response = api.coreUsersMetricsRetrieve(id);
        // TODO: test validations
    }

    /**
     * User Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreUsersPartialUpdateTest() throws ApiException {
        Integer id = null;
        PatchedUserRequest patchedUserRequest = null;
        User response = api.coreUsersPartialUpdate(id, patchedUserRequest);
        // TODO: test validations
    }

    /**
     * Get all user paths
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreUsersPathsRetrieveTest() throws ApiException {
        String search = null;
        UserPath response = api.coreUsersPathsRetrieve(search);
        // TODO: test validations
    }

    /**
     * Create a temporary link that a user can use to recover their accounts
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreUsersRecoveryCreateTest() throws ApiException {
        Integer id = null;
        Link response = api.coreUsersRecoveryCreate(id);
        // TODO: test validations
    }

    /**
     * Create a temporary link that a user can use to recover their accounts
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreUsersRecoveryEmailCreateTest() throws ApiException {
        String emailStage = null;
        Integer id = null;
        api.coreUsersRecoveryEmailCreate(emailStage, id);
        // TODO: test validations
    }

    /**
     * User Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreUsersRetrieveTest() throws ApiException {
        Integer id = null;
        User response = api.coreUsersRetrieve(id);
        // TODO: test validations
    }

    /**
     * Create a new user account that is marked as a service account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreUsersServiceAccountCreateTest() throws ApiException {
        UserServiceAccountRequest userServiceAccountRequest = null;
        UserServiceAccountResponse response = api.coreUsersServiceAccountCreate(userServiceAccountRequest);
        // TODO: test validations
    }

    /**
     * Set password for user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreUsersSetPasswordCreateTest() throws ApiException {
        Integer id = null;
        UserPasswordSetRequest userPasswordSetRequest = null;
        api.coreUsersSetPasswordCreate(id, userPasswordSetRequest);
        // TODO: test validations
    }

    /**
     * User Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreUsersUpdateTest() throws ApiException {
        Integer id = null;
        UserRequest userRequest = null;
        User response = api.coreUsersUpdate(id, userRequest);
        // TODO: test validations
    }

    /**
     * Get a list of all objects that use this object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coreUsersUsedByListTest() throws ApiException {
        Integer id = null;
        List<UsedBy> response = api.coreUsersUsedByList(id);
        // TODO: test validations
    }

}
