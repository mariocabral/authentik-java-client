/*
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.6.3
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.io.File;
import org.openapitools.client.model.GenericError;
import org.openapitools.client.model.GoogleWorkspaceProvider;
import org.openapitools.client.model.GoogleWorkspaceProviderGroup;
import org.openapitools.client.model.GoogleWorkspaceProviderGroupRequest;
import org.openapitools.client.model.GoogleWorkspaceProviderRequest;
import org.openapitools.client.model.GoogleWorkspaceProviderUser;
import org.openapitools.client.model.GoogleWorkspaceProviderUserRequest;
import org.openapitools.client.model.LDAPProvider;
import org.openapitools.client.model.LDAPProviderRequest;
import org.openapitools.client.model.MicrosoftEntraProvider;
import org.openapitools.client.model.MicrosoftEntraProviderGroup;
import org.openapitools.client.model.MicrosoftEntraProviderGroupRequest;
import org.openapitools.client.model.MicrosoftEntraProviderRequest;
import org.openapitools.client.model.MicrosoftEntraProviderUser;
import org.openapitools.client.model.MicrosoftEntraProviderUserRequest;
import org.openapitools.client.model.OAuth2Provider;
import org.openapitools.client.model.OAuth2ProviderRequest;
import org.openapitools.client.model.OAuth2ProviderSetupURLs;
import org.openapitools.client.model.PaginatedGoogleWorkspaceProviderGroupList;
import org.openapitools.client.model.PaginatedGoogleWorkspaceProviderList;
import org.openapitools.client.model.PaginatedGoogleWorkspaceProviderUserList;
import org.openapitools.client.model.PaginatedLDAPProviderList;
import org.openapitools.client.model.PaginatedMicrosoftEntraProviderGroupList;
import org.openapitools.client.model.PaginatedMicrosoftEntraProviderList;
import org.openapitools.client.model.PaginatedMicrosoftEntraProviderUserList;
import org.openapitools.client.model.PaginatedOAuth2ProviderList;
import org.openapitools.client.model.PaginatedProviderList;
import org.openapitools.client.model.PaginatedProxyProviderList;
import org.openapitools.client.model.PaginatedRACProviderList;
import org.openapitools.client.model.PaginatedRadiusProviderList;
import org.openapitools.client.model.PaginatedSAMLProviderList;
import org.openapitools.client.model.PaginatedSCIMProviderGroupList;
import org.openapitools.client.model.PaginatedSCIMProviderList;
import org.openapitools.client.model.PaginatedSCIMProviderUserList;
import org.openapitools.client.model.PatchedGoogleWorkspaceProviderRequest;
import org.openapitools.client.model.PatchedLDAPProviderRequest;
import org.openapitools.client.model.PatchedMicrosoftEntraProviderRequest;
import org.openapitools.client.model.PatchedOAuth2ProviderRequest;
import org.openapitools.client.model.PatchedProxyProviderRequest;
import org.openapitools.client.model.PatchedRACProviderRequest;
import org.openapitools.client.model.PatchedRadiusProviderRequest;
import org.openapitools.client.model.PatchedSAMLProviderRequest;
import org.openapitools.client.model.PatchedSCIMProviderRequest;
import org.openapitools.client.model.PropertyMappingPreview;
import org.openapitools.client.model.Provider;
import org.openapitools.client.model.ProxyProvider;
import org.openapitools.client.model.ProxyProviderRequest;
import org.openapitools.client.model.RACProvider;
import org.openapitools.client.model.RACProviderRequest;
import org.openapitools.client.model.RadiusProvider;
import org.openapitools.client.model.RadiusProviderRequest;
import org.openapitools.client.model.SAMLMetadata;
import org.openapitools.client.model.SAMLProvider;
import org.openapitools.client.model.SAMLProviderRequest;
import org.openapitools.client.model.SCIMProvider;
import org.openapitools.client.model.SCIMProviderGroup;
import org.openapitools.client.model.SCIMProviderGroupRequest;
import org.openapitools.client.model.SCIMProviderRequest;
import org.openapitools.client.model.SCIMProviderUser;
import org.openapitools.client.model.SCIMProviderUserRequest;
import org.openapitools.client.model.SyncStatus;
import org.openapitools.client.model.TypeCreate;
import java.util.UUID;
import org.openapitools.client.model.UsedBy;
import org.openapitools.client.model.ValidationError;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProvidersApi
 */
@Disabled
public class ProvidersApiTest {

    private final ProvidersApi api = new ProvidersApi();

    /**
     * Provider Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersAllDestroyTest() throws ApiException {
        Integer id = null;
        api.providersAllDestroy(id);
        // TODO: test validations
    }

    /**
     * Provider Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersAllListTest() throws ApiException {
        Boolean applicationIsnull = null;
        Boolean backchannel = null;
        String ordering = null;
        Integer page = null;
        Integer pageSize = null;
        String search = null;
        PaginatedProviderList response = api.providersAllList(applicationIsnull, backchannel, ordering, page, pageSize, search);
        // TODO: test validations
    }

    /**
     * Provider Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersAllRetrieveTest() throws ApiException {
        Integer id = null;
        Provider response = api.providersAllRetrieve(id);
        // TODO: test validations
    }

    /**
     * Get all creatable types
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersAllTypesListTest() throws ApiException {
        List<TypeCreate> response = api.providersAllTypesList();
        // TODO: test validations
    }

    /**
     * Get a list of all objects that use this object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersAllUsedByListTest() throws ApiException {
        Integer id = null;
        List<UsedBy> response = api.providersAllUsedByList(id);
        // TODO: test validations
    }

    /**
     * GoogleWorkspaceProvider Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersGoogleWorkspaceCreateTest() throws ApiException {
        GoogleWorkspaceProviderRequest googleWorkspaceProviderRequest = null;
        GoogleWorkspaceProvider response = api.providersGoogleWorkspaceCreate(googleWorkspaceProviderRequest);
        // TODO: test validations
    }

    /**
     * GoogleWorkspaceProvider Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersGoogleWorkspaceDestroyTest() throws ApiException {
        Integer id = null;
        api.providersGoogleWorkspaceDestroy(id);
        // TODO: test validations
    }

    /**
     * GoogleWorkspaceProviderGroup Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersGoogleWorkspaceGroupsCreateTest() throws ApiException {
        GoogleWorkspaceProviderGroupRequest googleWorkspaceProviderGroupRequest = null;
        GoogleWorkspaceProviderGroup response = api.providersGoogleWorkspaceGroupsCreate(googleWorkspaceProviderGroupRequest);
        // TODO: test validations
    }

    /**
     * GoogleWorkspaceProviderGroup Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersGoogleWorkspaceGroupsDestroyTest() throws ApiException {
        UUID id = null;
        api.providersGoogleWorkspaceGroupsDestroy(id);
        // TODO: test validations
    }

    /**
     * GoogleWorkspaceProviderGroup Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersGoogleWorkspaceGroupsListTest() throws ApiException {
        UUID groupGroupUuid = null;
        String groupName = null;
        String ordering = null;
        Integer page = null;
        Integer pageSize = null;
        Integer providerId = null;
        String search = null;
        PaginatedGoogleWorkspaceProviderGroupList response = api.providersGoogleWorkspaceGroupsList(groupGroupUuid, groupName, ordering, page, pageSize, providerId, search);
        // TODO: test validations
    }

    /**
     * GoogleWorkspaceProviderGroup Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersGoogleWorkspaceGroupsRetrieveTest() throws ApiException {
        UUID id = null;
        GoogleWorkspaceProviderGroup response = api.providersGoogleWorkspaceGroupsRetrieve(id);
        // TODO: test validations
    }

    /**
     * Get a list of all objects that use this object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersGoogleWorkspaceGroupsUsedByListTest() throws ApiException {
        UUID id = null;
        List<UsedBy> response = api.providersGoogleWorkspaceGroupsUsedByList(id);
        // TODO: test validations
    }

    /**
     * GoogleWorkspaceProvider Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersGoogleWorkspaceListTest() throws ApiException {
        String delegatedSubject = null;
        Boolean excludeUsersServiceAccount = null;
        UUID filterGroup = null;
        String name = null;
        String ordering = null;
        Integer page = null;
        Integer pageSize = null;
        String search = null;
        PaginatedGoogleWorkspaceProviderList response = api.providersGoogleWorkspaceList(delegatedSubject, excludeUsersServiceAccount, filterGroup, name, ordering, page, pageSize, search);
        // TODO: test validations
    }

    /**
     * GoogleWorkspaceProvider Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersGoogleWorkspacePartialUpdateTest() throws ApiException {
        Integer id = null;
        PatchedGoogleWorkspaceProviderRequest patchedGoogleWorkspaceProviderRequest = null;
        GoogleWorkspaceProvider response = api.providersGoogleWorkspacePartialUpdate(id, patchedGoogleWorkspaceProviderRequest);
        // TODO: test validations
    }

    /**
     * GoogleWorkspaceProvider Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersGoogleWorkspaceRetrieveTest() throws ApiException {
        Integer id = null;
        GoogleWorkspaceProvider response = api.providersGoogleWorkspaceRetrieve(id);
        // TODO: test validations
    }

    /**
     * Get provider&#39;s sync status
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersGoogleWorkspaceSyncStatusRetrieveTest() throws ApiException {
        Integer id = null;
        SyncStatus response = api.providersGoogleWorkspaceSyncStatusRetrieve(id);
        // TODO: test validations
    }

    /**
     * GoogleWorkspaceProvider Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersGoogleWorkspaceUpdateTest() throws ApiException {
        Integer id = null;
        GoogleWorkspaceProviderRequest googleWorkspaceProviderRequest = null;
        GoogleWorkspaceProvider response = api.providersGoogleWorkspaceUpdate(id, googleWorkspaceProviderRequest);
        // TODO: test validations
    }

    /**
     * Get a list of all objects that use this object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersGoogleWorkspaceUsedByListTest() throws ApiException {
        Integer id = null;
        List<UsedBy> response = api.providersGoogleWorkspaceUsedByList(id);
        // TODO: test validations
    }

    /**
     * GoogleWorkspaceProviderUser Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersGoogleWorkspaceUsersCreateTest() throws ApiException {
        GoogleWorkspaceProviderUserRequest googleWorkspaceProviderUserRequest = null;
        GoogleWorkspaceProviderUser response = api.providersGoogleWorkspaceUsersCreate(googleWorkspaceProviderUserRequest);
        // TODO: test validations
    }

    /**
     * GoogleWorkspaceProviderUser Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersGoogleWorkspaceUsersDestroyTest() throws ApiException {
        UUID id = null;
        api.providersGoogleWorkspaceUsersDestroy(id);
        // TODO: test validations
    }

    /**
     * GoogleWorkspaceProviderUser Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersGoogleWorkspaceUsersListTest() throws ApiException {
        String ordering = null;
        Integer page = null;
        Integer pageSize = null;
        Integer providerId = null;
        String search = null;
        Integer userId = null;
        String userUsername = null;
        PaginatedGoogleWorkspaceProviderUserList response = api.providersGoogleWorkspaceUsersList(ordering, page, pageSize, providerId, search, userId, userUsername);
        // TODO: test validations
    }

    /**
     * GoogleWorkspaceProviderUser Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersGoogleWorkspaceUsersRetrieveTest() throws ApiException {
        UUID id = null;
        GoogleWorkspaceProviderUser response = api.providersGoogleWorkspaceUsersRetrieve(id);
        // TODO: test validations
    }

    /**
     * Get a list of all objects that use this object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersGoogleWorkspaceUsersUsedByListTest() throws ApiException {
        UUID id = null;
        List<UsedBy> response = api.providersGoogleWorkspaceUsersUsedByList(id);
        // TODO: test validations
    }

    /**
     * LDAPProvider Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersLdapCreateTest() throws ApiException {
        LDAPProviderRequest ldAPProviderRequest = null;
        LDAPProvider response = api.providersLdapCreate(ldAPProviderRequest);
        // TODO: test validations
    }

    /**
     * LDAPProvider Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersLdapDestroyTest() throws ApiException {
        Integer id = null;
        api.providersLdapDestroy(id);
        // TODO: test validations
    }

    /**
     * LDAPProvider Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersLdapListTest() throws ApiException {
        Boolean applicationIsnull = null;
        String authorizationFlowSlugIexact = null;
        String baseDnIexact = null;
        UUID certificateKpUuidIexact = null;
        String certificateNameIexact = null;
        Integer gidStartNumberIexact = null;
        String nameIexact = null;
        String ordering = null;
        Integer page = null;
        Integer pageSize = null;
        String search = null;
        UUID searchGroupGroupUuidIexact = null;
        String searchGroupNameIexact = null;
        String tlsServerNameIexact = null;
        Integer uidStartNumberIexact = null;
        PaginatedLDAPProviderList response = api.providersLdapList(applicationIsnull, authorizationFlowSlugIexact, baseDnIexact, certificateKpUuidIexact, certificateNameIexact, gidStartNumberIexact, nameIexact, ordering, page, pageSize, search, searchGroupGroupUuidIexact, searchGroupNameIexact, tlsServerNameIexact, uidStartNumberIexact);
        // TODO: test validations
    }

    /**
     * LDAPProvider Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersLdapPartialUpdateTest() throws ApiException {
        Integer id = null;
        PatchedLDAPProviderRequest patchedLDAPProviderRequest = null;
        LDAPProvider response = api.providersLdapPartialUpdate(id, patchedLDAPProviderRequest);
        // TODO: test validations
    }

    /**
     * LDAPProvider Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersLdapRetrieveTest() throws ApiException {
        Integer id = null;
        LDAPProvider response = api.providersLdapRetrieve(id);
        // TODO: test validations
    }

    /**
     * LDAPProvider Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersLdapUpdateTest() throws ApiException {
        Integer id = null;
        LDAPProviderRequest ldAPProviderRequest = null;
        LDAPProvider response = api.providersLdapUpdate(id, ldAPProviderRequest);
        // TODO: test validations
    }

    /**
     * Get a list of all objects that use this object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersLdapUsedByListTest() throws ApiException {
        Integer id = null;
        List<UsedBy> response = api.providersLdapUsedByList(id);
        // TODO: test validations
    }

    /**
     * MicrosoftEntraProvider Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersMicrosoftEntraCreateTest() throws ApiException {
        MicrosoftEntraProviderRequest microsoftEntraProviderRequest = null;
        MicrosoftEntraProvider response = api.providersMicrosoftEntraCreate(microsoftEntraProviderRequest);
        // TODO: test validations
    }

    /**
     * MicrosoftEntraProvider Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersMicrosoftEntraDestroyTest() throws ApiException {
        Integer id = null;
        api.providersMicrosoftEntraDestroy(id);
        // TODO: test validations
    }

    /**
     * MicrosoftEntraProviderGroup Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersMicrosoftEntraGroupsCreateTest() throws ApiException {
        MicrosoftEntraProviderGroupRequest microsoftEntraProviderGroupRequest = null;
        MicrosoftEntraProviderGroup response = api.providersMicrosoftEntraGroupsCreate(microsoftEntraProviderGroupRequest);
        // TODO: test validations
    }

    /**
     * MicrosoftEntraProviderGroup Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersMicrosoftEntraGroupsDestroyTest() throws ApiException {
        UUID id = null;
        api.providersMicrosoftEntraGroupsDestroy(id);
        // TODO: test validations
    }

    /**
     * MicrosoftEntraProviderGroup Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersMicrosoftEntraGroupsListTest() throws ApiException {
        UUID groupGroupUuid = null;
        String groupName = null;
        String ordering = null;
        Integer page = null;
        Integer pageSize = null;
        Integer providerId = null;
        String search = null;
        PaginatedMicrosoftEntraProviderGroupList response = api.providersMicrosoftEntraGroupsList(groupGroupUuid, groupName, ordering, page, pageSize, providerId, search);
        // TODO: test validations
    }

    /**
     * MicrosoftEntraProviderGroup Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersMicrosoftEntraGroupsRetrieveTest() throws ApiException {
        UUID id = null;
        MicrosoftEntraProviderGroup response = api.providersMicrosoftEntraGroupsRetrieve(id);
        // TODO: test validations
    }

    /**
     * Get a list of all objects that use this object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersMicrosoftEntraGroupsUsedByListTest() throws ApiException {
        UUID id = null;
        List<UsedBy> response = api.providersMicrosoftEntraGroupsUsedByList(id);
        // TODO: test validations
    }

    /**
     * MicrosoftEntraProvider Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersMicrosoftEntraListTest() throws ApiException {
        Boolean excludeUsersServiceAccount = null;
        UUID filterGroup = null;
        String name = null;
        String ordering = null;
        Integer page = null;
        Integer pageSize = null;
        String search = null;
        PaginatedMicrosoftEntraProviderList response = api.providersMicrosoftEntraList(excludeUsersServiceAccount, filterGroup, name, ordering, page, pageSize, search);
        // TODO: test validations
    }

    /**
     * MicrosoftEntraProvider Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersMicrosoftEntraPartialUpdateTest() throws ApiException {
        Integer id = null;
        PatchedMicrosoftEntraProviderRequest patchedMicrosoftEntraProviderRequest = null;
        MicrosoftEntraProvider response = api.providersMicrosoftEntraPartialUpdate(id, patchedMicrosoftEntraProviderRequest);
        // TODO: test validations
    }

    /**
     * MicrosoftEntraProvider Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersMicrosoftEntraRetrieveTest() throws ApiException {
        Integer id = null;
        MicrosoftEntraProvider response = api.providersMicrosoftEntraRetrieve(id);
        // TODO: test validations
    }

    /**
     * Get provider&#39;s sync status
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersMicrosoftEntraSyncStatusRetrieveTest() throws ApiException {
        Integer id = null;
        SyncStatus response = api.providersMicrosoftEntraSyncStatusRetrieve(id);
        // TODO: test validations
    }

    /**
     * MicrosoftEntraProvider Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersMicrosoftEntraUpdateTest() throws ApiException {
        Integer id = null;
        MicrosoftEntraProviderRequest microsoftEntraProviderRequest = null;
        MicrosoftEntraProvider response = api.providersMicrosoftEntraUpdate(id, microsoftEntraProviderRequest);
        // TODO: test validations
    }

    /**
     * Get a list of all objects that use this object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersMicrosoftEntraUsedByListTest() throws ApiException {
        Integer id = null;
        List<UsedBy> response = api.providersMicrosoftEntraUsedByList(id);
        // TODO: test validations
    }

    /**
     * MicrosoftEntraProviderUser Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersMicrosoftEntraUsersCreateTest() throws ApiException {
        MicrosoftEntraProviderUserRequest microsoftEntraProviderUserRequest = null;
        MicrosoftEntraProviderUser response = api.providersMicrosoftEntraUsersCreate(microsoftEntraProviderUserRequest);
        // TODO: test validations
    }

    /**
     * MicrosoftEntraProviderUser Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersMicrosoftEntraUsersDestroyTest() throws ApiException {
        UUID id = null;
        api.providersMicrosoftEntraUsersDestroy(id);
        // TODO: test validations
    }

    /**
     * MicrosoftEntraProviderUser Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersMicrosoftEntraUsersListTest() throws ApiException {
        String ordering = null;
        Integer page = null;
        Integer pageSize = null;
        Integer providerId = null;
        String search = null;
        Integer userId = null;
        String userUsername = null;
        PaginatedMicrosoftEntraProviderUserList response = api.providersMicrosoftEntraUsersList(ordering, page, pageSize, providerId, search, userId, userUsername);
        // TODO: test validations
    }

    /**
     * MicrosoftEntraProviderUser Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersMicrosoftEntraUsersRetrieveTest() throws ApiException {
        UUID id = null;
        MicrosoftEntraProviderUser response = api.providersMicrosoftEntraUsersRetrieve(id);
        // TODO: test validations
    }

    /**
     * Get a list of all objects that use this object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersMicrosoftEntraUsersUsedByListTest() throws ApiException {
        UUID id = null;
        List<UsedBy> response = api.providersMicrosoftEntraUsersUsedByList(id);
        // TODO: test validations
    }

    /**
     * OAuth2Provider Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersOauth2CreateTest() throws ApiException {
        OAuth2ProviderRequest oauth2ProviderRequest = null;
        OAuth2Provider response = api.providersOauth2Create(oauth2ProviderRequest);
        // TODO: test validations
    }

    /**
     * OAuth2Provider Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersOauth2DestroyTest() throws ApiException {
        Integer id = null;
        api.providersOauth2Destroy(id);
        // TODO: test validations
    }

    /**
     * OAuth2Provider Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersOauth2ListTest() throws ApiException {
        String accessCodeValidity = null;
        String accessTokenValidity = null;
        UUID application = null;
        UUID authorizationFlow = null;
        String clientId = null;
        String clientType = null;
        Boolean includeClaimsInIdToken = null;
        String issuerMode = null;
        String name = null;
        String ordering = null;
        Integer page = null;
        Integer pageSize = null;
        List<UUID> propertyMappings = null;
        String redirectUris = null;
        String refreshTokenValidity = null;
        String search = null;
        UUID signingKey = null;
        String subMode = null;
        PaginatedOAuth2ProviderList response = api.providersOauth2List(accessCodeValidity, accessTokenValidity, application, authorizationFlow, clientId, clientType, includeClaimsInIdToken, issuerMode, name, ordering, page, pageSize, propertyMappings, redirectUris, refreshTokenValidity, search, signingKey, subMode);
        // TODO: test validations
    }

    /**
     * OAuth2Provider Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersOauth2PartialUpdateTest() throws ApiException {
        Integer id = null;
        PatchedOAuth2ProviderRequest patchedOAuth2ProviderRequest = null;
        OAuth2Provider response = api.providersOauth2PartialUpdate(id, patchedOAuth2ProviderRequest);
        // TODO: test validations
    }

    /**
     * Preview user data for provider
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersOauth2PreviewUserRetrieveTest() throws ApiException {
        Integer id = null;
        Integer forUser = null;
        PropertyMappingPreview response = api.providersOauth2PreviewUserRetrieve(id, forUser);
        // TODO: test validations
    }

    /**
     * OAuth2Provider Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersOauth2RetrieveTest() throws ApiException {
        Integer id = null;
        OAuth2Provider response = api.providersOauth2Retrieve(id);
        // TODO: test validations
    }

    /**
     * Get Providers setup URLs
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersOauth2SetupUrlsRetrieveTest() throws ApiException {
        Integer id = null;
        OAuth2ProviderSetupURLs response = api.providersOauth2SetupUrlsRetrieve(id);
        // TODO: test validations
    }

    /**
     * OAuth2Provider Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersOauth2UpdateTest() throws ApiException {
        Integer id = null;
        OAuth2ProviderRequest oauth2ProviderRequest = null;
        OAuth2Provider response = api.providersOauth2Update(id, oauth2ProviderRequest);
        // TODO: test validations
    }

    /**
     * Get a list of all objects that use this object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersOauth2UsedByListTest() throws ApiException {
        Integer id = null;
        List<UsedBy> response = api.providersOauth2UsedByList(id);
        // TODO: test validations
    }

    /**
     * ProxyProvider Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersProxyCreateTest() throws ApiException {
        ProxyProviderRequest proxyProviderRequest = null;
        ProxyProvider response = api.providersProxyCreate(proxyProviderRequest);
        // TODO: test validations
    }

    /**
     * ProxyProvider Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersProxyDestroyTest() throws ApiException {
        Integer id = null;
        api.providersProxyDestroy(id);
        // TODO: test validations
    }

    /**
     * ProxyProvider Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersProxyListTest() throws ApiException {
        Boolean applicationIsnull = null;
        String authorizationFlowSlugIexact = null;
        Boolean basicAuthEnabledIexact = null;
        String basicAuthPasswordAttributeIexact = null;
        String basicAuthUserAttributeIexact = null;
        UUID certificateKpUuidIexact = null;
        String certificateNameIexact = null;
        String cookieDomainIexact = null;
        String externalHostIexact = null;
        String internalHostIexact = null;
        Boolean internalHostSslValidationIexact = null;
        String modeIexact = null;
        String nameIexact = null;
        String ordering = null;
        Integer page = null;
        Integer pageSize = null;
        List<UUID> propertyMappingsIexact = null;
        String redirectUrisIexact = null;
        String search = null;
        String skipPathRegexIexact = null;
        PaginatedProxyProviderList response = api.providersProxyList(applicationIsnull, authorizationFlowSlugIexact, basicAuthEnabledIexact, basicAuthPasswordAttributeIexact, basicAuthUserAttributeIexact, certificateKpUuidIexact, certificateNameIexact, cookieDomainIexact, externalHostIexact, internalHostIexact, internalHostSslValidationIexact, modeIexact, nameIexact, ordering, page, pageSize, propertyMappingsIexact, redirectUrisIexact, search, skipPathRegexIexact);
        // TODO: test validations
    }

    /**
     * ProxyProvider Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersProxyPartialUpdateTest() throws ApiException {
        Integer id = null;
        PatchedProxyProviderRequest patchedProxyProviderRequest = null;
        ProxyProvider response = api.providersProxyPartialUpdate(id, patchedProxyProviderRequest);
        // TODO: test validations
    }

    /**
     * ProxyProvider Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersProxyRetrieveTest() throws ApiException {
        Integer id = null;
        ProxyProvider response = api.providersProxyRetrieve(id);
        // TODO: test validations
    }

    /**
     * ProxyProvider Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersProxyUpdateTest() throws ApiException {
        Integer id = null;
        ProxyProviderRequest proxyProviderRequest = null;
        ProxyProvider response = api.providersProxyUpdate(id, proxyProviderRequest);
        // TODO: test validations
    }

    /**
     * Get a list of all objects that use this object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersProxyUsedByListTest() throws ApiException {
        Integer id = null;
        List<UsedBy> response = api.providersProxyUsedByList(id);
        // TODO: test validations
    }

    /**
     * RACProvider Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersRacCreateTest() throws ApiException {
        RACProviderRequest raCProviderRequest = null;
        RACProvider response = api.providersRacCreate(raCProviderRequest);
        // TODO: test validations
    }

    /**
     * RACProvider Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersRacDestroyTest() throws ApiException {
        Integer id = null;
        api.providersRacDestroy(id);
        // TODO: test validations
    }

    /**
     * RACProvider Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersRacListTest() throws ApiException {
        Boolean applicationIsnull = null;
        String nameIexact = null;
        String ordering = null;
        Integer page = null;
        Integer pageSize = null;
        String search = null;
        PaginatedRACProviderList response = api.providersRacList(applicationIsnull, nameIexact, ordering, page, pageSize, search);
        // TODO: test validations
    }

    /**
     * RACProvider Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersRacPartialUpdateTest() throws ApiException {
        Integer id = null;
        PatchedRACProviderRequest patchedRACProviderRequest = null;
        RACProvider response = api.providersRacPartialUpdate(id, patchedRACProviderRequest);
        // TODO: test validations
    }

    /**
     * RACProvider Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersRacRetrieveTest() throws ApiException {
        Integer id = null;
        RACProvider response = api.providersRacRetrieve(id);
        // TODO: test validations
    }

    /**
     * RACProvider Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersRacUpdateTest() throws ApiException {
        Integer id = null;
        RACProviderRequest raCProviderRequest = null;
        RACProvider response = api.providersRacUpdate(id, raCProviderRequest);
        // TODO: test validations
    }

    /**
     * Get a list of all objects that use this object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersRacUsedByListTest() throws ApiException {
        Integer id = null;
        List<UsedBy> response = api.providersRacUsedByList(id);
        // TODO: test validations
    }

    /**
     * RadiusProvider Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersRadiusCreateTest() throws ApiException {
        RadiusProviderRequest radiusProviderRequest = null;
        RadiusProvider response = api.providersRadiusCreate(radiusProviderRequest);
        // TODO: test validations
    }

    /**
     * RadiusProvider Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersRadiusDestroyTest() throws ApiException {
        Integer id = null;
        api.providersRadiusDestroy(id);
        // TODO: test validations
    }

    /**
     * RadiusProvider Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersRadiusListTest() throws ApiException {
        Boolean applicationIsnull = null;
        String authorizationFlowSlugIexact = null;
        String clientNetworksIexact = null;
        String nameIexact = null;
        String ordering = null;
        Integer page = null;
        Integer pageSize = null;
        String search = null;
        PaginatedRadiusProviderList response = api.providersRadiusList(applicationIsnull, authorizationFlowSlugIexact, clientNetworksIexact, nameIexact, ordering, page, pageSize, search);
        // TODO: test validations
    }

    /**
     * RadiusProvider Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersRadiusPartialUpdateTest() throws ApiException {
        Integer id = null;
        PatchedRadiusProviderRequest patchedRadiusProviderRequest = null;
        RadiusProvider response = api.providersRadiusPartialUpdate(id, patchedRadiusProviderRequest);
        // TODO: test validations
    }

    /**
     * RadiusProvider Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersRadiusRetrieveTest() throws ApiException {
        Integer id = null;
        RadiusProvider response = api.providersRadiusRetrieve(id);
        // TODO: test validations
    }

    /**
     * RadiusProvider Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersRadiusUpdateTest() throws ApiException {
        Integer id = null;
        RadiusProviderRequest radiusProviderRequest = null;
        RadiusProvider response = api.providersRadiusUpdate(id, radiusProviderRequest);
        // TODO: test validations
    }

    /**
     * Get a list of all objects that use this object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersRadiusUsedByListTest() throws ApiException {
        Integer id = null;
        List<UsedBy> response = api.providersRadiusUsedByList(id);
        // TODO: test validations
    }

    /**
     * SAMLProvider Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersSamlCreateTest() throws ApiException {
        SAMLProviderRequest saMLProviderRequest = null;
        SAMLProvider response = api.providersSamlCreate(saMLProviderRequest);
        // TODO: test validations
    }

    /**
     * SAMLProvider Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersSamlDestroyTest() throws ApiException {
        Integer id = null;
        api.providersSamlDestroy(id);
        // TODO: test validations
    }

    /**
     * Create provider from SAML Metadata
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersSamlImportMetadataCreateTest() throws ApiException {
        String name = null;
        UUID authorizationFlow = null;
        File _file = null;
        api.providersSamlImportMetadataCreate(name, authorizationFlow, _file);
        // TODO: test validations
    }

    /**
     * SAMLProvider Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersSamlListTest() throws ApiException {
        String acsUrl = null;
        String assertionValidNotBefore = null;
        String assertionValidNotOnOrAfter = null;
        String audience = null;
        UUID authenticationFlow = null;
        UUID authorizationFlow = null;
        UUID backchannelApplication = null;
        String defaultRelayState = null;
        String digestAlgorithm = null;
        Boolean isBackchannel = null;
        String issuer = null;
        String name = null;
        UUID nameIdMapping = null;
        String ordering = null;
        Integer page = null;
        Integer pageSize = null;
        List<UUID> propertyMappings = null;
        String search = null;
        String sessionValidNotOnOrAfter = null;
        String signatureAlgorithm = null;
        UUID signingKp = null;
        String spBinding = null;
        UUID verificationKp = null;
        PaginatedSAMLProviderList response = api.providersSamlList(acsUrl, assertionValidNotBefore, assertionValidNotOnOrAfter, audience, authenticationFlow, authorizationFlow, backchannelApplication, defaultRelayState, digestAlgorithm, isBackchannel, issuer, name, nameIdMapping, ordering, page, pageSize, propertyMappings, search, sessionValidNotOnOrAfter, signatureAlgorithm, signingKp, spBinding, verificationKp);
        // TODO: test validations
    }

    /**
     * Return metadata as XML string
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersSamlMetadataRetrieveTest() throws ApiException {
        Integer id = null;
        Boolean download = null;
        String forceBinding = null;
        SAMLMetadata response = api.providersSamlMetadataRetrieve(id, download, forceBinding);
        // TODO: test validations
    }

    /**
     * SAMLProvider Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersSamlPartialUpdateTest() throws ApiException {
        Integer id = null;
        PatchedSAMLProviderRequest patchedSAMLProviderRequest = null;
        SAMLProvider response = api.providersSamlPartialUpdate(id, patchedSAMLProviderRequest);
        // TODO: test validations
    }

    /**
     * Preview user data for provider
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersSamlPreviewUserRetrieveTest() throws ApiException {
        Integer id = null;
        Integer forUser = null;
        PropertyMappingPreview response = api.providersSamlPreviewUserRetrieve(id, forUser);
        // TODO: test validations
    }

    /**
     * SAMLProvider Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersSamlRetrieveTest() throws ApiException {
        Integer id = null;
        SAMLProvider response = api.providersSamlRetrieve(id);
        // TODO: test validations
    }

    /**
     * SAMLProvider Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersSamlUpdateTest() throws ApiException {
        Integer id = null;
        SAMLProviderRequest saMLProviderRequest = null;
        SAMLProvider response = api.providersSamlUpdate(id, saMLProviderRequest);
        // TODO: test validations
    }

    /**
     * Get a list of all objects that use this object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersSamlUsedByListTest() throws ApiException {
        Integer id = null;
        List<UsedBy> response = api.providersSamlUsedByList(id);
        // TODO: test validations
    }

    /**
     * SCIMProvider Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersScimCreateTest() throws ApiException {
        SCIMProviderRequest scIMProviderRequest = null;
        SCIMProvider response = api.providersScimCreate(scIMProviderRequest);
        // TODO: test validations
    }

    /**
     * SCIMProvider Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersScimDestroyTest() throws ApiException {
        Integer id = null;
        api.providersScimDestroy(id);
        // TODO: test validations
    }

    /**
     * SCIMProviderGroup Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersScimGroupsCreateTest() throws ApiException {
        SCIMProviderGroupRequest scIMProviderGroupRequest = null;
        SCIMProviderGroup response = api.providersScimGroupsCreate(scIMProviderGroupRequest);
        // TODO: test validations
    }

    /**
     * SCIMProviderGroup Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersScimGroupsDestroyTest() throws ApiException {
        UUID id = null;
        api.providersScimGroupsDestroy(id);
        // TODO: test validations
    }

    /**
     * SCIMProviderGroup Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersScimGroupsListTest() throws ApiException {
        UUID groupGroupUuid = null;
        String groupName = null;
        String ordering = null;
        Integer page = null;
        Integer pageSize = null;
        Integer providerId = null;
        String search = null;
        PaginatedSCIMProviderGroupList response = api.providersScimGroupsList(groupGroupUuid, groupName, ordering, page, pageSize, providerId, search);
        // TODO: test validations
    }

    /**
     * SCIMProviderGroup Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersScimGroupsRetrieveTest() throws ApiException {
        UUID id = null;
        SCIMProviderGroup response = api.providersScimGroupsRetrieve(id);
        // TODO: test validations
    }

    /**
     * Get a list of all objects that use this object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersScimGroupsUsedByListTest() throws ApiException {
        UUID id = null;
        List<UsedBy> response = api.providersScimGroupsUsedByList(id);
        // TODO: test validations
    }

    /**
     * SCIMProvider Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersScimListTest() throws ApiException {
        Boolean excludeUsersServiceAccount = null;
        UUID filterGroup = null;
        String name = null;
        String ordering = null;
        Integer page = null;
        Integer pageSize = null;
        String search = null;
        String url = null;
        PaginatedSCIMProviderList response = api.providersScimList(excludeUsersServiceAccount, filterGroup, name, ordering, page, pageSize, search, url);
        // TODO: test validations
    }

    /**
     * SCIMProvider Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersScimPartialUpdateTest() throws ApiException {
        Integer id = null;
        PatchedSCIMProviderRequest patchedSCIMProviderRequest = null;
        SCIMProvider response = api.providersScimPartialUpdate(id, patchedSCIMProviderRequest);
        // TODO: test validations
    }

    /**
     * SCIMProvider Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersScimRetrieveTest() throws ApiException {
        Integer id = null;
        SCIMProvider response = api.providersScimRetrieve(id);
        // TODO: test validations
    }

    /**
     * Get provider&#39;s sync status
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersScimSyncStatusRetrieveTest() throws ApiException {
        Integer id = null;
        SyncStatus response = api.providersScimSyncStatusRetrieve(id);
        // TODO: test validations
    }

    /**
     * SCIMProvider Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersScimUpdateTest() throws ApiException {
        Integer id = null;
        SCIMProviderRequest scIMProviderRequest = null;
        SCIMProvider response = api.providersScimUpdate(id, scIMProviderRequest);
        // TODO: test validations
    }

    /**
     * Get a list of all objects that use this object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersScimUsedByListTest() throws ApiException {
        Integer id = null;
        List<UsedBy> response = api.providersScimUsedByList(id);
        // TODO: test validations
    }

    /**
     * SCIMProviderUser Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersScimUsersCreateTest() throws ApiException {
        SCIMProviderUserRequest scIMProviderUserRequest = null;
        SCIMProviderUser response = api.providersScimUsersCreate(scIMProviderUserRequest);
        // TODO: test validations
    }

    /**
     * SCIMProviderUser Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersScimUsersDestroyTest() throws ApiException {
        UUID id = null;
        api.providersScimUsersDestroy(id);
        // TODO: test validations
    }

    /**
     * SCIMProviderUser Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersScimUsersListTest() throws ApiException {
        String ordering = null;
        Integer page = null;
        Integer pageSize = null;
        Integer providerId = null;
        String search = null;
        Integer userId = null;
        String userUsername = null;
        PaginatedSCIMProviderUserList response = api.providersScimUsersList(ordering, page, pageSize, providerId, search, userId, userUsername);
        // TODO: test validations
    }

    /**
     * SCIMProviderUser Viewset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersScimUsersRetrieveTest() throws ApiException {
        UUID id = null;
        SCIMProviderUser response = api.providersScimUsersRetrieve(id);
        // TODO: test validations
    }

    /**
     * Get a list of all objects that use this object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providersScimUsersUsedByListTest() throws ApiException {
        UUID id = null;
        List<UsedBy> response = api.providersScimUsersUsedByList(id);
        // TODO: test validations
    }

}
