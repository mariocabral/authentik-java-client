/*
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.6.3
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.ClientTypeEnum;
import org.openapitools.client.model.DigestAlgorithmEnum;
import org.openapitools.client.model.GoogleWorkspaceProviderRequest;
import org.openapitools.client.model.IssuerModeEnum;
import org.openapitools.client.model.LDAPAPIAccessMode;
import org.openapitools.client.model.LDAPProviderRequest;
import org.openapitools.client.model.MicrosoftEntraProviderRequest;
import org.openapitools.client.model.OAuth2ProviderRequest;
import org.openapitools.client.model.OutgoingSyncDeleteAction;
import org.openapitools.client.model.ProxyMode;
import org.openapitools.client.model.ProxyProviderRequest;
import org.openapitools.client.model.RACProviderRequest;
import org.openapitools.client.model.RadiusProviderRequest;
import org.openapitools.client.model.SAMLProviderRequest;
import org.openapitools.client.model.SCIMProviderRequest;
import org.openapitools.client.model.SignatureAlgorithmEnum;
import org.openapitools.client.model.SpBindingEnum;
import org.openapitools.client.model.SubModeEnum;
import org.openapitools.jackson.nullable.JsonNullable;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for ModelRequest
 */
public class ModelRequestTest {
    private final ModelRequest model = new ModelRequest();

    /**
     * Model tests for ModelRequest
     */
    @Test
    public void testModelRequest() {
        // TODO: test ModelRequest
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'propertyMappings'
     */
    @Test
    public void propertyMappingsTest() {
        // TODO: test propertyMappings
    }

    /**
     * Test the property 'propertyMappingsGroup'
     */
    @Test
    public void propertyMappingsGroupTest() {
        // TODO: test propertyMappingsGroup
    }

    /**
     * Test the property 'delegatedSubject'
     */
    @Test
    public void delegatedSubjectTest() {
        // TODO: test delegatedSubject
    }

    /**
     * Test the property 'credentials'
     */
    @Test
    public void credentialsTest() {
        // TODO: test credentials
    }

    /**
     * Test the property 'scopes'
     */
    @Test
    public void scopesTest() {
        // TODO: test scopes
    }

    /**
     * Test the property 'excludeUsersServiceAccount'
     */
    @Test
    public void excludeUsersServiceAccountTest() {
        // TODO: test excludeUsersServiceAccount
    }

    /**
     * Test the property 'filterGroup'
     */
    @Test
    public void filterGroupTest() {
        // TODO: test filterGroup
    }

    /**
     * Test the property 'userDeleteAction'
     */
    @Test
    public void userDeleteActionTest() {
        // TODO: test userDeleteAction
    }

    /**
     * Test the property 'groupDeleteAction'
     */
    @Test
    public void groupDeleteActionTest() {
        // TODO: test groupDeleteAction
    }

    /**
     * Test the property 'defaultGroupEmailDomain'
     */
    @Test
    public void defaultGroupEmailDomainTest() {
        // TODO: test defaultGroupEmailDomain
    }

    /**
     * Test the property 'authenticationFlow'
     */
    @Test
    public void authenticationFlowTest() {
        // TODO: test authenticationFlow
    }

    /**
     * Test the property 'authorizationFlow'
     */
    @Test
    public void authorizationFlowTest() {
        // TODO: test authorizationFlow
    }

    /**
     * Test the property 'baseDn'
     */
    @Test
    public void baseDnTest() {
        // TODO: test baseDn
    }

    /**
     * Test the property 'searchGroup'
     */
    @Test
    public void searchGroupTest() {
        // TODO: test searchGroup
    }

    /**
     * Test the property 'certificate'
     */
    @Test
    public void certificateTest() {
        // TODO: test certificate
    }

    /**
     * Test the property 'tlsServerName'
     */
    @Test
    public void tlsServerNameTest() {
        // TODO: test tlsServerName
    }

    /**
     * Test the property 'uidStartNumber'
     */
    @Test
    public void uidStartNumberTest() {
        // TODO: test uidStartNumber
    }

    /**
     * Test the property 'gidStartNumber'
     */
    @Test
    public void gidStartNumberTest() {
        // TODO: test gidStartNumber
    }

    /**
     * Test the property 'searchMode'
     */
    @Test
    public void searchModeTest() {
        // TODO: test searchMode
    }

    /**
     * Test the property 'bindMode'
     */
    @Test
    public void bindModeTest() {
        // TODO: test bindMode
    }

    /**
     * Test the property 'mfaSupport'
     */
    @Test
    public void mfaSupportTest() {
        // TODO: test mfaSupport
    }

    /**
     * Test the property 'clientId'
     */
    @Test
    public void clientIdTest() {
        // TODO: test clientId
    }

    /**
     * Test the property 'clientSecret'
     */
    @Test
    public void clientSecretTest() {
        // TODO: test clientSecret
    }

    /**
     * Test the property 'tenantId'
     */
    @Test
    public void tenantIdTest() {
        // TODO: test tenantId
    }

    /**
     * Test the property 'clientType'
     */
    @Test
    public void clientTypeTest() {
        // TODO: test clientType
    }

    /**
     * Test the property 'accessCodeValidity'
     */
    @Test
    public void accessCodeValidityTest() {
        // TODO: test accessCodeValidity
    }

    /**
     * Test the property 'accessTokenValidity'
     */
    @Test
    public void accessTokenValidityTest() {
        // TODO: test accessTokenValidity
    }

    /**
     * Test the property 'refreshTokenValidity'
     */
    @Test
    public void refreshTokenValidityTest() {
        // TODO: test refreshTokenValidity
    }

    /**
     * Test the property 'includeClaimsInIdToken'
     */
    @Test
    public void includeClaimsInIdTokenTest() {
        // TODO: test includeClaimsInIdToken
    }

    /**
     * Test the property 'signingKey'
     */
    @Test
    public void signingKeyTest() {
        // TODO: test signingKey
    }

    /**
     * Test the property 'redirectUris'
     */
    @Test
    public void redirectUrisTest() {
        // TODO: test redirectUris
    }

    /**
     * Test the property 'subMode'
     */
    @Test
    public void subModeTest() {
        // TODO: test subMode
    }

    /**
     * Test the property 'issuerMode'
     */
    @Test
    public void issuerModeTest() {
        // TODO: test issuerMode
    }

    /**
     * Test the property 'jwksSources'
     */
    @Test
    public void jwksSourcesTest() {
        // TODO: test jwksSources
    }

    /**
     * Test the property 'internalHost'
     */
    @Test
    public void internalHostTest() {
        // TODO: test internalHost
    }

    /**
     * Test the property 'externalHost'
     */
    @Test
    public void externalHostTest() {
        // TODO: test externalHost
    }

    /**
     * Test the property 'internalHostSslValidation'
     */
    @Test
    public void internalHostSslValidationTest() {
        // TODO: test internalHostSslValidation
    }

    /**
     * Test the property 'skipPathRegex'
     */
    @Test
    public void skipPathRegexTest() {
        // TODO: test skipPathRegex
    }

    /**
     * Test the property 'basicAuthEnabled'
     */
    @Test
    public void basicAuthEnabledTest() {
        // TODO: test basicAuthEnabled
    }

    /**
     * Test the property 'basicAuthPasswordAttribute'
     */
    @Test
    public void basicAuthPasswordAttributeTest() {
        // TODO: test basicAuthPasswordAttribute
    }

    /**
     * Test the property 'basicAuthUserAttribute'
     */
    @Test
    public void basicAuthUserAttributeTest() {
        // TODO: test basicAuthUserAttribute
    }

    /**
     * Test the property 'mode'
     */
    @Test
    public void modeTest() {
        // TODO: test mode
    }

    /**
     * Test the property 'interceptHeaderAuth'
     */
    @Test
    public void interceptHeaderAuthTest() {
        // TODO: test interceptHeaderAuth
    }

    /**
     * Test the property 'cookieDomain'
     */
    @Test
    public void cookieDomainTest() {
        // TODO: test cookieDomain
    }

    /**
     * Test the property 'settings'
     */
    @Test
    public void settingsTest() {
        // TODO: test settings
    }

    /**
     * Test the property 'connectionExpiry'
     */
    @Test
    public void connectionExpiryTest() {
        // TODO: test connectionExpiry
    }

    /**
     * Test the property 'deleteTokenOnDisconnect'
     */
    @Test
    public void deleteTokenOnDisconnectTest() {
        // TODO: test deleteTokenOnDisconnect
    }

    /**
     * Test the property 'clientNetworks'
     */
    @Test
    public void clientNetworksTest() {
        // TODO: test clientNetworks
    }

    /**
     * Test the property 'sharedSecret'
     */
    @Test
    public void sharedSecretTest() {
        // TODO: test sharedSecret
    }

    /**
     * Test the property 'acsUrl'
     */
    @Test
    public void acsUrlTest() {
        // TODO: test acsUrl
    }

    /**
     * Test the property 'audience'
     */
    @Test
    public void audienceTest() {
        // TODO: test audience
    }

    /**
     * Test the property 'issuer'
     */
    @Test
    public void issuerTest() {
        // TODO: test issuer
    }

    /**
     * Test the property 'assertionValidNotBefore'
     */
    @Test
    public void assertionValidNotBeforeTest() {
        // TODO: test assertionValidNotBefore
    }

    /**
     * Test the property 'assertionValidNotOnOrAfter'
     */
    @Test
    public void assertionValidNotOnOrAfterTest() {
        // TODO: test assertionValidNotOnOrAfter
    }

    /**
     * Test the property 'sessionValidNotOnOrAfter'
     */
    @Test
    public void sessionValidNotOnOrAfterTest() {
        // TODO: test sessionValidNotOnOrAfter
    }

    /**
     * Test the property 'nameIdMapping'
     */
    @Test
    public void nameIdMappingTest() {
        // TODO: test nameIdMapping
    }

    /**
     * Test the property 'digestAlgorithm'
     */
    @Test
    public void digestAlgorithmTest() {
        // TODO: test digestAlgorithm
    }

    /**
     * Test the property 'signatureAlgorithm'
     */
    @Test
    public void signatureAlgorithmTest() {
        // TODO: test signatureAlgorithm
    }

    /**
     * Test the property 'signingKp'
     */
    @Test
    public void signingKpTest() {
        // TODO: test signingKp
    }

    /**
     * Test the property 'verificationKp'
     */
    @Test
    public void verificationKpTest() {
        // TODO: test verificationKp
    }

    /**
     * Test the property 'spBinding'
     */
    @Test
    public void spBindingTest() {
        // TODO: test spBinding
    }

    /**
     * Test the property 'defaultRelayState'
     */
    @Test
    public void defaultRelayStateTest() {
        // TODO: test defaultRelayState
    }

    /**
     * Test the property 'url'
     */
    @Test
    public void urlTest() {
        // TODO: test url
    }

    /**
     * Test the property 'token'
     */
    @Test
    public void tokenTest() {
        // TODO: test token
    }

}
